<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: devise | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/devise/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sharing A Devise User Session Across Subdomains With Rails 3]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/09/15/sharing-a-devise-user-session-across-subdomains-with-rails-3/"/>
    <updated>2012-09-15T16:21:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/09/15/sharing-a-devise-user-session-across-subdomains-with-rails-3</id>
    <content type="html"><![CDATA[<h2>Sharing A Devise User Session Across Subdomains With Rails 3</h2>

<pre>to andersen
  仔细测了一下 Askjane::Application.config.session_store :active_record_store, key: &#039;_askjane_session&#039;, :domain =&gt; &quot;.bbtang.com&quot;在 server上
  是ok的（效果上也是能共享bbtang.com 和www.bbtang.com的会话的只要端口一致）就是不知道在本地如何因为本地一般不会设置host绑定域名(经测试答案是不能的)，如何（所以需要:all这个设置项）
to 客服 和 jojo
 提一点 你们一些 首页源码的时候 不要把 域名加上去  注意 尼玛 端口不一致 也是不能share 会话的
 简而言之 你们写一些html静态源码的时候除非不在 bbtang.com的 项目上 没有必要加 域名的 这会加大 大家的成本（如果说端口不一致就会导致会话丢失，如果没有做多域名兼容也会导致会话丢失能免则免）
over</pre>


<pre></pre>


<pre>Francis.J(864248765) 13:57:28
https://github.com/rails/rails/issues/2483
Francis.J(864248765) 13:57:55
尼玛 rails 大爷又 踩雷了
Francis.J(864248765) 13:59:42
https://github.com/rails/rails/issues/2483
Francis.J(864248765) 14:02:27
https://github.com/rails/rails/pull/7316
Francis.J(864248765) 14:08:37
然后 我们看看 究竟用 :cookie_store + :domain =&gt; :all
还是  :active_record_store + &quot;.bbtang.com&quot; (这里垮子域名估计不会很合适)
还是 升一下 rails  用  :active_record_store + :domain =&gt; :all</pre>


<p>Recently I’ve been working on a Rails application that supports subdomains. I’m using Devise for user authentication and need the user to choose a subdomain to use upon registration.</p>

<p>Similar to the 37signals applications, I want a single sign-on to be persistent across subdomains. Since I didn’t have a clue where to begin with subdomains, I followed <a href="https://github.com/fortuity/rails3-subdomain-devise/wiki/Tutorial-%28Walkthrough%29">this tutorial</a> on my new Rails 3.1 beta 1 application. This tutorial worked like a charm and I omitted the friendly_id and tweaked a few things to my liking.</p>

<p>The gist of it is simple. Create a User model like you would normally do with Devise. You add a Subdomain model that is linked to the Users (in my case I only wanted a single subdomain per user). Configuring the routes is pretty simple as you can simply create a constraint that will match the root and fire it off to the right action and let the rest fall through.</p>

<p>The trick comes into sharing the session between domains. Browsers, of course, will separate out the cookies and store them by separated out by subdomain. What you want to do is edit your config/initializers/session_store.rb file to look like this</p>

<div>
<table>
<tbody>
<tr>
<td>
<pre>APPNAMEGOESHERE::Application.config.session_store :cookie_store, :key =&gt; &#039;_tourlyapp_session&#039;, :domain =&gt; &quot;lvh.me&quot;</pre>
</td>
</tr>
</tbody>
</table>
</div>


<p>The trick here is the <code>:domain</code> option. What this does is sets the level of the TLD (top level domain) and tells Rails how long the domain is. The part you want to watch out for here is that if you set <code>:domain =&gt; :all</code> like is recommend in some places, it simply won’t work unless you’re using localhost. <code>:all</code> defaults to a TLD length of 1, which means if you’re testing with Pow (myapp.dev) it won’t work either because that is a TLD of length 2.</p>

<p>You might get weird things like halfway Devise sessions sharing, but only allowing you to create and destroy the session on the root domain. Using <code>:all</code> works great if you’re using localhost, but when I started using lvh.me:3000 for testing I had those problems (lvh.me stands for local vhost me and is a domain that simply points to localhost which makes for zero-config subdomain development. It’s super handy.).</p>

<p>The best option might be to comment out this line and put it into your individual environment configurations. This way you can keep things configured easily as the <code>:all</code> option. Once you’ve got your domain string added everything should work like a charm.</p>

<p><strong>BONUS PROTIP: </strong>The normal route variables you see used end with _path. These don’t include the domain and therefore ignore the :subdomain option you pass into them. <code>url_for</code>, on the other hand, does support subdomains so you should get into the habit of using root_url instead of root_path and so on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Resque to send mail for Devise]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/06/15/using-resque-to-send-mail-for-devise/"/>
    <updated>2012-06-15T15:03:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/06/15/using-resque-to-send-mail-for-devise</id>
    <content type="html"><![CDATA[<h2>Using Resque to send mail for Devise</h2>

<div>
<div id="wiki-body">
<div>

Since sending email synchronously is not a good idea, you'll probably want to have Devise enqueuing it's notification emails for background processing.

Although Devise doesn't support this out of the box you can achieve it easily by using the <a href="https://github.com/mhfs/devise-async">devise-async</a> gem.

To do so, first add it to your Gemfile:
<div>
<pre>gem "devise-async"</pre>
</div>
Then tell Devise to use the proxy mailer in <code>config/initializers/devise.rb</code>:
<div>
<pre># Configure the class responsible to send e-mails.
config.mailer = "Devise::Async::Proxy"</pre>
</div>
And last but not least, set your queuing backend by creating <code>config/initializers/devise_async.rb</code>:
<div>
<pre># Supported options: :resque, :sidekiq, :delayed_job
Devise::Async.backend = :resque</pre>
</div>
Your notification emails should now be gracefully enqueued for background processing.

</div>
</div>
</div>


<h2 id="gollum-footer">## Notice I have jobs in queue but no workers. Do I have to create task, or workers?</h2>


<p>&nbsp;</p>

<p><code>#!/usr/bin/env rake</p>

<h1>Add your own tasks in files placed in lib/tasks ending in .rake,</h1>

<h1>for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.</code></h1>

<p>require File.expand_path(&lsquo;../config/application&rsquo;, <strong>FILE</strong>)
require &lsquo;resque/tasks&rsquo;</p>

<p>Askjane::Application.load_tasks</p>

<p>task &ldquo;resque:setup&rdquo; =&gt; :environment do
ENV[&lsquo;QUEUE&rsquo;] ||= &lsquo;*&rsquo;</p>

<h1>for redistogo on heroku <a href="http://stackoverflow.com/questions/2611747/rails-resque-workers-fail-with-pgerror-server-closed-the-connection-unexpectedl">http://stackoverflow.com/questions/2611747/rails-resque-workers-fail-with-pgerror-server-closed-the-connection-unexpectedl</a></h1>

<p>Resque.before_fork = Proc.new { ActiveRecord::Base.establish_connection }
end</p>

<h4>run below command</h4>

<h1>QUEUE=* rake environment resque:work</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rails - Devise - Handling - devise_error_messages]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/05/30/rails-devise-handling-devise-error-messages/"/>
    <updated>2012-05-30T13:10:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/05/30/rails-devise-handling-devise-error-messages</id>
    <content type="html"><![CDATA[<h2>rails &ndash; Devise &ndash; Handling &ndash; devise_error_messages</h2>

<p>in my user edit page, there is a line as follows:</p>

<pre><code>&lt;%= devise_error_messages! %&gt; </code></pre>


<p>The problem is this does not output errors the stand way that the rest of the app does:</p>

<pre><code>&lt;% flash.each do |key, value| %&gt;     &lt;divpun" style="margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px; border-top-width: 0px; border-right-width: 0px; border-bottom-width: 0px; border-left-width: 0px; border-style: initial; border-color: initial; border-image: initial; vertical-align: baseline; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; background-color: transparent; color: rgb(0, 0, 0); "&gt;&lt;%= key %&gt;"&gt;&lt;%= value %&gt;&lt;/div&gt; &lt;% end %&gt; </code></pre>


<p>My question, is how to I get the devise error message to work like the others that use the flash.each?</p>

<p>Thanks</p>

<p>I&rsquo;m trying to figure this out myself. I just found this issue logged on Github<a href="https://github.com/plataformatec/devise/issues/issue/504/#comment_574788" rel="nofollow"><a href="https://github.com/plataformatec/devise/issues/issue/504/#comment_574788">https://github.com/plataformatec/devise/issues/issue/504/#comment_574788</a></a></p>

<p>Jose is saying that <code>devise_error_messsages!</code> method is just a <em>stub</em> (though it contains implementation) and that we&rsquo;re supposed to override/replace it. It would have been nice if this was pointed out somewhere in the wiki, which is why i guess there are a few people like us that have been guessing.</p>

<p>So I&rsquo;m going to try reopening the module and redefine the method, effectively overriding the default implementation. I&rsquo;ll let you know how it goes.</p>

<h2>Update</h2>


<p>Yep, that works. I created <code>app/helpers/deivse_helper.rb</code> and overrode it like so:</p>

<pre><code>module DeviseHelper   def devise_error_messages!     'KABOOM!'   end end </code></pre>


<p>So knowing this, I can modify the method to display error messages the way I want it to.</p>

<p>To help you solve your original problem: Here&rsquo;s the original <a href="https://github.com/plataformatec/devise/blob/master/app/helpers/devise_helper.rb#L6" rel="nofollow"><code>devise_helper.rb</code> on Github</a>. Take a look at how the error messages are being traversed, specifically <a href="https://github.com/plataformatec/devise/blob/master/app/helpers/devise_helper.rb#L5" rel="nofollow">Line 5</a>.</p>

<pre><code>messages = resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join </code></pre>


<p>That should help you get started. :)</p>

<h2>Another update</h2>


<p>The <code>resource</code> object is actually the model that is being used by devise (go figure).</p>

<pre><code>resource.class         #=&gt; User resource.errors.class  #=&gt; ActiveModel::Error </code></pre>


<p>It also appears to be defined in a higher scope (probably coming from the controller), so it can be accessed in a variety of places.</p>

<p>Anywhere in your Helper</p>

<pre><code>module DeviseHelper   def devise_error_messages1!     resource.errors.full_messages.map { |msg| content_tag(:li, msg) }.join   end   def devise_error_messages2!     resource.errors.full_messages.map { |msg| content_tag(:p, msg) }.join   end end </code></pre>


<p>Your View</p>

<pre><code>&lt;div&gt;&lt;%= resource.errors.inspect %&gt;&lt;/div&gt;</code></pre>


<p>More info look at <a href="http://stackoverflow.com/questions/4101641/rails-devise-handling-devise-error-messages"><a href="http://stackoverflow.com/questions/4101641/rails-devise-handling-devise-error-messages">http://stackoverflow.com/questions/4101641/rails-devise-handling-devise-error-messages</a></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devise logout link non-functional]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/05/22/devise-logout-link-non-functional/"/>
    <updated>2012-05-22T13:37:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/05/22/devise-logout-link-non-functional</id>
    <content type="html"><![CDATA[<h2>Devise logout link non-functional</h2>

<p>Resources: <a href="http://stackoverflow.com/questions/6110047/rails-devise-override-sessionscontroller"><a href="http://stackoverflow.com/questions/6110047/rails-devise-override-sessionscontroller">http://stackoverflow.com/questions/6110047/rails-devise-override-sessionscontroller</a></a></p>

<p>the problem: In a nutshell, when I try to install a logout link to my app it fails to work. Here&rsquo;s as much context as I can think to put here (if you want anything else, please poke me)&hellip;</p>

<p>I&rsquo;ve got this in a haml view:</p>

<pre><code>= link_to("Logout", destroy_user_session_path, :method =&gt; :delete) </code></pre>


<p>It generates this in the view:</p>

<pre><code>&lt;a href="http://jhjguxin.github.io/users/sign_out" data-method="delete" rel="nofollow"&gt;Logout&lt;/a&gt; </code></pre>


<p>I verified that in my config/initializers/devise.rb I have this setting uncommented and correct:</p>

<pre><code>config.sign_out_via = :delete </code></pre>


<p>I validated the following route:</p>

<pre><code>destroy_user_session DELETE /users/sign_out(.:format) {:action=&gt;"destroy", :controller=&gt;"devise/sessions"} </code></pre>


<p>I also have this bit of trickery in my routes.rb, and I suspect this is related to my issue:</p>

<pre><code>devise_for :users, :controllers =&gt; {:sessions =&gt; "devise/sessions", :registrations =&gt; "users"} resources :users </code></pre>


<p>This last bit is because I want to manage (edit, create and delete) users in my own controller.</p>

<p>The error message I&rsquo;m getting is as follows:</p>

<pre><code>ActiveRecord::RecordNotFound in UsersController#show Couldn't find User with ID=sign_out Rails.root: /home/jaydel/projects/mbsquared-projects/Wilson-Goldrick app/controllers/users_controller.rb:16:in `show' </code></pre>


<p>In my server logs I see this for the request:</p>

<pre><code>Started GET "/users/sign_out" for 127.0.0.1 at 2011-08-04 13:08:51 -0500   Processing by UsersController#show as HTML   Parameters: {"id"=&gt;"sign_out"} </code></pre>


<p>Outside it&rsquo;s slightly overcast and in the mid 80s. I&rsquo;m wearing a red shirt.</p>

<p>Anyone have any ideas?</p>

<p>1</p>

<blockquote>The problem lies in the fact that in your logs the signout request is a GET request.
<pre><code>Started GET "/users/sign_out" </code></pre>
But the signout route is a DELETE
<pre><code>destroy_user_session DELETE /users/sign_out(.:format) </code></pre>
The reason why you are getting the exception is that is it getting confused with one of the routes created by <code>resources :users</code> which would be something like
<pre><code>edit_user GET /users/(:id)(.:format) {:action=&gt;"edit", :controller=&gt;"users"} </code></pre>
Basically 'sign_out' is being mistaken as a id.

I'm not sure why the delete link is not going through as a DELETE request. Though changing
<pre><code>config.sign_out_via = :delete </code></pre>
to be :get might solve the problem.</blockquote>


<p>2</p>

<blockquote>I think the more correct way to fix this, REST-wise, would be to change your logout links to use the DELETE method. It's a very easy fix, changing this:

link_to "Log out", destroy_user_session_path

to this:

link_to "Log out", destroy_user_session_path, :method =&gt; :delete</blockquote>


<p>3</p>

<blockquote>I had the same problem with rails 3.2 when I deleted from <code>application.js</code> this line:
<pre><code>//= require jquery_ujs </code></pre>
So, I think you have to insert this line in your <code>application.js</code> if you haven't it there.

PS. This behavior means that rails adapter for <code>jquery</code> doesn't function. So you should make sure if it is loaded in your html in browser. You should test it in development mode because you will have compressed js in production and it will be very difficult to find something there.

&nbsp;</blockquote>


<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To: Allow users to sign in using their username or email address]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/05/18/how-to-allow-users-to-sign-in-using-their-username-or-email-address/"/>
    <updated>2012-05-18T14:58:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/05/18/how-to-allow-users-to-sign-in-using-their-username-or-email-address</id>
    <content type="html"><![CDATA[<h2>How To: Allow users to sign in using their username or email address</h2>

<p>For this example, we will assume your model is called <code>User</code></p>

<h3>Create a username field in the <code>users</code> table</h3>


<ol>
    <li>Create a migration:
<div>
<pre> rails generate migration add_username_to_users username:string</pre>
</div></li>
    <li>Run the migration:
<div>
<pre> rake db:migrate</pre>
</div></li>
    <li>Modify the <code>User</code> model and add username to attr_accessible
<div>
<pre> attr_accessible :username</pre>
</div></li>
</ol>


<h3>Create a login virtual attribute in Users</h3>


<ol>
    <li>Add login as an attr_accessor
<div>
<pre># Virtual attribute for authenticating by either username or email
# This is in addition to a real persisted field like 'username'
attr_accessor :login</pre>
</div></li>
    <li>Add login to attr_accessible
<div>
<pre>attr_accessible :login</pre>
</div></li>
</ol>


<h3>Tell Devise to use :login in the authentication_keys</h3>


<ol>
    <li>Modify config/initializers/devise.rb to have:
<div>
<pre> config.authentication_keys = [ :login ]</pre>
</div></li>
</ol>


<ul>
    <li>If you are using multiple models with Devise, it is best to set the authentication_keys on the model itself if the keys may differ:
<div>
<pre>devise :database_authenticatable, :registerable,
       :recoverable, :rememberable, :trackable, 
       :validatable, :authentication_keys =&gt; [:login]</pre>
</div></li>
</ul>


<ol>
    <li>Overwrite Devise’s find_for_database_authentication method in Users model</li>
</ol>


<ul>
    <li>For ActiveRecord:
<div>
<pre> def self.find_for_database_authentication(warden_conditions)
   conditions = warden_conditions.dup
   login = conditions.delete(:login)
   where(conditions).where(["lower(username) = :value OR lower(email) = :value", { :value =&gt; login.strip.downcase }]).first
 end</pre>
</div></li>
    <li>For Mongoid:
Note: This code for Mongoid does some small things differently then the ActiveRecord code above. Would be great if someone could port the complete functionality of the ActiveRecord code over to Mongoid [basically you need to port the ‘where(conditions)’]. It is not required but will allow greater flexibility.
<div>
<pre>field :email

def self.find_for_database_authentication(conditions)
  login = conditions.delete(:login)
  self.any_of({ :username =&gt; login }, { :email =&gt; login }).first
end</pre>
</div></li>
</ul>


<ul>
    <li>For MongoMapper:
<div>
<pre>def self.find_for_database_authentication(conditions)
  login = conditions.delete(:login).downcase
  where('$or' =&gt; [{:username =&gt; login}, {:email =&gt; login}]).first
end</pre>
</div></li>
</ul>


<h3>Update your views</h3>


<ol>
    <li>Make sure you have the Devise views in your project so that you can customize them
Rails 3:
<div>
<pre> rails g devise:views</pre>
</div>
Rails 2:
<div>
<pre> script/generate devise_views</pre>
</div></li>
    <li>Modify the views
<ul>
    <li>sessions/new.html.erb:
<div>
<pre>-  &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
-  &lt;%= f.email_field :email %&gt;&lt;/p&gt;
+  &lt;p&gt;&lt;%= f.label :login %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :login %&gt;&lt;/p&gt;</pre>
</div></li>
    <li>registrations/new.html.erb
<div>
<pre>+  &lt;p&gt;&lt;%= f.label :username %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :username %&gt;&lt;/p&gt;
   &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
   &lt;%= f.email_field :email %&gt;&lt;/p&gt;</pre>
</div></li>
    <li>registrations/edit.html.erb
<div>
<pre>+  &lt;p&gt;&lt;%= f.label :username %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :username %&gt;&lt;/p&gt;
   &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
   &lt;%= f.email_field :email %&gt;&lt;/p&gt;</pre>
</div></li>
</ul>
</li>
</ol>


<h3>Manipulate the :login label that Rails will display</h3>


<ol>
    <li>Modify config/locales/en.yml to contain something like:
Rails 2:
<div>
<pre>activemodel:
  attributes:
    user:
      login: "Username or email"</pre>
</div>
Rails 3:
<div>
<pre>en:
  activerecord:
    attributes:
      user:  
        login: "Username or email"</pre>
</div></li>
</ol>


<h2>Allow users to recover their password using either username or email address</h2>


<p>This section assumes you have run through the steps in Allow users to Sign In using their username or password.</p>

<h3>Tell Devise to use :login in the reset_password_keys</h3>


<ol>
    <li>Modify config/initializers/devise.rb to have:
<div>
<pre> config.reset_password_keys = [ :login ]</pre>
</div></li>
</ol>


<h3>Overwrite Devise’s finder methods in Users</h3>


<ul>
    <li>For ActiveRecord:
<div>
<pre> protected

 # Attempt to find a user by it's email. If a record is found, send new
 # password instructions to it. If not user is found, returns a new user
 # with an email not found error.
 def self.send_reset_password_instructions(attributes={})
   recoverable = find_recoverable_or_initialize_with_errors(reset_password_keys, attributes, :not_found)
   recoverable.send_reset_password_instructions if recoverable.persisted?
   recoverable
 end 

 def self.find_recoverable_or_initialize_with_errors(required_attributes, attributes, error=:invalid)
   (case_insensitive_keys || []).each { |k| attributes[k].try(:downcase!) }

   ###the has some error in my issue, my you should comment two line bellow
   attributes = attributes.slice(*required_attributes)
   attributes.delete_if { |key, value| value.blank? }

   if attributes.size == required_attributes.size
     if attributes.has_key?(:login)
        login = attributes.delete(:login)
        record = find_record(login)
     else  
       record = where(attributes).first
     end  
   end  

   unless record
     record = new

     required_attributes.each do |key|
       value = attributes[key]
       record.send("#{key}=", value)
       record.errors.add(key, value.present? ? error : :blank)
     end  
   end  
   record
 end

 def self.find_record(login)
   where(["username = :value OR email = :value", { :value =&gt; login }]).first
 end</pre>
</div></li>
    <li>For Mongoid:</li>
</ul>


<div>
<pre>def self.find_record(login)
  found = where(:username =&gt; login).to_a
  found = where(:email =&gt; login).to_a if found.empty?
  found
end</pre>
</div>


<p>For Mongoid this can be optimized using a <a href="http://omarqureshi.net/posts/2010/06/17/mongoid-or-query/" rel="nofollow">custom javascript function</a></p>

<div>
<pre>def self.find_record(login)
  where("function() {return this.username == '#{login}' || this.email == '#{login}'}")
end</pre>
</div>


<ul>
    <li>For MongoMapper:</li>
</ul>


<div>
<pre>def self.find_record(login)
  (self.where(:email =&gt; login[:login]).first || self.where(:username =&gt; login[:login]).first) rescue nil
end</pre>
</div>


<h3>Update your views</h3>


<ol>
    <li>Modify the views
<ul>
    <li>passwords/new.html.erb:
<div>
<pre>-  &lt;p&gt;&lt;%= f.label :email %&gt;&lt;br /&gt;
-  &lt;%= f.email_field :email %&gt;&lt;/p&gt;
+  &lt;p&gt;&lt;%= f.label :login %&gt;&lt;br /&gt;
+  &lt;%= f.text_field :login %&gt;&lt;/p&gt;</pre>
</div></li>
</ul>
</li>
</ol>


<h2>Gmail or me.com Style</h2>


<p>Another way to do this is me.com and gmail style. You allow an email or the username of the email. For public facing accounts, this has more security. Rather than allow some hacker to enter a username and then just guess the password, they would have no clue what the user’s email is. Just to make it easier on the user for logging in, allow a short form of their email to be used e.g “someone@domain.com” or just “someone” for short.</p>

<div>
<pre>before_create :create_login

  def create_login             
    email = self.email.split(/@/)
    login_taken = User.where( :login =&gt; email[0]).first
    unless login_taken
      self.login = email[0]
    else    
      self.login = self.email
    end        
  end

  def self.find_for_database_authentication(conditions)
    self.where(:login =&gt; conditions[:email]).first || self.where(:email =&gt; conditions[:email]).first
  end</pre>
</div>


<p>For the Rails 2 version (1.0 tree): There is no <code>find_for_database_authentication</code> method, so use <code>self.find_for_authentication</code> as the finding method.</p>

<div>
<pre>def self.find_for_authentication(conditions)
  conditions = ["username = ? or email = ?", conditions[authentication_keys.first], conditions[authentication_keys.first]]
  super
end</pre>
</div>

]]></content>
  </entry>
  
</feed>
