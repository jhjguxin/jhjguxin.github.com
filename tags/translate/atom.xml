<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: translate | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/translate/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Routing from the Outside In Rails]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/12/29/rails-routing-from-the-outside-in-rails/"/>
    <updated>2011-12-29T00:23:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/12/29/rails-routing-from-the-outside-in-rails</id>
    <content type="html"><![CDATA[<h2>Rails Routing from the Outside In Rails</h2>

<h2>Rails Routing from the Outside In Rails<span style="font-family: WenQuanYi Micro Hei;">来自外部的</span>Routing</h2>


<p>This guide covers the user-facing features of Rails routing. By referring to this guide, you will be able to:</p>

<p><span style="font-family: DejaVu Sans;">这个</span>guide<span style="font-family: DejaVu Sans;">涵盖了面向用户的</span>Rails<span style="font-family: DejaVu Sans;">路由特性。通过参考这个</span>guide<span style="font-family: DejaVu Sans;">，你将能够：</span></p>

<p>Understand the code in <tt>routes.rb</tt></p>

<p><span style="font-family: DejaVu Sans;">明白在</span><tt>routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>中的代码</tt></span></p>

<ul>
    <li>Construct your own routes, using either the preferred resourceful style or the <tt>match</tt> method</li>
</ul>


<p><span style="font-family: DejaVu Sans;">构建属于你的</span>routes<span style="font-family: DejaVu Sans;">，要么首选使用</span>resourceful style<span style="font-family: DejaVu Sans;">要么使用</span>match<span style="font-family: DejaVu Sans;">方法</span></p>

<ul>
    <li>Identify what parameters to expect an action to receive</li>
</ul>


<p><span style="font-family: DejaVu Sans;">确定什么样的参数</span>expect<span style="font-family: DejaVu Sans;">（预期）一个</span>action<span style="font-family: DejaVu Sans;">来接收（</span>url<span style="font-family: DejaVu Sans;">）</span></p>

<ul>
    <li>Automatically create paths and URLs using route helpers</li>
</ul>


<p><span style="font-family: DejaVu Sans;">自动的创建路径和</span>URLs<span style="font-family: DejaVu Sans;">使用</span>route helpers</p>

<ul>
    <li>Use advanced techniques such as constraints and Rack endpoints</li>
</ul>


<p><span style="font-family: DejaVu Sans;">使用高级的技术比如公约和</span>Rack endpoints</p>

<h3><a name="the-purpose-of-the-rails-router"></a>1 The Purpose of the Rails Router</h3>


<p>The Rails router recognizes URLs and dispatches them to a controller’s action. It can also generate paths and URLs, avoiding the need to hardcode strings in your views.</p>

<p>Rails router<span style="font-family: DejaVu Sans;">组织</span>URLs<span style="font-family: DejaVu Sans;">和</span>dispatches(<span style="font-family: DejaVu Sans;">调度</span>)<span style="font-family: DejaVu Sans;">到一个</span>controller<span style="font-family: DejaVu Sans;">的</span>action<span style="font-family: DejaVu Sans;">中。它也可以创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">，避免需要</span>hardcode string<span style="font-family: DejaVu Sans;">到你的视图中。</span></p>

<h4><a name="connecting-urls-to-code"></a>1.1 Connecting URLs to Code<span style="font-family: WenQuanYi Micro Hei;">连接</span>URLs<span style="font-family: WenQuanYi Micro Hei;">到</span>Code</h4>


<p>When your Rails application receives an incoming request</p>

<p><span style="font-family: DejaVu Sans;">当你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序收到一个传入请求（</span>incoming requests (<span style="font-family: DejaVu Sans;">传入请求</span>)<span style="font-family: DejaVu Sans;">正传递给用户的网站内容。）</span></p>

<p>GET /patients/17</p>

<p>it asks the router to match it to a controller action. If the first matching route is</p>

<p><span style="font-family: DejaVu Sans;">它请求</span>router<span style="font-family: DejaVu Sans;">匹配</span>URLs<span style="font-family: DejaVu Sans;">到一个</span>controller action<span style="font-family: DejaVu Sans;">。如果第一个匹配的</span>route<span style="font-family: DejaVu Sans;">是</span></p>

<p>match &ldquo;/patients/:id&rdquo; =&gt; &ldquo;patients#show&rdquo;</p>

<p>the request is dispatched to the <tt>patients</tt> controller’s <tt>show</tt> action with <tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt> in <tt>params</tt>.</p>

<p><span style="font-family: DejaVu Sans;">这个请求被调度给</span>patients controller<span style="font-family: DejaVu Sans;">的</span>show action<span style="font-family: DejaVu Sans;">以及</span><tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>字典中。</tt></span></p>

<h4><a name="generating-paths-and-urls-from-code"></a> 1.2 Generating Paths and URLs from Code<span style="font-family: WenQuanYi Micro Hei;">从</span>Code<span style="font-family: WenQuanYi Micro Hei;">创建</span>Paths<span style="font-family: WenQuanYi Micro Hei;">和</span>URLs</h4>


<p>You can also generate paths and URLs. If your application contains this code:</p>

<p><span style="font-family: DejaVu Sans;">你可以创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">。如果你的应用程序中包含这样的代码：</span></p>

<p>@patient = Patient.find(17)</p>

<p>&lt;%= link_to &ldquo;Patient Record&rdquo;, patient_path(@patient) %&gt;</p>

<p>The router will generate the path <tt>/patients/17</tt>. This reduces the brittleness of your view and makes your code easier to understand. Note that the id does not need to be specified in the route helper.</p>

<p>Router<span style="font-family: DejaVu Sans;">将会创建</span>path <tt>/patients/17</tt><span style="font-family: DejaVu Sans;"><tt>。这样减少了你的视图的脆性并且使得你的代码更加容易明白。</tt></span></p>

<h3><a name="resource-routing-the-rails-default"></a>2 Resource Routing: the Rails Default</h3>


<p>Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your <tt>index</tt>, <tt>show</tt>, <tt>new</tt>, <tt>edit</tt>, <tt>create</tt>, <tt>update</tt> and <tt>destroy</tt> actions, a resourceful route declares them in a single line of code.</p>

<p>Resource routing<span style="font-family: DejaVu Sans;">让你快速的为一个提供的</span>resourceful<span style="font-family: DejaVu Sans;">的</span>controller<span style="font-family: DejaVu Sans;">声明所有的常用</span>routes<span style="font-family: DejaVu Sans;">。替代你去声明单个的</span><tt>index</tt>, <tt>show</tt>, <tt>new</tt>, <tt>edit</tt>, <tt>create</tt>, <tt>update</tt> and <tt>destroy</tt> actions<span style="font-family: DejaVu Sans;">的</span>routes<span style="font-family: DejaVu Sans;">，一个</span>resourceful route<span style="font-family: DejaVu Sans;">声明它们在一个单行代码中。</span></p>

<p>When your Rails application receives an incoming request for</p>

<p><span style="font-family: DejaVu Sans;">当你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序收到一个这样的传入请求</span></p>

<p>DELETE /photos/17</p>

<p>it asks the router to map it to a controller action. If the first matching route is</p>

<p><span style="font-family: DejaVu Sans;">它请求</span>router<span style="font-family: DejaVu Sans;">匹配</span>URLs<span style="font-family: DejaVu Sans;">到一个</span>controller action<span style="font-family: DejaVu Sans;">。如果第一个匹配的</span>route<span style="font-family: DejaVu Sans;">是</span></p>

<p>resources :photos</p>

<p>Rails would dispatch that request to the <tt>destroy</tt> method on the <tt>photos</tt> controller with <tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt> in <tt>params</tt>.</p>

<p>Rails<span style="font-family: DejaVu Sans;">将会把这个请求调度给</span><tt>photos</tt> controller<span style="font-family: DejaVu Sans;">的</span><tt>destroy</tt> action<span style="font-family: DejaVu Sans;">以及</span><tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>字典中</tt></span></p>

<h4><a name="crud-verbs-and-actions"></a>2.2 CRUD, Verbs, and Actions</h4>


<p>CRUD<span style="font-family: DejaVu Sans;">是指在做计算处理时的增加</span>(Create)<span style="font-family: DejaVu Sans;">、查询</span>(Retrieve)<span style="font-family: DejaVu Sans;">（重新得到数据）、更新</span>(Update)<span style="font-family: DejaVu Sans;">和删除</span>(Delete)<span style="font-family: DejaVu Sans;">几个单词的首字母简写。主要被用在描述软件系统中数据库或者持久层的基本操作功能。</span></p>

<p>HTTP Verb HTTP<span style="font-family: DejaVu Sans;">动作</span></p>

<p>In Rails, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions. By convention, each action also maps to particular CRUD operations in a database. A single entry in the routing file, such as</p>

<p><span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">中，一个</span>resourceful route<span style="font-family: DejaVu Sans;">提供一个在</span>HTTP verbs<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">之间的映射到</span>controller actions<span style="font-family: DejaVu Sans;">。根据公约，每个</span>action<span style="font-family: DejaVu Sans;">都应该映射到数据库的</span>CRUD<span style="font-family: DejaVu Sans;">操作的一部分。一个单独的条目在</span>routing<span style="font-family: DejaVu Sans;">文件中，像这样</span></p>

<p>resources :photos</p>

<p>creates seven different routes in your application, all mapping to the <tt>Photos</tt> controller:</p>

<p><span style="font-family: DejaVu Sans;">创建七个不同的</span>routes<span style="font-family: DejaVu Sans;">在你的应用程序中，所有的这些</span>routes<span style="font-family: DejaVu Sans;">映射到</span>Photos controller<span style="font-family: DejaVu Sans;">：</span></p>

<p>&nbsp;</p>

<table width="573" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="102" /> <col width="54" /> <col width="311" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="311">used for</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="311">display a list of all photos</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="311">return an HTML form for creating a new photo</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="311">create a new photo</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="311">display a specific photo</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="311">return an HTML form for editing a photo</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="311">update a specific photo</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="311">delete a specific photo</td>
</tr>
</tbody>
</table>


<p>Rails routes are matched in the order they are specified, so if you have a <tt>resources</tt><tt> </tt><tt>:photos</tt> above a <tt>get</tt><tt> </tt><tt>&lsquo;photos/poll&rsquo;</tt> the <tt>show</tt> action’s route for the <tt>resources</tt> line will be matched before the <tt>get</tt> line. To fix this, move the <tt>get</tt> line <strong>above</strong> the <tt>resources</tt> line so that it is matched first.</p>

<p><strong>Rails</strong><strong> </strong><strong>routes</strong><span style="font-family: DejaVu Sans;"><strong>在它们指定的顺序中匹配，因此如果你有一个</strong></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>:photos</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>在</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>&lsquo;photos/poll&rsquo;</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的上面，</strong></tt></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的</strong></tt></span><tt><strong>show</strong></tt><tt><strong> </strong></tt><tt><strong>action</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的</strong></tt></span><tt><strong>route</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>将会在</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>之前先被匹配。要修复这些，移动</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>在</strong></tt></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>上面以确保</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>被首先匹配。</strong></tt></span></p>

<h4><a name="paths-and-urls"></a>2.3 Paths and URLs</h4>


<p>Creating a resourceful route will also expose a number of helpers to the controllers in your application. In the case of <tt>resources</tt><tt> </tt><tt>:photos</tt>:</p>

<p><span style="font-family: DejaVu Sans;">在你的应用程序中创建一个</span>resourceful<span style="font-family: DejaVu Sans;">的</span>route<span style="font-family: DejaVu Sans;">也将会摆出一系列的</span>controllers<span style="font-family: DejaVu Sans;">的</span>helpers<span style="font-family: DejaVu Sans;">，在这里的情况中</span><tt>resources</tt><tt> </tt><tt>:photos</tt><span style="font-family: DejaVu Sans;"><tt>如下：</tt></span></p>

<ul>
    <li><tt>photos_path</tt> returns <tt>/photos</tt></li>
    <li><tt>new_photo_path</tt> returns <tt>/photos/new</tt></li>
    <li><tt>edit_photo_path(:id)</tt> returns <tt>/photos/:id/edit</tt> (for instance, <tt>edit_photo_path(10)</tt> returns <tt>/photos/10/edit</tt>)</li>
    <li><tt>photo_path(:id)</tt> returns <tt>/photos/:id</tt> (for instance, <tt>photo_path(10)</tt> returns <tt>/photos/10</tt>)</li>
</ul>


<p>Each of these helpers has a corresponding <tt>_url</tt> helper (such as <tt>photos_url</tt>) which returns the same path prefixed with the current host, port and path prefix.</p>

<p><span style="font-family: DejaVu Sans;">这里的每个</span>helpers<span style="font-family: DejaVu Sans;">都有一个相应的</span>_url helper<span style="font-family: DejaVu Sans;">（例如</span><tt>photos_url</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>edit_photo_url(1)</tt><span style="font-family: DejaVu Sans;">）</span></p>

<p><span style="font-family: DejaVu Sans;">其将会返回相同的路径后缀以及当前主机，端口和路径后缀。</span></p>

<h4>the code in my demo</h4>

<h1>@tmp=post_url(1)</h1>

<h1>@tmp=posts_url</h1>

<h1>@tmp=edit_post_url(:id)</h1>

<p>@tmp=new_post_url</p>

<p>Because the router uses the HTTP verb and URL to match inbound requests, four URLs map to seven different actions.</p>

<p><span style="font-family: DejaVu Sans;">因为</span>router<span style="font-family: DejaVu Sans;">使用</span>HTTP verb<span style="font-family: DejaVu Sans;">和</span>URL<span style="font-family: DejaVu Sans;">来匹配入站请求，四种</span>URLs<span style="font-family: DejaVu Sans;">映射到七种不同的</span>actions<span style="font-family: DejaVu Sans;">中。</span></p>

<h4><a name="defining-multiple-resources-at-the-same-"></a> 2.4 Defining Multiple Resources at the Same Time<span style="font-family: WenQuanYi Micro Hei;">在同一时间定义多个</span>Resource</h4>


<p>If you need to create routes for more than one resource, you can save a bit of typing by defining them all with a single call to <tt>resources</tt>:</p>

<p><span style="font-family: DejaVu Sans;">如果你需要为超过一个</span>resource<span style="font-family: DejaVu Sans;">创建</span>routes<span style="font-family: DejaVu Sans;">，你可以保存它们到一组中通过调用单个</span>resources<span style="font-family: DejaVu Sans;">来定义所有的</span>resource<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :photos, :books, :videos</p>

<p>This works exactly the same as</p>

<p><span style="font-family: DejaVu Sans;">这里工作类似于：</span></p>

<p>resources :photos</p>

<p>resources :books</p>

<p>resources :videos</p>

<h4><a name="singular-resources"></a>2.5 Singular Resources <span style="font-family: WenQuanYi Micro Hei;">单数</span>Resources</h4>


<p>Sometimes, you have a resource that clients always look up without referencing an ID. For example, you would like <tt>/profile</tt> to always show the profile of the currently logged in user. In this case, you can use a singular resource to map <tt>/profile</tt> (rather than <tt>/profile/:id</tt>) to the <tt>show</tt> action.</p>

<p><span style="font-family: DejaVu Sans;">有时候，你有一个</span>resource<span style="font-family: DejaVu Sans;">，</span>clients<span style="font-family: DejaVu Sans;">通常查找它们并不引用一个</span>ID<span style="font-family: DejaVu Sans;">。例如，你将会希望</span><tt>/profile</tt><span style="font-family: DejaVu Sans;"><tt>来总是显示当前的登录的用户的</tt></span><tt>profile</tt><span style="font-family: DejaVu Sans;"><tt>。在这种情况中，你可以使用一个单数的</tt></span><tt>resource</tt><span style="font-family: DejaVu Sans;"><tt>来映射</tt></span><tt>/profile</tt><tt> </tt><tt>(rather</tt><tt> </tt><tt>than</tt><tt> </tt><tt>/profile/:id)</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>show</tt><tt> </tt><tt>ation</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>match &ldquo;profile&rdquo; =&gt; &ldquo;users#show&rdquo;</p>

<p>This resourceful route<span style="font-family: DejaVu Sans;">这里是</span>resourceful route</p>

<p>resource :geocoder</p>

<p>creates six different routes in your application, all mapping to the <tt>Geocoders</tt> controller:</p>

<p><span style="font-family: DejaVu Sans;">在你的应用程序中创建六种不同的</span>routes<span style="font-family: DejaVu Sans;">，所有的</span>routes<span style="font-family: DejaVu Sans;">映射到</span><tt>Geocoders</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>cotroller</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>&nbsp;</p>

<table width="575" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="101" /> <col width="54" /> <col width="315" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="101">Path</th>
<th width="54">action</th>
<th width="315">used for</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder/new</td>
<td width="54">new</td>
<td width="315">return an HTML form for creating the geocoder</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="101">/geocoder</td>
<td width="54">create</td>
<td width="315">create the new geocoder</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder</td>
<td width="54">show</td>
<td width="315">display the one and only geocoder resource</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder/edit</td>
<td width="54">edit</td>
<td width="315">return an HTML form for editing the geocoder</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="101">/geocoder</td>
<td width="54">update</td>
<td width="315">update the one and only geocoder resource</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="101">/geocoder</td>
<td width="54">destroy</td>
<td width="315">delete the geocoder resource</td>
</tr>
</tbody>
</table>


<p>Because you might want to use the same controller for a singular route (/account) and a plural route (/accounts/45), singular resources map to plural controllers.</p>

<p><span style="font-family: DejaVu Sans;"><tt>因为你可能希望对单数</tt></span><tt>route(/account)</tt><span style="font-family: DejaVu Sans;"><tt>和复数</tt></span><tt>route(/accounts/45)</tt><span style="font-family: DejaVu Sans;"><tt>使用相同的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>，单数</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>映射到复数</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>A</tt><tt> </tt><tt>singular</tt><tt> </tt><tt>resourceful</tt><tt> </tt><tt>route</tt><tt> </tt><tt>generates</tt><tt> </tt><tt>these</tt><tt> </tt><tt>helpers:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>一个单数</tt></span><tt>resourceful</tt><tt> </tt><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>创建这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<ul>
    <li><tt>new_geocoder_path</tt> returns <tt>/geocoder/new</tt></li>
    <li><tt>edit_geocoder_path</tt> returns <tt>/geocoder/edit</tt></li>
    <li><tt>geocoder_path</tt> returns <tt>/geocoder</tt></li>
</ul>


<p><tt>As</tt><tt> </tt><tt>with</tt><tt> </tt><tt>plural</tt><tt> </tt><tt>resources,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>helpers</tt><tt> </tt><tt>ending</tt><tt> </tt><tt>in</tt><tt> </tt><tt>_url</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>include</tt><tt> </tt><tt>the</tt><tt> </tt><tt>host,</tt><tt> </tt><tt>port</tt><tt> </tt><tt>and</tt><tt> </tt><tt>path</tt><tt> </tt><tt>prefix.</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>就像</tt></span><tt>plural</tt><tt> </tt><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>，相同的以</tt></span><tt>_url</tt><span style="font-family: DejaVu Sans;"><tt>结尾的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>同样包含，</tt></span><tt>host</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>port</tt><span style="font-family: DejaVu Sans;"><tt>和路径后缀。</tt></span></p>

<h4><a name="controller-namespaces-and-routing"></a><tt>2.6</tt><tt> </tt><tt>Controller</tt><tt> </tt><tt>Namespaces</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Routing</tt></h4>


<p>You may wish to organize groups of controllers under a namespace. Most commonly, you might group a number of administrative controllers under an <tt>Admin::</tt> namespace. You would place these controllers under the <tt>app/controllers/admin</tt> directory, and you can group them together in your router:</p>

<p><span style="font-family: DejaVu Sans;"><tt>你可能希望通过</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>分组组织</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>。通常大多数情况，你可以分组一系列的</tt><tt></tt></span><tt>administrative</tt><tt> </tt><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>到一个</tt></span><tt>Admin::</tt><span style="font-family: DejaVu Sans;"><tt>名称空间下面。你将会放置这些</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>在</tt><tt></tt></span><tt>app/controllers/admin</tt><span style="font-family: DejaVu Sans;"><tt>目录中，并且你可以在你的</tt></span><tt>router</tt><span style="font-family: DejaVu Sans;"><tt>中分组他们在一起</tt></span></p>

<p><tt>namespace</tt><tt> </tt><tt>:admin</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:comments</tt></p>

<p><tt>end</tt></p>

<p><tt>This</tt><tt> </tt><tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>number</tt><tt> </tt><tt>of</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>for</tt><tt> </tt><tt>each</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>posts</tt><tt> </tt><tt>and</tt><tt> </tt><tt>comments</tt><tt> </tt><tt>controller.</tt><tt> </tt><tt>For</tt><tt> </tt><tt>Admin::PostsController,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>will</tt><tt> </tt><tt>create:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>这将会对于每一个</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>comments</tt><tt> </tt><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>创建若干的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>。对于</tt><tt></tt></span><tt>Admin::PostsController</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会创建：</tt></span></p>

<p>&nbsp;</p>

<table width="473" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="136" /> <col width="54" /> <col width="178" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="136">Path</th>
<th width="54">action</th>
<th width="178">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts</td>
<td width="54">index</td>
<td width="178">admin_posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/new</td>
<td width="54">new</td>
<td width="178">new_admin_post_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="136">/admin/posts</td>
<td width="54">create</td>
<td width="178">admin_posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/:id</td>
<td width="54">show</td>
<td width="178">admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/:id/edit</td>
<td width="54">edit</td>
<td width="178">edit_admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="136">/admin/posts/:id</td>
<td width="54">update</td>
<td width="178">admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="136">/admin/posts/:id</td>
<td width="54">destroy</td>
<td width="178">admin_post_path(:id)</td>
</tr>
</tbody>
</table>


<p>If you want to route /posts (without the prefix /admin) to Admin::PostsController, you could use</p>

<p><span style="font-family: DejaVu Sans;"><tt>如果你想</tt></span><tt>Admin::PostsController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>route</tt><tt> </tt><tt>/posts(without</tt><tt> </tt><tt>the</tt><tt> </tt><tt>prefix</tt><tt> </tt><tt>/admin)</tt><span style="font-family: DejaVu Sans;"><tt>，你可以使用</tt></span></p>

<p><tt>#</tt><span style="font-family: DejaVu Sans;"><tt>从</tt></span><tt>admin</tt><span style="font-family: DejaVu Sans;"><tt>中取出，重新声明为独立的</tt></span><tt>resources</tt></p>

<p><tt>scope</tt><tt> </tt><tt>:module</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;admin&rdquo;</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:comments</tt></p>

<p><tt>end</tt></p>

<p><tt>or,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>a</tt><tt> </tt><tt>single</tt><tt> </tt><tt>case</tt></p>

<p><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:module</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;admin&rdquo;</tt></p>

<p><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>route</tt><tt> </tt><tt>/admin/posts</tt><tt> </tt><tt>to</tt><tt> </tt><tt>PostsController</tt><tt> </tt><tt>(without</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Admin::</tt><tt> </tt><tt>module</tt><tt> </tt><tt>prefix),</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>use</tt></p>

<p>scope &ldquo;/admin&rdquo; do</p>

<p>resources :posts, :comments</p>

<p>end</p>

<p><tt>or,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>a</tt><tt> </tt><tt>single</tt><tt> </tt><tt>case</tt></p>

<p><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:path</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;/admin/posts&rdquo;</tt></p>

<p><tt>In</tt><tt> </tt><tt>each</tt><tt> </tt><tt>of</tt><tt> </tt><tt>these</tt><tt> </tt><tt>cases,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>named</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>remain</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>as</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>did</tt><tt> </tt><tt>not</tt><tt> </tt><tt>use</tt><tt> </tt><tt>scope.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>the</tt><tt> </tt><tt>last</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>following</tt><tt> </tt><tt>paths</tt><tt> </tt><tt>map</tt><tt> </tt><tt>to</tt><tt> </tt><tt>PostsController:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>在每个这样的情况中，</tt></span><tt>named</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>保持不变，如果你没有使用范围。在最后，随后的</tt></span><tt>paths</tt><span style="font-family: DejaVu Sans;"><tt>映射到</tt><tt></tt></span><tt>PostsController</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>&nbsp;</p>

<table width="417" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="132" /> <col width="54" /> <col width="126" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="132">Path</th>
<th width="54">action</th>
<th width="126">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts</td>
<td width="54">index</td>
<td width="126">posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/new</td>
<td width="54">new</td>
<td width="126">new_post_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="132">/admin/posts</td>
<td width="54">create</td>
<td width="126">posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/:id</td>
<td width="54">show</td>
<td width="126">post_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/:id/edit</td>
<td width="54">edit</td>
<td width="126">edit_post_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="132">/admin/posts/:id</td>
<td width="54">update</td>
<td width="126">post_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="132">/admin/posts/:id</td>
<td width="54">destroy</td>
<td width="126">post_path(:id)</td>
</tr>
</tbody>
</table>


<h4><a name="nested-resources"></a>2.7 Nested Resources<span style="font-family: WenQuanYi Micro Hei;"><tt>嵌套</tt></span><tt>Resource</tt></h4>


<p>It’s common to have resources that are logically children of other resources. For example, suppose your application includes these models:</p>

<p><span style="font-family: DejaVu Sans;"><tt>在通常情况中有</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>是其他的</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>逻辑上的</tt></span><tt>children</tt><span style="font-family: DejaVu Sans;"><tt>。例如，假设你的应用程序包含这些</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><tt>class</tt><tt> </tt><tt>Magazine</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt></p>

<p><tt> </tt><tt>has_many</tt><tt> </tt><tt>:ads</tt></p>

<p><tt>end</tt></p>

<p>&nbsp;</p>

<p><tt>class</tt><tt> </tt><tt>Ad</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt></p>

<p><tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:magazine</tt></p>

<p><tt>end</tt></p>

<p><tt>Nested</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>allow</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>capture</tt><tt> </tt><tt>this</tt><tt> </tt><tt>relationship</tt><tt> </tt><tt>in</tt><tt> </tt><tt>your</tt><tt> </tt><tt>routing.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>include</tt><tt> </tt><tt>this</tt><tt> </tt><tt>route</tt><tt> </tt><tt>declaration:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>嵌套</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>允许你捕捉这些关系在你的</tt></span><tt>routing</tt><span style="font-family: DejaVu Sans;"><tt>中。在这里的情况中，你可包含这样的声明：</tt></span></p>

<p><tt>resources</tt><tt> </tt><tt>:magazines</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:ads</tt></p>

<p><tt>end</tt></p>

<p><tt>In</tt><tt> </tt><tt>addition</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>for</tt><tt> </tt><tt>magazines,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>declaration</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>route</tt><tt> </tt><tt>ads</tt><tt> </tt><tt>to</tt><tt> </tt><tt>an</tt><tt> </tt><tt>AdsController.</tt><tt> </tt><tt>The</tt><tt> </tt><tt>ad</tt><tt> </tt><tt>URLs</tt><tt> </tt><tt>require</tt><tt> </tt><tt>a</tt><tt> </tt><tt>magazine:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>除了</tt><tt></tt></span><tt>magazines</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>，这里也同样声明</tt></span><tt>route</tt><tt> </tt><tt>ads</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>AdsController</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>ad</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>URLs</tt><span style="font-family: DejaVu Sans;"><tt>需要一个</tt><tt></tt></span><tt>magazine</tt><span style="font-family: DejaVu Sans;"><tt>（对象）：</tt></span></p>

<p>&nbsp;</p>

<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="82" /> <col width="144" /> <col width="53" /> <col width="371" /> </colgroup>
<tbody>
<tr>
<th width="82">HTTP Verb</th>
<th width="144">Path</th>
<th width="53">action</th>
<th width="371">used for</th>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads</td>
<td width="53">index</td>
<td width="371">display a list of all ads for a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/new</td>
<td width="53">new</td>
<td width="371">return an HTML form for creating a new ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">POST</td>
<td width="144">/magazines/:id/ads</td>
<td width="53">create</td>
<td width="371">create a new ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">show</td>
<td width="371">display a specific ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/:id/edit</td>
<td width="53">edit</td>
<td width="371">return an HTML form for editing an ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">PUT</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">update</td>
<td width="371">update a specific ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">DELETE</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">destroy</td>
<td width="371">delete a specific ad belonging to a specific magazine</td>
</tr>
</tbody>
</table>


<p>This will also create routing helpers such as magazine_ads_url and edit_magazine_ad_path. These helpers take an instance of Magazine as the first parameter (magazine_ads_url(@magazine)).</p>

<p><span style="font-family: DejaVu Sans;"><tt>这里也将会创建</tt></span><tt>routing</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>例如</tt><tt></tt></span><tt>magazine_ads_url</tt><span style="font-family: DejaVu Sans;"><tt>和</tt><tt></tt></span><tt>edit_magazine_ad_path</tt><span style="font-family: DejaVu Sans;"><tt>。这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>获取一个</tt><tt></tt></span><tt>Magazine</tt><span style="font-family: DejaVu Sans;"><tt>的实例作为第一个参数（</tt></span><tt>magazine_ads_url(@magazine)</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt></span></p>

<h5><a name="limits-to-nesting"></a><tt>2.7.1</tt><tt> </tt><tt>Limits</tt><tt> </tt><tt>to</tt><tt> </tt><tt>Nesting</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>嵌套的局限</tt></span></h5>


<p>You can nest resources within other nested resources if you like. For example:</p>

<p><span style="font-family: DejaVu Sans;"><tt>你可以嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>在其他嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>中如果你喜欢。例如：</tt></span></p>

<p><tt>resources</tt><tt> </tt><tt>:publishers</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:magazines</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:photos</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p><tt>end</tt></p>

<p><tt>Deeply-nested</tt><tt> </tt><tt>resources</tt><tt> </tt><tt>quickly</tt><tt> </tt><tt>become</tt><tt> </tt><tt>cumbersome.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>application</tt><tt> </tt><tt>would</tt><tt> </tt><tt>recognize</tt><tt> </tt><tt>paths</tt><tt> </tt><tt>such</tt><tt> </tt><tt>as</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>深层的嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>相当的累赘。在这样的情况下，例如，应用程序将会这样组织路径</tt></span></p>

<pre><tt>/publishers/1/magazines/2/photos/3</tt></pre>


<p><tt>The</tt><tt> </tt><tt>corresponding</tt><tt> </tt><tt>route</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>would</tt><tt> </tt><tt>be</tt><tt> </tt><tt>publisher_magazine_photo_url,</tt><tt> </tt><tt>requiring</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>specify</tt><tt> </tt><tt>objects</tt><tt> </tt><tt>at</tt><tt> </tt><tt>all</tt><tt> </tt><tt>three</tt><tt> </tt><tt>levels.</tt><tt> </tt><tt>Indeed,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>situation</tt><tt> </tt><tt>is</tt><tt> </tt><tt>confusing</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>that</tt><tt> </tt><tt>a</tt><tt> </tt><tt>popular</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://weblog.jamisbuck.org/2007/2/5/nesting-resources">article</a></span></span><tt> </tt><tt>by</tt><tt> </tt><tt>Jamis</tt><tt> </tt><tt>Buck</tt><tt> </tt><tt>proposes</tt><tt> </tt><tt>a</tt><tt> </tt><tt>rule</tt><tt> </tt><tt>of</tt><tt> </tt><tt>thumb</tt><tt> </tt><tt>for</tt><tt> </tt><tt>good</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>design:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>相应的</tt></span><tt>route</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>将会是</tt><tt></tt></span><tt>publisher_magazine_photo_url</tt><span style="font-family: DejaVu Sans;"><tt>这需要你指定三个级别的所有对象。事实上，这种情况下太混乱了一篇受欢迎的文章来自</tt></span><tt>Jamis</tt><tt> </tt><tt>Buck</tt><span style="font-family: DejaVu Sans;"><tt>，关于一个设计良好的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的经验法则：</tt></span></p>

<p><em><strong>Resources</strong></em><em><strong> </strong></em><em><strong>should</strong></em><em><strong> </strong></em><em><strong>never</strong></em><em><strong> </strong></em><em><strong>be</strong></em><em><strong> </strong></em><em><strong>nested</strong></em><em><strong> </strong></em><em><strong>more</strong></em><em><strong> </strong></em><em><strong>than</strong></em><em><strong> </strong></em><em><strong>1</strong></em><em><strong> </strong></em><em><strong>level</strong></em><em><strong> </strong></em><em><strong>deep.</strong></em></p>

<h4><a name="creating-paths-and-urls-from-objects"></a> <tt>2.8</tt><tt> </tt><tt>Creating</tt><tt> </tt><tt>Paths</tt><tt> </tt><tt>and</tt><tt> </tt><tt>URLs</tt><tt> </tt><tt>From</tt><tt> </tt><tt>Objects</tt></h4>


<p>In addition to using the routing helpers, Rails can also create paths and URLs from an array of parameters. For example, suppose you have this set of routes:</p>

<p><span style="font-family: DejaVu Sans;">除了使用</span>routing helpers<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">也可以从一个</span>parameters<span style="font-family: DejaVu Sans;">数组创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">。例如，假设你有这样的组</span>routes<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :magazines do</p>

<p>resources :ads</p>

<p>end</p>

<p>When using <tt> </tt><tt>magazine_ad_path</tt>, you can pass in instances of <tt> </tt><tt>Magazine</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Ad</tt> instead of the numeric IDs.</p>

<p><span style="font-family: DejaVu Sans;">在使用</span><tt>magazine_ad_path</tt><span style="font-family: DejaVu Sans;"><tt>的时候，你可以传递</tt><tt></tt></span><tt>Magazine</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Ad</tt><span style="font-family: DejaVu Sans;"><tt>的实例替代数字</tt></span><tt>IDs</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>&lt;%= link_to &ldquo;Ad details&rdquo;, magazine_ad_path(@magazine, @ad) %&gt;</p>

<p>You can also use <tt>url_for</tt> with a set of objects, and Rails will automatically determine which route you want:</p>

<p><span style="font-family: DejaVu Sans;">你同样也可以使用</span><tt>url_for</tt><span style="font-family: DejaVu Sans;"><tt>和一组对象，那么</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会自动的决定那个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>是你希望的：</tt></span></p>

<p>&lt;%= link_to &ldquo;Ad details&rdquo;, url_for([@magazine, @ad]) %&gt;</p>

<p>In this case, Rails will see that <tt>@magazine</tt> is a <tt> </tt><tt>Magazine</tt> and <tt>@ad</tt> is an <tt>Ad</tt> and will therefore use the <tt>magazine_ad_path</tt> helper. In helpers like <tt>link_to</tt>, you can specify just the object in place of the full <tt>url_for</tt> call:</p>

<p><span style="font-family: DejaVu Sans;">在这里，</span>Rails<span style="font-family: DejaVu Sans;">将会明白</span><tt>@magazine</tt><span style="font-family: DejaVu Sans;"><tt>是</tt><tt></tt></span><tt>Magazine</tt><span style="font-family: DejaVu Sans;"><tt>并且</tt></span><tt>@ad</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>Ad</tt><span style="font-family: DejaVu Sans;"><tt>于此将会因此使用</tt><tt></tt></span><tt>magazine_ad_path</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>。在就像</tt></span><tt>link_to</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>中，你可以指定仅仅对象在</tt></span><tt>url_for</tt><span style="font-family: DejaVu Sans;"><tt>调用中：</tt></span></p>

<p>&lt;%= link_to &ldquo;Ad details&rdquo;, [@magazine, @ad] %&gt;</p>

<p>If you wanted to link to just a magazine, you could leave out the <tt>Array</tt>:</p>

<p><span style="font-family: DejaVu Sans;">如果你想仅仅</span>link<span style="font-family: DejaVu Sans;">到一个</span>magazine<span style="font-family: DejaVu Sans;">，你可以省去数组：</span></p>

<p>&lt;%= link_to &ldquo;Magazine details&rdquo;, @magazine %&gt;</p>

<p>This allows you to treat instances of your models as URLs, and is a key advantage to using the resourceful style.</p>

<p><a name="adding-more-restful-actions"></a><span style="font-family: DejaVu Sans;">这让你处理</span>models<span style="font-family: DejaVu Sans;">的实例为</span>URLs<span style="font-family: DejaVu Sans;">，并且这也是使用</span>resourceful style<span style="font-family: DejaVu Sans;">的关键优势。</span></p>

<h4><a name="adding-more-restful-actions1"></a>2.9 Adding More RESTful Actions<span style="font-family: WenQuanYi Micro Hei;">添加更多的</span>RESTful Action</h4>


<p>You are not limited to the seven routes that RESTful routing creates by default. If you like, you may add additional routes that apply to the collection or individual members of the collection.</p>

<p><span style="font-family: DejaVu Sans;">你并不限制于</span>RESTful routing<span style="font-family: DejaVu Sans;">默认创建的七个</span>routes<span style="font-family: DejaVu Sans;">。如果你喜欢，你可以添加额外的</span>routes<span style="font-family: DejaVu Sans;">用于多个或者个别的</span>collection<span style="font-family: DejaVu Sans;">。</span></p>

<h5><a name="adding-member-routes"></a>2.9.1 Adding Member Routes</h5>


<p>To add a member route, just add a <tt>member</tt> block into the resource block:</p>

<p><span style="font-family: DejaVu Sans;">添加一个</span>member route<span style="font-family: DejaVu Sans;">，仅仅添加一个</span>member<span style="font-family: DejaVu Sans;">的</span>block<span style="font-family: DejaVu Sans;">到</span>resource block<span style="font-family: DejaVu Sans;">中：</span></p>

<p>resources :photos do</p>

<p>member do</p>

<p>get &lsquo;preview&rsquo;</p>

<p>end</p>

<p>end</p>

<p>This will recognize <tt>/photos/1/preview</tt> with GET, and route to the <tt>preview</tt> action of <tt>PhotosController</tt>. It will also create the <tt>preview_photo_url</tt> and <tt>preview_photo_path</tt> helpers.</p>

<p>Within the block of member routes, each route name specifies the HTTP verb that it will recognize. You can use <tt>get</tt>, <tt>put</tt>, <tt>post</tt>, or <tt>delete</tt> here. If you don’t have multiple <tt>member</tt> routes, you can also pass <tt>:on</tt> to a route, eliminating the block:</p>

<p><span style="font-family: DejaVu Sans;">在</span>member<span style="font-family: DejaVu Sans;">的</span>routes<span style="font-family: DejaVu Sans;">中，每个</span>route<span style="font-family: DejaVu Sans;">名字指定</span>HTTP verb<span style="font-family: DejaVu Sans;">这是将会组织的。在这里你可以使用</span><tt>get</tt>, <tt>put</tt>, <tt>post</tt>, or <tt>delete</tt><span style="font-family: DejaVu Sans;"><tt>。如果你没有多个</tt></span><tt>member</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>，你同样也可以传递</tt></span><tt>:on</tt><span style="font-family: DejaVu Sans;"><tt>到一个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>，消除</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>resources :photos do</p>

<p>get &lsquo;preview&rsquo;, :on =&gt; :member</p>

<p>end</p>

<h5><a name="adding-collection-routes"></a>2.9.2 Adding Collection Routes</h5>


<p>To add a route to the collection:</p>

<p><span style="font-family: DejaVu Sans;">添加一个</span>route<span style="font-family: DejaVu Sans;">到</span>collection<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :photos do</p>

<p>collection do</p>

<p>get &lsquo;search&rsquo;</p>

<p>end</p>

<p>end</p>

<p>This will enable Rails to recognize paths such as <tt>/photos/search</tt> with GET, and route to the <tt>search</tt> action of <tt>PhotosController</tt>. It will also create the <tt>search_photos_url</tt> and <tt>search_photos_path</tt> route helpers.</p>

<p><span style="font-family: DejaVu Sans;">这将使</span>Rails<span style="font-family: DejaVu Sans;">能够像这样</span><tt>/photos/search</tt> with GET<span style="font-family: DejaVu Sans;">组织路径，并且</span>route<span style="font-family: DejaVu Sans;">到</span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>search</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。它将同样创建</tt><tt></tt></span><tt>search_photos_url</tt><span style="font-family: DejaVu Sans;"><tt>和</tt><tt></tt></span><tt>search_photos_path</tt><tt> </tt><tt>route</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>Just as with member routes, you can pass <tt>:on</tt> to a route:</p>

<p><span style="font-family: DejaVu Sans;">仅仅对于</span>member routes<span style="font-family: DejaVu Sans;">，你可以传递</span>:on<span style="font-family: DejaVu Sans;">给一个</span>route<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :photos do</p>

<p>get &lsquo;search&rsquo;, :on =&gt; :collection</p>

<p>end</p>

<h5><a name="a-note-of-caution"></a>2.9.3 A Note of Caution<span style="font-family: WenQuanYi Micro Hei;">一个慎重的提醒</span></h5>


<p>If you find yourself adding many extra actions to a resourceful route, it’s time to stop and ask yourself whether you’re disguising the presence of another resource.</p>

<p><span style="font-family: DejaVu Sans;">如果你发现你自己添加很多额外的</span>action<span style="font-family: DejaVu Sans;">到一个</span>resourceful<span style="font-family: DejaVu Sans;">的</span>route<span style="font-family: DejaVu Sans;">，是时候停下来并问你自己</span></p>

<p><a name="result_box"></a><span style="font-family: DejaVu Sans;">是否你在伪造另一个</span>resource<span style="font-family: DejaVu Sans;">。</span></p>

<h3><a name="non-resourceful-routes"></a>3 Non-Resourceful Routes<span style="font-family: WenQuanYi Micro Hei;">非</span>- Resourceful Routes</h3>


<p>In addition to resource routing, Rails has powerful support for routing arbitrary URLs to actions. Here, you don’t get groups of routes automatically generated by resourceful routing. Instead, you set up each route within your application separately.</p>

<p><span style="font-family: DejaVu Sans;">除了</span>resource routing<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">对任意的</span>URLs<span style="font-family: DejaVu Sans;">到</span>actions<span style="font-family: DejaVu Sans;">有强力的支持。这里，你没有得到被</span>resourceful routing<span style="font-family: DejaVu Sans;">自动创建的</span>groups of routes<span style="font-family: DejaVu Sans;">。作为替代，在你的应用程序中分别设置每个</span>route<span style="font-family: DejaVu Sans;">。</span></p>

<p>While you should usually use resourceful routing, there are still many places where the simpler routing is more appropriate. There’s no need to try to shoehorn every last piece of your application into a resourceful framework if that’s not a good fit.</p>

<p><span style="font-family: DejaVu Sans;">即使你应该通常使用</span>resourceful routing<span style="font-family: DejaVu Sans;">，这里仍然有很多地方简单的</span>routing<span style="font-family: DejaVu Sans;">更加适合。这里不需要尝试将你的应用程序最后写成一个</span>resourceful framework<span style="font-family: DejaVu Sans;">如果这样并不合适。</span></p>

<p>In particular, simple routing makes it very easy to map legacy URLs to new Rails actions.</p>

<p><a name="result_box1"></a><span style="font-family: DejaVu Sans;">特别是，简单的路</span>routing<span style="font-family: DejaVu Sans;">，使得它很容易映射（传入的）现有的</span>URL<span style="font-family: DejaVu Sans;">映射到新的</span>Rails action<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="bound-parameters"></a>3.1 Bound Parameters<span style="font-family: WenQuanYi Micro Hei;">绑定参数</span></h4>


<p>When you set up a regular route, you supply a series of symbols that Rails maps to parts of an incoming HTTP request. Two of these symbols are special: <tt>:controller</tt> maps to the name of a controller in your application, and <tt>:action</tt> maps to the name of an action within that controller. For example, consider one of the default Rails routes:</p>

<p><span style="font-family: DejaVu Sans;">当你设定一个正则</span>route<span style="font-family: DejaVu Sans;">，你供应一系列的字符，其将通过</span>Rails<span style="font-family: DejaVu Sans;">映射到传入</span>HTTP<span style="font-family: DejaVu Sans;">请求的一部分。这些字符的两部分分别是：</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>映射到你应用程序中的一个</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>，并且</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>映射到在指定的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中的一个</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。例如思考一个默认的</tt></span><tt>Rails</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>match &lsquo;:controller(/:action(/:id))&rsquo;</p>

<p>If an incoming request of <tt>/photos/show/1</tt> is processed by this route (because it hasn’t matched any previous route in the file), then the result will be to invoke the <tt>show</tt> action of the <tt> </tt><tt>PhotosController</tt>, and to make the final parameter <tt>&ldquo;1&rdquo;</tt> available as <tt>params[:id]</tt>. This route will also route the incoming request of <tt>/photos</tt> to <tt>PhotosController#index</tt>, since <tt>:action</tt> and <tt>:id</tt> are optional parameters, denoted by parentheses.</p>

<p><span style="font-family: DejaVu Sans;">如果传入请求</span><tt>/photos/show/1</tt><tt> </tt><tt>is</tt><tt> </tt><tt>processed</tt><tt> </tt><tt>by</tt><tt> </tt><tt>this</tt><tt> </tt><tt>route</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>（因为它并没有被先前的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>文件中任何的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>匹配成功），接着这个结果将会调用</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，并且使得最后的参数</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></tt></span><tt>1</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>可用于</tt></span><tt>params[:id]</tt><span style="font-family: DejaVu Sans;"><tt>。这个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>也还会</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>传入请求</tt></span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>PhotosController#index</tt><span style="font-family: DejaVu Sans;"><tt>，因为</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>:id</tt><span style="font-family: DejaVu Sans;"><tt>是被括号包起来的可选参数。</tt></span></p>

<h4><a name="dynamic-segments"></a>3.2 Dynamic Segments<span style="font-family: WenQuanYi Micro Hei;">动态分割</span></h4>


<p>You can set up as many dynamic segments within a regular route as you like. Anything other than <tt>:controller</tt> or <tt>:action</tt> will be available to the action as part of <tt>params</tt>. If you set up this route:</p>

<p><span style="font-family: DejaVu Sans;">你可以设置你希望的数目的</span>dynamic segments<span style="font-family: DejaVu Sans;">在一个正则</span>route<span style="font-family: DejaVu Sans;">中。超过</span><tt>:controller</tt> or <tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>的其他部分（是可用的）在</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>作为</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>第一部分。如果你设定这样的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><tt>match</tt><tt> </tt><tt>&lsquo;:controller/:action/:id/:user_id&rsquo;</tt></p>

<p>An incoming path of <tt>/photos/show/&frac12;</tt> will be dispatched to the <tt>show</tt> action of the <tt>PhotosController</tt>. <tt>params[:id]</tt> will be <tt>&ldquo;1&rdquo;</tt>, and <tt>params[:user_id]</tt> will be <tt>&ldquo;2&rdquo;</tt>.</p>

<p><span style="font-family: DejaVu Sans;">一个传入路径</span><tt>/photos/show/&frac12;</tt><span style="font-family: DejaVu Sans;"><tt>将会被调度给</tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>params[:id]</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>&ldquo;1&rdquo;,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>params[:user_id]</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>&ldquo;2&rdquo;.</tt></p>

<p>You can’t use <tt>namespace</tt> or <tt>:module</tt> with a <tt>:controller</tt> path segment. If you need to do this then use a constraint on :controller that matches the namespace you require. e.g:</p>

<p><span style="font-family: DejaVu Sans;">你不能对一个</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>路径</tt></span><tt>segment</tt><span style="font-family: DejaVu Sans;"><tt>使用</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>:module</tt><span style="font-family: DejaVu Sans;"><tt>。如果你需要这么做那么使用对</tt><tt></tt></span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>一个限制使其匹配你请求的</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>。例如：</tt></span></p>

<p><tt>match</tt><tt> </tt><tt>&lsquo;:controller(/:action(/:id))&rsquo;,</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>/admin\/[^\/]+/</tt></p>

<p>&nbsp;</p>

<p>By default dynamic segments don’t accept dots – this is because the dot is used as a separator for formatted routes. If you need to use a dot within a dynamic segment add a constraint which overrides this – for example <tt>:id</tt> =&gt; /[^\/]+/ allows anything except a slash.</p>

<p><span style="font-family: DejaVu Sans;">默认的动态分割不接受</span>dots<span style="font-family: DejaVu Sans;">（</span>.<span style="font-family: DejaVu Sans;">）<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>这是因为</span>dot<span style="font-family: DejaVu Sans;">被作为格式化</span>routes<span style="font-family: DejaVu Sans;">的一个分割。如果你需要在一个</span>dynamic segment<span style="font-family: DejaVu Sans;">中使用</span>dot<span style="font-family: DejaVu Sans;">，添加一个限制来重写它<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>例如</span><tt>:id</tt> =&gt; /[^\/]+/<span style="font-family: DejaVu Sans;">允许除了斜线之外的任何字符。</span></p>

<h4><a name="static-segments"></a>3.3 Static Segments</h4>


<p>You can specify static segments when creating a route:</p>

<p>match &lsquo;:controller/:action/:id/with_user/:user_id&rsquo;</p>

<p>This route would respond to paths such as <tt>/photos/show/1/with_user/2</tt>. In this case, <tt>params</tt> would be <tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt>.</p>

<h4><a name="the-query-string"></a>3.4 The Query String<span style="font-family: WenQuanYi Micro Hei;">查询字符串</span></h4>


<p>The <tt>params</tt> will also include any parameters from the query string. For example, with this route:</p>

<p>params<span style="font-family: DejaVu Sans;">将也会包含来自查询字符串的任何参数。例如，使用这个</span>route<span style="font-family: DejaVu Sans;">：</span></p>

<p>match &lsquo;:controller/:action/:id&rsquo;</p>

<p>An incoming path of <tt>/photos/show/1?user_id=2</tt> will be dispatched to the <tt>show</tt> action of the <tt>Photos</tt> controller. <tt>params</tt> will be <tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt>.</p>

<p><span style="font-family: DejaVu Sans;">一个传入路径</span><tt>/photos/show/1?user_id=2</tt><span style="font-family: DejaVu Sans;"><tt>将会被调度给</tt><tt></tt></span><tt>Photos</tt><tt> </tt><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>将会是</tt></span><tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<h4><a name="defining-defaults"></a>3.5 Defining Defaults<span style="font-family: WenQuanYi Micro Hei;">默认定义</span></h4>


<p>You do not need to explicitly use the <tt>:controller</tt> and <tt>:action</tt> symbols within a route. You can supply them as defaults:</p>

<p><span style="font-family: DejaVu Sans;">你不需要准确的使用</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>字符在一个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>中。你可以默认的提供他们：</tt></span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;</p>

<p>With this route, Rails will match an incoming path of <tt>/photos/12</tt> to the <tt>show</tt> action of <tt>PhotosController</tt>.</p>

<p><span style="font-family: DejaVu Sans;">通过这个</span>route<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">将会匹配一个传入路径</span><tt>/photos/12</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>You can also define other defaults in a route by supplying a hash for the <tt>:defaults</tt> option. This even applies to parameters that you do not specify as dynamic segments. For example:</p>

<p><span style="font-family: DejaVu Sans;"><tt>你同样也可以在</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>中定义其他的默认（设置）通过提供一个</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典给</tt><tt></tt></span><tt>:defaults</tt><span style="font-family: DejaVu Sans;"><tt>选项。这甚至会应用于不需要指定参数作为动态分割。例如：</tt></span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;, :defaults =&gt; { :format =&gt; &lsquo;jpg&rsquo; }</p>

<p>Rails would match <tt>photos/12</tt> to the <tt>show</tt> action of <tt>PhotosController</tt>, and set <tt>params[:format]</tt> to <tt>&ldquo;jpg&rdquo;</tt>.</p>

<p>Rails<span style="font-family: DejaVu Sans;">将会匹配</span><tt>photos/12</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，并且设置</tt></span><tt>params[:format]</tt><tt> </tt><tt>to</tt><tt> </tt><tt>&ldquo;jpg&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<h4><a name="naming-routes"></a>3.6 Naming Routes</h4>


<p>You can specify a name for any route using the <tt>:as</tt> option.</p>

<p><span style="font-family: DejaVu Sans;">你可以指定一个</span>name<span style="font-family: DejaVu Sans;">给任何</span>route<span style="font-family: DejaVu Sans;">使用</span>:as<span style="font-family: DejaVu Sans;">选项。</span></p>

<p>match &lsquo;exit&rsquo; =&gt; &lsquo;sessions#destroy&rsquo;, :as =&gt; :logout</p>

<p>This will create <tt>logout_path</tt> and <tt>logout_url</tt> as named helpers in your application. Calling <tt>logout_path</tt> will return <tt>/exit</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>这里将会在应用程序中创建</tt><tt></tt></span><tt>logout_path</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>logout_url</tt><span style="font-family: DejaVu Sans;"><tt>作为（刚才）命名的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。调用</tt></span><tt>logout_path</tt><span style="font-family: DejaVu Sans;"><tt>将会返回</tt></span><tt>/exit</tt></p>

<h4><a name="http-verb-constraints"></a>3.7 HTTP Verb Constraints <span style="font-family: WenQuanYi Micro Hei;">限定</span>HTTP <span style="font-family: WenQuanYi Micro Hei;">动作</span></h4>


<p>You can use the <tt>:via</tt> option to constrain the request to one or more HTTP methods:</p>

<p><span style="font-family: DejaVu Sans;">你可以使用</span>:via<span style="font-family: DejaVu Sans;">选项来限定请求一个或多个（</span>HTTP<span style="font-family: DejaVu Sans;">）方法：</span></p>

<p>match &lsquo;photos/show&rsquo; =&gt; &lsquo;photos#show&rsquo;, :via =&gt; :get</p>

<p>There is a shorthand version of this as well:</p>

<p><span style="font-family: DejaVu Sans;">这里的短操作版本同样也是可以的：</span></p>

<p>get &lsquo;photos/show&rsquo;</p>

<p>You can also permit more than one verb to a single route:</p>

<p><span style="font-family: DejaVu Sans;">你也可以运行超过一个动作到一个单独的</span>route<span style="font-family: DejaVu Sans;">：</span></p>

<p>match &lsquo;photos/show&rsquo; =&gt; &lsquo;photos#show&rsquo;, :via =&gt; [:get, :post]</p>

<h4><a name="segment-constraints"></a>3.8 Segment Constraints<span style="font-family: WenQuanYi Micro Hei;">分割限制</span></h4>


<p>You can use the <tt>:constraints</tt> option to enforce a format for a dynamic segment:</p>

<p><span style="font-family: DejaVu Sans;">你可以使用</span>:constraints<span style="font-family: DejaVu Sans;">选项来强制一个动态分割的格式：</span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;, :constraints =&gt; { :id =&gt; /[A-Z]\d{5}/ }</p>

<p>This route would match paths such as <tt>/photos/A12345</tt>. You can more succinctly express the same route this way:</p>

<p><span style="font-family: DejaVu Sans;">这个</span>route<span style="font-family: DejaVu Sans;">将会匹配像这样的路径</span><tt>/photos/A12345</tt><span style="font-family: DejaVu Sans;"><tt>。你可以使用这样的方式来更加简洁的表达相同的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;, :id =&gt; /[A-Z]\d{5}/</p>

<p><tt>:constraints</tt> takes regular expressions with the restriction that regexp anchors can’t be used. For example, the following route will not work:</p>

<p><tt>:constraints</tt><span style="font-family: DejaVu Sans;"><tt>获取的正则表达式，其限定了正则表达式的锚不能被使用。例如下面的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>将不会工作（使用了</tt></span><tt>^</tt><span style="font-family: DejaVu Sans;"><tt>锚指定从这里开始）：</tt></span></p>

<p>match &lsquo;/:id&rsquo; =&gt; &lsquo;posts#show&rsquo;, :constraints =&gt; {:id =&gt; /^\d/}</p>

<p>However, note that you don’t need to use anchors because all routes are anchored at the start.</p>

<p><span style="font-family: DejaVu Sans;">然而，注意你不需要使用锚因为所有的</span>routes<span style="font-family: DejaVu Sans;">锚定在开始位置。</span></p>

<p>For example, the following routes would allow for <tt>posts</tt> with <tt>to_param</tt> values like <tt>1-hello-world</tt> that always begin with a number and <tt>users</tt> with <tt>to_param</tt> values like <tt>david</tt> that never begin with a number to share the root namespace:</p>

<p><span style="font-family: DejaVu Sans;">例如，下面的</span>route<span style="font-family: DejaVu Sans;">将会允许</span>posts<span style="font-family: DejaVu Sans;">及</span><tt>to_param</tt><span style="font-family: DejaVu Sans;"><tt>像</tt><tt></tt></span><tt>1-hello-world</tt><span style="font-family: DejaVu Sans;"><tt>的值，其总是以一个数字和</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>to_param</tt><span style="font-family: DejaVu Sans;"><tt>的值就像</tt></span><tt>david</tt><span style="font-family: DejaVu Sans;"><tt>）它从不以数字开始来</tt></span><tt>share</tt><span style="font-family: DejaVu Sans;"><tt>根名称空间。</tt></span></p>

<p>match &lsquo;/:id&rsquo; =&gt; &lsquo;posts#show&rsquo;, :constraints =&gt; { :id =&gt; /\d.+/ }</p>

<p>match &lsquo;/:username&rsquo; =&gt; &lsquo;users#show&rsquo;</p>

<h4><a name="request-based-constraints"></a>3.9 Request-Based Constraints Request-Based<span style="font-family: WenQuanYi Micro Hei;">的限制</span></h4>


<p>You can also constrain a route based on any method on the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/action_controller_overview.html#the-request-object">Request</a></span></span> object that returns a <tt>String</tt>.</p>

<p>You specify a request-based constraint the same way that you specify a segment constraint:</p>

<p><span style="font-family: DejaVu Sans;">你也可以限制一个</span>route <span style="font-family: DejaVu Sans;">基于任何方法在</span>Request<span style="font-family: DejaVu Sans;">对象时它都会返回一个</span>String<span style="font-family: DejaVu Sans;">。</span></p>

<p><span style="font-family: DejaVu Sans;">你指定一个</span>request-basedcontraint<span style="font-family: DejaVu Sans;">和你指定一个</span>segment constaint<span style="font-family: DejaVu Sans;">是一样的。</span></p>

<p>match &ldquo;photos&rdquo;, :constraints =&gt; {:subdomain =&gt; &ldquo;admin&rdquo;}</p>

<p>You can also specify constraints in a block form:</p>

<p><span style="font-family: DejaVu Sans;">你也可以指定限制在一个</span>block form<span style="font-family: DejaVu Sans;">中：</span></p>

<p>namespace :admin do</p>

<p>constraints :subdomain =&gt; &ldquo;admin&rdquo; do</p>

<p>resources :photos</p>

<p>end</p>

<p>end</p>

<h4><a name="advanced-constraints"></a>3.10 Advanced Constraints<span style="font-family: WenQuanYi Micro Hei;">高级</span>constraints</h4>


<p>If you have a more advanced constraint, you can provide an object that responds to <tt>matches?</tt> that Rails should use. Let’s say you wanted to route all users on a blacklist to the <tt>BlacklistController</tt>. You could do:</p>

<p><span style="font-family: DejaVu Sans;">如果你有一个更高级的</span>contraint<span style="font-family: DejaVu Sans;">，你可以提供一个对象，</span>Rails<span style="font-family: DejaVu Sans;">将会使用</span>matches?<span style="font-family: DejaVu Sans;">回应这个对象。</span></p>

<p><span style="font-family: DejaVu Sans;">让我来告诉你要想</span>route<span style="font-family: DejaVu Sans;">所有的用户在一个黑名单中匹配（通过</span><tt>BlacklistController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><code>matches?</code><span style="font-family: DejaVu Sans;"><code>方法）。你应该：</code></span></p>

<p>class BlacklistConstraint</p>

<p>def initialize</p>

<p>@ips = Blacklist.retrieve_ips</p>

<p>end</p>

<p>&nbsp;</p>

<p>def matches?(request)</p>

<p>@ips.include?(request.remote_ip)</p>

<p>end</p>

<p>end</p>

<p>&nbsp;</p>

<p>TwitterClone::Application.routes.draw do</p>

<p>match &ldquo;*path&rdquo; =&gt; &ldquo;blacklist#index&rdquo;,</p>

<p>:constraints =&gt; BlacklistConstraint.new</p>

<p>end</p>

<h4><a name="route-globbing"></a>3.11 Route Globbing</h4>


<p>Route globbing is a way to specify that a particular parameter should be matched to all the remaining parts of a route. For example</p>

<p>Route globbing<span style="font-family: DejaVu Sans;">是一种方式来指定特定的</span>paramerter<span style="font-family: DejaVu Sans;">应该被一个</span>route<span style="font-family: DejaVu Sans;">的其余的所有部分匹配。例如</span></p>

<p>match &lsquo;photos/*other&rsquo; =&gt; &lsquo;photos#unknown&rsquo;</p>

<p>This route would match <tt>photos/12</tt> or <tt>/photos/long/path/to/12</tt>, setting <tt>params[:other]</tt> to <tt>&ldquo;12&rdquo;</tt> or <tt>&ldquo;long/path/to/12&rdquo;</tt>.</p>

<p><span style="font-family: DejaVu Sans;">这个</span>route<span style="font-family: DejaVu Sans;">将会匹配</span><tt>photos/12</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>/photos/long/path/to/12</tt><span style="font-family: DejaVu Sans;"><tt>，设置</tt></span><tt>params[:other]</tt><tt> </tt><tt>to</tt><tt> </tt><tt>&ldquo;12&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>或</tt></span><tt>&ldquo;long/path/to/12&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>Wildcard segments can occur anywhere in a route. For example,</p>

<p><span style="font-family: DejaVu Sans;">通配符分割可以发生在一个</span>route<span style="font-family: DejaVu Sans;">的任何地方。例如，</span></p>

<p>match &lsquo;books/*section/:title&rsquo; =&gt; &lsquo;books#show&rsquo;</p>

<p>would match <tt>books/some/section/last-words-a-memoir</tt> with <tt>params[:section]</tt> equals <tt>&ldquo;some/section&rdquo;</tt>, and <tt>params[:title]</tt> equals <tt>&ldquo;last-words-a-memoir&rdquo;</tt>.</p>

<p><span style="font-family: DejaVu Sans;">将会匹配</span><tt>books/some/section/last-words-a-memoir</tt><span style="font-family: DejaVu Sans;"><tt>为</tt></span><tt>params[:section]</tt><span style="font-family: DejaVu Sans;"><tt>等于</tt></span><tt>&ldquo;some/section&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>，以及</tt></span><tt>params[:title]</tt><span style="font-family: DejaVu Sans;"><tt>相当于</tt></span><tt>&ldquo;last-words-a-memoir&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>Technically a route can have even more than one wildcard segment. The matcher assigns segments to parameters in an intuitive way. For example,</p>

<p><span style="font-family: DejaVu Sans;">从技术上讲一个</span>route<span style="font-family: DejaVu Sans;">可以有甚至超过一个通配符的分割。</span>matcher<span style="font-family: DejaVu Sans;">分配</span>segments<span style="font-family: DejaVu Sans;">到参数是一个直观的方式。例如，</span></p>

<p>match &lsquo;<em>a/foo/</em>b&rsquo; =&gt; &lsquo;test#index&rsquo; # <tt>*a</tt><span style="font-family: DejaVu Sans;"><tt>这一部分通配为</tt></span><tt>a</tt></p>

<p>would match <tt>zoo/woo/foo/bar/baz</tt> with <tt>params[:a]</tt> equals <tt>&ldquo;zoo/woo&rdquo;</tt>, and <tt>params[:b]</tt> equals <tt>&ldquo;bar/baz&rdquo;</tt>.</p>

<p>Starting from Rails 3.1, wildcard routes will always match the optional format segment by default. For example if you have this route:</p>

<p><code>match</code><code> </code><code>&lsquo;*pages&rsquo;</code> <code>=&gt;</code><code> </code><code>&lsquo;pages#show&rsquo;</code></p>

<p><code>By</code><code> </code><code>requesting</code><code> </code><tt>&ldquo;/foo/bar.json&rdquo;</tt><code>,</code><code> </code><code>your</code><code> </code><tt>params[:pages]</tt><code> </code><code>will</code><code> </code><code>be</code><code> </code><code>equals</code><code> </code><code>to</code><code> </code><tt>&ldquo;foo/bar&rdquo;</tt><code> </code><code>with</code><code> </code><code>the</code><code> </code><code>request</code><code> </code><code>format</code><code> </code><code>of</code><code> </code><code>JSON.</code><code> </code><code>If</code><code> </code><code>you</code><code> </code><code>want</code><code> </code><code>the</code><code> </code><code>old</code><code> </code><code>3.0.x</code><code> </code><code>behavior</code><code> </code><code>back,</code><code> </code><code>you</code><code> </code><code>could</code><code> </code><code>supply</code><code> </code><tt>:format</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><code> </code><code>like</code><code> </code><code>this:</code></p>

<p><code>match</code><code> </code><code>&lsquo;*pages&rsquo;</code><code> </code><code>=&gt;</code><code> </code><code>&lsquo;pages#show&rsquo;,</code><code> </code><code>:format</code><code> </code><code>=&gt;</code><code> </code><code>false</code></p>

<p><code>If</code><code> </code><code>you</code><code> </code><code>want</code><code> </code><code>to</code><code> </code><code>make</code><code> </code><code>the</code><code> </code><code>format</code><code> </code><code>segment</code><code> </code><code>mandatory,</code><code> </code><code>so</code><code> </code><code>it</code><code> </code><code>cannot</code><code> </code><code>be</code><code> </code><code>omitted,</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>supply</code><code> </code><tt>:format</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt><code> </code><code>like</code><code> </code><code>this:</code></p>

<p><code>match</code><code> </code><code>&lsquo;*pages&rsquo;</code><code> </code><code>=&gt;</code><code> </code><code>&lsquo;pages#show&rsquo;,</code><code> </code><code>:format</code><code> </code><code>=&gt;</code><code> </code><code>true</code></p>

<h4><a name="redirection"></a><code>3.12</code><code> </code><code>Redirection</code></h4>


<p>You can redirect any path to another path using the <tt>redirect</tt> helper in your router:</p>

<p><span style="font-family: DejaVu Sans;"><code>你可以重定向任何</code></span><code>path</code><span style="font-family: DejaVu Sans;"><code>到另一个</code></span><code>path</code><span style="font-family: DejaVu Sans;"><code>使用</code></span><code>redirect</code><code> </code><code>helper</code><span style="font-family: DejaVu Sans;"><code>在你的</code></span><code>router</code><span style="font-family: DejaVu Sans;"><code>：</code></span></p>

<p>match &ldquo;/stories&rdquo; =&gt; redirect(&ldquo;/posts&rdquo;)</p>

<p>You can also reuse dynamic segments from the match in the path to redirect to:</p>

<p>match &ldquo;/stories/:name&rdquo; =&gt; redirect(&ldquo;/posts/%{name}&rdquo;)</p>

<p>You can also provide a block to redirect, which receives the params and (optionally) the request object:</p>

<p>match &ldquo;/stories/:name&rdquo; =&gt; redirect {|params| &ldquo;/posts/#{params[:name].pluralize}&rdquo; }</p>

<p>match &ldquo;/stories&rdquo; =&gt; redirect {|p, req| &ldquo;/posts/#{req.subdomain}&rdquo; }</p>

<p>In all of these cases, if you don’t provide the leading host (<tt><a href="http://www.example.com">http://www.example.com</a></tt>), Rails will take those details from the current request.</p>

<h4><a name="routing-to-rack-applications"></a>3.13 Routing to Rack Applications</h4>


<p>Instead of a String, like <tt>&ldquo;posts#index&rdquo;</tt>, which corresponds to the <tt>index</tt> action in the <tt>PostsController</tt>, you can specify any <a href="http://guides.rubyonrails.org/rails_on_rack.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rack</span></span><span style="color: #000080;"><span style="text-decoration: underline;">application</span></span></a> as the endpoint for a matcher.</p>

<p>match &ldquo;/application.js&rdquo; =&gt; Sprockets</p>

<p>As long as <tt>Sprockets</tt> responds to <tt>call</tt> and returns a <tt>[status,</tt><tt> </tt><tt>headers,</tt><tt> </tt><tt>body]</tt>, the router won’t know the difference between the Rack application and an action.</p>

<p>For the curious, <tt>&ldquo;posts#index&rdquo;</tt> actually expands out to <tt>PostsController.action(:index)</tt>, which returns a valid Rack application.</p>

<h4><a name="using-root"></a>3.14 Using <tt>root</tt></h4>


<p>You can specify what Rails should route <tt>&ldquo;/&rdquo;</tt> to with the <tt>root</tt> method:</p>

<p>root :to =&gt; &lsquo;pages#main&rsquo;</p>

<p><strong>You</strong><strong> </strong><strong>should</strong><strong> </strong><strong>put</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>root</strong></tt><strong> </strong><strong>route</strong><strong> </strong><strong>at</strong><strong> </strong><strong>the</strong><strong> </strong><strong>top</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>file</strong>, because it is the most popular route and should be matched first. You also need to delete the <tt>public/index.html</tt> file for the root route to take effect.</p>

<h3><a name="customizing-resourceful-routes"></a>4 Customizing Resourceful Routes</h3>


<p>While the default routes and helpers generated by <tt>resources</tt><tt> </tt><tt>:posts</tt> will usually serve you well, you may want to customize them in some way. Rails allows you to customize virtually any generic part of the resourceful helpers.</p>

<h4><a name="specifying-a-controller-to-use"></a>4.1 Specifying a Controller to Use</h4>


<p>The <tt>:controller</tt> option lets you explicitly specify a controller to use for the resource. For example:</p>

<p>resources :photos, :controller =&gt; &ldquo;images&rdquo;</p>

<p>will recognize incoming paths beginning with <tt>/photos</tt> but route to the <tt>Images</tt> controller:</p>

<table width="402" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="102" /> <col width="54" /> <col width="140" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="140">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="140">photos_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="140">new_photo_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="140">photos_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="140">photo_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="140">edit_photo_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="140">photo_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="140">photo_path(:id)</td>
</tr>
</tbody>
</table>


<p>Use <tt>photos_path</tt>, <tt>new_photo_path</tt>, etc. to generate paths for this resource.</p>

<h4><a name="specifying-constraints"></a>4.2 Specifying Constraints</h4>


<p>You can use the <tt>:constraints</tt> option to specify a required format on the implicit <tt>id</tt>. For example:</p>

<p>This declaration constraints the <tt>:id</tt> parameter to match the supplied regular expression. So, in this case, the router would no longer match <tt>/photos/1</tt> to this route. Instead, <tt>/photos/RR27</tt> would match.</p>

<p>You can specify a single constraint to apply to a number of routes by using the block form:</p>

<p>constraints(:id =&gt; /[A-Z][A-Z][0-9]+/) do</p>

<p>resources :photos</p>

<p>resources :accounts</p>

<p>end</p>

<p>Of course, you can use the more advanced constraints available in non-resourceful routes in this context.</p>

<p>&nbsp;</p>

<p>By default the <tt>:id</tt> parameter doesn’t accept dots – this is because the dot is used as a separator for formatted routes. If you need to use a dot within an <tt>:id</tt> add a constraint which overrides this – for example <tt>:id</tt> =&gt; /[^\/]+/ allows anything except a slash.</p>

<h4><a name="overriding-the-named-helpers"></a>4.3 Overriding the Named Helpers</h4>


<p>The <tt>:as</tt> option lets you override the normal naming for the named route helpers. For example:</p>

<p>resources :photos, :as =&gt; &ldquo;images&rdquo;</p>

<p>will recognize incoming paths beginning with <tt>/photos</tt> and route the requests to <tt>PhotosController</tt>, but use the value of the :as option to name the helpers.</p>

<table width="398" cellspacing="0" cellpadding="2"><colgroup><col width="83" /> <col width="102" /> <col width="54" /> <col width="143" /> </colgroup>
<tbody>
<tr>
<th width="83">HTTP verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="143">named helper</th>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="143">images_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="143">new_image_path</td>
</tr>
<tr>
<td width="83">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="143">images_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="143">image_path(:id)</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="143">edit_image_path(:id)</td>
</tr>
<tr>
<td width="83">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="143">image_path(:id)</td>
</tr>
<tr>
<td width="83">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="143">image_path(:id)</td>
</tr>
</tbody>
</table>


<h4><a name="overriding-the-new-and-edit-segments"></a> 4.4 Overriding the <tt>new</tt> and <tt>edit</tt> Segments<span style="font-family: WenQuanYi Micro Hei;">重写</span>new<span style="font-family: WenQuanYi Micro Hei;">和</span>edit Segments</h4>


<p>The <tt>:path_names</tt> option lets you override the automatically-generated “new” and “edit” segments in paths:</p>

<p>resources :photos, :path_names =&gt; { :new =&gt; &lsquo;make&rsquo;, :edit =&gt; &lsquo;change&rsquo; }</p>

<p>This would cause the routing to recognize paths such as</p>

<p><code>/photos/make</code></p>

<p><code>/photos/1/change</code></p>

<p>The actual action names aren’t changed by this option. The two paths shown would still route to the <tt>new</tt> and <tt>edit</tt> actions.</p>

<p>&nbsp;</p>

<p>If you find yourself wanting to change this option uniformly for all of your routes, you can use a scope.</p>

<p>scope :path_names =&gt; { :new =&gt; &ldquo;make&rdquo; } do</p>

<h1>rest of your routes</h1>

<p>end</p>

<h4><a name="prefixing-the-named-route-helpers"></a>4.5 Prefixing the Named Route Helpers</h4>


<p>You can use the <tt>:as</tt> option to prefix the named route helpers that Rails generates for a route. Use this option to prevent name collisions between routes using a path scope</p>

<p>scope &ldquo;admin&rdquo; do</p>

<p>resources :photos, :as =&gt; &ldquo;admin_photos&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>resources :photos</p>

<p>This will provide route helpers such as <tt>admin_photos_path</tt>, <tt>new_admin_photo_path</tt> etc.<span style="font-family: DejaVu Sans;">这将会提供比如 </span><tt>admin_photos_path</tt>, <tt>new_admin_photo_path</tt><span style="font-family: DejaVu Sans;"><tt>等这样的</tt></span><tt>route helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>To prefix a group of route helpers, use <tt>:as</tt> with <tt>scope</tt>:</p>

<p>scope &ldquo;admin&rdquo;, :as =&gt; &ldquo;admin&rdquo; do</p>

<p>resources :photos, :accounts</p>

<p>end</p>

<p>&nbsp;</p>

<p>resources :photos, :accounts</p>

<p>This will generate routes such as <tt>admin_photos_path</tt> and <tt>admin_accounts_path</tt> which map to <tt>/admin/photos</tt> and <tt>/admin/accounts</tt> respectively.</p>

<p>The <tt><strong>namespace</strong></tt> scope will automatically add <tt>:as</tt> as well as <tt>:module</tt> and <tt>:path</tt> prefixes.</p>

<p>You can prefix routes with a named parameter also:</p>

<p>scope &ldquo;:username&rdquo; do</p>

<p>resources :posts</p>

<p>end</p>

<p>This will provide you with URLs such as <tt>/bob/posts/1</tt> and will allow you to reference the <tt>username</tt> part of the path as <tt>params[:username]</tt> in controllers, helpers and views.</p>

<h4><a name="restricting-the-routes-created"></a>4.6 Restricting the Routes Created<span style="font-family: WenQuanYi Micro Hei;">限制</span>routes<span style="font-family: WenQuanYi Micro Hei;">被创建</span></h4>


<p>By default, Rails creates routes for the seven default actions (index, show, new, create, edit, update, and destroy) for every RESTful route in your application. You can use the <tt>:only</tt> and <tt>:except</tt> options to fine-tune this behavior. The <tt>:only</tt> option tells Rails to create only the specified routes:</p>

<p><span style="font-family: DejaVu Sans;">默认的，</span>Rails<span style="font-family: DejaVu Sans;">按照七种默认的</span>action<span style="font-family: DejaVu Sans;">（</span>index, show, new, create, edit, update, and destroy<span style="font-family: DejaVu Sans;">）为你应用程序中的每个</span>RESTful route<span style="font-family: DejaVu Sans;">创建</span>routes<span style="font-family: DejaVu Sans;">。</span></p>

<p>resources :photos, :only =&gt; [:index, :show]</p>

<p>Now, a <tt>GET</tt> request to <tt>/photos</tt> would succeed, but a <tt>POST</tt> request to <tt>/photos</tt> (which would ordinarily be routed to the <tt>create</tt> action) will fail.</p>

<p><span style="font-family: DejaVu Sans;">现在一个</span>GET<span style="font-family: DejaVu Sans;">请求到</span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>将会成功，但是一个</tt></span><tt>POST</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>（其按理将会</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>create action</tt><span style="font-family: DejaVu Sans;"><tt>）将会失败。</tt></span></p>

<p>The <tt>:except</tt> option specifies a route or list of routes that Rails should <em>not</em> create:</p>

<p>resources :photos, :except =&gt; :destroy</p>

<p>In this case, Rails will create all of the normal routes except the route for <tt>destroy</tt> (a <tt>DELETE</tt> request to <tt>/photos/:id</tt>).</p>

<p>If your application has many RESTful routes, using <tt>:only</tt> and <tt>:except</tt> to generate only the routes that you actually need can cut down on memory use and speed up the routing process.</p>

<p><span style="font-family: DejaVu Sans;">如果你的应用程序中有很多 </span>RESTful routes<span style="font-family: DejaVu Sans;">，使用</span><tt>:only</tt> and <tt>:except</tt><span style="font-family: DejaVu Sans;"><tt>来生成仅仅你实际需要的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>能够消减内存使用和提速</tt></span><tt>routing </tt><span style="font-family: DejaVu Sans;"><tt>进程。</tt></span></p>

<h4><a name="translated-paths"></a>4.7 Translated Paths<span style="font-family: WenQuanYi Micro Hei;">翻译路径</span></h4>


<p>Using <tt>scope</tt>, we can alter path names generated by resources:</p>

<p><span style="font-family: DejaVu Sans;">使用</span>scope<span style="font-family: DejaVu Sans;">，我们可以别名</span>resources<span style="font-family: DejaVu Sans;">生成的路径</span>name<span style="font-family: DejaVu Sans;">：</span></p>

<p>scope(:path_names =&gt; { :new =&gt; &ldquo;neu&rdquo;, :edit =&gt; &ldquo;bearbeiten&rdquo; }) do</p>

<p>resources :categories, :path =&gt; &ldquo;kategorien&rdquo;</p>

<p>end</p>

<p><tt>Rails now creates routes to the CategoriesController.</tt></p>

<table width="482" cellspacing="0" cellpadding="2"><colgroup><col width="83" /> <col width="170" /> <col width="54" /> <col width="159" /> </colgroup>
<tbody>
<tr>
<th width="83">HTTP verb</th>
<th width="170">Path</th>
<th width="54">action</th>
<th width="159">named helper</th>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien</td>
<td width="54">index</td>
<td width="159">categories_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/neu</td>
<td width="54">new</td>
<td width="159">new_category_path</td>
</tr>
<tr>
<td width="83">POST</td>
<td width="170">/kategorien</td>
<td width="54">create</td>
<td width="159">categories_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/:id</td>
<td width="54">show</td>
<td width="159">category_path(:id)</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/:id/bearbeiten</td>
<td width="54">edit</td>
<td width="159">edit_category_path(:id)</td>
</tr>
<tr>
<td width="83">PUT</td>
<td width="170">/kategorien/:id</td>
<td width="54">update</td>
<td width="159">category_path(:id)</td>
</tr>
<tr>
<td width="83">DELETE</td>
<td width="170">/kategorien/:id</td>
<td width="54">destroy</td>
<td width="159">category_path(:id)</td>
</tr>
</tbody>
</table>


<h4><a name="overriding-the-singular-form"></a><tt>4.8 Overriding the Singular Form</tt></h4>


<p>If you want to define the singular form of a resource, you should add additional rules to the <tt>Inflector</tt>.</p>

<p><span style="font-family: DejaVu Sans;"><tt>如果你想定义一个单数形式的</tt></span><tt>resource</tt><span style="font-family: DejaVu Sans;"><tt>，你应该添加补充的</tt></span><tt>rules</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>Inflector</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>ActiveSupport::Inflector.inflections do |inflect|</p>

<p>inflect.irregular &lsquo;tooth&rsquo;, &lsquo;teeth&rsquo;</p>

<p>end</p>

<h4><a name="nested-names"></a>4.9 Using <tt>:as</tt> in Nested Resources<span style="font-family: WenQuanYi Micro Hei;">在嵌套</span>resources<span style="font-family: WenQuanYi Micro Hei;">中使用</span>:as</h4>


<p>The <tt>:as</tt> option overrides the automatically-generated name for the resource in nested route helpers. For example,</p>

<p>:as<span style="font-family: DejaVu Sans;">选项覆盖嵌套的</span>resource<span style="font-family: DejaVu Sans;">自动生成的</span>route<span style="font-family: DejaVu Sans;">的名字。例如：</span></p>

<p>resources :magazines do</p>

<p>resources :ads, :as =&gt; &lsquo;periodical_ads&rsquo;</p>

<p>end</p>

<p>This will create routing helpers such as <tt>magazine_periodical_ads_url</tt> and <tt>edit_magazine_periodical_ad_path</tt>.</p>

<h3><a name="inspecting-and-testing-routes"></a>5 Inspecting and Testing Routes<span style="font-family: WenQuanYi Micro Hei;">检查和测试</span>routes</h3>


<p>Rails offers facilities for inspecting and testing your routes.</p>

<p>Rails<span style="font-family: DejaVu Sans;">提供设施来检查和测试你的</span>routes<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="seeing-existing-routes-with-rake"></a>5.1 Seeing Existing Routes with <tt>rake</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>使用</tt></span><tt>rake</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>来查看存在的</tt></span><tt>routes</tt></h4>


<p>If you want a complete list of all of the available routes in your application, run <tt> rake routes</tt> command. This will print all of your routes, in the same order that they appear in <tt>routes.rb</tt>. For each route, you’ll see:</p>

<p><span style="font-family: DejaVu Sans;">如果你需要一个你应用程序中可用的完整的</span>list<span style="font-family: DejaVu Sans;">，运行 </span><tt>rake routes</tt><span style="font-family: DejaVu Sans;"><tt>命令。这将会打印所有你的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>（到终端），与</tt></span><tt>routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>中出现的顺序一样。对于每个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>，你将会看到：</tt></span></p>

<ul>
    <li>The route name (if any)</li>
    <li>The HTTP verb used (if the route doesn’t respond to all verbs)</li>
    <li>The URL pattern to match <span style="font-family: DejaVu Sans;">匹配的</span>URL<span style="font-family: DejaVu Sans;">模式</span></li>
    <li>The routing parameters for the route</li>
</ul>


<p>For example, here’s a small section of the <tt>rake routes</tt> output for a RESTful route:</p>

<pre>          users GET  /users          {:controller=&gt;"users", :action=&gt;"index"}
formatted_users GET  /users.:format  {:controller=&gt;"users", :action=&gt;"index"}
                POST /users          {:controller=&gt;"users", :action=&gt;"create"}
                POST /users.:format  {:controller=&gt;"users", :action=&gt;"create"}</pre>


<p>You may restrict the listing to the routes that map to a particular controller setting the <tt>CONTROLLER</tt> environment variable:</p>

<p><span style="font-family: DejaVu Sans;">你可以限制列出的</span>routes<span style="font-family: DejaVu Sans;">映射到一个别的</span>controller<span style="font-family: DejaVu Sans;">设置 </span><tt>CONTROLLER</tt><span style="font-family: DejaVu Sans;"><tt>环境变量：</tt></span></p>

<p>$ CONTROLLER=users rake routes</p>

<p>You’ll find that the output from <tt>rake routes</tt> is much more readable if you widen your terminal window until the output lines don’t wrap.</p>

<p><span style="font-family: DejaVu Sans;">你会发现如果你扩大到你的终端不自动换行，<tt>来自</tt></span><tt>rake routes</tt><span style="font-family: DejaVu Sans;"><tt>会更具可读性。</tt></span></p>

<h4><a name="testing-routes"></a>5.2 Testing Routes</h4>


<p>Routes should be included in your testing strategy<span style="font-family: DejaVu Sans;">策略 </span>(just like the rest of your application). Rails offers three <a href="http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html">built-in assertions</a> designed to make testing routes simpler:</p>

<ul>
    <li><tt>assert_generates</tt></li>
    <li><tt>assert_recognizes</tt></li>
    <li><tt>assert_routing</tt></li>
</ul>


<h5><a name="the-assert_generates-assertion"></a>5.2.1 The <tt>assert_generates</tt> Assertion</h5>


<p><tt>assert_generates</tt> asserts that a particular set of options generate a particular path and can be used with default routes or custom routes.</p>

<p><tt>assert_generates</tt><span style="font-family: DejaVu Sans;"><tt>断言是一个特别的设置选项生成一个特别的路径并且可以与默认的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>和定制的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>assert_generates &ldquo;/photos/1&rdquo;, { :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;show&rdquo;, :id =&gt; &ldquo;1&rdquo; }</p>

<p>assert_generates &ldquo;/about&rdquo;, :controller =&gt; &ldquo;pages&rdquo;, :action =&gt; &ldquo;about&rdquo;</p>

<h5><a name="the-assert_recognizes-assertion"></a>5.2.2 The <tt>assert_recognizes</tt> Assertion</h5>


<p><tt>assert_recognizes</tt> is the inverse of <tt> </tt><tt>assert_generates</tt>. It asserts that a given path is recognized and routes it to a particular spot in your application.</p>

<p><a name="result_box2"></a><tt>assert_recognizes</tt><span style="font-family: DejaVu Sans;"><tt>是 </tt></span><tt>assert_generates</tt><span style="font-family: DejaVu Sans;"><tt>的逆。它断言</tt>一个给定的</span>path<span style="font-family: DejaVu Sans;">是被承认的并</span>route<span style="font-family: DejaVu Sans;">到应用程序中的特定地点。</span></p>

<p><tt>assert_recognizes({ :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;show&rdquo;, :id =&gt; &ldquo;1&rdquo; }, &ldquo;/photos/1&rdquo;)</tt></p>

<p>You can supply a <tt>:method</tt> argument to specify the HTTP verb:</p>

<p><span style="font-family: DejaVu Sans;">你可以提供一个</span>:method<span style="font-family: DejaVu Sans;">参数来指定</span>HTTP verbe<span style="font-family: DejaVu Sans;">：</span></p>

<p>assert_recognizes({ :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;create&rdquo; }, { :path =&gt; &ldquo;photos&rdquo;, :method =&gt; :post })</p>

<p>assert_recognizes({ :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;create&rdquo; }, { :path =&gt; &ldquo;photos&rdquo;, :method =&gt; :post })</p>

<h5><a name="the-assert_routing-assertion"></a>5.2.3 The <tt>assert_routing</tt> Assertion</h5>


<p>The assertion checks the route both ways: it tests that the path generates the options, and that the options generate the path. Thus, it combines the functions of <tt> assert_generates and </tt><tt>assert_recognizes</tt>.</p>

<p><span style="font-family: DejaVu Sans;">断言 </span><tt>assert_routing</tt><span style="font-family: DejaVu Sans;"><tt>检测</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>两方面：它测试访问路径生成选项，并且测试这个选项生成的路径。这样，它联合了 </tt></span><tt>assert_generates and assert_recognizes</tt><span style="font-family: DejaVu Sans;"><tt>的功能。</tt></span></p>

<p>assert_routing({ :path =&gt; &ldquo;photos&rdquo;, :method =&gt; :post }, { :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;create&rdquo; })</p>

<p>标签： <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/http/">http</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/route/">route</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a> <a href="http://jhjguxin.hwcrazy.com/tag/translate/">translate</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[guides rubyonrails Migrations (EN and CN)]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/11/21/guides-rubyonrails-migrations-en-and-cn/"/>
    <updated>2011-11-21T02:48:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/11/21/guides-rubyonrails-migrations-en-and-cn</id>
    <content type="html"><![CDATA[<h2>guides rubyonrails Migrations (EN and CN)</h2>

<h2>Migrations</h2>


<p>Migrations are a convenient way for you to alter<span style="font-family: DejaVu Sans;">移动</span>your database in a structured and organized manner.Migrations<span style="font-family: DejaVu Sans;">是一种很便捷的方法让你能够以一种结构化的和有组织的方式来迁移你的数据库。</span>You could edit fragments of SQL by hand but you would then be responsible for telling other developers that they need to go and run them.<span style="font-family: DejaVu Sans;">你可以手动编辑</span>SQL<span style="font-family: DejaVu Sans;">片段，而且你有责任把这些告诉其他的开发人员，因为他们需要开发和使用它们。</span>You’d also have to keep track of which changes need to be run against the production machines next time you deploy.<span style="font-family: DejaVu Sans;">你也可以跟踪对你部署的代码在接下来的</span>production<span style="font-family: DejaVu Sans;">机器（将会）发生的变化。</span></p>

<p>Active Record tracks which migrations have already been run so all you have to do is update your source and run <tt>rake</tt><tt> </tt><tt>db:migrate</tt>.Active Record<span style="font-family: DejaVu Sans;">跟踪并迁移你已经运行过的（代码和数据），而你只需要在更新了你的源代码的时候执行</span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>Active Record will work out which migrations should be run.Active Recor<span style="font-family: DejaVu Sans;">将会计算出那些迁移需要被执行。</span>It will also update your <tt>db/schema.rb</tt> file to match the structure of your database.<span style="font-family: DejaVu Sans;">它还会更新你的</span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>文件使其于你的数据库结构相匹配。</tt></span></p>

<p><tt>Migrations</tt><tt> </tt><tt>also</tt><tt> </tt><tt>allow</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>describe</tt><tt> </tt><tt>these</tt><tt> </tt><tt>transformations</tt><tt> </tt><tt>using</tt><tt> </tt><tt>Ruby.Migrations</tt><span style="font-family: DejaVu Sans;"><tt>同样允许你使用</tt></span><tt>Ruby</tt><span style="font-family: DejaVu Sans;"><tt>来描述这些转换。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>great</tt><tt> </tt><tt>thing</tt><tt> </tt><tt>about</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>that</tt><tt> </tt><tt>(like</tt><tt> </tt><tt>most</tt><tt> </tt><tt>of</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>functionality)</tt><tt> </tt><tt>it</tt><tt> </tt><tt>is</tt><tt> </tt><tt>database</tt><tt> </tt><tt>independent:</tt><tt> </tt><tt>you</tt><tt> </tt><tt>don</tt><tt>’</tt><tt>t</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>worry</tt><tt> </tt><tt>about</tt><tt> </tt><tt>the</tt><tt> </tt><tt>precise</tt><tt> </tt><tt>syntax</tt><tt> </tt><tt>of</tt><tt> </tt><tt>CREATE</tt><tt> </tt><tt>TABLE</tt><tt> </tt><tt>any</tt><tt> </tt><tt>more</tt><tt> </tt><tt>than</tt><tt> </tt><tt>you</tt><tt> </tt><tt>worry</tt><tt> </tt><tt>about</tt><tt> </tt><tt>variations</tt><tt> </tt><tt>on</tt><tt> </tt><tt>SELECT</tt><tt> </tt><tt><em></tt><tt> </tt><tt>(you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>drop</tt><tt> </tt><tt>down</tt><tt> </tt><tt>to</tt><tt> </tt><tt>raw</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>for</tt><tt> </tt><tt>database</tt><tt> </tt><tt>specific</tt><tt> </tt><tt>features).</tt><span style="font-family: DejaVu Sans;"><tt>值得高兴的事情是（就像大多数的</tt></span><tt>Active</tt><tt> </tt><tt>Record&rsquo;s</tt><span style="font-family: DejaVu Sans;"><tt>工厂）它是与数据独立的：你再也不需要担心准确的语法来</tt><tt></tt></span><tt>CREATE</tt><tt> </tt><tt>TABLE</tt><span style="font-family: DejaVu Sans;"><tt>也不需要担心</tt></span><tt>SELECT</tt><tt> </tt><tt></em></tt><span style="font-family: DejaVu Sans;"><tt>的变化。</tt><tt></tt></span><tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>use</tt><tt> </tt><tt>SQLite3</tt><tt> </tt><tt>in</tt><tt> </tt><tt>development,</tt><tt> </tt><tt>but</tt><tt> </tt><tt>MySQL</tt><tt> </tt><tt>in</tt><tt> </tt><tt>production.</tt><span style="font-family: DejaVu Sans;"><tt>例如你可以使用</tt></span><tt>SQLite3</tt><span style="font-family: DejaVu Sans;"><tt>开发，但是在发布的产品中使用</tt></span><tt>MySQL</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>You</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>learn</tt><tt> </tt><tt>all</tt><tt> </tt><tt>about</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>including:</tt><span style="font-family: DejaVu Sans;"><tt>下面你将了解到的</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>包括：</tt></span></p>

<ul>
    <li>The generators you can use to create them <span style="font-family: DejaVu Sans;">你可以使用</span>generators<span style="font-family: DejaVu Sans;">来创建他们（数据库表单）</span></li>
    <li>The methods Active Record provides to manipulate<span style="font-family: DejaVu Sans;">操纵</span>your database Active Record<span style="font-family: DejaVu Sans;">提供方法来操纵你的数据库</span></li>
    <li>The Rake tasks that manipulate them <span style="font-family: DejaVu Sans;">使用</span>Rake<span style="font-family: DejaVu Sans;">命令操作这些（迁移）</span></li>
    <li>How they relate to <tt>schema.rb</tt> <span style="font-family: DejaVu Sans;">它们是如何映射到</span>schema.rb</li>
</ul>


<h3><a name="anatomy-of-a-migration"></a><tt>1</tt><tt> </tt><tt>Anatomy</tt><tt> </tt><tt>of</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Migration</tt></h3>


<p><tt>Before</tt><tt> </tt><tt>we</tt><tt> </tt><tt>dive</tt><tt> </tt><tt>into</tt><tt> </tt><tt>the</tt><tt> </tt><tt>details</tt><tt> </tt><tt>of</tt><tt> </tt><tt>a</tt><tt> </tt><tt>migration,</tt><tt> </tt><tt>here</tt><tt> </tt><tt>are</tt><tt> </tt><tt>a</tt><tt> </tt><tt>few</tt><tt> </tt><tt>examples</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>sorts</tt><tt> </tt><tt>of</tt><tt> </tt><tt>things</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>do:</tt><span style="font-family: DejaVu Sans;"><tt>在深入</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的详细介绍之前，下面有一系列的例子你可以尝试一下：</tt></span></p>

<p><code>class</code><tt> </tt><code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>up</code></p>

<p><code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name</code></p>

<p><code> </code><code>t.text</code><code> </code><code>:description</code></p>

<p>&nbsp;</p>

<p><code> </code><code>t.timestamps</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>down</code></p>

<p><code> </code><code>drop_table</code><code> </code><code>:products</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><tt>This</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>a</tt><tt> </tt><tt>table</tt><tt> </tt><tt>called</tt><tt> </tt><tt>products</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>string</tt><tt> </tt><tt>column</tt><tt> </tt><tt>called</tt><tt> </tt><tt>name</tt><tt> </tt><tt>and</tt><tt> </tt><tt>a</tt><tt> </tt><tt>text</tt><tt> </tt><tt>column</tt><tt> </tt><tt>called</tt><tt> </tt><tt>description.</tt><span style="font-family: DejaVu Sans;"><tt>这次</tt><tt></tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>添加了一个名叫</tt></span><tt>products</tt><span style="font-family: DejaVu Sans;"><tt>的表它有一个叫</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>的字符串的列和一个叫</tt></span><tt>description</tt><span style="font-family: DejaVu Sans;"><tt>的文本框的列。</tt><tt></tt></span><tt>A</tt><tt> </tt><tt>primary</tt><tt> </tt><tt>key</tt><tt> </tt><tt>column</tt><tt> </tt><tt>called</tt><tt> </tt><tt>id</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>be</tt><tt> </tt><tt>added,</tt><tt> </tt><tt>however</tt><tt> </tt><tt>since</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>the</tt><tt> </tt><tt>default</tt><tt> </tt><tt>we</tt><tt> </tt><tt>do</tt><tt> </tt><tt>not</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>ask</tt><tt> </tt><tt>for</tt><tt> </tt><tt>this.</tt><span style="font-family: DejaVu Sans;"><tt>一个名叫</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>的主键列也被添加，然而因为这是默认操作的不需要我们刻意添加。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>timestamp</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>created_at</tt><tt> </tt><tt>and</tt><tt> </tt><tt>updated_at</tt><tt> </tt><tt>which</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>populates</tt><tt> </tt><tt>automatically</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>be</tt><tt> </tt><tt>added.</tt><span style="font-family: DejaVu Sans;"><tt>还添加了</tt><tt></tt></span><tt>timestamp</tt><span style="font-family: DejaVu Sans;"><tt>字段，</tt></span><code>products</code><span style="font-family: DejaVu Sans;"><code>表单</code><tt>会在</tt><tt></tt></span><tt>created_at</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>updated_at</tt><span style="font-family: DejaVu Sans;"><tt>的时候通过</tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>自动填充</tt><tt></tt></span><tt>timestamp</tt><span style="font-family: DejaVu Sans;"><tt>字段。</tt><tt></tt></span><tt>Reversing</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>is</tt><tt> </tt><tt>as</tt><tt> </tt><tt>simple</tt><tt> </tt><tt>as</tt><tt> </tt><tt>dropping</tt><tt> </tt><tt>the</tt><tt> </tt><tt>table.</tt><span style="font-family: DejaVu Sans;"><tt>撤销这次</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>就像</tt><tt></tt></span><tt>dropping</tt><span style="font-family: DejaVu Sans;"><tt>这个表。</tt></span></p>

<p>&nbsp;</p>

<p>Migrations are not limited to changing the schema.Migrations<span style="font-family: DejaVu Sans;">不限制更改</span>schema<span style="font-family: DejaVu Sans;">。</span>You can also use them to fix bad data in the database or populate new fields:<span style="font-family: DejaVu Sans;">你可以使用（</span>schema<span style="font-family: DejaVu Sans;">）它们来修复坏的数据或者添加新的字段：</span></p>

<p><code>class</code> <code>AddReceiveNewsletterToUsers</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>up</code></p>

<p><code> </code><code>change_table</code><code> </code><code>:users</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.boolean</code><code> </code><code>:receive_newsletter,</code><code> </code><code>:default</code> <code>=&gt;</code><code> </code><code>false</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>User.update_all</code><code> </code><code>[&ldquo;receive_newsletter</code><code> </code><code>=</code><code> </code><code>?&rdquo;,</code><code> </code><code>true]</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>down</code></p>

<p><code> </code><code>remove_column</code><code> </code><code>:users,</code><code> </code><code>:receive_newsletter</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>Some <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#using-models-in-your-migrations">caveats</a></span></span> apply to using models in your migrations.<span style="font-family: DejaVu Sans;">一些在</span>model<span style="font-family: DejaVu Sans;">的</span>migrations<span style="font-family: DejaVu Sans;">中的<span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#using-models-in-your-migrations" target="_blank">注意事项</a></span></span>。</span></p>

<p>This migration adds a <tt>receive_newsletter</tt> column to the <tt>users</tt> table.<span style="font-family: DejaVu Sans;">（上面）这个</span>migration<span style="font-family: DejaVu Sans;">添加一个</span><tt>receive_newsletter</tt><span style="font-family: DejaVu Sans;"><tt>字段到</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>表。</tt></span>We want it to default to <tt>false</tt> for new users, but existing users are considered to have already opted in, so we use the User model to set the flag to <tt>true</tt> for existing users.<span style="font-family: DejaVu Sans;">我们希望对于新用户默认设置</span><tt>receive_newsletter</tt><span style="font-family: DejaVu Sans;"><tt>字段为</tt></span><tt>fasle</tt><span style="font-family: DejaVu Sans;"><tt>，但是存在的用户被认为已经有（自己的）选择，因此我们通过在</tt></span><tt>User</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>中存在的用户设置为</tt></span><tt>True</tt><span style="font-family: DejaVu Sans;"><tt>的标识（来保留以后信息）。</tt></span></p>

<p>Rails 3.1 makes migrations smarter by providing a new <tt>change</tt> method.Rails3.1<span style="font-family: DejaVu Sans;">通过提供一个新的</span>change<span style="font-family: DejaVu Sans;">方法，使得</span>migrations<span style="font-family: DejaVu Sans;">更加智能化。</span>This method is preferred<span style="font-family: DejaVu Sans;">首选</span>for writing constructive migrations (adding columns or tables).<span style="font-family: DejaVu Sans;">这个方法是用来做（数据库）结构迁移（添加或删除字段）的首选。</span>The migration knows how to migrate your database and reverse it when the migration is rolled back without the need to write a separate <tt>down</tt> method.migration<span style="font-family: DejaVu Sans;">知道怎样迁移你的数据库以及不需要单独的编写</span>down<span style="font-family: DejaVu Sans;">方法来处理回滚是的</span>migration<span style="font-family: DejaVu Sans;">。</span></p>

<p><code>class</code> <code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name</code></p>

<p><code> </code><code>t.text</code><code> </code><code>:description</code></p>

<p>&nbsp;</p>

<p><code> </code><code>t.timestamps</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<h4><a name="migrations-are-classes"></a>1.1 Migrations are Classes Migrations<span style="font-family: WenQuanYi Micro Hei;">是一个类</span></h4>


<p>A migration is a subclass of <tt>ActiveRecord::Migration</tt> that implements two methods: <tt>up</tt> (perform the required transformations) and <tt>down</tt> (revert them).<span style="font-family: DejaVu Sans;">一个</span>migration<span style="font-family: DejaVu Sans;">类是</span><tt>ActiveRecord::Migration</tt><span style="font-family: DejaVu Sans;">的子类，它实现了两个方法：</span>up<span style="font-family: DejaVu Sans;">（执行所请求的转换）和</span>down<span style="font-family: DejaVu Sans;">（撤销所做的更改）。</span></p>

<p>Active Record provides methods that perform common data definition tasks in a database independent way (you’ll read about them in detail later):Active Record<span style="font-family: DejaVu Sans;">提供了了在数据库中执行常见数据定义的方法（你将会在后面看到详细的介绍）。</span></p>

<ul>
    <li><tt>create_table</tt></li>
    <li><tt>change_table</tt></li>
    <li><tt>drop_table</tt></li>
    <li><tt>add_column</tt></li>
    <li><tt>change_column</tt></li>
    <li><tt>rename_column</tt></li>
    <li><tt>remove_column</tt></li>
    <li><tt>add_index</tt></li>
    <li><tt>remove_index</tt></li>
</ul>


<p>If you need to perform tasks specific to your database (for example create a <a href="http://guides.rubyonrails.org/migrations.html#active-record-and-referential-integrity"><span style="color: #000080;"><span style="text-decoration: underline;">foreign</span></span><span style="color: #000080;"><span style="text-decoration: underline;">key</span></span></a> constraint<span style="font-family: DejaVu Sans;">约束</span>) then the <tt>execute</tt> function allows you to execute arbitrary SQL.<span style="font-family: DejaVu Sans;">如果你在你的数据库中需要处理特殊的任务（例如创建一个</span>foreign key<span style="font-family: DejaVu Sans;">约束）那么</span>execute<span style="font-family: DejaVu Sans;">功能允许你执行任意的</span>SQL<span style="font-family: DejaVu Sans;">（语句）。</span>A migration is just a regular Ruby class so you’re not limited to these functions. migration<span style="font-family: DejaVu Sans;">仅仅是一个</span>Ruby<span style="font-family: DejaVu Sans;">类，因此你不必仅仅局限于现有的这些功能。</span>For example after adding a column you could write code to set the value of that column for existing records (if necessary using your models).<span style="font-family: DejaVu Sans;">例如在添加了一个字段之后你可以添加代码来设置这个字段在存在记录中的值（如果在你的</span>model<span style="font-family: DejaVu Sans;">中需要）。</span></p>

<p>On databases that support transactions<span style="font-family: DejaVu Sans;">处理办理</span>with statements that change the schema (such as PostgreSQL or SQLite3), migrations are wrapped in a transaction.<span style="font-family: DejaVu Sans;">当数据库支持通过声明来改变数据库的结构（例如</span>PostgreSQL<span style="font-family: DejaVu Sans;">和</span>SQLite3<span style="font-family: DejaVu Sans;">），会在包含在</span>migration<span style="font-family: DejaVu Sans;">处理中（直接改变数据库的结构）。</span>If the database does not support this (for example MySQL) then when a migration fails the parts of it that succeeded will not be rolled back. <span style="font-family: DejaVu Sans;">如果数据库不支持这样的功能（比如</span>MySQL<span style="font-family: DejaVu Sans;">）然后</span>migration<span style="font-family: DejaVu Sans;">会有部分失败<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>成功添加的（数据）将不会回滚。</span>You will have to unpick the changes that were made by hand.<span style="font-family: DejaVu Sans;">你必须手动的分开这些改变。</span></p>

<h4><a name="what-s-in-a-name"></a>1.2 What’s in a Name <span style="font-family: WenQuanYi Micro Hei;">（数据库文件）名称中的信息</span></h4>


<p>Migrations are stored in files in <tt>db/migrate</tt>, one for each migration class.Mgirations<span style="font-family: DejaVu Sans;">以单个文件的形式被存放在文件夹</span><tt>db/migrate</tt><span style="font-family: DejaVu Sans;"><tt>中</tt>。</span>The name of the file is of the form <tt>YYYYMMDDHHMMSS_create_products.rb</tt>, that is to say a UTC timestamp<span style="font-family: DejaVu Sans;">时间戳</span>identifying<span style="font-family: DejaVu Sans;">确定</span>the migration followed by an underscore<span style="font-family: DejaVu Sans;">下划线</span>followed by the name of the migration.<span style="font-family: DejaVu Sans;">（</span>migration<span style="font-family: DejaVu Sans;">）文件是以</span>form<span style="font-family: DejaVu Sans;">命名的，还看见了一个在</span>migration<span style="font-family: DejaVu Sans;">完成之时的时间戳接着是下划线接着是</span>migration<span style="font-family: DejaVu Sans;">的名字。</span>The name of the migration class (CamelCased version) should match the latter part of the file name. migraiton<span style="font-family: DejaVu Sans;">类（使用驼峰命名法）的名字应该和</span>migration<span style="font-family: DejaVu Sans;">文件的名称的最后部分相匹配。</span>For example <tt>20080906120000_create_products.rb</tt> should define <tt>CreateProducts</tt> and <tt>20080906120001_add_details_to_products.rb</tt> should define <tt>AddDetailsToProducts</tt>. If you do feel the need to change the file name then you <em>have</em><em> </em><em>to</em> update the name of the class inside or Rails will complain about a missing class.<span style="font-family: DejaVu Sans;">如果你觉得需要改变</span>migration<span style="font-family: DejaVu Sans;">文件的名字你必须同样修改文件里边</span>migration<span style="font-family: DejaVu Sans;">类的名字，不然</span>Rails<span style="font-family: DejaVu Sans;">会找不到</span>migration<span style="font-family: DejaVu Sans;">类。</span></p>

<p>Internally Rails only uses the migration’s number (the timestamp) to identify them.<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">内部只使用</span>migration<span style="font-family: DejaVu Sans;">编号（时间戳）来确定他们。</span>Prior to Rails 2.1 the migration number started at 1 and was incremented each time a migration was generated.<span style="font-family: DejaVu Sans;">在</span>Rails2.1<span style="font-family: DejaVu Sans;">之前</span>migration<span style="font-family: DejaVu Sans;">编号从</span>1<span style="font-family: DejaVu Sans;">开始然后在每次</span>migration<span style="font-family: DejaVu Sans;">被创建过后增加。</span>With multiple developers it was easy for these to clash requiring you to rollback migrations and renumber them.<span style="font-family: DejaVu Sans;">随着开发人员的增多这样会使的很容易产生冲突这就需要你回滚</span>migrations<span style="font-family: DejaVu Sans;">和重新编号他们。</span>developers With Rails 2.1 this is largely avoided by using the creation time of the migration to identify them.Rails2.1<span style="font-family: DejaVu Sans;">的开发人员通过</span>migraiton<span style="font-family: DejaVu Sans;">文件的创建时间指明每个文件在很大程度上避免了冲突（的发生）。</span>You can revert to the old numbering scheme by adding the following line to <tt>config/application.rb</tt>.<span style="font-family: DejaVu Sans;">你可以还原带旧的版本通过在</span><tt>config/application.rb</tt><span style="font-family: DejaVu Sans;"><tt>文件中添加如下行：</tt></span></p>

<p><code>config.active_record.timestamped_migrations</code><code> </code><code>=</code><code> </code><code>false</code></p>

<p><tt>The</tt><tt> </tt><tt>combination</tt><span style="font-family: DejaVu Sans;"><tt>组合</tt><tt></tt></span><tt>of</tt><tt> </tt><tt>timestamps</tt><tt> </tt><tt>and</tt><tt> </tt><tt>recording</tt><tt> </tt><tt>which</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>have</tt><tt> </tt><tt>been</tt><tt> </tt><tt>run</tt><tt> </tt><tt>allows</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>to</tt><tt> </tt><tt>handle</tt><tt> </tt><tt>common</tt><tt> </tt><tt>situations</tt><tt> </tt><tt>that</tt><tt> </tt><tt>occur</tt><tt> </tt><tt>with</tt><tt> </tt><tt>multiple</tt><tt> </tt><tt>developers.</tt><span style="font-family: DejaVu Sans;"><tt>时间戳和</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>的名字的组合使得</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>可以处理多个开发人员的普遍情况。</tt></span></p>

<p><tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>Alice</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>20080906120000</tt><tt> </tt><tt>and</tt><tt> </tt><tt>20080906123000</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Bob</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>20080906124500</tt><tt> </tt><tt>and</tt><tt> </tt><tt>runs</tt><tt> </tt><tt>it.</tt><span style="font-family: DejaVu Sans;"><tt>比如</tt></span><tt>Alice</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>添加了</tt></span><tt>migration</tt><tt> </tt><tt>20080906120000</tt><tt> </tt><tt>and</tt><tt> </tt><tt>20080906123000</tt><span style="font-family: DejaVu Sans;"><tt>以及</tt></span><tt>Bob</tt><span style="font-family: DejaVu Sans;"><tt>添加并运行了</tt><tt></tt></span><tt>20080906124500</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>Alice</tt><tt> </tt><tt>finishes</tt><tt> </tt><tt>her</tt><tt> </tt><tt>changes</tt><tt> </tt><tt>and</tt><tt> </tt><tt>checks</tt><tt> </tt><tt>in</tt><tt> </tt><tt>her</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Bob</tt><tt> </tt><tt>pulls</tt><tt> </tt><tt>down</tt><tt> </tt><tt>the</tt><tt> </tt><tt>latest</tt><tt> </tt><tt>changes.</tt><tt> </tt><tt>Alice</tt><span style="font-family: DejaVu Sans;"><tt>完成了他的更改并提交在他的</tt></span><tt>migrationss</tt><span style="font-family: DejaVu Sans;"><tt>中，并且</tt></span><tt>Bob</tt><tt> </tt><tt>pull</tt><tt> </tt><tt>down</tt><span style="font-family: DejaVu Sans;"><tt>了最新的更改。</tt><tt></tt></span><tt>Rails</tt><tt> </tt><tt>knows</tt><tt> </tt><tt>that</tt><tt> </tt><tt>it</tt><tt> </tt><tt>has</tt><tt> </tt><tt>not</tt><tt> </tt><tt>run</tt><tt> </tt><tt>Alice</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>two</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>so</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>would</tt><tt> </tt><tt>run</tt><tt> </tt><tt>them</tt><tt> </tt><tt>(even</tt><tt> </tt><tt>though</tt><tt> </tt><tt>Bob</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>later</tt><tt> </tt><tt>timestamp</tt><tt> </tt><tt>has</tt><tt> </tt><tt>been</tt><tt> </tt><tt>run),</tt><tt> </tt><tt>and</tt><tt> </tt><tt>similarly</tt><tt> </tt><tt>migrating</tt><tt> </tt><tt>down</tt><tt> </tt><tt>would</tt><tt> </tt><tt>not</tt><tt> </tt><tt>run</tt><tt> </tt><tt>their</tt><tt> </tt><tt>down</tt><tt> </tt><tt>methods.</tt></p>

<p><tt>Of</tt><tt> </tt><tt>course</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>no</tt><tt> </tt><tt>substitution</tt><tt> </tt><tt>for</tt><tt> </tt><tt>communication</tt><tt> </tt><tt>within</tt><tt> </tt><tt>the</tt><tt> </tt><tt>team.</tt><span style="font-family: DejaVu Sans;"><tt>当然这些在团队交流中是不可避免的。</tt><tt></tt></span><tt>For</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>if</tt><tt> </tt><tt>Alice</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>removed</tt><tt> </tt><tt>a</tt><tt> </tt><tt>table</tt><tt> </tt><tt>that</tt><tt> </tt><tt>Bob</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>assumed</tt><tt> </tt><tt>to</tt><tt> </tt><tt>exist,</tt><tt> </tt><tt>then</tt><tt> </tt><tt>trouble</tt><tt> </tt><tt>would</tt><tt> </tt><tt>certainly</tt><tt> </tt><tt>strike.</tt><span style="font-family: DejaVu Sans;"><tt>例如如果</tt></span><tt>Alice</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>中移除了一个表但是</tt></span><tt>Bob&rsquo;s</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>migraion</tt><span style="font-family: DejaVu Sans;"><tt>假设它还在，那么麻烦就来了。</tt></span></p>

<h4><a name="changing-migrations"></a><tt>1.3</tt><tt> </tt><tt>Changing</tt><tt> </tt><tt>Migrations</tt></h4>


<p><tt>Occasionally</tt><tt> </tt><tt>you</tt><tt> </tt><tt>will</tt><tt> </tt><tt>make</tt><tt> </tt><tt>a</tt><tt> </tt><tt>mistake</tt><tt> </tt><tt>when</tt><tt> </tt><tt>writing</tt><tt> </tt><tt>a</tt><tt> </tt><tt>migration.</tt><span style="font-family: DejaVu Sans;"><tt>偶尔你在写入一个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的时候犯个错误。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>have</tt><tt> </tt><tt>already</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>then</tt><tt> </tt><tt>you</tt><tt> </tt><tt>cannot</tt><tt> </tt><tt>just</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>and</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>again:</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>thinks</tt><tt> </tt><tt>it</tt><tt> </tt><tt>has</tt><tt> </tt><tt>already</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so</tt><tt> </tt><tt>will</tt><tt> </tt><tt>do</tt><tt> </tt><tt>nothing</tt><tt> </tt><tt>when</tt><tt> </tt><tt>you</tt><tt> </tt><tt>run</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:migrate.</tt><span style="font-family: DejaVu Sans;"><tt>如果你已经运行了</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>接着你不可能再去编辑和运行这个（错误的）</tt></span><tt>migraion</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>认为（你已经）运行了</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>因此在你运</tt></span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>的时候不会做任何改变。</tt><tt></tt></span><tt>You</tt><tt> </tt><tt>must</tt><tt> </tt><tt>rollback</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>(for</tt><tt> </tt><tt>example</tt><tt> </tt><tt>with</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:rollback),</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>your</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>and</tt><tt> </tt><tt>then</tt><tt> </tt><tt>run</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>to</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>corrected</tt><tt> </tt><tt>version.</tt><span style="font-family: DejaVu Sans;"><tt>你必须回滚</tt></span><tt>migation</tt><span style="font-family: DejaVu Sans;"><tt>（例如</tt></span><tt>rake</tt><tt> </tt><tt>db:rollback</tt><span style="font-family: DejaVu Sans;"><tt>），编辑修改你的</tt></span><tt>migraion</tt><span style="font-family: DejaVu Sans;"><tt>然后运行正确的版本</tt><tt></tt></span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>In</tt><tt> </tt><tt>general</tt><tt> </tt><tt>editing</tt><tt> </tt><tt>existing</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>is</tt><tt> </tt><tt>not</tt><tt> </tt><tt>a</tt><tt> </tt><tt>good</tt><tt> </tt><tt>idea:</tt><tt> </tt><tt>you</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>creating</tt><tt> </tt><tt>extra</tt><tt> </tt><tt>work</tt><tt> </tt><tt>for</tt><tt> </tt><tt>yourself</tt><tt> </tt><tt>and</tt><tt> </tt><tt>your</tt><tt> </tt><tt>co-workers</tt><tt> </tt><tt>and</tt><tt> </tt><tt>cause</tt><tt> </tt><tt>major</tt><tt> </tt><tt>headaches</tt><tt> </tt><tt>if</tt><tt> </tt><tt>the</tt><tt> </tt><tt>existing</tt><tt> </tt><tt>version</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>has</tt><tt> </tt><tt>already</tt><tt> </tt><tt>been</tt><tt> </tt><tt>run</tt><tt> </tt><tt>on</tt><tt> </tt><tt>production</tt><tt> </tt><tt>machines.</tt><span style="font-family: DejaVu Sans;"><tt>在一般情况下，编辑存在的</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>不是一个好主意：因为这样你会给你自己或者你的合作成员产生额外的工作，头疼的原因是如果存在的</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>已经在</tt></span><tt>production</tt><span style="font-family: DejaVu Sans;"><tt>机器中运行。</tt><tt></tt></span><tt>Instead</tt><tt> </tt><tt>you</tt><tt> </tt><tt>should</tt><tt> </tt><tt>write</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>that</tt><tt> </tt><tt>performs</tt><tt> </tt><tt>the</tt><tt> </tt><tt>changes</tt><tt> </tt><tt>you</tt><tt> </tt><tt>require.</tt><span style="font-family: DejaVu Sans;"><tt>作为替代你应该编写一个新的</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>来执行你需要的更改。</tt><tt></tt></span><tt>Editing</tt><tt> </tt><tt>a</tt><tt> </tt><tt>freshly</tt><tt> </tt><tt>generated</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>that</tt><tt> </tt><tt>has</tt><tt> </tt><tt>not</tt><tt> </tt><tt>yet</tt><tt> </tt><tt>been</tt><tt> </tt><tt>committed</tt><tt> </tt><tt>to</tt><tt> </tt><tt>source</tt><tt> </tt><tt>control</tt><tt> </tt><tt>(or</tt><tt> </tt><tt>more</tt><tt> </tt><tt>generally</tt><tt> </tt><tt>which</tt><tt> </tt><tt>has</tt><tt> </tt><tt>not</tt><tt> </tt><tt>been</tt><tt> </tt><tt>propagated</tt><tt> </tt><tt>beyond</tt><tt> </tt><tt>your</tt><tt> </tt><tt>development</tt><tt> </tt><tt>machine)</tt><tt> </tt><tt>is</tt><tt> </tt><tt>relatively</tt><tt> </tt><tt>harmless.</tt><span style="font-family: DejaVu Sans;"><tt>编辑一个刚生成的还没有提交到软代码控制</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>（或者更一般的情况还没有传播出你的开发机器）相对危害较轻。</tt></span></p>

<h4><a name="supported-types"></a>1.4 Supported Types<span style="font-family: WenQuanYi Micro Hei;">支持的类型</span></h4>


<p>Active Record supports the following types:Active Record<span style="font-family: DejaVu Sans;">支持如下类型：</span></p>

<ul>
    <li><tt>:primary_key</tt></li>
    <li><tt>:string</tt></li>
    <li><tt>:text</tt></li>
    <li><tt>:integer</tt></li>
    <li><tt>:float</tt></li>
    <li><tt>:decimal</tt> 10<span style="font-family: DejaVu Sans;">进制</span></li>
    <li><tt>:datetime</tt></li>
    <li><tt>:timestamp</tt></li>
    <li><tt>:time</tt></li>
    <li><tt>:date</tt></li>
    <li><tt>:binary</tt></li>
    <li><tt>:boolean</tt></li>
</ul>


<p>These will be mapped onto an appropriate underlying<span style="font-family: DejaVu Sans;">底层</span>database type, for example with MySQL <tt>:string</tt> is mapped to <tt>VARCHAR(255)</tt>.<span style="font-family: DejaVu Sans;">这些将会被映射为合适底层数据库的类型，例如使用</span>MySQL :string<span style="font-family: DejaVu Sans;">类型将会映射成</span><tt>VARCHAR(255)</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>You can create columns of types not supported by Active Record when using the non-sexy syntax, for example<span style="font-family: DejaVu Sans;">你可以在创建</span>Active Record<span style="font-family: DejaVu Sans;">不支持的字段，使用</span>non-sexy<span style="font-family: DejaVu Sans;">语法，例如</span></p>

<p><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.column</code><code> </code><code>:name,</code><code> </code><code>&lsquo;polygon&rsquo;,</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code></p>

<p><code>end</code></p>

<p>This may however hinder<span style="font-family: DejaVu Sans;">阻碍</span>portability<span style="font-family: DejaVu Sans;">移植</span>to other databases.<span style="font-family: DejaVu Sans;">不过这可能会阻碍移植到其它数据库。</span></p>

<h3><a name="creating-a-migration"></a>2 Creating a Migration<span style="font-family: WenQuanYi Micro Hei;">新建一个</span>Migrateion</h3>


<h4><a name="creating-a-model"></a>2.1 Creating a Model<span style="font-family: WenQuanYi Micro Hei;">新建一个</span>Model</h4>


<p>The model and scaffold generators will create migrations appropriate for adding a new model.model<span style="font-family: DejaVu Sans;">和</span>generators<span style="font-family: DejaVu Sans;">创建器会为添加的新的</span>model<span style="font-family: DejaVu Sans;">创建合适的</span>migrations<span style="font-family: DejaVu Sans;">。</span>This migration will already contain instructions for creating the relevant<span style="font-family: DejaVu Sans;">有关</span>table.<span style="font-family: DejaVu Sans;">这个</span>migration<span style="font-family: DejaVu Sans;">已经包含在有关创建的的表的说明中。</span>If you tell Rails what columns you want then statements<span style="font-family: DejaVu Sans;">声明</span>for adding those will also be created. For example, running<span style="font-family: DejaVu Sans;">如果你告诉</span>Rails<span style="font-family: DejaVu Sans;">将你随后声明的字段添加到创建</span>migrations<span style="font-family: DejaVu Sans;">中，例如，运行</span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>model</code><code> </code><code>Product</code><code> </code><code>name:string</code><code> </code><code>description:text</code></p>

<p><code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>migration</code><code> </code><code>that</code><code> </code><code>looks</code><code> </code><code>like</code><code> </code><code>this</code><code> </code><span style="font-family: DejaVu Sans;"><code>（</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>）将会新建一个像这样的</code></span><code>migraion</code><span style="font-family: DejaVu Sans;"><code>：</code></span></p>

<p><code>class</code><code> </code><code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name</code></p>

<p><code> </code><code>t.text</code><code> </code><code>:description</code></p>

<p>&nbsp;</p>

<p><code> </code><code>t.timestamps</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><code>You</code><code> </code><code>can</code><code> </code><code>append</code><code> </code><code>as</code><code> </code><code>many</code><code> </code><code>column</code><code> </code><code>name/type</code><code> </code><code>pairs</code><code> </code><code>as</code><code> </code><code>you</code><code> </code><code>want.</code><span style="font-family: DejaVu Sans;"><code>你可以随意增加字段或者类型对。</code><code></code></span><code>By</code><code> </code><code>default</code><code> </code><tt>t.timestamps</tt><code> </code><code>(which</code><code> </code><code>creates</code><code> </code><code>the</code><code> </code><tt>updated_at</tt><code> </code><code>and</code><code> </code><tt>created_at</tt><code> </code><code>columns</code><code> </code><code>that</code><code> </code><code>are</code><code> </code><code>automatically</code><code> </code><code>populated</code><code> </code><code>by</code><code> </code><code>Active</code><code> </code><code>Record)</code><code> </code><code>will</code><code> </code><code>be</code><code> </code><code>added</code><code> </code><code>for</code><code> </code><code>you.</code><span style="font-family: DejaVu Sans;"><code>默认的</code><code></code></span><code>t.timestamps</code><span style="font-family: DejaVu Sans;"><code>（</code></span><code>Active</code><code> </code><code>Record</code><code> </code><span style="font-family: DejaVu Sans;"><code>会自动生成</code></span><tt>updated_at</tt><span style="font-family: DejaVu Sans;"><code>和</code></span><tt>created_at</tt><span style="font-family: DejaVu Sans;"><tt>字段</tt><code>）会子添加在你的表中。</code></span></p>

<h4><a name="creating-a-standalone-migration"></a>2.2 Creating a Standalone Migration<span style="font-family: WenQuanYi Micro Hei;">新建一个独立的</span>Migration</h4>


<p>If you are creating migrations for other purposes (for example to add a column to an existing table) then you can use the migration generator:<span style="font-family: DejaVu Sans;">如果你正在因为其他的目的新建</span>migrations<span style="font-family: DejaVu Sans;">（例如添加一个字段到一个存在的表）你可以使用</span>migration<span style="font-family: DejaVu Sans;">创建器：</span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddPartNumberToProducts</code></p>

<p>This will create an empty but appropriately named migration:<span style="font-family: DejaVu Sans;">这里会新建一个空的但是合适的</span>migration<span style="font-family: DejaVu Sans;">：</span></p>

<p><code>class</code> <code>AddPartNumberToProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>If the migration name is of the form “AddXXXToYYY” or “RemoveXXXFromYYY” and is followed by a list of column names and types then a migration containing the appropriate <tt>add_column</tt> and <tt>remove_column</tt> statements will be created.<span style="font-family: DejaVu Sans;">如果</span>migration<span style="font-family: DejaVu Sans;">命名为<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>AddXXXToYYY”<span style="font-family: DejaVu Sans;">或<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>RemoveXXXFromYYY”<span style="font-family: DejaVu Sans;">格式并且后跟有一些字段名称或类型，那么一个</span>migration<span style="font-family: DejaVu Sans;">包含合适的</span><tt>add_column</tt><span style="font-family: DejaVu Sans;">和</span><tt>remove_column</tt><span style="font-family: DejaVu Sans;"><tt>将会被新建。</tt></span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddPartNumberToProducts</code><code> </code><code>part_number:string</code></p>

<p><code>ps</code><span style="font-family: DejaVu Sans;"><code>：如果已经创建了一个</code></span><code>AddPartNumberToProducts</code><span style="font-family: DejaVu Sans;"><code>那么运行</code></span><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddPartNumberToProducts</code><code> </code><code>part_number:string</code><code> </code><code>-f</code><span style="font-family: DejaVu Sans;"><code>进行覆盖新建</code></span></p>

<p><code>will</code><code> </code><code>generate</code><span style="font-family: DejaVu Sans;"><code>将会生成：</code></span></p>

<p><code>class</code><code> </code><code>AddPartNumberToProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><code>Similarly,</code><span style="font-family: DejaVu Sans;"><code>同样，</code></span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>RemovePartNumberFromProducts</code><code> </code><code>part_number:string</code></p>

<p><code>generates</code><span style="font-family: DejaVu Sans;"><code>生成</code></span></p>

<p><code>class</code><code> </code><code>RemovePartNumberFromProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>up</code></p>

<p><code> </code><code>remove_column</code><code> </code><code>:products,</code><code> </code><code>:part_number</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>down</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><code>You</code><code> </code><code>are</code><code> </code><code>not</code><code> </code><code>limited</code><code> </code><code>to</code><code> </code><code>one</code><code> </code><code>magically</code><span style="font-family: DejaVu Sans;"><code>神奇</code><code></code></span><code>generated</code><code> </code><code>column,</code><code> </code><code>for</code><code> </code><code>example</code><span style="font-family: DejaVu Sans;"><code>你不限制于一次只输入一个字段，例如</code></span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>migration</code><code> </code><code>AddDetailsToProducts</code><code> </code><code>part_number:string</code><code> </code><code>price:decimal</code></p>

<p><code>generates</code><span style="font-family: DejaVu Sans;"><code>生成</code></span></p>

<p><code>class</code><code> </code><code>AddDetailsToProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:price,</code><code> </code><code>:decimal</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><code>As</code><code> </code><code>always,</code><code> </code><code>what</code><code> </code><code>has</code><code> </code><code>been</code><code> </code><code>generated</code><code> </code><code>for</code><code> </code><code>you</code><code> </code><code>is</code><code> </code><code>just</code><code> </code><code>a</code><code> </code><code>starting</code><code> </code><code>point.</code><code> </code><code>You</code><code> </code><code>can</code><code> </code><code>add</code><code> </code><code>or</code><code> </code><code>remove</code><code> </code><code>from</code><code> </code><code>it</code><code> </code><code>as</code><code> </code><code>you</code><code> </code><code>see</code><code> </code><code>fit.</code><span style="font-family: DejaVu Sans;"><code>一如往常，使用</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>创建器生成的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>只是一个起点，你可以添加或删除其中的字段直到你满意为止。</code></span></p>

<p>&nbsp;</p>

<p><code>The</code><code> </code><code>generated</code><code> </code><code>migration</code><code> </code><code>file</code><code> </code><code>for</code><code> </code><code>destructive</code><code> </code><code>migrations</code><code> </code><code>will</code><code> </code><code>still</code><code> </code><code>be</code><code> </code><code>old-style</code><code> </code><code>using</code><code> </code><code>the</code><code> </code><tt>up</tt><code> </code><code>and</code><code> </code><tt>down</tt><code> </code><code>methods.</code><span style="font-family: DejaVu Sans;"><code>在创建的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>文件中对</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>进行破坏性的操作仍然使用老式的</code></span><code>up</code><span style="font-family: DejaVu Sans;"><code>和</code></span><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code><code></code></span><code>This</code><code> </code><code>is</code><code> </code><code>because</code><code> </code><code>Rails</code><code> </code><code>doesn</code><code>’</code><code>t</code><code> </code><code>know</code><code> </code><code>the</code><code> </code><code>original</code><code> </code><code>data</code><code> </code><code>types</code><code> </code><code>defined</code><code> </code><code>when</code><code> </code><code>you</code><code> </code><code>made</code><code> </code><code>the</code><code> </code><code>original</code><code> </code><code>changes.</code><span style="font-family: DejaVu Sans;"><code>这是因为当你对初始</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>做了更改，</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>不知道原始的数据类型定义。</code></span></p>

<p>&nbsp;</p>

<h3><a name="writing-a-migration"></a>3 Writing a Migration</h3>


<p>Once you have created your migration using one of the generators it’s time to get to work!<span style="font-family: DejaVu Sans;">一旦你已经使用一种创建器创建了你的</span>migration<span style="font-family: DejaVu Sans;">，现在是时候开始工作了。</span></p>

<h4><a name="creating-a-table"></a>3.1 Creating a Table<span style="font-family: WenQuanYi Micro Hei;">创建一个表</span></h4>


<p>Migration method <tt>create_table</tt> will be one of your workhorses. A typical use would be Migration<span style="font-family: DejaVu Sans;">方法</span><tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>将会是一个你的驮马。下面是他的典型形式</tt></span></p>

<p><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name</code></p>

<p><code>end</code></p>

<p>which creates a <tt>products</tt> table with a column called <tt>name</tt> (and as discussed below, an implicit <tt>id</tt> column).<span style="font-family: DejaVu Sans;">上面的代码会创建一个</span>products<span style="font-family: DejaVu Sans;">表，其中包含了一个</span>name<span style="font-family: DejaVu Sans;">字段（和下面讨论的一样，一个隐藏的</span>id<span style="font-family: DejaVu Sans;">字段）</span></p>

<p>The object yielded to the block allows you to create columns on the table.<span style="font-family: DejaVu Sans;">这个</span>migration<span style="font-family: DejaVu Sans;">类产生代码块让你创建表中的字段。</span>There are two ways of doing this: The first (traditional) form looks like<span style="font-family: DejaVu Sans;">有两种方法创建字段：首先（传统的）方式看起来像这样</span></p>

<p><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.column</code><code> </code><code>:name,</code><code> </code><code>:string,</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code></p>

<p><code>end</code></p>

<p>the second form, the so called “sexy” migration, drops the somewhat redundant <tt>column</tt> method.<span style="font-family: DejaVu Sans;">第二种方式，也称为<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>sexy” migration<span style="font-family: DejaVu Sans;">，丢掉了有些冗余的</span>column<span style="font-family: DejaVu Sans;">方法。</span>Instead, the <tt>string</tt>, <tt>integer</tt>, etc. methods create a column of that type.<span style="font-family: DejaVu Sans;">作为替代，如</span>string,interger<span style="font-family: DejaVu Sans;">等等方法创建相应类型的字段。</span>Subsequent parameters are the same.<span style="font-family: DejaVu Sans;">其后的参赛也在同一个字段中。</span></p>

<p><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name,</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code></p>

<p><code>end</code></p>

<p><code>HABTM,</code><code> </code><code>hasAndBelongsToMany</code><code> </code><span style="font-family: DejaVu Sans;"><code>这是</code></span><code>Active</code><code> </code><code>Recored</code><span style="font-family: DejaVu Sans;"><code>功能里面比较</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></code><code>复杂</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></code><code>的一个东西。简单的来说，就是你有一个帖子，你给这个帖子定义了多个</code></span><code>tag</code><span style="font-family: DejaVu Sans;"><code>，</code><code></code><code>但是实际上</code></span><code>tag</code><span style="font-family: DejaVu Sans;"><code>也是独立的，一个</code></span><code>tag</code><span style="font-family: DejaVu Sans;"><code>会包含很多个不同的帖子。</code></span></p>

<p><code>By</code><code> </code><code>default</code><code> </code><tt>create_table</tt><code> </code><code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>primary</code><code> </code><code>key</code><code> </code><code>called</code><code> </code><tt>id</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>通过默认的</code><code></code></span><tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>将会创建一个叫做</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>的主键。</tt><code></code></span><code>You</code><code> </code><code>can</code><code> </code><code>change</code><code> </code><code>the</code><code> </code><code>name</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>primary</code><code> </code><code>key</code><code> </code><code>with</code><code> </code><code>the</code><code> </code><tt>:primary_key</tt><code> </code><code>option</code><code> </code><code>(don</code><code>’</code><code>t</code><code> </code><code>forget</code><code> </code><code>to</code><code> </code><code>update</code><code> </code><code>the</code><code> </code><code>corresponding</code><span style="font-family: DejaVu Sans;"><code>相应的</code><code></code></span><code>model)</code><code> </code><code>or</code><code> </code><code>if</code><code> </code><code>you</code><code> </code><code>don</code><code>’</code><code>t</code><code> </code><code>want</code><code> </code><code>a</code><code> </code><code>primary</code><code> </code><code>key</code><code> </code><code>at</code><code> </code><code>all</code><code> </code><code>(for</code><code> </code><code>example</code><code> </code><code>for</code><code> </code><code>a</code><code> </code><code>HABTM</code><code> </code><code>join</code><code> </code><code>table)</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>pass</code><code> </code><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>你可以更改主键的名字通过使用</code></span><tt>:primary_key</tt><span style="font-family: DejaVu Sans;"><tt>选项（不要忘记更新其相应的</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>）或者你根本不想要主键（例如添加一个</tt></span><tt>HABTM</tt><span style="font-family: DejaVu Sans;"><tt>关系到表中）你可以通过</tt></span><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><code></code></span><code>If</code><code> </code><code>you</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>pass</code><code> </code><code>database</code><code> </code><code>specific</code><code> </code><code>options</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>place</code><code> </code><code>an</code><code> </code><code>SQL</code><code> </code><code>fragment</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><tt>:options</tt><code> </code><code>option.</code><code> </code><code>For</code><code> </code><code>example</code><span style="font-family: DejaVu Sans;"><code>如果你需要数据库的特殊选项你可以放置一个</code></span><code>SQL</code><span style="font-family: DejaVu Sans;"><code>片段在</code></span><tt>:options</tt><span style="font-family: DejaVu Sans;"><tt>选项中。例如</tt></span></p>

<p><code>create_table</code><code> </code><code>:products,</code><code> </code><code>:options</code> <code>=&gt;</code><code> </code><code>&ldquo;ENGINE=BLACKHOLE&rdquo;</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name,</code><code> </code><code>:null</code> <code>=&gt;</code><code> </code><code>false</code></p>

<p><code>end</code></p>

<p>will append <tt>ENGINE=BLACKHOLE</tt> to the SQL statement used to create the table (when using MySQL the default is <tt>ENGINE=InnoDB</tt>).<span style="font-family: DejaVu Sans;">将会添加</span><tt>ENGINE=BLACKHOLE</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>声明中用于创建表单（当使用</tt></span><tt>MySQL</tt><span style="font-family: DejaVu Sans;"><tt>默认的（</tt></span><tt>ENGINE</tt><span style="font-family: DejaVu Sans;"><tt>）是</tt></span><tt>InnoDB</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt></span></p>

<h4><a name="changing-tables"></a><tt>3.2</tt><tt> </tt><tt>Changing</tt><tt> </tt><tt>Tables</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>更改表单</tt></span></h4>


<p>A close cousin of <tt>create_table</tt> is <tt>change_table</tt>, used for changing existing tables. <tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>的一个近亲是</tt><tt></tt></span><tt>change_table</tt><span style="font-family: DejaVu Sans;"><tt>，用于更改存在的表单。</tt></span>It is used in a similar fashion to <tt>create_table</tt> but the object yielded to the block knows more tricks.<span style="font-family: DejaVu Sans;">它使用的是与</span><tt>create_table</tt><span style="font-family: DejaVu Sans;"><tt>类似的方法，但是其类产生的块能够知道更多的技巧。（如移除字段，重命名字段）</tt></span>For example<span style="font-family: DejaVu Sans;">例如</span></p>

<p><code>change_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.remove</code><code> </code><code>:description,</code><code> </code><code>:name</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:part_number</code></p>

<p><code> </code><code>t.index</code><code> </code><code>:part_number</code></p>

<p><code> </code><code>t.rename</code><code> </code><code>:upccode,</code><code> </code><code>:upc_code</code></p>

<p><code>end</code></p>

<p>removes the <tt>description</tt> and <tt>name</tt> columns, creates a <tt>part_number</tt> column and adds an index on it. Finally it renames the <tt>upccode</tt> column.<span style="font-family: DejaVu Sans;">移除</span><tt>description</tt><span style="font-family: DejaVu Sans;"><tt>字段和</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>字段，创建一个</tt><tt></tt></span><tt>part_number</tt><span style="font-family: DejaVu Sans;"><tt>字段并且添加一个</tt></span><tt>index</tt><span style="font-family: DejaVu Sans;"><tt>（索引）给</tt><tt></tt></span><tt>part_number</tt><span style="font-family: DejaVu Sans;"><tt>。最后它重命名了</tt></span><code>:upccode</code><span style="font-family: DejaVu Sans;"><code>。</code></span>This is the same as doing<span style="font-family: DejaVu Sans;">下面的代码也可以达到同样的效果</span></p>

<p><code>remove_column</code><code> </code><code>:products,</code><code> </code><code>:description</code></p>

<p><code>remove_column</code><code> </code><code>:products,</code><code> </code><code>:name</code></p>

<p><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:part_number,</code><code> </code><code>:string</code></p>

<p><code>add_index</code><code> </code><code>:products,</code><code> </code><code>:part_number</code></p>

<p><code>rename_column</code><code> </code><code>:products,</code><code> </code><code>:upccode,</code><code> </code><code>:upc_code</code></p>

<p>&nbsp;</p>

<p><tt>You</tt><tt> </tt><tt>don</tt><tt>’</tt><tt>t</tt><tt> </tt><tt>have</tt><tt> </tt><tt>to</tt><tt> </tt><tt>keep</tt><tt> </tt><tt>repeating</tt><tt> </tt><tt>the</tt><tt> </tt><tt>table</tt><tt> </tt><tt>name</tt><tt> </tt><tt>and</tt><tt> </tt><tt>it</tt><tt> </tt><tt>groups</tt><tt> </tt><tt>all</tt><tt> </tt><tt>the</tt><tt> </tt><tt>statements</tt><tt> </tt><tt>related</tt><tt> </tt><tt>to</tt><tt> </tt><tt>modifying</tt><tt> </tt><tt>one</tt><tt> </tt><tt>particular</tt><tt> </tt><tt>table.</tt><span style="font-family: DejaVu Sans;"><tt>你不必重复表单名称和组相关的所有声明，（而</tt><tt>只需要重复）修改表的一部分。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>individual</tt><span style="font-family: DejaVu Sans;"><tt>个别</tt><tt></tt></span><tt>transformation</tt><span style="font-family: DejaVu Sans;"><tt>转换</tt><tt></tt></span><tt>names</tt><tt> </tt><tt>are</tt><tt> </tt><tt>also</tt><tt> </tt><tt>shorter,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>example</tt><tt> </tt><tt>remove_column</tt><tt> </tt><tt>becomes</tt><tt> </tt><tt>just</tt><tt> </tt><tt>remove</tt><tt> </tt><tt>and</tt><tt> </tt><tt>add_index</tt><tt> </tt><tt>becomes</tt><tt> </tt><tt>just</tt><tt> </tt><tt>index.</tt><span style="font-family: DejaVu Sans;"><tt>个别的转换方法的名称也更加简短了，例如</tt><tt></tt></span><tt>remove_column</tt><span style="font-family: DejaVu Sans;"><tt>变成</tt></span><tt>remove</tt><span style="font-family: DejaVu Sans;"><tt>，</tt><tt></tt></span><tt>add_index</tt><span style="font-family: DejaVu Sans;"><tt>变成</tt></span><tt>index</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>##</tt><span style="font-family: DejaVu Sans;"><tt>这里是说的新旧两种方法比较</tt></span></p>

<h4><a name="special-helpers"></a><tt>3.3</tt><tt> </tt><tt>Special</tt><tt> </tt><tt>Helpers</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>个别的</tt></span><tt>Helpers</tt></h4>


<p><a name="result_box"></a><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>some</tt><tt> </tt><tt>shortcuts</tt><tt> </tt><tt>for</tt><tt> </tt><tt>common</tt><tt> </tt><tt>functionality.Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>提供了一些一般功能的快捷操作。</tt><tt></tt></span><tt>It</tt><tt> </tt><tt>is</tt><tt> </tt><tt>for</tt><tt> </tt><tt>example</tt><tt> </tt><tt>very</tt><tt> </tt><tt>common</tt><tt> </tt><tt>to</tt><tt> </tt><tt>add</tt><tt> </tt><tt>both</tt><tt> </tt><tt>the</tt><tt> </tt><tt>created_at</tt><tt> </tt><tt>and</tt><tt> </tt><tt>updated_at</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so</tt><tt> </tt><tt>there</tt><tt> </tt><tt>is</tt><tt> </tt><tt>a</tt><tt> </tt><tt>method</tt><tt> </tt><tt>that</tt><tt> </tt><tt>does</tt><tt> </tt><tt>exactly</tt><tt> </tt><tt>that:</tt><span style="font-family: DejaVu Sans;"><tt>例如很常见的通过</tt></span><tt>created_at</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>updated_at</tt><span style="font-family: DejaVu Sans;"><tt>添加</tt><tt>字段等等</tt><tt>，这里是一个方法的简要例子</tt></span></p>

<p><code>create_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code></p>

<p><code> </code><code>t.timestamps</code></p>

<p><code>end</code></p>

<p><tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>products</tt><tt> </tt><tt>table</tt><tt> </tt><tt>with</tt><tt> </tt><tt>those</tt><tt> </tt><tt>two</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>(plus</tt><tt> </tt><tt>the</tt><tt> </tt><tt>id</tt><tt> </tt><tt>column)</tt><tt> </tt><tt>whereas.</tt><span style="font-family: DejaVu Sans;"><tt>将会新建一个</tt></span><tt>products</tt><span style="font-family: DejaVu Sans;"><tt>表单，有两个字段（加上</tt></span><tt>id</tt><span style="font-family: DejaVu Sans;"><tt>字段）。</tt></span></p>

<p><code>change_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code></p>

<p><code> </code><code>t.timestamps</code></p>

<p><code>end</code></p>

<p><tt>adds</tt><tt> </tt><tt>those</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>to</tt><tt> </tt><tt>an</tt><tt> </tt><tt>existing</tt><tt> </tt><tt>table.</tt><span style="font-family: DejaVu Sans;"><tt>添加一些字段到存在的表中。</tt></span></p>

<p>&nbsp;</p>

<p><tt>The</tt><tt> </tt><tt>other</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>is</tt><tt> </tt><tt>called</tt><tt> </tt><tt>references</tt><tt> </tt><tt>(also</tt><tt> </tt><tt>available</tt><tt> </tt><tt>as</tt><tt> </tt><tt>belongs_to).</tt><tt> </tt><tt>In</tt><tt> </tt><tt>its</tt><tt> </tt><tt>simplest</tt><tt> </tt><tt>form</tt><tt> </tt><tt>it</tt><tt> </tt><tt>just</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>some</tt><tt> </tt><tt>readability</tt><span style="font-family: DejaVu Sans;"><tt>另一个</tt></span><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>被称为</tt><tt></tt></span><tt>references</tt><span style="font-family: DejaVu Sans;"><tt>（也可用</tt></span><tt>belongs_to</tt><span style="font-family: DejaVu Sans;"><tt>）。在其最简单的形式，它仅仅增加一些可读性。</tt></span></p>

<p><code>create_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code></p>

<p><code> </code><code>t.references</code><code> </code><code>:category</code></p>

<p><code>end</code></p>

<p><tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>category_id</tt><tt> </tt><tt>column</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>appropriate</tt><tt> </tt><tt>type.</tt><span style="font-family: DejaVu Sans;"><tt>将会创建一个适当形式的</tt></span><tt>category_id</tt><span style="font-family: DejaVu Sans;"><tt>字段。</tt><tt></tt></span><tt>Note</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt> </tt><tt>pass</tt><tt> </tt><tt>the</tt><tt> </tt><tt>model</tt><tt> </tt><tt>name,</tt><tt> </tt><tt>not</tt><tt> </tt><tt>the</tt><tt> </tt><tt>column</tt><tt> </tt><tt>name.</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>adds</tt><tt> </tt><tt>the</tt><tt> </tt><tt><em>id</tt><tt> </tt><tt>for</tt><tt> </tt><tt>you.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>注意那是你关联的</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>名称，不是字段名称。</tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>会给你添加</tt></span><tt></em>id</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>have</tt><tt> </tt><tt>polymorphic</tt><span style="font-family: DejaVu Sans;"><tt>多态性</tt><tt></tt></span><tt>belongs_to</tt><tt> </tt><tt>associations</tt><tt> </tt><tt>then</tt><tt> </tt><tt>references</tt><tt> </tt><tt>will</tt><tt> </tt><tt>add</tt><tt> </tt><tt>both</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>required:</tt></p>

<p><code>create_table</code><code> </code><code>:products</code><tt> </tt><code>do</code><tt> </tt><code>|t|</code></p>

<p><code> </code><code>t.references</code><code> </code><code>:attachment,</code><code> </code><code>:polymorphic</code> <code>=&gt;</code><code> </code><code>{:default</code> <code>=&gt;</code><code> </code><code>&lsquo;Photo&rsquo;}</code></p>

<p><code>end</code></p>

<p><tt>will</tt><tt> </tt><tt>add</tt><tt> </tt><tt>an</tt><tt> </tt><tt>attachment_id</tt><tt> </tt><tt>column</tt><tt> </tt><tt>and</tt><tt> </tt><tt>a</tt><tt> </tt><tt>string</tt><tt> </tt><tt>attachment_type</tt><tt> </tt><tt>column</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>default</tt><tt> </tt><tt>value</tt><tt> </tt><tt>of</tt><tt> ‘</tt><tt>Photo</tt><tt>’</tt><tt>.</tt><span style="font-family: DejaVu Sans;"><tt>将会添加一个</tt></span><tt>attachment_id</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>和一个</tt><tt></tt><tt>默认值是</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">‘</span></tt></span><tt>Photo</tt><tt>’</tt><span style="font-family: DejaVu Sans;"><tt>的字符串</tt></span><tt>attachment_type</tt><span style="font-family: DejaVu Sans;"><tt>字段。</tt></span></p>

<p><tt>The</tt><tt> </tt><tt>references</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>does</tt><tt> </tt><tt>not</tt><tt> </tt><tt>actually</tt><tt> </tt><tt>create</tt><tt> </tt><tt>foreign</tt><tt> </tt><tt>key</tt><tt> </tt><tt>constraints</tt><tt> </tt><tt>for</tt><tt> </tt><tt>you.</tt><tt> </tt><tt>You</tt><tt> </tt><tt>will</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>use</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>for</tt><tt> </tt><tt>that</tt><tt> </tt><tt>or</tt><tt> </tt><tt>a</tt><tt> </tt><tt>plugin</tt><tt> </tt><tt>that</tt><tt> </tt><tt>adds</tt><tt> </tt><a href="http://guides.rubyonrails.org/migrations.html#active-record-and-referential-integrity"><span style="color: #000080;"><span style="text-decoration: underline;">foreign</span></span><span style="color: #000080;"><span style="text-decoration: underline;">key</span></span><span style="color: #000080;"><span style="text-decoration: underline;">support</span></span></a><tt>.references</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>没有真正创建外键约束给你。你需要使用</tt></span><tt>execute</tt><span style="font-family: DejaVu Sans;"><tt>或者一个</tt></span><tt>plugin</tt><span style="font-family: DejaVu Sans;"><tt>来添加外键支持。</tt></span></p>

<p><tt>If</tt><tt> </tt><tt>the</tt><tt> </tt><tt>helpers</tt><tt> </tt><tt>provided</tt><tt> </tt><tt>by</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>aren</tt><tt>’</tt><tt>t</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>use</tt><tt> </tt><tt>the</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>function</tt><tt> </tt><tt>to</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>arbitrary</tt><tt> </tt><tt>SQL.</tt><span style="font-family: DejaVu Sans;"><tt>如果</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>提供的</tt></span><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>不足以满足，你可以使用</tt><tt></tt></span><tt>execute</tt><span style="font-family: DejaVu Sans;"><tt>功能来执行任意</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>For</tt><tt> </tt><tt>more</tt><tt> </tt><tt>details</tt><tt> </tt><tt>and</tt><tt> </tt><tt>examples</tt><tt> </tt><tt>of</tt><tt> </tt><tt>individual</tt><span style="font-family: DejaVu Sans;"><tt>个别</tt><tt></tt></span><tt>methods</tt><tt> </tt><tt>check</tt><tt> </tt><tt>the</tt><tt> </tt><tt>API</tt><tt> </tt><tt>documentation,</tt><tt> </tt><tt>in</tt><tt> </tt><tt>particular</tt><tt> </tt><tt>the</tt><tt> </tt><tt>documentation</tt><tt> </tt><tt>for</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html">ActiveRecord::ConnectionAdapters::SchemaStatements</a></span></span><tt> </tt><tt>(which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>the</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>available</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>up</tt><tt> </tt><tt>and</tt><tt> </tt><tt>down</tt><tt> </tt><tt>methods),</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html">ActiveRecord::ConnectionAdapters::TableDefinition</a></span></span><tt> </tt><tt>(which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>the</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>available</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>object</tt><tt> </tt><tt>yielded</tt><tt> </tt><tt>by</tt><tt> </tt><tt>create_table)</tt><tt> </tt><tt>and</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html">ActiveRecord::ConnectionAdapters::Table</a></span></span><tt> </tt><tt>(which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>the</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>available</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>object</tt><tt> </tt><tt>yielded</tt><tt> </tt><tt>by</tt><tt> </tt><tt>change_table).</tt></p>

<h4><a name="writing-your-change-method"></a><tt>3.4</tt><tt> </tt><tt>Writing</tt><tt> </tt><tt>Your</tt><tt> </tt><tt>change</tt><tt> </tt><tt>Method</tt></h4>


<p>The <tt>change</tt> method removes the need to write both <tt>up</tt> and <tt>down</tt> methods in those cases that Rails know how to revert the changes automatically. <tt>change(migration</tt><span style="font-family: DejaVu Sans;"><tt>类方法</tt></span><tt>)</tt><span style="font-family: DejaVu Sans;"><tt>删除需要写进</tt></span><tt>up</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>down</tt><span style="font-family: DejaVu Sans;"><tt>的方法，那样</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>知道怎样自动撤销更改。</tt></span>Currently, the <tt>change</tt> method supports only these migration definitions:<span style="font-family: DejaVu Sans;">目前，</span>change<span style="font-family: DejaVu Sans;">方法支持如下的</span>migration<span style="font-family: DejaVu Sans;">定义：</span></p>

<ul>
    <li><tt>add_column</tt></li>
    <li><tt>add_index</tt></li>
    <li><tt>add_timestamps</tt></li>
    <li><tt>create_table</tt></li>
    <li><tt>remove_timestamps</tt></li>
    <li><tt>rename_column</tt></li>
    <li><tt>rename_index</tt></li>
    <li><tt>rename_table</tt></li>
</ul>


<p>If you’re going to use other methods, you’ll have to write the <tt>up</tt> and <tt>down</tt> methods normally.<span style="font-family: DejaVu Sans;">如果你打算使用其他方法，你可以常规的写</span>up<span style="font-family: DejaVu Sans;">和</span>down<span style="font-family: DejaVu Sans;">方法。</span></p>

<h4><a name="writing-your-down-method"></a>3.5 Writing Your <tt>down</tt> Method</h4>


<p>The <tt>down</tt> method of your migration should revert the transformations done by the <tt>up</tt> method.<span style="font-family: DejaVu Sans;">迁移的</span>down<span style="font-family: DejaVu Sans;">方法应该撤销</span>up<span style="font-family: DejaVu Sans;">方法做的转换。</span>In other words the database schema<span style="font-family: DejaVu Sans;">架构</span>should be unchanged if you do an <tt>up</tt> followed by a <tt>down</tt>.<span style="font-family: DejaVu Sans;">换句话说数据库架构应该没有改变，如果你在</span>up<span style="font-family: DejaVu Sans;">方法过后又执行</span>down<span style="font-family: DejaVu Sans;">方法。</span>For example if you create a table in the <tt>up</tt> method you should drop it in the <tt>down</tt> method. It is wise to do things in precisely the reverse order to in the <tt>up</tt> method.<span style="font-family: DejaVu Sans;">例如如果你创建使用</span>up<span style="font-family: DejaVu Sans;">方法一个表你应该在</span>down<span style="font-family: DejaVu Sans;">方法中去除它。</span>For example</p>

<p><code>class</code> <code>ExampleMigration</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>up</code></p>

<p><code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.references</code><code> </code><code>:category</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>#add</code><code> </code><code>a</code><code> </code><code>foreign</code><code> </code><code>key</code></p>

<p><code> </code><code>execute</code><code> </code><code>&lt;&lt;-SQL</code></p>

<p><code> </code><code>ALTER</code> <code>TABLE</code> <code>products</code></p>

<p><code> </code><code>ADD</code> <code>CONSTRAINT</code> <code>fk_products_categories</code></p>

<p><code> </code><code>FOREIGN</code> <code>KEY</code> <code>(category_id)</code></p>

<p><code> </code><code>REFERENCES</code> <code>categories(id)</code></p>

<p><code> </code><code>SQL</code></p>

<p>&nbsp;</p>

<p><code> </code><code>add_column</code><code> </code><code>:users,</code><code> </code><code>:home_page_url,</code><code> </code><code>:string</code></p>

<p>&nbsp;</p>

<p><code> </code><code>rename_column</code><code> </code><code>:users,</code><code> </code><code>:email,</code><code> </code><code>:email_address</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>down</code></p>

<p><code> </code><code>rename_column</code><code> </code><code>:users,</code><code> </code><code>:email_address,</code><code> </code><code>:email</code></p>

<p><code> </code><code>remove_column</code><code> </code><code>:users,</code><code> </code><code>:home_page_url</code></p>

<p><code> </code><code>execute</code><code> </code><code>&ldquo;ALTER</code><code> </code><code>TABLE</code><code> </code><code>products</code><code> </code><code>DROP</code><code> </code><code>FOREIGN</code><code> </code><code>KEY</code><code> </code><code>fk_products_categories&rdquo;</code></p>

<p><code> </code><code>drop_table</code><code> </code><code>:products</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>Sometimes your migration will do something which is just plain irreversible<span style="font-family: DejaVu Sans;">不可逆转的</span>, for example it might destroy some data.<span style="font-family: DejaVu Sans;">有时候你的</span>migration<span style="font-family: DejaVu Sans;">将会做一些不可逆转的事情。例如它可能会删除一些数据。</span>In cases like those when you can’t reverse the migration you can raise <tt>ActiveRecord::IrreversibleMigration</tt> from your <tt>down</tt> method.<span style="font-family: DejaVu Sans;">在这样的情况中你不能撤销</span>migration<span style="font-family: DejaVu Sans;">你可以在你的</span>down<span style="font-family: DejaVu Sans;">方法中</span>raise <tt>ActiveRecord::IrreversibleMigration</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>If someone tries to revert your migration an error message will be displayed saying that it can’t be done.<span style="font-family: DejaVu Sans;">如果有人尝试撤销你的</span>migration<span style="font-family: DejaVu Sans;">那么一个错误消息将会被显示<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>it can’t be done”<span style="font-family: DejaVu Sans;">。</span></p>

<h3><a name="running-migrations"></a>4 Running Migrations</h3>


<p>Rails provides a set of rake tasks to work with migrations which boils down to running certain sets of migrations. Rails<span style="font-family: DejaVu Sans;">提供给</span>migrations<span style="font-family: DejaVu Sans;">一组</span>rake<span style="font-family: DejaVu Sans;">任务，它大致归纳于运行若干的</span>migrations<span style="font-family: DejaVu Sans;">。</span>The very first migration related rake task you use will probably be <tt>db:migrate</tt>.<span style="font-family: DejaVu Sans;">你使用的非常靠前的</span>migration<span style="font-family: DejaVu Sans;">相应于</span>rake<span style="font-family: DejaVu Sans;">的任务恰好是</span><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>In its most basic form it just runs the <tt>up</tt> method for all the migrations that have not yet been run.<span style="font-family: DejaVu Sans;">其中它是最基本的形式，它仅仅运行</span>migrations <span style="font-family: DejaVu Sans;">还没被运行的</span>up<span style="font-family: DejaVu Sans;">方法。</span>If there are no such migrations it exits.<span style="font-family: DejaVu Sans;">如果没有这样的迁移它将会退出。</span></p>

<p>Note that running the <tt> </tt><tt>db:migrate</tt> also invokes the <tt>db:schema:dump</tt> task, which will update your db/schema.rb file to match the structure of your database.<span style="font-family: DejaVu Sans;">注意运行</span><tt>db:migrate</tt><span style="font-family: DejaVu Sans;"><tt>也调用了</tt><tt></tt></span><tt>db:schema:dump</tt><span style="font-family: DejaVu Sans;"><tt>任务，它将会更新你的</tt><tt></tt></span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>来和你的数据库匹配。</tt></span></p>

<p><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>specify</tt><tt> </tt><tt>a</tt><tt> </tt><tt>target</tt><tt> </tt><tt>version,</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>will</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>required</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>(up</tt><tt> </tt><tt>or</tt><tt> </tt><tt>down)</tt><tt> </tt><tt>until</tt><tt> </tt><tt>it</tt><tt> </tt><tt>has</tt><tt> </tt><tt>reached</tt><tt> </tt><tt>the</tt><tt> </tt><tt>specified</tt><tt> </tt><tt>version.</tt><span style="font-family: DejaVu Sans;"><tt>如果你特别（指定了）一个目标版本，</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>将会运行所请求的</tt></span><tt>migrations</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>up</tt><span style="font-family: DejaVu Sans;"><tt>或</tt></span><tt>down</tt><span style="font-family: DejaVu Sans;"><tt>）直到它已经达成了（与）指定版本（的匹配）。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>version</tt><tt> </tt><tt>is</tt><tt> </tt><tt>the</tt><tt> </tt><tt>numerical</tt><tt> </tt><tt>prefix</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>filename.</tt><span style="font-family: DejaVu Sans;"><tt>版本号是</tt></span><tt>migration</tt><tt>‘</tt><tt>s</tt><span style="font-family: DejaVu Sans;"><tt>文件的数字前缀。</tt><tt></tt></span><tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>to</tt><tt> </tt><tt>migrate</tt><tt> </tt><tt>to</tt><tt> </tt><tt>version</tt><tt> </tt><tt>20080906120000</tt><tt> </tt><tt>run</tt><span style="font-family: DejaVu Sans;"><tt>例如迁移到</tt></span><tt>20080906120000</tt><span style="font-family: DejaVu Sans;"><tt>版本</tt></span></p>

<p><code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate</code><code> </code><code>VERSION=20080906120000</code></p>

<p><code>If</code><code> </code><code>this</code><code> </code><code>is</code><code> </code><code>greater</code><code> </code><code>than</code><code> </code><code>the</code><code> </code><code>current</code><code> </code><code>version</code><code> </code><code>(i.e.</code><code> </code><code>it</code><code> </code><code>is</code><code> </code><code>migrating</code><code> </code><code>upwards)</code><code> </code><code>this</code><code> </code><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>up</tt><code> </code><code>method</code><code> </code><code>on</code><code> </code><code>all</code><code> </code><code>migrations</code><code> </code><code>up</code><code> </code><code>to</code><code> </code><code>and</code><code> </code><code>including</code><code> </code><code>20080906120000,</code><code> </code><code>if</code><code> </code><code>migrating</code><code> </code><code>downwards</code><code> </code><code>this</code><code> </code><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>down</tt><code> </code><code>method</code><code> </code><code>on</code><code> </code><code>all</code><code> </code><code>the</code><code> </code><code>migrations</code><code> </code><code>down</code><code> </code><code>to,</code><code> </code><code>but</code><code> </code><code>not</code><code> </code><code>including,</code><code> </code><code>20080906120000.</code><span style="font-family: DejaVu Sans;"><code>如果执行的版本比当前版本更优（新）</code></span><code>(i.e.</code><code> </code><code>it</code><code> </code><code>is</code><code> </code><code>migrating</code><code> </code><code>upwards)</code><span style="font-family: DejaVu Sans;"><code>这将会执行包含</code></span><code>20080906120000</code><span style="font-family: DejaVu Sans;"><code>的所有版本的</code></span><code>migrations</code><code> </code><code>up</code><span style="font-family: DejaVu Sans;"><code>方法，反之则执行不包括</code></span><code>20080906120000</code><span style="font-family: DejaVu Sans;"><code>的版本之外的所有版本的</code></span><code>migrations</code><code> </code><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code></span></p>

<h4><a name="rolling-back1"></a><code>4.1</code><code> </code><code>Rolling</code><code> </code><code>Back</code></h4>


<p>A common task is to rollback the last migration, for example if you made a mistake in it and wish to correct it.<span style="font-family: DejaVu Sans;">一个常用的任务来回滚最新的</span>migration<span style="font-family: DejaVu Sans;">，例如如果你在其中犯了一个错误希望</span>Rails<span style="font-family: DejaVu Sans;">能够改正它。</span>Rather than tracking down the version number associated with the previous migration you can run</p>

<p><code>$</code><code> </code><code>rake</code><code> </code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="db:rollback">db:rollback</a></span></span></p>

<p><code>This</code><code> </code><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>down</tt><code> </code><code>method</code><code> </code><code>from</code><code> </code><code>the</code><code> </code><code>latest</code><code> </code><code>migration.</code><span style="font-family: DejaVu Sans;"><code>这将会对最新的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>执行</code></span><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code><code></code></span><code>If</code><code> </code><code>you</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>undo</code><code> </code><code>several</code><code> </code><code>migrations</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>provide</code><code> </code><code>a</code><code> </code><tt>STEP</tt><code> </code><code>parameter:</code><span style="font-family: DejaVu Sans;"><code>如果你需要撤销一系列的</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>你可以提供一个</code></span><code>STEP</code><code> </code><span style="font-family: DejaVu Sans;"><code>参数：</code></span></p>

<p><code>$</code><code> </code><code>rake</code><code> </code><code>db:rollback</code><code> </code><code>STEP=3</code></p>

<p><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>down</tt><code> </code><code>method</code><code> </code><code>from</code><code> </code><code>the</code><code> </code><code>last</code><code> </code><code>3</code><code> </code><code>migrations.</code><span style="font-family: DejaVu Sans;"><code>将会对最近的</code></span><code>3</code><span style="font-family: DejaVu Sans;"><code>次迁移执行</code></span><code>down</code><span style="font-family: DejaVu Sans;"><code>方法。</code></span></p>

<p><a name="rolling-back"></a>The rake <tt>db:migrate:redo</tt> task is a shortcut for doing a rollback and then migrating back up again. rake <tt>db:migrate:redo</tt><span style="font-family: DejaVu Sans;"><tt>任务是一个回滚后再次返回的快捷操作。</tt></span>As with the <tt>db:rollback</tt> task you can use the <tt>STEP</tt> parameter if you need to go more than one version back, for example<span style="font-family: DejaVu Sans;">通过</span>db<span style="font-family: DejaVu Sans;">：</span>rollback <span style="font-family: DejaVu Sans;">任务你可以使用</span>STEP<span style="font-family: DejaVu Sans;">参数如果你需要撤销超过一个版本，例如</span></p>

<p><code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate:redo</code><code> </code><code>STEP=3</code></p>

<p><code>Neither</code><code> </code><code>of</code><code> </code><code>these</code><code> </code><code>Rake</code><code> </code><code>tasks</code><code> </code><code>do</code><code> </code><code>anything</code><code> </code><code>you</code><code> </code><code>could</code><code> </code><code>not</code><code> </code><code>do</code><code> </code><code>with</code><code> </code><tt>db:migrate</tt><code>,</code><code> </code><code>they</code><code> </code><code>are</code><code> </code><code>simply</code><code> </code><code>more</code><code> </code><code>convenient</code><span style="font-family: DejaVu Sans;"><code>方便</code><code></code></span><code>since</code><code> </code><code>you</code><code> </code><code>do</code><code> </code><code>not</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>explicitly</code><code> </code><code>specify</code><code> </code><code>the</code><code> </code><code>version</code><code> </code><code>to</code><code> </code><code>migrate</code><code> </code><code>to.</code><span style="font-family: DejaVu Sans;"><code>（通过）上两次</code></span><code>rake</code><span style="font-family: DejaVu Sans;"><code>任务，你没有对</code></span><code>db:migrate</code><span style="font-family: DejaVu Sans;"><code>任何事情，如果你不需要指定明确的版本来迁移这样做都非常方便。</code></span></p>

<p>Lastly, the <tt>db:reset</tt> task will drop the database, recreate it and load the current schema into it.<span style="font-family: DejaVu Sans;">最后，</span></p>

<p><tt>db:reset</tt><span style="font-family: DejaVu Sans;"><tt>任务将会</tt></span><tt>drop</tt><span style="font-family: DejaVu Sans;"><tt>数据库，重建它并且在其中导入正确的架构。</tt></span></p>

<p><code> This</code><code> </code><code>is</code><code> </code><code>not</code><code> </code><code>the</code><code> </code><code>same</code><code> </code><code>as</code><code> </code><code>running</code><code> </code><code>all</code><code> </code><code>the</code><code> </code><code>migrations</code><code> – </code><code>see</code><code> </code><code>the</code><code> </code><code>section</code><code> </code><code>on</code><code> </code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#schema-dumping-and-you">schema.rb</a></span></span><code>.</code><span style="font-family: DejaVu Sans;"><code>这和运行所有的</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>不一样</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></code><code>阅读</code><code></code></span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/migrations.html#schema-dumping-and-you">schema.rb</a></span></span><span style="font-family: DejaVu Sans;"><code>章节。</code></span></p>

<h4><a name="being-specific"></a><code>4.2</code><code> </code><code>Being</code><code> </code><code>Specific</code><span style="font-family: WenQuanYi Micro Hei;"><code>开始指定的</code></span></h4>


<p>If you need to run a specific migration up or down the <tt>db:migrate:up</tt> and <tt>db:migrate:down</tt> tasks will do that. <span style="font-family: DejaVu Sans;">如果你需要对一个指定的版本</span>migration<span style="font-family: DejaVu Sans;">执行</span>up<span style="font-family: DejaVu Sans;">或</span>down<span style="font-family: DejaVu Sans;">，那么</span><tt>db:migrate:up</tt> and <tt>db:migrate:down</tt><span style="font-family: DejaVu Sans;"><tt>任务会满足你。</tt></span>Just specify the appropriate version and the corresponding migration will have its <tt>up</tt> or <tt>down</tt> method invoked, for example<span style="font-family: DejaVu Sans;">指定适当的版本那么相应的</span>migration<span style="font-family: DejaVu Sans;">就会调用它的</span>up<span style="font-family: DejaVu Sans;">或</span>down<span style="font-family: DejaVu Sans;">方法，例如</span></p>

<p><code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate:up</code><code> </code><code>VERSION=20080906120000</code></p>

<p><code>will</code><code> </code><code>run</code><code> </code><code>the</code><code> </code><tt>up</tt><code> </code><code>method</code><code> </code><code>from</code><code> </code><code>the</code><code> </code><code>20080906120000</code><code> </code><code>migration.</code><span style="font-family: DejaVu Sans;"><code>将会执行来自</code><code></code></span><code>20080906120000</code><span style="font-family: DejaVu Sans;"><code>版本的</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code>up</code><span style="font-family: DejaVu Sans;"><code>方法。</code><code></code></span><code>These</code><code> </code><code>tasks</code><code> </code><code>check</code><code> </code><code>whether</code><code> </code><code>the</code><code> </code><code>migration</code><code> </code><code>has</code><code> </code><code>already</code><code> </code><code>run,</code><code> </code><code>so</code><code> </code><code>for</code><code> </code><code>example</code><code> </code><tt>db:migrate:up</tt><tt> </tt><tt>VERSION=20080906120000</tt><code> </code><code>will</code><code> </code><code>do</code><code> </code><code>nothing</code><code> </code><code>if</code><code> </code><code>Active</code><code> </code><code>Record</code><code> </code><code>believes</code><code> </code><code>that</code><code> </code><code>20080906120000</code><code> </code><code>has</code><code> </code><code>already</code><code> </code><code>been</code><code> </code><code>run.</code><span style="font-family: DejaVu Sans;"><code>这个任务会检查</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>是否已经运行，如果</code><code></code></span><code>Active</code><code> </code><code>Record</code><span style="font-family: DejaVu Sans;"><code>认为已经被运行过了</code><code></code></span><tt>db:migrate:up</tt><tt> </tt><tt>VERSION=20080906120000</tt><span style="font-family: DejaVu Sans;"><tt>将不会做任何事情。</tt></span></p>

<h4><a name="being-talkative"></a>4.3 Being Talkative<span style="font-family: WenQuanYi Micro Hei;">开始唠叨</span></h4>


<p>By default migrations tell you exactly what they’re doing and how long it took.<span style="font-family: DejaVu Sans;">通过默认的</span>migrations<span style="font-family: DejaVu Sans;">会明确地告诉你他们做了什么以及花费了多长时间。</span>A migration creating a table and adding an index might produce output like this<span style="font-family: DejaVu Sans;">一次迁移创建一个表并且添加一个</span>index<span style="font-family: DejaVu Sans;">可能会产生这样的输出</span></p>

<p><code>20080906170109</code><code> </code><code>CreateProducts:</code><code> </code><code>migrating</code></p>

<p><code>&mdash;</code><code> </code><code>create_table(:products)</code></p>

<p><code> </code><code>&ndash;&gt;</code><code> </code><code>0.0021s</code></p>

<p><code>&mdash;</code><code> </code><code>add_index(:products,</code><code> </code><code>:name)</code></p>

<p><code> </code><code>&ndash;&gt;</code><code> </code><code>0.0026s</code></p>

<p><code>20080906170109</code><code> </code><code>CreateProducts:</code><code> </code><code>migrated</code><code> </code><code>(0.0059s)</code></p>

<p>Several methods are provided that allow you to control all this:<span style="font-family: DejaVu Sans;">一些方法（被证明）允许你像下面这样控制</span></p>

<ul>
    <li><tt>suppress_messages</tt> takes a block as an argument and suppresses<span style="font-family: DejaVu Sans;">抑制</span>any output generated by the block. <tt>suppress_messages</tt><span style="font-family: DejaVu Sans;">获取一个</span>block<span style="font-family: DejaVu Sans;">作为一个参数并且抑制常规输出到</span>block</li>
    <li><tt>say</tt> takes a message argument and outputs it as is. A second boolean argument can be passed to specify whether to indent<span style="font-family: DejaVu Sans;">缩进</span>or not. <tt>say</tt><span style="font-family: DejaVu Sans;"><tt>获取一个</tt></span><tt>message</tt><span style="font-family: DejaVu Sans;"><tt>参数并且输出它。第二个布尔参数可以指定是否缩进</tt></span></li>
    <li><tt>say_with_time</tt> outputs text along with how long it took to run its block. If the block returns an integer it assumes it is the number of rows affected. say_with_time<span style="font-family: DejaVu Sans;"><tt>在文字旁边输出运行这个代码块花费了多少时间。如果</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>返回一个整数它假设这是受影响的代码行。</tt></span></li>
</ul>


<p>For example, this migration<span style="font-family: DejaVu Sans;">例如，这个</span>migration</p>

<p><code>class</code> <code>CreateProducts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>suppress_messages</code><code> </code><code>do</code></p>

<p><code> </code><code>create_table</code><code> </code><code>:products</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name</code></p>

<p><code> </code><code>t.text</code><code> </code><code>:description</code></p>

<p><code> </code><code>t.timestamps</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>say</code><code> </code><code>&ldquo;Created</code><code> </code><code>a</code><code> </code><code>table&rdquo;</code></p>

<p><code> </code><code>suppress_messages</code><code> </code><code>{add_index</code><code> </code><code>:products,</code><code> </code><code>:name}</code></p>

<p><code> </code><code>say</code><code> </code><code>&ldquo;and</code><code> </code><code>an</code><code> </code><code>index!&rdquo;,</code><code> </code><code>true</code></p>

<p><code> </code><code>say_with_time</code><code> </code><code>&lsquo;Waiting</code><code> </code><code>for</code><code> </code><code>a</code><code> </code><code>while&rsquo;</code> <code>do</code></p>

<p><code> </code><code>sleep</code><code> </code><code>10</code></p>

<p><code> </code><code>250</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>generates the following output<span style="font-family: DejaVu Sans;">一般情况会得到如下输出</span></p>

<p>== CreateProducts: migrating =================================================</p>

<p>&mdash; Created a table</p>

<p>&ndash;&gt; and an index!</p>

<p>&mdash; Waiting for a while</p>

<p>&ndash;&gt; 10.0108s</p>

<p>&ndash;&gt; 250 rows</p>

<p>== CreateProducts: migrated (10.0171s) =======================================</p>

<p>If you just want Active Record to shut up then running <tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>VERBOSE=false</tt> will suppress<span style="font-family: DejaVu Sans;">抑制</span>all output.<span style="font-family: DejaVu Sans;">如果你希望让所有</span>Active Record<span style="font-family: DejaVu Sans;">闭嘴，那么运行</span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>VERBOSE=false</tt><span style="font-family: DejaVu Sans;"><tt>会抑制所有的输出。</tt></span></p>

<h3><a name="using-models-in-your-migrations"></a>5 Using Models in Your Migrations<span style="font-family: WenQuanYi Micro Hei;">在你的</span>migration<span style="font-family: WenQuanYi Micro Hei;">中使用</span>Moldels</h3>


<p>When creating or updating data in a migration it is often tempting to use one of your models<span style="font-family: DejaVu Sans;">新建或更新一个</span>migration<span style="font-family: DejaVu Sans;">的数据它通常会使你的</span>models<span style="font-family: DejaVu Sans;">更有诱惑力。</span>After all they exist to provide easy access to the underlying<span style="font-family: DejaVu Sans;">底层</span>data.<span style="font-family: DejaVu Sans;">毕竟他们的存在提供了对底层数据的访问。</span>This can be done, but some caution<span style="font-family: DejaVu Sans;">注意</span>should be observed<span style="font-family: DejaVu Sans;">观察</span>.<span style="font-family: DejaVu Sans;">这是可行的，但是有些地方需要注意。</span></p>

<p>For example, problems occur when the model uses database columns which are (1) not currently in the database and (2) will be created by this or a subsequent migration.<span style="font-family: DejaVu Sans;">例如，问题焦点当</span>models<span style="font-family: DejaVu Sans;">使用数据库字段，但是</span>migration<span style="font-family: DejaVu Sans;">（</span>1<span style="font-family: DejaVu Sans;">）在数据库中没有这个字段而</span>migration<span style="font-family: DejaVu Sans;">（</span>2<span style="font-family: DejaVu Sans;">）将会被它本身的</span>migration<span style="font-family: DejaVu Sans;">文件或者随后的</span>migration<span style="font-family: DejaVu Sans;">创建。</span></p>

<p>Consider this example, where Alice and Bob are working on the same code base which contains a <tt>Product</tt> model:<span style="font-family: DejaVu Sans;">思考这个例子，</span>Alice<span style="font-family: DejaVu Sans;">和</span>Bob<span style="font-family: DejaVu Sans;">工作在同样的代码中，其主要包含一个</span>Product<span style="font-family: DejaVu Sans;">模型：</span></p>

<p>Bob goes on vacation. Bob<span style="font-family: DejaVu Sans;">在休假</span></p>

<p>Alice creates a migration for the <tt>products</tt> table which adds a new column and initializes it. She also adds a validation to the Product model for the new column. Alice<span style="font-family: DejaVu Sans;">创建一个</span>products<span style="font-family: DejaVu Sans;">表单的</span>migration<span style="font-family: DejaVu Sans;">，其添加一个新的字段并初始化它。她也添加一个关于新字段的验证到</span>Product<span style="font-family: DejaVu Sans;">模型。</span></p>

<p>rails generate migration AddFlagToProduct flag:int#<span style="font-family: DejaVu Sans;">然后再添加一部分这样通过创建器的话</span>model<span style="font-family: DejaVu Sans;">文件也一起创建了</span></p>

<p><code>#</code><code> </code><code>db/migrate/20100513121110_add_flag_to_product.rb</code></p>

<p>&nbsp;</p>

<p><code>class</code> <code>AddFlagToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:flag,</code><code> </code><code>:int</code></p>

<p><code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!(:flag</code> <code>=&gt;</code><code> </code><code>&lsquo;false&rsquo;)</code><code> </code><code>}#</code><span style="font-family: DejaVu Sans;"><code>初始化置为</code></span><code>false</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>&nbsp;</p>

<p><code>#</code><code> </code><code>app/model/product.rb</code></p>

<p>&nbsp;</p>

<p><code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code> </code><code>validates</code><code> </code><code>:flag,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code></p>

<p><code>end</code></p>

<p><code>Alice</code><code> </code><code>adds</code><code> </code><code>a</code><code> </code><code>second</code><code> </code><code>migration</code><code> </code><code>which</code><code> </code><code>adds</code><code> </code><code>and</code><code> </code><code>initializes</code><code> </code><code>another</code><code> </code><code>column</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><tt>products</tt><code> </code><code>table</code><code> </code><code>and</code><code> </code><code>also</code><code> </code><code>adds</code><code> </code><code>a</code><code> </code><code>validation</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><code>Product</code><code> </code><code>model</code><code> </code><code>for</code><code> </code><code>the</code><code> </code><code>new</code><code> </code><code>column.Alice</code><span style="font-family: DejaVu Sans;"><code>添加第二个</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>，在这个</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>中给</code></span><code>Products</code><span style="font-family: DejaVu Sans;"><code>表单添加并初始化了另一个字段，而且为</code></span><code>Product</code><code> </code><code>model</code><span style="font-family: DejaVu Sans;"><code>的新字段添加并初始化了验证。</code></span></p>

<p><code>#</code><code> </code><code>db/migrate/20100515121110_add_fuzz_to_product.rb</code></p>

<p>&nbsp;</p>

<p><code>class</code> <code>AddFuzzToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:fuzz,</code><code> </code><code>:string</code></p>

<p><code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!</code><code> </code><code>:fuzz</code> <code>=&gt;</code><code> </code><code>&lsquo;fuzzy&rsquo;</code> <code>}</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><code>#</code><code> </code><code>app/model/product.rb</code></p>

<p>&nbsp;</p>

<p><code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code> </code><code>validates</code><code> </code><code>:flag,</code><code> </code><code>:fuzz,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code></p>

<p><code>end</code></p>

<p><code>Both</code><code> </code><code>migrations</code><code> </code><code>work</code><code> </code><code>for</code><code> </code><code>Alice.</code><span style="font-family: DejaVu Sans;"><code>两个</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>都是</code></span><code>Alice</code><span style="font-family: DejaVu Sans;"><code>编写的。</code></span></p>

<p><code>Bob</code><code> </code><code>comes</code><code> </code><code>back</code><code> </code><code>from</code><code> </code><code>vacation</code><span style="font-family: DejaVu Sans;"><code>假期</code><code></code></span><code>and:Bob</code><span style="font-family: DejaVu Sans;"><code>休假回来然后接着下面的工作</code></span></p>

<ol>
    <li><code>updates</code><code> </code><code>the</code><code> </code><code>source</code><code> – </code><code>which</code><code> </code><code>contains</code><code> </code><code>both</code><code> </code><code>migrations</code><code> </code><code>and</code><code> </code><code>the</code><code> </code><code>latests</code><code> </code><code>version</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>Product</code><code> </code><code>model.</code><code> </code><span style="font-family: DejaVu Sans;"><code>更新源代码</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></code><code>包含</code></span><code>migrations</code><span style="font-family: DejaVu Sans;"><code>和最新版本的</code></span><code>Product</code><span style="font-family: DejaVu Sans;"><code>模型。</code></span></li>
    <li>runs outstanding migrations with <tt>rake</tt><tt> </tt><tt>db:migrate</tt>, which includes the one that updates the <tt>Product</tt> model. <span style="font-family: DejaVu Sans;">通过</span><tt>rake</tt><tt> </tt><tt>db:migrate</tt><span style="font-family: DejaVu Sans;">执行突出（最新版本的</span>migration<span style="font-family: DejaVu Sans;">）的</span>migrations<span style="font-family: DejaVu Sans;">，其中包含了更新</span>Product<span style="font-family: DejaVu Sans;">模型。</span></li>
</ol>


<p>The migration crashes because when the model attempts<span style="font-family: DejaVu Sans;">尝试</span>to save, it tries to validate the second added column, which is not in the database when the <em>first</em> migration runs.<span style="font-family: DejaVu Sans;">数据迁移冲突因为当</span>model<span style="font-family: DejaVu Sans;">尝试保存时，它试图验证第二个添加的字段，然而它在第一次</span>migration<span style="font-family: DejaVu Sans;">运行时不在数据库中。（没有弄明白呢感觉好像两个迁移是分开的才会出现这样的错误）</span></p>

<p><code>rake</code><code> </code><code>aborted!</code></p>

<p><code>An</code><code> </code><code>error</code><code> </code><code>has</code><code> </code><code>occurred,</code><code> </code><code>this</code><code> </code><code>and</code><code> </code><code>all</code><code> </code><code>later</code><code> </code><code>migrations</code><code> </code><code>canceled:</code></p>

<p>&nbsp;</p>

<p><code>undefined</code><code> </code><code>method</code><code> </code><code>`fuzz'</code><code> </code><code>for</code><code> </code><code>#&lt;Product:0x000001049b14a0&gt;</code></p>

<p>A fix for this is to create a local model within the migration.<span style="font-family: DejaVu Sans;">解决这个错误是在</span>migration<span style="font-family: DejaVu Sans;">创建一个本地的</span>model<span style="font-family: DejaVu Sans;">。</span>This keeps rails from running the validations, so that the migrations run to completion.<span style="font-family: DejaVu Sans;">这样在</span>rails<span style="font-family: DejaVu Sans;">运行中保持了验证，使得</span>migrations<span style="font-family: DejaVu Sans;">完成了验证。</span></p>

<p>When using a faux model, it’s a good idea to call <tt>Product.reset_column_information</tt> to refresh the ActiveRecord cache for the Product model prior<span style="font-family: DejaVu Sans;">前</span>to updating data in the database.<span style="font-family: DejaVu Sans;">当使用一个人造的</span>model<span style="font-family: DejaVu Sans;">，调用</span><tt>Product.reset_column_information</tt><span style="font-family: DejaVu Sans;"><tt>来刷新在更新数据到数据库前的</tt></span><tt>Product</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>ActiveRecord</tt><span style="font-family: DejaVu Sans;"><tt>缓存是一个好主意。</tt></span></p>

<p><tt>If</tt><tt> </tt><tt>Alice</tt><tt> </tt><tt>had</tt><tt> </tt><tt>done</tt><tt> </tt><tt>this</tt><tt> </tt><tt>instead,</tt><tt> </tt><tt>there</tt><tt> </tt><tt>would</tt><tt> </tt><tt>have</tt><tt> </tt><tt>been</tt><tt> </tt><tt>no</tt><tt> </tt><tt>problem:</tt><span style="font-family: DejaVu Sans;"><tt>如果</tt></span><tt>Alice</tt><span style="font-family: DejaVu Sans;"><tt>这样做了就不会有问题了</tt></span></p>

<p><code>#</code><code> </code><code>db/migrate/20100513121110_add_flag_to_product.rb</code></p>

<p>&nbsp;</p>

<p><code>class</code> <code>AddFlagToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:flag,</code><code> </code><code>:int</code></p>

<p><code> </code><code>Product.reset_column_information</code></p>

<p><code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!(:flag</code> <code>=&gt;</code><code> </code><code>false)</code><code> </code><code>}</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>&nbsp;</p>

<p><code>class</code><tt> </tt><code>AddFuzzToProduct</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>class</code> <code>Product</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>add_column</code><code> </code><code>:products,</code><code> </code><code>:fuzz,</code><code> </code><code>:string</code></p>

<p><code> </code><code>Product.reset_column_information</code></p>

<p><code> </code><code>Product.all.each</code> <code>{</code><code> </code><code>|f|</code><code> </code><code>f.update_attributes!</code><code> </code><code>:fuzz</code> <code>=&gt;</code><code> </code><code>&lsquo;fuzzy&rsquo;</code> <code>}</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>&nbsp;</p>

<h3><a name="schema-dumping-and-you"></a><tt>6</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Dumping</tt><tt> </tt><tt>and</tt><tt> </tt><tt>You</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>架构模式和你</tt></span></h3>


<h4><a name="what-are-schema-files-for"></a><tt>6.1</tt><tt> </tt><tt>What</tt><tt> </tt><tt>are</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Files</tt><tt> </tt><tt>for?</tt></h4>


<p><tt>Migrations,</tt><tt> </tt><tt>mighty</tt><tt> </tt><tt>as</tt><tt> </tt><tt>they</tt><tt> </tt><tt>may</tt><tt> </tt><tt>be,</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>the</tt><tt> </tt><tt>authoritative</tt><tt> </tt><tt>source</tt><tt> </tt><tt>for</tt><tt> </tt><tt>your</tt><tt> </tt><tt>database</tt><tt> </tt><tt>schema.</tt><tt> </tt><tt>Migrations</tt><span style="font-family: DejaVu Sans;"><tt>，很可能不是你的数据库</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>的授权源。</tt><tt></tt></span><tt>That</tt><tt> </tt><tt>role</tt><tt> </tt><tt>falls</tt><tt> </tt><tt>to</tt><tt> </tt><tt>either</tt><tt> </tt><tt>db/schema.rb</tt><tt> </tt><tt>or</tt><tt> </tt><tt>an</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>file</tt><tt> </tt><tt>which</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>generates</tt><tt> </tt><tt>by</tt><tt> </tt><tt>examining</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database.</tt><span style="font-family: DejaVu Sans;"><tt>这一规则影响到</tt><tt></tt></span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>文件它是</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>创建器通过检查数据库生成的。</tt><tt></tt></span><tt>They</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>designed</tt><tt> </tt><tt>to</tt><tt> </tt><tt>be</tt><tt> </tt><tt>edited,</tt><tt> </tt><tt>they</tt><tt> </tt><tt>just</tt><tt> </tt><tt>represent</tt><tt> </tt><tt>the</tt><tt> </tt><tt>current</tt><tt> </tt><tt>state</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database.</tt><span style="font-family: DejaVu Sans;"><tt>他们的设计（原意）是不被编辑的，他们仅仅是当前数据库状态的一个表现。</tt></span></p>

<p>There is no need (and it is error prone) to deploy<span style="font-family: DejaVu Sans;">部署</span>a new instance of an app by replaying the entire<span style="font-family: DejaVu Sans;">整个</span>migration history. It is much simpler and faster to just load into the database a description of the current schema.<span style="font-family: DejaVu Sans;">这里没有必要（并且是错误倾向）去通过</span>replaying<span style="font-family: DejaVu Sans;">整个</span>migration<span style="font-family: DejaVu Sans;">历史来部署一个</span>app<span style="font-family: DejaVu Sans;">的新的实例。更明智和更快捷的方式是</span>load<span style="font-family: DejaVu Sans;">数据库的描述（也就是）当前</span>schema<span style="font-family: DejaVu Sans;">。</span></p>

<p>For example, this is how the test database is created: the current development database is dumped (either to <tt>db/schema.rb</tt> or <tt>db/development.sql</tt>) and then loaded into the test database.<span style="font-family: DejaVu Sans;">例如，这是测试数据库怎样被创建的：当前的开发数据库已经被转储（要么</span><tt>db/schema.rb</tt> <span style="font-family: DejaVu Sans;">要么</span><tt>db/development.sql</tt><span style="font-family: DejaVu Sans;">）然后被导入</span>test<span style="font-family: DejaVu Sans;">数据库。</span></p>

<p>Schema files are also useful if you want a quick look at what attributes an Active Record object has. Schema<span style="font-family: DejaVu Sans;">文件在你希望快速的查看</span>Active Record object<span style="font-family: DejaVu Sans;">有些什么属性的时候也很有帮助。</span>This information is not in the model’s code and is frequently spread across several migrations but is all summed up in the schema file. <span style="font-family: DejaVu Sans;">这些信息不是</span>model<span style="font-family: DejaVu Sans;">中的代码并且频繁分布在多个</span>migrations<span style="font-family: DejaVu Sans;">但是是所有架构文件的总结。</span>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://agilewebdevelopment.com/plugins/annotate_models">annotate_models</a></span></span> plugin, which automatically adds (and updates) comments at the top of each model summarizing the schema, may also be of interest. <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://agilewebdevelopment.com/plugins/annotate_models">annotate_models</a></span></span> <span style="font-family: DejaVu Sans;">插件，它能够自动在每个</span>model<span style="font-family: DejaVu Sans;">汇总的顶部的添加（更新）</span>comments<span style="font-family: DejaVu Sans;">，可能你会有兴趣。</span></p>

<h4><a name="types-of-schema-dumps"></a><tt>6.2</tt><tt> </tt><tt>Types</tt><tt> </tt><tt>of</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Dumps</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>架构转储的形式</tt></span></h4>


<p>There are two ways to dump the schema. This is set in <tt>config/application.rb</tt> by the <tt>config.active_record.schema_format</tt> setting, which may be either <tt>:sql</tt> or <tt>:ruby</tt>.<span style="font-family: DejaVu Sans;">有两种方式来转储架构。这是（相关）设置在</span><tt>config/application.rb</tt><span style="font-family: DejaVu Sans;"><tt>通过</tt><tt></tt></span><tt>config.active_record.schema_format</tt><span style="font-family: DejaVu Sans;"><tt>来设置，其形式要么是</tt></span><tt>:sql</tt><span style="font-family: DejaVu Sans;"><tt>要么是</tt></span><tt>:ruby.</tt></p>

<p><tt>If</tt><tt> </tt><tt>:ruby</tt><tt> </tt><tt>is</tt><tt> </tt><tt>selected</tt><tt> </tt><tt>then</tt><tt> </tt><tt>the</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>is</tt><tt> </tt><tt>stored</tt><tt> </tt><tt>in</tt><tt> </tt><tt>db/schema.rb.</tt><tt> </tt><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>look</tt><tt> </tt><tt>at</tt><tt> </tt><tt>this</tt><tt> </tt><tt>file</tt><tt> </tt><tt>you</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>find</tt><tt> </tt><tt>that</tt><tt> </tt><tt>it</tt><tt> </tt><tt>looks</tt><tt> </tt><tt>an</tt><tt> </tt><tt>awful</tt><span style="font-family: DejaVu Sans;"><tt>可怕</tt><tt></tt></span><tt>lot</tt><tt> </tt><tt>like</tt><tt> </tt><tt>one</tt><tt> </tt><tt>very</tt><tt> </tt><tt>big</tt><tt> </tt><tt>migration:</tt><span style="font-family: DejaVu Sans;"><tt>如果</tt></span><tt>:ruby</tt><span style="font-family: DejaVu Sans;"><tt>被选中那么</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>被存储在</tt><tt></tt></span><tt>db/schema.rb</tt><span style="font-family: DejaVu Sans;"><tt>。如果你查看这个文件你将会发现它看起来就像一个很大的</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><code>ActiveRecord::Schema.define(:version</code><tt> </tt><code>=&gt;</code><code> </code><code>20080906171750)</code><code> </code><code>do</code></p>

<p><code> </code><code>create_table</code><code> </code><code>&ldquo;authors&rdquo;,</code><code> </code><code>:force</code> <code>=&gt;</code><code> </code><code>true</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>&ldquo;name&rdquo;</code></p>

<p><code> </code><code>t.datetime</code><code> </code><code>&ldquo;created_at&rdquo;</code></p>

<p><code> </code><code>t.datetime</code><code> </code><code>&ldquo;updated_at&rdquo;</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code> </code><code>create_table</code><code> </code><code>&ldquo;products&rdquo;,</code><code> </code><code>:force</code> <code>=&gt;</code><code> </code><code>true</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>&ldquo;name&rdquo;</code></p>

<p><code> </code><code>t.text</code><code> </code><code>&ldquo;description&rdquo;</code></p>

<p><code> </code><code>t.datetime</code><code> </code><code>&ldquo;created_at&rdquo;</code></p>

<p><code> </code><code>t.datetime</code><code> </code><code>&ldquo;updated_at&rdquo;</code></p>

<p><code> </code><code>t.string</code><code> </code><code>&ldquo;part_number&rdquo;</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><tt>In</tt><tt> </tt><tt>many</tt><tt> </tt><tt>ways</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>exactly</tt><tt> </tt><tt>what</tt><tt> </tt><tt>it</tt><tt> </tt><tt>is.</tt><span style="font-family: DejaVu Sans;"><tt>在很多情况下它能够准确的（反应出</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>）的信息。</tt><tt></tt></span><tt>This</tt><tt> </tt><tt>file</tt><tt> </tt><tt>is</tt><tt> </tt><tt>created</tt><tt> </tt><tt>by</tt><tt> </tt><tt>inspecting</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt> </tt><tt>and</tt><tt> </tt><tt>expressing</tt><tt> </tt><tt>its</tt><tt> </tt><tt>structure</tt><tt> </tt><tt>using</tt><tt> </tt><tt>create_table,</tt><tt> </tt><tt>add_index,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so</tt><tt> </tt><tt>on.</tt><span style="font-family: DejaVu Sans;"><tt>这个文件被创建来检查数据库以及表达它的结构使用</tt><tt></tt></span><tt>create_table,</tt><tt> </tt><tt>add_index</tt><span style="font-family: DejaVu Sans;"><tt>等等。</tt><tt></tt></span><tt>Because</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>database</tt><tt> </tt><tt>independent</tt><tt> </tt><tt>it</tt><tt> </tt><tt>could</tt><tt> </tt><tt>be</tt><tt> </tt><tt>loaded</tt><tt> </tt><tt>into</tt><tt> </tt><tt>any</tt><tt> </tt><tt>database</tt><tt> </tt><tt>that</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><tt>supports.</tt><span style="font-family: DejaVu Sans;"><tt>由于数据库的独立性它可以被导入到</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><span style="font-family: DejaVu Sans;"><tt>支持的任何数据库中。</tt><tt></tt></span><tt>This</tt><tt> </tt><tt>could</tt><tt> </tt><tt>be</tt><tt> </tt><tt>very</tt><tt> </tt><tt>useful</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>were</tt><tt> </tt><tt>to</tt><tt> </tt><tt>distribute</tt><tt> </tt><tt>an</tt><tt> </tt><tt>application</tt><tt> </tt><tt>that</tt><tt> </tt><tt>is</tt><tt> </tt><tt>able</tt><tt> </tt><tt>to</tt><tt> </tt><tt>run</tt><tt> </tt><tt>against</tt><tt> </tt><tt>multiple</tt><tt> </tt><tt>databases.</tt><span style="font-family: DejaVu Sans;"><tt>这会非常有用如果你发行一个应用程序它可能面对多个数据库运行。</tt></span></p>

<p><a name="result_box1"></a><tt>There</tt><tt> </tt><tt>is</tt><tt> </tt><tt>however</tt><tt> </tt><tt>a</tt><tt> </tt><tt>trade-off:</tt><tt> </tt><tt>db/schema.rb</tt><tt> </tt><tt>cannot</tt><tt> </tt><tt>express</tt><tt> </tt><tt>database</tt><tt> </tt><tt>specific</tt><tt> </tt><tt>items</tt><tt> </tt><tt>such</tt><tt> </tt><tt>as</tt><tt> </tt><tt>foreign</tt><tt> </tt><tt>key</tt><tt> </tt><tt>constraints,</tt><tt> </tt><tt>triggers</tt><tt> </tt><tt>or</tt><tt> </tt><tt>stored</tt><tt> </tt><tt>procedures.</tt><span style="font-family: DejaVu Sans;">然而，有一个权衡：</span>DB/ schema.rb<span style="font-family: DejaVu Sans;">不能表达数据库的具体项目，如外键约束，触发器或存储过程。</span><tt>While</tt><tt> </tt><tt>in</tt><tt> </tt><tt>a</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>execute</tt><tt> </tt><tt>custom</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>statements,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>dumper</tt><tt> </tt><tt>cannot</tt><tt> </tt><tt>reconstitute</tt><tt> </tt><tt>those</tt><tt> </tt><tt>statements</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database.</tt><span style="font-family: DejaVu Sans;"><tt>虽然在一个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>你可以执行自定义的</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>表达式，</tt></span><tt>schema</tt><span style="font-family: DejaVu Sans;"><tt>储存器不能修复一些</tt></span><tt>SQL</tt><span style="font-family: DejaVu Sans;"><tt>的表达式（不能实现</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>rollback</tt><span style="font-family: DejaVu Sans;"><tt>等功能）。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>are</tt><tt> </tt><tt>using</tt><tt> </tt><tt>features</tt><tt> </tt><tt>like</tt><tt> </tt><tt>this</tt><tt> </tt><tt>then</tt><tt> </tt><tt>you</tt><tt> </tt><tt>should</tt><tt> </tt><tt>set</tt><tt> </tt><tt>the</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>format</tt><tt> </tt><tt>to</tt><tt> </tt><tt>:sql.</tt><span style="font-family: DejaVu Sans;"><tt>如果你正在使用这样的特性接着你应该设置</tt></span><tt>schema</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>格式为</tt></span><tt>:sql</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>Instead</tt><tt> </tt><tt>of</tt><tt> </tt><tt>using</tt><tt> </tt><tt>Active</tt><tt> </tt><tt>Record</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>dumper</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>structure</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>dumped</tt><tt> </tt><tt>using</tt><tt> </tt><tt>a</tt><tt> </tt><tt>tool</tt><tt> </tt><tt>specific</tt><tt> </tt><tt>to</tt><tt> </tt><tt>that</tt><tt> </tt><tt>database</tt><tt> </tt><tt>(via</tt><tt> </tt><tt>the</tt><tt> </tt><tt>db:structure:dump</tt><tt> </tt><tt>Rake</tt><tt> </tt><tt>task)</tt><tt> </tt><tt>into</tt><tt> </tt><tt>db/#{Rails.env}_structure.sql.</tt><tt> </tt><tt>For</tt><tt> </tt><tt>example</tt><tt> </tt><tt>for</tt><tt> </tt><tt>PostgreSQL</tt><tt> </tt><tt>the</tt><tt> </tt><tt>pg_dump</tt><tt> </tt><tt>utility</tt><tt> </tt><tt>is</tt><tt> </tt><tt>used</tt><tt> </tt><tt>and</tt><tt> </tt><tt>for</tt><tt> </tt><tt>MySQL</tt><tt> </tt><tt>this</tt><tt> </tt><tt>file</tt><tt> </tt><tt>will</tt><tt> </tt><tt>contain</tt><tt> </tt><tt>the</tt><tt> </tt><tt>output</tt><tt> </tt><tt>of</tt><tt> </tt><tt>SHOW</tt><tt> </tt><tt>CREATE</tt><tt> </tt><tt>TABLE</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>various</tt><tt> </tt><tt>tables.</tt><tt> </tt><tt>Loading</tt><tt> </tt><tt>this</tt><tt> </tt><tt>schema</tt><tt> </tt><tt>is</tt><tt> </tt><tt>simply</tt><tt> </tt><tt>a</tt><tt> </tt><tt>question</tt><tt> </tt><tt>of</tt><tt> </tt><tt>executing</tt><tt> </tt><tt>the</tt><tt> </tt><tt>SQL</tt><tt> </tt><tt>statements</tt><tt> </tt><tt>contained</tt><tt> </tt><tt>inside.</tt></p>

<p><a name="result_box2"></a>By definition this will be a perfect copy of the database’s structure but this will usually prevent loading the schema into a database other than the one used to create it.<span style="font-family: DejaVu Sans;">根据定义，这将是一个完美的复制数据库的结构，但通常会阻止加载到比其他用于创建一个数据库的架构。</span></p>

<h4><a name="schema-dumps-and-source-control"></a><tt>6.3</tt><tt> </tt><tt>Schema</tt><tt> </tt><tt>Dumps</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Source</tt><tt> </tt><tt>Control</tt></h4>


<p>Because schema dumps are the authoritative source for your database schema, it is strongly recommended<span style="font-family: DejaVu Sans;">建议</span>that you check them into source control.<span style="font-family: DejaVu Sans;">因为架构转储是你的数据库架构的授权源，强烈建议你检查他们到源控制。</span></p>

<h3><a name="active-record-and-referential-integrity"></a> 7 Active Record and Referential<span style="font-family: WenQuanYi Micro Hei;">参照</span>Integrity<span style="font-family: WenQuanYi Micro Hei;">完整</span></h3>


<p>The Active Record way claims that intelligence belongs in your models, not in the database. As such, features such as triggers or foreign key constraints, which push some of that intelligence back into the database, are not heavily used.</p>

<p>Validations such as <tt>validates</tt><tt> </tt><tt>:foreign_key,</tt><tt> </tt><tt>:uniqueness</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> are one way in which models can enforce data integrity. The <tt>:dependent</tt> option on associations allows models to automatically destroy child objects when the parent is destroyed. Like anything which operates at the application level these cannot guarantee referential integrity and so some people augment them with foreign key constraints.</p>

<p>Although Active Record does not provide any tools for working directly with such features, the <tt>execute</tt> method can be used to execute arbitrary SQL. There are also a number of plugins such as <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/harukizaemon/redhillonrails/tree/master/foreign_key_migrations/">foreign_key_migrations</a></span></span> which add foreign key support to Active Record (including support for dumping foreign keys in <tt>db/schema.rb</tt>).</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
</feed>
