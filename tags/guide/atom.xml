<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: guide | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/guide/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Practical Guide to Use Spine.JS in Real World App.]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/08/21/a-practical-guide-to-use-spine-dot-js-in-real-world-app/"/>
    <updated>2012-08-21T13:13:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/08/21/a-practical-guide-to-use-spine-dot-js-in-real-world-app</id>
    <content type="html"><![CDATA[<h2>A Practical Guide to Use Spine.JS in Real World App.</h2>

<p>To give users the best possible fluid experience, we designed <a href="http://pragmatic.ly/">Pragmatic.ly</a> and complied with the <a title="Single Page Application" href="http://en.wikipedia.org/wiki/Single-page_application" target="_blank">single page application</a> standard. We believe that could make users focus on building product rather than spending time on project management itself. A wide range of technology solutions are available to make a single page application. Current trends suggest moving core application from server to client side and keeping server load at minimum for better performance by pure data APIs. <a href="http://pragmatic.ly/">Pragmatic.ly</a> took on the challange to cater to this need by developing server side in Rails, Spine.js at client side.</p>

<p><strong>Why Spine.JS</strong></p>

<p>There are many different JavaScript MVC frameworks such as <a title="Backbone.js" href="http://backbonejs.org/" target="_blank">Backbone.js</a>, <a title="Spine.js" href="http://spinejs.com/" target="_blank">Spine.js</a>, <a title="Knockout.js" href="http://knockoutjs.com/" target="_blank">Knockout.js</a>,<a title="Ember.js" href="http://emberjs.com/" target="_blank">Ember.js</a>, etc. There are too many choices and when I started Pragmatic.ly, I was struggling with the problem of which one I should pick up. Instead of wasting time on choosing I did a quick review by comparing the documents and then decided to choose Spine.js to start with. With months of development so far, I&rsquo;m glad that Spine.js works pretty well and below are the great benefits I have found in using Spine.js.</p>

<ul>
    <li><em>Simple and lightweight</em>. It's easy to dive into the core and extend as you need to.</li>
    <li><em>MVC pattern at its core</em>. It's very similar to the Rails counterparts. So I'm very comfortable with it from the first day.</li>
    <li><em>Rails integration</em>. It can't be easier to use Rails as the backend data API in Spine.js app. And the <a title="Spine Rails Gem" href="https://github.com/maccman/spine-rails" target="_blank">spine-rails</a> gem is another great addition.</li>
    <li><em><a title="Asynchronous User Interface" href="http://alexmaccaw.com/posts/async_ui" target="_blank">Asynchronous UI</a></em>. Ideally UIs never block and it will automatically update the data in backend. This brings the fast and very responsive user interface.</li>
</ul>


<p>If you want to get a brief review among different frameworks, check out this <a title="Top 10 JavaScript MVC Frameworks Reviewed" href="http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/">article</a> written by Gordon L. Hemption.</p>

<p><strong>How we use Spine.js in Pragmatic.ly</strong></p>

<p>We use spine-rails to generate the Spine.app structure, very similar to Rails app structure.</p>

<p>&nbsp;</p>

<div id="gist-3370365">
<div>
<div>
<div>
<div id="LC1">├── app</div>
<div id="LC2">│   ├── controllers</div>
<div id="LC3">│   │   ├── center</div>
<div id="LC4">│   │   │   ├── filter_controller.js.coffee</div>
<div id="LC5">│   │   │   └── tickets_controller.js.coffee</div>
<div id="LC6">│   │   ├── center_content_controller.coffee</div>
<div id="LC7">│   │   ├── comments_controller.js.coffee</div>
<div id="LC8">│   │   ├── header</div>
<div id="LC9">│   │   │   └── project_nav_controller.js.coffee</div>
<div id="LC10">│   │   ├── header_controller.coffee</div>
<div id="LC11">│   │   ├── iterations_controller.coffee</div>
<div id="LC12">│   │   ├── left_sidebar_controller.coffee</div>
<div id="LC13">│   │   ├── projects_controller.coffee</div>
<div id="LC14">│   │   ├── right_sidebar_controller.coffee</div>
<div id="LC15">│   │   ├── sidebars</div>
<div id="LC16">│   │   │   ├── left_iteration.js.coffee</div>
<div id="LC17">│   │   │   ├── left_people.js.coffee</div>
<div id="LC18">│   │   │   ├── right_activities.js.coffee</div>
<div id="LC19">│   │   │   └── right_detail_section.js.coffee</div>
<div id="LC20">│   │   ├── tickets_controller.coffee</div>
<div id="LC21">│   │   └── users_controller.js.coffee</div>
<div id="LC22">│   ├── index.js.coffee</div>
<div id="LC23">│   ├── lib</div>
<div id="LC24">│   │   ├── constants.js.coffee</div>
<div id="LC25">│   │   ├── eco-helpers.js</div>
<div id="LC26">│   │   └── view.js.coffee</div>
<div id="LC27">│   ├── models</div>
<div id="LC28">│   │   ├── comment.js.coffee</div>
<div id="LC29">│   │   ├── iteration.js.coffee</div>
<div id="LC30">│   │   ├── project.js.coffee</div>
<div id="LC31">│   │   ├── ticket.js.coffee</div>
<div id="LC32">│   │   └── user.js.coffee</div>
<div id="LC33">│   └── views</div>
<div id="LC34">│   ├── comments</div>
<div id="LC35">│   │   ├── audit.jst.eco</div>
<div id="LC36">│   │   ├── form.jst.eco</div>
<div id="LC37">│   │   └── plain.jst.eco</div>
<div id="LC38">│   ├── iterations</div>
<div id="LC39">│   │   ├── section.jst.eco</div>
<div id="LC40">│   │   └── show.jst.eco</div>
<div id="LC41">│   ├── projects</div>
<div id="LC42">│   │   ├── edit.jst.eco</div>
<div id="LC43">│   │   ├── form.jst.eco</div>
<div id="LC44">│   │   ├── new.jst.eco</div>
<div id="LC45">│   │   └── switch.jst.eco</div>
<div id="LC46">│   ├── tickets</div>
<div id="LC47">│   │   ├── section.jst.eco</div>
<div id="LC48">│   │   ├── show.jst.eco</div>
<div id="LC49">│   │   └── toolbar.jst.eco</div>
<div id="LC50">│   └── users</div>
<div id="LC51">│   ├── people.jst.eco</div>
<div id="LC52">│   └── show.jst.eco</div>
<div id="LC53">├── application.js</div>
<div id="LC54">├── bootstrap.js.coffee</div>
<div id="LC55">└── dashboard.js.coffee</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370365/f5a2684f50f33afbe69eeff4cd6747f907e97141/Pragmatic.ly%20JS%20Structure">view raw</a><a href="https://gist.github.com/3370365#file_pragmatic.ly js structure">Pragmatic.ly JS Structure</a><a href="https://gist.github.com/3370365">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p>So basically it&rsquo;s controllers, models and views.</p>

<p><strong>Controllers</strong></p>

<p>There are two kinds of Controllers in Pragmatic.ly. In Spine, Controllers are considered the glue of an application, adding and responding to DOM events, rendering templates and ensuring that views and models are kept in sync. For example,</p>

<p>&nbsp;</p>

<div id="gist-3370386">
<div>
<div>
<div>
<div id="LC1">class App.LeftIterationController extends Spine.Controller</div>
<div id="LC2">  el: '.sidebar #iterations'</div>
<div id="LC4">  elements:</div>
<div id="LC5">    'ul.list': 'list'</div>
<div id="LC7">  constructor: -&gt;</div>
<div id="LC8">    super</div>
<div id="LC9">    App.Iteration.bind 'create', @addIteration</div>
<div id="LC10">    App.Iteration.bind 'refresh', @refreshIterations</div>
<div id="LC12">  release: -&gt;</div>
<div id="LC13">    super</div>
<div id="LC14">    App.Iteration.unbind 'create', @addIteration</div>
<div id="LC15">    App.Iteration.unbind 'refresh', @refreshIterations</div>
<div id="LC17">  addIteration: (iteration) =&gt;</div>
<div id="LC18">    iteration.unbind()</div>
<div id="LC19">    view = new App.IterationItem(item: iteration)</div>
<div id="LC20">    @list.append(view.render().el)</div>
<div id="LC22">  refreshIterations: (iterations) =&gt;</div>
<div id="LC23">    @addIteration iteration for iteration in iterations</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370386/39fe0b331aa7d524f41132056a4ff6e1da432c74/left_iteration_controller.js.coffee">view raw</a><a href="https://gist.github.com/3370386#file_left_iteration_controller.js.coffee">left_iteration_controller.js.coffee</a><a href="https://gist.github.com/3370386">This Gist</a> brought to you by<a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p>We split the page into multiple blocks and each block is a Spine Controller. Talking the above example, LeftIterationsController is the Controller to manage the iterations list in the left sidebar.</p>

<p>Then what&rsquo;s the other kind? The answer is <em>Routes</em>! We extract the routes to the dedicated controllers now. It will setup the routes and respond to the <em>navigation</em> event. Then it will prepare the data and trigger the event to let another controller handle it to render templates. For example,</p>

<p>&nbsp;</p>

<div id="gist-3370398">
<div>
<div>
<div>
<div id="LC1">class App.TicketsController extends Spine.Controller</div>
<div id="LC2">  constructor: -&gt;</div>
<div id="LC3">    super</div>
<div id="LC4">    @routes</div>
<div id="LC5">      "/tickets": @index</div>
<div id="LC6">      "/tickets/:id" : (params) -&gt;</div>
<div id="LC7">        @show(params.id)</div>
<div id="LC9">  index: -&gt;</div>
<div id="LC10">    tickets = App.Ticket.all()</div>
<div id="LC11">    App.Ticket.trigger "tickets:index", tickets</div>
<div id="LC13">  show: (id) -&gt;</div>
<div id="LC14">    ticket = App.Ticket.find(id)</div>
<div id="LC15">    $.publish 'ticket:switch', ticket</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370398/6d475eed1c1c593ca1338cdc2681be3b1ec9dd6d/ticket_routing_controller.js.coffee">view raw</a><a href="https://gist.github.com/3370398#file_ticket_routing_controller.js.coffee">ticket_routing_controller.js.coffee</a><a href="https://gist.github.com/3370398">This Gist</a> brought to you by<a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p><strong>Models</strong></p>

<p>Models manage data for the application. It&rsquo;s very similar to Rails models. I just want to mention one thing though &ndash; as we moved the logic from server side to client side, there was no need to translate 1:1 on the client side. Instead, encapsulate the data into model which is suitable for the page based on the user.</p>

<p>&nbsp;</p>

<div id="gist-3370424">
<div>
<div>
<div>
<div id="LC1">class App.Project extends Spine.Model</div>
<div id="LC2">  @configure 'Project', 'id', 'name', 'description', 'owner_id', 'uid'</div>
<div id="LC3">  @extend Spine.Model.Ajax</div>
<div id="LC4">  @extend Spine.Model.Dirty</div>
<div id="LC6">  validate: -&gt;</div>
<div id="LC7">    'name required' unless @name</div>
<div id="LC9">  inviteUser: (email) -&gt;</div>
<div id="LC10">    App.Invitation.create(project_id: @id, email: email)</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370424/e79540cdbabd4cde1b1e2c142b3a26caba6e5da4/project.js.coffee">view raw</a><a href="https://gist.github.com/3370424#file_project.js.coffee">project.js.coffee</a><a href="https://gist.github.com/3370424">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p><strong>Views</strong></p>

<p>Views are about building and maintaining the DOM elements. Views in Spine are very simple and don&rsquo;t have the built-in UI binding. So most of the time you should let Controller observe the Model and get notified when the model changes, then update the view accordingly.</p>

<p>By doing all the view rendering client-side, you should use JavaScript templating solution to define templates for views as markup containing tempalte variables. There are a number of good candidates, such as <a title="Mustache" href="http://mustache.github.com/" target="_blank">Mustache</a>, <a title="jQuery Template" href="http://api.jquery.com/category/plugins/templates" target="_blank">jQuery.tmpl</a> and <a title="Eco" href="https://github.com/sstephenson/eco" target="_blank">Eco</a>.</p>

<p>I use Eco in Pragmatic.ly. The Erb-like syntax and CoffeeScript support is a big triumph. However, you should know that every eco template generates the same helpers which will increase the file size. You can use this gist to avoid the problem which will register the global helpers and inject into the Eco templates.</p>

<p>&nbsp;</p>

<div id="gist-2360781">
<div>
<div>
<div>
<div id="LC1"># Put this file in lib/</div>
<div id="LC3">require 'sprockets/eco_template'</div>
<div id="LC5">class CleanEcoTemplate &lt; Sprockets::EcoTemplate</div>
<div id="LC6">  FROM = " (function() {"</div>
<div id="LC7">  TO = "}).call(__obj);"</div>
<div id="LC9">  def evaluate(scope, locals, &amp;block)</div>
<div id="LC10">    content = Eco.compile(data)</div>
<div id="LC11">    from = content.index(FROM)</div>
<div id="LC12">    to = content.rindex(TO)</div>
<div id="LC13">    content = content[from...to] + TO</div>
<div id="LC14">    &lt;&lt;-JS</div>
<div id="LC15">function(__obj) {</div>
<div id="LC16">if (!__obj) __obj = {};</div>
<div id="LC17">var __helpers = window.ecoHelpers;</div>
<div id="LC18">var __out = [];</div>
<div id="LC19">var __sanitize = __helpers.sanitize;</div>
<div id="LC20">var __capture = __helpers.captureFor(__obj, __out);</div>
<div id="LC21">var __rememberSafe = __obj.safe;</div>
<div id="LC22">var __rememberEscape = __obj.escape;</div>
<div id="LC23">__obj.safe = __helpers.safe;</div>
<div id="LC24">__obj.escape = __helpers.escape;</div>
<div id="LC25">#{content}</div>
<div id="LC26">__obj.safe = __rememberSafe;</div>
<div id="LC27">__obj.escape = __rememberEscape;</div>
<div id="LC28">return __out.join('');</div>
<div id="LC29">};</div>
<div id="LC30">JS</div>
<div id="LC31">  end</div>
<div id="LC32">end</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/8b3b00534fea091b4514589460e99deb2abfe618/clean_eco_template.rb">view raw</a><a href="https://gist.github.com/2360781#file_clean_eco_template.rb">clean_eco_template.rb</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1"># Must include eco-helpers.js before eco files</div>
<div id="LC3">(function(global) {</div>
<div id="LC4">  var ecoHelpers = {</div>
<div id="LC5">    sanitize: function(value) {</div>
<div id="LC6">      if (value &amp;&amp; value.ecoSafe) {</div>
<div id="LC7">        return value;</div>
<div id="LC8">      } else if (typeof value !== 'undefined' &amp;&amp; value != null) {</div>
<div id="LC9">        return ecoHelpers.escape(value);</div>
<div id="LC10">      } else {</div>
<div id="LC11">        return '';</div>
<div id="LC12">      }</div>
<div id="LC13">    },</div>
<div id="LC15">    safe: function(value) {</div>
<div id="LC16">      if (value &amp;&amp; value.ecoSafe) {</div>
<div id="LC17">        return value;</div>
<div id="LC18">      } else {</div>
<div id="LC19">        if (!(typeof value !== 'undefined' &amp;&amp; value != null)) value = '';</div>
<div id="LC20">        var result = new String(value);</div>
<div id="LC21">        result.ecoSafe = true;</div>
<div id="LC22">        return result;</div>
<div id="LC23">      }</div>
<div id="LC24">    },</div>
<div id="LC26">    escape: function(value) {</div>
<div id="LC27">      return ('' + value)</div>
<div id="LC28">        .replace(/&amp;/g, '&amp;amp;')</div>
<div id="LC29">        .replace(/&lt;/g, '&amp;lt;')</div>
<div id="LC30">        .replace(/&gt;/g, '&amp;gt;')</div>
<div id="LC31">        .replace(/"/g, '&amp;quot;');</div>
<div id="LC32">    },</div>
<div id="LC34">    captureFor: function(obj, out) {</div>
<div id="LC35">      return (function(callback) {</div>
<div id="LC36">        var length = out.length;</div>
<div id="LC37">        callback.call(obj);</div>
<div id="LC38">        return ecoHelpers.safe(out.splice(length, out.length - length).join(''));</div>
<div id="LC39">      });</div>
<div id="LC40">    }</div>
<div id="LC41">  };</div>
<div id="LC43">  global.ecoHelpers = ecoHelpers;</div>
<div id="LC44">})(window);</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/9aa691027d57ddd63ec7f6969481336789539248/eco-helpers.js">view raw</a><a href="https://gist.github.com/2360781#file_eco_helpers.js">eco-helpers.js</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1"># Put this file in config/initializers</div>
<div id="LC3">require 'clean_eco_template'</div>
<div id="LC5">Rails.application.assets.register_engine '.eco', CleanEcoTemplate</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/7ccb944d8613edd073dddd34547bcdaa766eefa6/eco_template.rb">view raw</a><a href="https://gist.github.com/2360781#file_eco_template.rb">eco_template.rb</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p><strong>Problems</strong></p>

<p>So that&rsquo;s how we use Spine.js to power Pragmatic.ly. It works very well but still have some limitations.</p>

<ul>
    <li>By default, you can only monitor the whole Model change event and update the view accordingly. For example, even the username is not changed, you still have to update the views containing that data. There is a "change:field" event in Backbone.js which allow you only to update the view when that field of data changed. I like that. So I made a plugin to support that. Check the Gist out.
<div id="gist-2866558">
<div>
<div>
<div>
<div id="LC1">Spine ?= require('spine')</div>
<div id="LC3">Include =</div>
<div id="LC4">  savePrevious: -&gt;</div>
<div id="LC5">    @constructor.records[@id].previousAttributes = @attributes()</div>
<div id="LC7">Spine.Model.Dirty =</div>
<div id="LC8">  extended: -&gt;</div>
<div id="LC9">    @bind 'refresh', -&gt;</div>
<div id="LC10">      @each (record) -&gt; record.savePrevious()</div>
<div id="LC12">    @bind 'save', (record) -&gt;</div>
<div id="LC13">      if record.previousAttributes?</div>
<div id="LC14">        for key in record.constructor.attributes when key of record</div>
<div id="LC15">          if record[key] isnt record.previousAttributes[key]</div>
<div id="LC16">            record.trigger('change:'+key, record[key])</div>
<div id="LC17">      record.savePrevious()</div>
<div id="LC19">    @include Include</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2866558/515b724d2e7b4b648e5f10c9ef93782f3242c9cd/dirty.js.coffee">view raw</a><a href="https://gist.github.com/2866558#file_dirty.js.coffee">dirty.js.coffee</a><a href="https://gist.github.com/2866558">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1">So the model object can bind the event "change:#{field} to trigger event when the field value is changed.</div>
<div id="LC3">By default it's off and if need this feature, the model should extend Spine.Model.Dirty.</div>
<div id="LC5">A sample case.</div>
<div id="LC7">class User extends Spine.Model</div>
<div id="LC8">  @extend Spine.Model.Dirty</div>
<div id="LC9">end</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2866558/568e3e12fd1a160d5cedd5a476edd202622d110b/Usage:">view raw</a><a href="https://gist.github.com/2866558#file_usage:">Usage:</a><a href="https://gist.github.com/2866558">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div></li>
    <li>The Ajax plugin in Spine.js plays very nice with backend REST APIs, such as Rails. For example, creating the model will trigger a "CREATE /collections" event to the server and updating the model will trigger a "PUT /collections/id" event, seemlessly. However, nested resources in Rails is very common but Spine lacks to support that. Either you have to trigger requests to top-level URL or setup the request yourself. I have done a dirty hack to support scoping. It's dirty but works.
<div id="gist-3371899">
<div>
<div>
<div>
<div id="LC1">class App.Ticket extends Spine.Model</div>
<div id="LC2">  @configure 'Ticket', "id", "project_id"</div>
<div id="LC4">  @scope: -&gt;</div>
<div id="LC5">    "projects/#{current.project_id}"</div>
<div id="LC7">  scope: -&gt;</div>
<div id="LC8">    "projects/#{@project_id}"</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3371899/ec5a4177783ce2827796895f6b7c886f6f3643a6/url_scoping.js.coffee">view raw</a><a href="https://gist.github.com/3371899#file_url_scoping.js.coffee">url_scoping.js.coffee</a><a href="https://gist.github.com/3371899">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div></li>
    <li>Asynchronous UI is cool and works for 99% situations. But in a real world app you have to deal with errors like bugs or network failures. Spine doesn't have the default error handling for this situation and leave all work to you. It's fine but you should know that for that 1% situation, you have to spend lots of time to avoid the impact.</li>
</ul>


<p><strong>Test</strong></p>

<p>I would like to cover how Test works in Pragmatic.ly in another post. To give a quick overview, we use <a title="JavaScript Behavior Test Framework" href="http://pivotal.github.com/jasmine/" target="_blank">Jasmine</a> for JS test and <a title="JavaScript Code Coverage Tool" href="http://siliconforks.com/jscoverage/" target="_blank">JSCoverage</a> for measuring code coverage. Nice pair!</p>

<p>&nbsp;</p>

<p><strong>About Pragmatic.ly</strong></p>

<p><a title="Fast &amp; easy to use project management tool &amp; real-time collaboration" href="https://pragmatic.ly/">Pragmatic.ly</a> is a fast and easy to use project management tool featuring real time collaboration. It&rsquo;s an elegant project management service built for developers with love.</p>

<p>&nbsp;</p>

<p>Now that you&rsquo;ve read so far, you should follow me <a title="yedingding's twitter" href="https://twitter.com/yedingding" target="_blank">@yedingding</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby-style-guide-zh-cn]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/03/29/ruby-style-guide-zh-cn/"/>
    <updated>2012-03-29T23:35:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/03/29/ruby-style-guide-zh-cn</id>
    <content type="html"><![CDATA[<h2>ruby-style-guide-zh-cn</h2>

<h1>序</h1>


<blockquote>风格可以用来区分从好到卓越。
-- Bozhidar Batsov</blockquote>


<p>有一件事情总是困扰着，作为Ruby程序员的我 &ndash; python 开发者都有一个很棒的编程风格参考 (<a href="http://www.python.org/dev/peps/pep-0008/">PEP-8</a>)，然而我们从没有一个官方的（公认）的guide，Ruby代码风格文档和最佳实践。而且我信赖这些风格（的一些约定）。我也相信下面的一些好东西，像我们这样的Ruby开发者，也应该有能力写出这样的梦寐以求的文档。</p>

<p>这份指南诞生于我们公司内部的Ruby编程准则，基于Ruby社区的大多数成员会对我正在做的有兴趣这样的发点，我决定做这样的工作，而且世界上很少需要另一个公司内部的（编程）准则。但是这个世界将会一定有益于社区驱动的以及社区认可的，Ruby习惯和风格实践。</p>

<p>自从这个guide（发表）以来，我收到了很多来自优秀的Ruby社区的世界范围内的成员的回馈。感谢所有的建议和支持！集我们大家之力，我们可以创作出对每一个Ruby开发人员有益的资源。</p>

<p>补充，如果你正在使用rails你可能会希望查阅<a href="https://github.com/bbatsov/rails-style-guide">Ruby on Rails 3 Style Guide</a>.</p>

<h1>Ruby 风格指南</h1>


<p>这个Ruby风格指南推荐（一些）最佳实践使得现实世界中的Ruby程序员可以写出能够被其他真是世界的Ruby程序员维护的代码。一个风格指南反映了真实世界的使用习惯，同时一个风格指南紧紧把握一个观点那就是人们拒绝接受任何有可能无法使用指南的风险，无论它多好。</p>

<p>这个指南被分为几个具有相关的rules的几节。我尝试给rules添加合理的解释（如果它被省略我假设它相当的明显了）。</p>

<p>我并没有列举所有的rules &ndash; 它们大多数基于我作为一个专业的软件工程师的广泛生涯，回馈和来自Ruby社区成员的建议以及各种备受推崇的Ruby编程资源，例如<a href="http://pragprog.com/book/ruby3/programming-ruby-1-9">&ldquo;Programming Ruby 1.9&rdquo;</a> 和 <a href="http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177">&ldquo;The Ruby Programming Language&rdquo;</a>.</p>

<p>这个指南仍然在工作进程中 &ndash; 一些rules缺乏例子，一些rules没有合适的例子来使得它们足够明了。</p>

<p>你可以使用<a href="https://github.com/TechnoGate/transmuter">Transmuter</a>.来生成指南的PDF或者HTML的copy。</p>

<h2>源代码布局</h2>


<blockquote>附近的每个人都深信每一个风格除了他们自己的都是 丑陋的并且难以阅读的。脱离"but their own"那么他们 完全正确... 
-- Jerry Coffin (on indentation缩进)</blockquote>


<ul>
    <li>使用 <code>UTF-8</code> 作为源文件编码。</li>
    <li>每个缩进级别使用两个 <strong>spaces</strong>
<div>
<pre># good
def some_method
  do_something
end

# bad - four spaces
def some_method
    do_something
end</pre>
</div></li>
    <li>使用Unix-风格行结束。(*BSD/Solaris/Linux/OSX 用户被涵盖为默认，Windows 用户必须特别小心.) &gt; \n是换行，英文是LineFeed，ASCII码是0xA。 &gt; \r是回车，英文是Carriage Return ,ASCII码是0xD。 &gt; windows下enter是 \n\r,unix下是\n,mac下是\r
<ul>
    <li>如果你正在使用Git你可能会想要添加下面的配置设置来保护你的项目（避免）Windows蔓延过来的行结束符:<code>$ git config --global core.autecrlf true</code></li>
</ul>
</li>
    <li>使用空格：在操作符旁；逗号，冒号和分号后；在 <code>{</code>旁和在 <code>}</code>之前，大多数空格可能对Ruby解释（代码）无关，但是它的恰当使用是让代码变得易读的关键。
<div>
<pre>sum = 1 + 2
a, b = 1, 2
1 &gt; 2 ? true : false; puts 'Hi'
[1, 2, 3].each { |e| puts e }</pre>
</div>
唯一的例外是当使用指数操作时：
<div>
<pre># bad
e = M * c ** 2

# good
e = M * c**2</pre>
</div></li>
    <li>没有空格 <code>(</code>, <code>[</code>之后或者 <code>]</code>, <code>)</code>之前。
<div>
<pre>some(arg).other
[1, 2, 3].length</pre>
</div></li>
    <li><code>when</code>和<code>case</code> 缩进深度一致。我知道很多人会不同意这点，但是它是"The Ruby Programming Language" 和 "Programming Ruby"中公认的风格。
<div>
<pre>case
when song.name == 'Misty'
  puts 'Not again!'
when song.duraton &gt; 120
  puts 'Too long!'
when Time.now &gt; 21
  puts "It's too late"
else
  song.play
end

kind = case year
       when 1850..1889 then 'Blues'
       when 1890..1909 then 'Ragtime'
       when 1910..1929 then 'New Orleans Jazz'
       when 1930..1939 then 'Swing'
       when 1940..1950 then 'Bebop'
       else 'Jazz'
       end</pre>
</div></li>
    <li>使用空行在 <code>def</code>s 并且一个方法根据逻辑段来隔开。
<div>
<pre>def some_method
  data = initialize(options)

  data.manipulate!

  data.result
end

def some_methods
  result
end</pre>
</div></li>
    <li>如果一个方法的调用参数分割为多行将它们于<strong>方法名</strong>对齐。
<div>
<pre># starting point (line is too long)
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com', from: 'us@example.com', subject: 'Important message', body: source.text)
end
# bad (normal indent)
def send_mail(source)
  Mailer.deliver(
    to: 'bob@example.com',
    from: 'us@example.com',
    subject: 'Important message',
    body: source.text)
end

# bad (double indent)
def send_mail(source)
  Mailer.deliver(
      to: 'bob@example.com',
      from: 'us@example.com',
      subject: 'Important message',
      body: source.text)
end
# good
def send_mail(source)
  Mailer.deliver(to: 'bob@example.com',
                 from: 'us@example.com',
                 subject: 'Important message',
                 body: source.text)
end</pre>
</div></li>
    <li>在 API 文档中使用 RDoc和它的公约。不要在注释代码块和<code>def</code>之间加入空行。</li>
    <li>保持每一行少于80字符。</li>
    <li>避免尾随空格。</li>
</ul>


<h2>语法</h2>


<ul>
    <li>使用括号将<code>def</code>的参数括起来。当方法不接收任何参数的时候忽略括号。
<div>
<pre>def some_method
  # body omitted
end

def some_method_with_arguments(arg1, arg2)
  # body omitted
end</pre>
</div></li>
    <li>从来不要使用 <code>for</code>， 除非你知道使用它的准确原因。大多数时候迭代器都可以用来替代for。<code>for</code> is implemented in terms of<code>each</code>#<code>for</code>是<code>each</code>的组实现 (因此你正间接添加了一级)，但是有一个小道道 - <code>for</code>并不包含一个新的scope(不像<code>each</code>)并且在它的块中定义的变量在外面也是可以访问的。
<div>
<pre>arr = [1, 2, 3]

# bad
for elem in arr do 
  puts elem
end

puts elem # =&gt; 3

# good
arr.each { |elem| puts elem }</pre>
</div></li>
    <li>在多行的<code>if/unless</code>中坚决不要使用<code>then</code>.
<div>
<pre># bad
if some_condition then
  # body omitten
end

# good
if some_condition
  # body omitted
end</pre>
</div></li>
    <li>喜欢三元操作运算（<code>?:</code>）超过<code>if/then/else/end</code>结果。 它更加普遍而且明显的更加简洁。
<div>
<pre># bad
result = if some_condition then something else something_else end

# good
result = some_condition ? something : something_else</pre>
</div></li>
    <li>使用一个表达式在三元操作运算的每一个分支下面只使用一个表达式。也就是说三元操作符不要被嵌套。在这样的情形中宁可使用<code>if/else</code>。
<div>
<pre># bad
some_condition ? (nested_condition ? nested_something : nested_something_else) : something_else

# good
if some_condition
  nested_condition ? nested_something : nested_something_else
else
  something_else
end</pre>
</div></li>
    <li>使用三元操作运算代替<code>if x: ...</code>。</li>
    <li>在 one-line cases 的时候使用<code>when x then ...</code>。替代的语法<code>when x: xxx</code>已经在Ruby 1.9中移除。</li>
    <li>不要使用<code>when x; ...</code>。查看上面的规则。</li>
    <li>布尔表达式使用<code>&amp;&amp;/||</code>, <code>and/of</code>用于控制流程。（经验Rule:如果你必须使用额外的括号（表达逻辑），那么你正在使用错误的的操作符。）
<div>
<pre># boolean expression
if some_condition &amp;&amp; some_other_condition
  do_something
end

# control flow
document.save? or document.save!</pre>
</div></li>
    <li>避免多行<code>?:</code>(三元操作运算)，使用<code>if/unless</code>替代。</li>
    <li>在单行语句的时候喜爱使用<code>if/unless</code>修饰符。另一个好的选择就是使<code>and/of</code>来做流程控制。
<div>
<pre># bad
if some_condition
  do_something
end

# good
do_something if some_condition

# another good option
some_condition and do_something</pre>
</div></li>
    <li>在否定条件下喜欢<code>unless</code>超过<code>if</code>(或者控制流程 <code>or</code>)。
<div>
<pre># bad
do_something if !some_condition

# good
do_something unless some_condition

# another good option
some_condition or do_something</pre>
</div></li>
    <li>不要使用<code>else</code>搭配<code>unless</code>。将其的语义重写为肯定形式。
<div>
<pre># bad
unless sucess?
  puts 'failure'
else
  puts 'sucess'
end

# good
if sucess?
  puts 'sucess'
else
  puts 'failure'
end</pre>
</div></li>
    <li>不要在<code>if/unless/while</code>将条件旁括起来，除非这个条件包含一个参数(参见下面 "使用<code>=</code>返回值")。
<div>
<pre># bad
if (x&gt;10)
  # body omitted
end

# good
if x &gt; 10
  # body omitted
end

# ok
if (x = self.next_value)
  # body omitted
end</pre>
</div></li>
    <li>DSL(e.g. Rake, Rails, RSpec)里的方法，Ruby“关键字”方法(e.g. <code>attr_reader</code>, <code>puts</code>)以及属性访问方法，所带参数忽略括号。使用括号将在其他方法调用的参数括起来。
<div>
<pre>class Person
  attr_reader :name, :age

  # omitted
end

temperance = Person.new('Temperance', 30)
temperance.name

puts temperance.age

x = Math.sin(y)
array.delete(e)</pre>
</div></li>
    <li>在单行代码块的时候宁愿使用<code>{...}</code>而不是<code>do...end</code>。避免在多行代码块使用<code>{...}</code>(多行链式通常变得非常丑陋)。通常使用<code>do...end</code>来做<code>流程控制</code>和<code>方法定义</code>(例如 在Rakefiles和某些DSLs中)。避免在链式调用中使用<code>do...end</code>。
<div>
<pre>names = ["Bozhidar", "Steve", "Sarah"]

#good
names.each { |name| puts name }

#bad
names.each do |name|
  puts name
end

# good
names.select { |name| name.start_with?("S") }.map { |name| name.upcase }

# bad
names.select do |name|
  name.start_with?("S")
end.map { |name| name.upcase }</pre>
</div>
有人会争论多行链式看起来和使用<code>{...}</code>一样工作，但是他们问问自己 - 这样的代码真的有可读性码并且为什么代码块中的内容不能被提取到美丽的methods。</li>
    <li>避免在不需要的地方使用<code>return</code>
<div>
<pre># bad
def some_method(some_arr)
  return some_arr.size
end

# good
def some_method(some_arr)
  some_arr.size
end</pre>
</div></li>
    <li>当分配默认值给方法参数的时候，在<code>=</code>附近使用空格。
<div>
<pre># bad
def some_method(arg1=:default, arg2=nil, arg3=[])
  # do something...
end

# good
def some_method(arg1 = :default, arg2 = nil, arg3 = [])
  # do something...
end</pre>
</div></li>
    <li>避免在不需要的时候使用行连接符(<code>\\</code>)。实际上应该避免行连接符。
<div>
<pre># bad
result = 1 - \
         2

# good (but still ugly as hell)仍然像地狱一样丑陋
result = 1 \
         - 2</pre>
</div></li>
    <li>使用<code>=</code>返回一个表达式的值是很好的，但是需要用括号把赋值运算式括起来。
<div>
<pre># good - show intented use of assignment
if (v = array.grep(/foo/)) ...

# bad
if v = array.grep(/foo/) ...

# also good - show intended use of assignment and has correct precedence.
if (v = self.next_value) == "hello" ...</pre>
</div></li>
    <li>使用<code>||=</code>轻松的初始化变量。
<div>
<pre># set name to Vozhidar, only if it's nil or false
name ||= 'Bozhidar'</pre>
</div></li>
    <li>不要使用<code>||=</code>来初始化布尔变量。（思考一些如果当前值为<code>false</code>的时候会发生什么。）
<div>
<pre># bad - would set enabled to true even if it was false
enable ||= true

# good
enabled = true if enabled.nil?</pre>
</div></li>
    <li>避免使用Perl的指定变量风格（比如，<code>$0-9</code>，<code>$</code>，等等。）。它们相当神秘，不鼓励在单行代码之外使用它们。</li>
    <li>从来不要在方法名和（参数）开括号之间使用空格。
<div>
<pre># bad
f (3+2) + 1

# good
f(3 + 2) +1</pre>
</div></li>
    <li>如果方法的第一个参数以开括号开始，通常使用括号把它们全部括起来。例如<code>f((3 + 2) + 1)</code>。</li>
    <li>通常使用-w 选项运行Ruby解释器，在你忘记上面所诉规则，ruby将会提示你。</li>
    <li>当你的hash字典是symbols的时候，使用Ruby 1.9的字面量语法。
<div>
<pre># bad
hash = { :one =&gt; 1, :two =&gt; 2 }

#good
hash = { one: 1, two: 2 }</pre>
</div></li>
    <li>使用新的 lambda 语法。
<div>
<pre># bad
lambda = lambda { |a, b| a + b }
lambda.call(1, 2)

# good
lambda = -&gt;(a, b) { a + b }
lambda.(1, 2)</pre>
</div></li>
    <li>对不使用的块变量使用<code>_</code>。
<div>
<pre># bad
result = hash.map { |k, v| v + 1}

# good
result = hash.map { |_, v| v + 1 }</pre>
</div></li>
</ul>


<h3>命名</h3>


<blockquote>The only real difficulties in programming are cache invalidation and naming things. 
-- Phil Karlton 程序（运行）中唯一不一样的是无效的缓存和命名的事物（变量）。
-- Phil Karlton</blockquote>


<ul>
    <li>使用<code>snake_case</code>的形式给变量和方法命名。</li>
    <li>Snake case: punctuation is removed and spaces are replaced by single underscores. Normally the letters share the same case (either UPPER_CASE_EMBEDDED_UNDERSCORE or lower_case_embedded_underscore) but the case can be mixed</li>
    <li>使用<code>CamelCase(駝峰式大小寫)</code>的形式给类和模块命名。(保持使用缩略首字母大写的方式如HTTP, RFC, XML)</li>
    <li>使用<code>SCREAMING_SNAKE_CASE</code>给常量命名。</li>
    <li>在表示断言的方法名（方法返回真或者假）的末尾添加一个问号（如Array#empty?）。</li>
    <li>可能会造成潜在“危险”的方法名（如修改self或者在原处修改变量的方法，exit!等）应该在末尾添加一个感叹号。</li>
    <li>当在短的块中使用<code>reduce</code>时，命名参数<code>|a, e|</code> (accumulator, element)。
<div>
<pre>#Combines all elements of enum枚举 by applying a binary operation, specified by a block or a symbol that names a method or operator.
# Sum some numbers
(5..10).reduce(:+)                            #=&gt; 45#reduce
# Same using a block and inject
(5..10).inject {|sum, n| sum + n }            #=&gt; 45 #inject注入
# Multiply some numbers
(5..10).reduce(1, :*)                         #=&gt; 151200
# Same using a block
(5..10).inject(1) {|product, n| product * n } #=&gt; 151200</pre>
</div></li>
    <li>在定义二元操作符方法时，将其的参数取名为other。
<div>
<pre>def +(other)
  # body omitted
end</pre>
</div></li>
    <li><code>map</code>优先于<code>collect</code>，<code>find</code>优先于<code>detect</code>，<code>select</code>优先于<code>find_all</code>，<code>reduce</code>优先于<code>inject</code>，<code>size</code>优先于<code>length</code>。以上的规则并不绝定，如果使用后者能提高代码的可读性，那么尽管使用它们。这些对应的方法名（如collect，detect，inject）继承于SmallTalk语言，它们在其它语言中并不是很通用。鼓励使用select而不是find_all是因为select与reject一同使用时很不错，并且它的名字具有很好的自解释性。</li>
</ul>


<h2>注释</h2>


<blockquote>Good code is its own best documentation. As you're about to add a comment, ask yourself, "How can I improve the code so that this comment isn't needed?" Improve the code and then document it to make it even clearer. 
-- Steve McConnell 好的代码在于它有好的文档。当你打算添加一个注释，问问自己，“我该做的是怎样提高代码质量，那么这个注释是不是不需要了？”提高代码并且给他们添加文档使得它更加简洁。
-- Steve McConnell</blockquote>


<ul>
    <li>写出自解释文档代码，然后忽略不工作的这部分。这不是说着玩。</li>
    <li>注释长于一个单词则以大写开始并使用标点。使用一个空格将注释与符号隔开。Use <a href="http://en.wikipedia.org/wiki/Sentence_spacing">one space</a> after periods.</li>
    <li>避免多余的注释。
<div>
<pre># bad
counter += 1 # increments counter by one</pre>
</div></li>
    <li>随时更新注释，没有注释比过期的注释更好。</li>
    <li>不要为糟糕的代码写注释。重构它们，使它们能够“自解释”。(Do or do not - there is no try.)</li>
</ul>


<h2>注解</h2>


<ul>
    <li>注解应该写在紧接相关代码的上方。</li>
    <li>注解关键字后跟一个冒号和空格，然后是描述问题的记录。</li>
    <li>如果需要多行来描述问题，随后的行需要在<code>#</code>后面缩进两个空格。
<div>
<pre>def bar
  # FIXME: This has crashed occasionally since v3.2.1. It may
  #  be related to the BarBazUtil upgrade.
  baz(:quux)
end</pre>
</div></li>
    <li>如果问题相当明显，那么任何文档就多余了，注解也可以（违规的）在行尾而没有任何备注。这种用法不应当在一般情况下使用，也不应该是一个rule。
<div>
<pre>def bar
  sleep 100 # OPTIMIZE
end</pre>
</div></li>
    <li>使用<code>TODO</code>来备注缺失的特性或者在以后添加的功能。</li>
    <li>使用<code>FIXME</code>来备注有问题需要修复的代码。</li>
    <li>使用<code>OPTIMIZE</code>来备注慢的或者低效的可能引起性能问题的代码。</li>
    <li>使用<code>HACK</code>来备注那些使用问题代码的地方可能需要重构。</li>
    <li>使用<code>REVIEW</code>来备注那些需要反复查看确认工作正常的代码。例如：<code>REVIEW: 你确定客户端是怎样正确的完成X的吗？</code></li>
    <li>使用其他自定义的关键字如果认为它是合适的，但是确保在你的项目的<code>README</code>或者类似的地方注明。</li>
</ul>


<h2>类</h2>


<ul>
    <li>在设计类层次的时候确保他们符合<a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle">Liskov Substitution Principle</a>原则。(译者注: LSP原则大概含义为: 如果一个函数中引用了`父类的实例', 则一定可以使用其子类的实例替代, 并且函数的基本功能不变. (虽然功能允许被扩展)) &gt;Liskov替换原则：子类型必须能够替换它们的基类型 &gt; 1. 如果每一个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都代换为o2时,程序P的行为没有变化，那么类型T2是类型T1的子类型。 &gt; 2. 换言之，一个软件实体如果使用的是一个基类的话，那么一定适用于其子类，而且它根本不能察觉出基类对象和子类对象的区别。只有衍生类替换基类的同时软件实体的功能没有发生变化，基类才能真正被复用。 &gt; 3. 里氏代换原则由Barbar Liskov(芭芭拉.里氏)提出，是继承复用的基石。 &gt; 4. 一个继承是否符合里氏代换原则，可以判断该继承是否合理（是否隐藏有缺陷）。</li>
    <li>努力是你的类尽可能的健壮<a href="http://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a>。</li>
    <li>总是为你自己的类提供to_s方法, 用来表现这个类（实例）对象包含的对象.
<div>
<pre>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def to_s
    "#@first_name #@last_name"
  end
end</pre>
</div></li>
    <li>使用<code>attr</code>功能功能成员来定义各个实例变量的访问器或者修改器方法。
<div>
<pre># bad
class Person
  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  def first_name
    @first_name
  end

  def last_name
    @last_name
  end
end

# good
class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end
end</pre>
</div></li>
    <li>考虑添加工厂方法来提供灵活的方法来创建实际类实例。
<div>
<pre>class Person
  def self.create(potions_hash)
    # body omitted
  end
end</pre>
</div></li>
    <li>鸭子类型（<a href="http://en.wikipedia.org/wiki/Duck_typing">duck-typing</a>）由于继承。
<div>
<pre># bad
class Animal
  # abstract method
  def speak
  end
end

# extend superclass
class Duck &lt; Animal
  def speak
    puts 'Quack! Quack'
  end
end

# extend superclass
class Dog &lt; Animal
  def speak
    puts 'Bau! Bau!'
  end
end

# good
class Duck
  def speak
    puts 'Quack! Quack'
  end
end

class Dog
  def speak
    puts 'Bau! Bau!'
  end
end</pre>
</div></li>
    <li>避免使用类变量（<code>@@</code>）因为他们讨厌的继承习惯（在子类中也可以修改父类的类变量）。
<div>
<pre>class Parent
  @@class_var = 'parent'

  def self.print_class_var
    puts @@class_var
  end
end

class Child &lt; Parent
  @@class_var = 'child'
end

Parent.print_class_var # =&gt; will print "child"</pre>
</div>
正如上例看到的, 所有的子类共享类变量, 并且可以直接修改类变量,此时使用类实例变量是更好的主意.</li>
    <li>根据方法的用途为他们分配合适的可见度( <code>private</code>, <code>protected</code> )，不要让所有的方法都是 <code>public</code> (这是默认设定)。这是 <em>Ruby</em> 不是 *Python*。</li>
    <li><code>public</code>, <code>protected</code>, 和 <code>private</code> 等可见性关键字应该和其（指定）的方法具有相同的缩进。并且不同的可见性关键字之间留一个空格。
<div>
<pre>class SomeClass
  def public_method
    # ...
  end

  private
  def private_method
    # ...
  end
end</pre>
</div></li>
    <li>使用self来定义单例方法. 当代码重构时, 这将使得方法定义代码更加具有灵活性.
<div>
<pre>class TestClass
  # bad
  def TestClass.some_method
    # body omitted
  end

  # good
  def self.some_other_method
    # body ommited
  end

  # 也可以这样方便的定义多个单例方法。
  class &lt;&lt; self
    def first_method
      # body omitted
    end

    def second_method_etc
      # body omitted
    end
  end
end</pre>
</div>
<pre lang="shell"><code>class SingletonTest def size 25 end end test1 = SingletonTest.new test2 = SingletonTest.new def test2.size 10 end test1.size # =&gt; 25 test2.size # =&gt; 10 </code></pre>
本例中，test1 與 test2 屬於同一類別，但 test2 具有重新定義的 size 方法，因此兩者的行為會不一樣。只給予單一物件的方法稱為单例方法 (singleton method)。</li>
</ul>


<h2>异常处理</h2>


<ul>
    <li>不要抑制异常输出。
<div>
<pre>begin
  # an exception occurs here
rescue SomeError
  # the rescue clause does absolutely nothing还没有补救代码
end</pre>
</div></li>
    <li>不要用异常来控制流。
<div>
<pre># bad
begin
  n / d
rescue ZeroDivisionError
  puts "Cannot divide by 0!"
end

# good
if n.zero?
  puts "Cannot divide by 0!"
else
  n / d</pre>
</div></li>
    <li>应该总是避免拦截(最顶级的)Exception异常类.
<div>
<pre># bad 
begin
  # an exception occurs here
rescue
  # exception handling
end

# still bad
begin
  # an exception occurs here
rescue Exception
  # exception handling
end</pre>
</div></li>
    <li>将更具体的异常放在拦截链的上方，否则他们将不会被捕获。
<div>
<pre># bad
begin
  # some code
rescue Exception =&gt; e
  # some handling
rescue StandardError =&gt; e
  # some handling
end

# good
begin
  # some code
rescue StandardError =&gt; e
  # some handling
rescue Exception =&gt; e
  # some handling
end</pre>
</div></li>
    <li>使用ensure语句, 来确保总是执行一些特地的操作.
<div>
<pre>f = File.open("testfile")
begin
  # .. process
rescue
  # .. handle error
ensure
  f.close unless f.nil?
end</pre>
</div></li>
    <li>除非必要, 尽可能使用Ruby标准库中异常类，而不是引入一个新的异常类。(而不是派生自己的异常类)</li>
</ul>


<h2>集合</h2>


<ul>
    <li>总是使用%w的方式来定义字符串数组.(译者注: w表示英文单词word, 而且定义之间千万不能有逗号)
<div>
<pre># bad
STATES = ['draft', 'open', 'closed']

# good
STATES = %w(draft open closed)</pre>
</div></li>
    <li>避免直接引用靠后的数组元素, 这样隐式的之前的元素都被赋值为nil.
<div>
<pre>arr = []
arr[100] = 1 # now you have an array with lots of nils</pre>
</div></li>
    <li>如果要确保元素唯一, 则使用 <code>Set</code> 代替 <code>Array</code> .<code>Set</code> 更适合于无顺序的, 并且元素唯一的集合, 集合具有类似于数组一致性操作以及哈希的快速查找.</li>
    <li>尽可能使用符号代替字符串作为哈希键.
<div>
<pre># bad
hash = { 'one' =&gt; 1, 'two' =&gt; 2, 'three' =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }</pre>
</div></li>
    <li>避免使用易变对象作为哈希键。</li>
    <li>优先使用1.9的新哈希语法。
<div>
<pre># bad
hash = { :one =&gt; 1, :two =&gt; 2, :three =&gt; 3 }

# good
hash = { one: 1, two: 2, three: 3 }</pre>
</div></li>
    <li>记住, 在Ruby1.9中, 哈希的表现不再是无序的. (译者注: Ruby1.9将会记住元素插入的序列)</li>
    <li>当遍历一个集合的同时, 不要修改这个集合。</li>
</ul>


<h2>字符串</h2>


<ul>
    <li>优先使用 <code>字符串插值</code> 来代替 <code>字符串串联</code>。
<div>
<pre># bad
email_with_name = user.name + ' &lt;' + user.email + '&gt;'

# good
email_with_name = "#{user.name} &lt;#{user.email}&gt;"</pre>
</div></li>
    <li>当不需要使用 <code>字符串插值</code> 或某些特殊字符时, 应该优先使用单引号.
<div>
<pre># bad
name = "Bozhidar"

# good
name = 'Bozhidar'</pre>
</div></li>
    <li>当使用字符串插值替换 <code>实例变量</code> 时, 应该省略{}.
<div>
<pre>class Person
  attr_reader :first_name, :last_name

  def initialize(first_name, last_name)
    @first_name = first_name
    @last_name = last_name
  end

  # bad
  def to_s
    "#{@first_name} #{@last_name}"
  end

  # good
  def to_s
    "#@first_name #@last_name"
  end
end</pre>
</div></li>
    <li>操作较大的字符串时, 避免使用 <code>String#+</code> , 如果需要修改被操作字符串, 应该总是使用 <code>String#&lt;&lt;</code> 作为代替。就地并列字符串实例变体比 <code>String#+</code> 更快，它创建了多个字符串对象。
<div>
<pre># good and also fast
html = ''
html &lt;&lt; '&lt;h1&gt;Page title&lt;/h1&gt;'

paragraphs.each do |paragraph|
  html &lt;&lt; "&lt;p&gt;#{paragraph}&lt;/p&gt;"
end</pre>
</div></li>
</ul>


<h2>正则表达式</h2>


<ul>
    <li>如果只是需要中查找字符串的 <code>text</code>, 不要使用正则表达式：<code>string['text']</code></li>
    <li>针对简单的结构, 你可以直接使用string[/RE/]的方式来查询.
<div>
<pre>match = string[/regexp/]             # get content of matched regexp
first_group = string[/text(grp)/, 1] # get content of captured group
string[/text (grp)/, 1] = 'replace'  # string =&gt; 'text replace'</pre>
</div></li>
    <li>当无需引用分组内容时, 应该使用(?:RE)代替(RE).
<div>
<pre>/(first|second)/   # bad
/(?:first|second)/ # good</pre>
</div></li>
    <li>避免使用 <code>$1-$9</code> 风格的分组引用, 而应该使用1.9新增的命名分组来代替.
<div>
<pre># bad
/(regexp)/ =~ string
...
process $1

# good
/(?&lt;meaningful_var&gt;regexp)/ =~ string
...
process meaningful_var</pre>
</div></li>
    <li>字符类有以下几个特殊关键字值得注意: <code>^</code>, <code>-</code>, <code>\</code>, <code>]</code>, 所以, 不要在集合中, 转义 <code>.</code> 或者 <code>[]</code> 中的括号, 他们是正常字符.</li>
    <li>注意, <code>^</code> 和 <code>$</code> , 他们匹配行首和行尾, 而不是一个字符串的结尾, 如果你想匹配整个字符串, 用 <code>\A</code> 和 <code>\Z</code>。
<div>
<pre>string = "some injection\nusername"
string[/^username$/]   # matches
string[/\Ausername\Z/] # don't match</pre>
</div></li>
    <li>使用 <code>x</code> 修饰符来匹配复杂的表达式, 这将使得RE更具可读性, 你可以添加一些有用的注释. 注意, 所有空格将被忽略.
<div>
<pre>regexp = %r{
  start         # some text
  \s            # white space char
  (group)       # first group
  (?:alt1|alt2) # some alternation
  end
}x</pre>
</div></li>
    <li><code>sub</code>/<code>gsub</code>也支持哈希以及代码块形式语法, 可用于复杂情形下的替换操作.</li>
</ul>


<h2>百分号和字面值</h2>


<ul>
    <li>多用 <code>%w</code>
<div>
<pre>STATES = %w(draft open closed)</pre>
</div></li>
    <li>定义需要插值和嵌套双引号符号的单行字符串，使用%()的方式.而多行字符串, 尽量使用heredocs格式.
<div>
<pre># bad (不需要插值)
%(&lt;div&gt;Some text&lt;/div&gt;)
# should be '&lt;div&gt;Some text&lt;/div&gt;' # 应该这样写

# bad (没有双引号)
%(This is #{quality} style)
# should be "This is #{quality} style" # 应该这样写

# bad (multiple lines)
%(&lt;div&gt;\n&lt;span&gt;#{exclamation}&lt;/span&gt;\n&lt;/div&gt;)
# should be a heredoc.

# good (插值, 引号, 单行)
%(&lt;tr&gt;&lt;td&gt;#{name}&lt;/td&gt;)</pre>
</div>
Heredoc is a robust way to create string in PHP with more lines but without using quotations. Heredoc 是 php 中不使用引号就可以创建多行字符串的一种强大的方式。

line-oriented string literals (Here document) There's a line-oriente form of the string literals that is usually called as <code>here document</code>. Following a <code>&lt;&lt;</code> you can specify a string or an identifier to terminate the string literal, and all lines following the current line up to the terminator are the value of the string. If the terminator is quoted, the type of quotes determines the type of the line-oriented string literal. Notice there must be <strong>no space between <code>&lt;&lt;</code> and the terminator</strong> .

If the - placed before the delimiter, then all leading whitespcae characters (tabs or spaces) are stripped from input lines and the line containing delimiter. This allows here-documents within scripts to be indented in a natural fashion.
<div>
<pre>  print &lt;&lt;EOF
    The price is #{$Price}.
    EOF

  print &lt;&lt;"EOF";            # same as above
The price is #{$Price}.
EOF

  print &lt;&lt;`EOC`         # execute commands
echo hi there
echo lo there
EOC

  print &lt;&lt;"foo", &lt;&lt;"bar"    # you can stack them
I said foo.
foo
I said bar.
bar

  myfunc(&lt;&lt;"THIS", 23, &lt;&lt;'THAT')
Here's a line
or two.
THIS
and here's another.
THAT

  if need_define_foo
    eval &lt;&lt;-EOS         # delimiters can be indented
      def foo
        print "foo\n"
      end
    EOS
  end</pre>
</div></li>
    <li><code>%r</code> 的方式只适合于定义包含多个 <code>/</code> 符号的正则表达式。
<div>
<pre># bad
%r(\s+)

# still bad
%r(^/(.*)$)
# should be /^\/(.*)$/

# good
%r(^/blog/2011/(.*)$)</pre>
</div>
<div>
<pre>irb(main):001:0&gt; string="asdfas.64"
=&gt; "asdfas.64"
irb(main):002:0&gt; string[/^\/(.*)$/]
=&gt; nil
irb(main):003:0&gt; string="/asdfas.64"
=&gt; "/asdfas.64"
irb(main):004:0&gt; string[/^\/(.*)$/]
=&gt; "/asdfas.64"
irb(main):007:0&gt; string="/blog/2011/asdfas.64"
=&gt; "/blog/2011/tmp/asdfas.64"
irb(main):008:0&gt; string[%r(^/blog/2011/(.*)$)]
=&gt; "/blog/2011/tmp/asdfas.64"</pre>
</div></li>
    <li>避免使用<code>%q</code>，<code>%Q</code>， <code>%x</code>， <code>%s</code>,和 <code>%W</code></li>
    <li>优先使用()作为%类语法格式的分隔符.(译者注, 本人很喜欢 <code>%(...)</code>, 不过Programming Ruby中, 显然更喜欢使用%{}的方式)</li>
</ul>


<h2>元编程</h2>


<ul>
    <li>在编写库时，不要乱动核心库。（不要画蛇添足）</li>
</ul>


<h2>杂项</h2>


<ul>
    <li>总是打开Ruby -w开关。</li>
    <li>通常情况下, 尽量避免使用哈希作为方法的 <code>optional</code> 参数. (此时应该考虑这个方法是不是功能太多?)</li>
    <li>避免一个方法内容超过10行代码, 理想情况下, 大多数方法内容应该少于5行.(不算空行)</li>
    <li>尽量避免方法的参数超过三或四个.</li>
    <li>有时候, 必须用到全局方法, 应该增加这些方法到 Kernel 模块，并设置他们可见性关键字为 <code>private</code>。</li>
    <li>尽可能使用类实例变量代替全局变量. (译者注:是类实例变量, 而不是类的实例变量. 汗~~)
<div>
<pre>#bad
$foo_bar = 1

#good
class Foo
  class &lt;&lt; self
    attr_accessor :bar
  end
end

Foo.bar = 1</pre>
</div></li>
    <li>能够用 <code>alias_method</code> 就不要用 <code>alias</code>。</li>
    <li>使用 <code>OptionParser</code> 来解析复杂的命令行选项， 较简单的命令行， <code>-s</code> 参数即可。</li>
    <li>按照功能来编写方法, 当方法名有意义时, 应该避免方法功能被随意的改变。</li>
    <li>避免不需要的元编程。</li>
    <li>除非必要, 避免更改已经定义的方法的参数。</li>
    <li>避免超过三级的代码块嵌套。</li>
    <li>应该持续性的遵守以上指导方针。</li>
    <li>多使用（生活）常识。</li>
</ul>


<h1>Contributing</h1>


<p>Nothing written in this guide is set in stone. It&rsquo;s my desire to work together with everyone interested in Ruby coding style, so that we could ultimately create a resource that will be beneficial to the entire Ruby community.</p>

<p>Feel free to open tickets or send pull requests with improvements. Thanks in advance for your help!</p>

<h1>Spread the Word</h1>


<p>A community-driven style guide is of little use to a community that doesn&rsquo;t know about its existence. Tweet about the guide, share it with your friends and colleagues. Every comment, suggestion or opinion we get makes the guide just a little bit better. And we want to have the best possible guide, don&rsquo;t we?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec简明指南 By Yuanyi ZHANG]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/03/09/rspecjian-ming-zhi-nan-by-yuanyi-zhang/"/>
    <updated>2012-03-09T18:05:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/03/09/rspecjian-ming-zhi-nan-by-yuanyi-zhang</id>
    <content type="html"><![CDATA[<h2>RSpec简明指南 By Yuanyi ZHANG</h2>

<p>这是<a href="http://blog.davidchelimsky.net/">David Chelimsky</a>写的一篇RSpec简明指南，原文在<a href="http://blog.davidchelimsky.net/articles/2007/05/14/an-introduction-to-rspec-part-i">这里</a>。</p>

<p><span style="font-size: large;"><strong>简介</strong></span></p>

<p>要了解RSpec，我们首先需要了解什么是行为驱动开发（Behaviour Driven Development，简称BDD），BDD是一种融合了可接受性测试驱动计划（Acceptance Test Driven Planning），域驱动设计（Domain Driven Design）以及测试驱动开发（Test Driven Development，简称TDD）的敏捷开发模型。RSpec为BDD开发提供TDD支持。</p>

<p>你可以简单的将RSpec看作一个传统的单元测试框架，但我们更愿意将它看成是一种领域特定语言（Domain Specific Language，以下简称DSL），它的主要作用就是描述我们对系统执行某个样例(example)的期望行为(behavior)。</p>

<p>这篇指南遵从TDD思想，但是我们将使用行为（behavior）和样例（example）来代替测试例（test case）和测试方法（test method），想知道我们为什么采用这样的术语，请参看<a href="http://dannorth.net/tags/agile/bdd/">Dan North</a>, <a href="http://daveastels.com/articles/2005/07/05/a-new-look-at-test-driven-development">Dave Astels</a>, 以及 <a href="http://exampler.com/">Brian Marick</a> 的相关文章。</p>

<p><span style="font-size: large;"><strong>安装</strong></span></p>

<p>目前RSpec的最新版本是1.0.5，需要Ruby184以上版本，可以通过下面这条命令安装：</p>

<p><code># gem install rspec</code></p>

<p><span style="font-size: large;"><strong>准备工作</strong></span></p>

<p>整篇指南都围绕一个例子展开，因此在开始前，你最好先为这个例子建个目录：</p>

<p><code>$ mkdir rspec_tutorial
$ cd rspec_tutorial</code></p>

<p><span style="font-size: large;"><strong>开始</strong></span></p>

<p>我们首先要了解的是RSpec DSL的”describe”与”it”方法，这两个方法有很多其它的名字（但是我们不推荐使用它们），我们之所以使用这样的命名，只是想让你站在行为（behavior）而不是结构（structure）的角度进行思考。</p>

<p>创建名为user_spec.rb的文件：</p>

<p><code>describe User do
end</code></p>

<p>describe方法创建一个Behavior实例，所以你可以将”describe User”理解为”描述用户的行为（describe the behaviour of the User class）”，或许这个方法叫做“
describe_the_behaviour_of”会更合适些，但这实在太冗长了，所以我们决定只选取第一个单词describe来作为这个方法的名字。</p>

<p>现在你可以在shell中试试这条命令：</p>

<p><code>$ spec user_spec.rb</code></p>

<p>spec命令有很多选项，但大部分超出了本指南的范围，如果你感兴趣，可以只输入spec而不带任何参数来查看帮助信息。</p>

<p>让我们接着回到上面那条命令，它应该会产生下面的输出：</p>

<p><code>./user_spec.rb:1: uninitialized constant User (NameError)</code></p>

<p>这是因为我们还没有创建User类，也就是说我们要描述的东西不存在，因此我们需要再创建一个user.rb来定义我们所要描述的对象：</p>

<p><code>class User
end</code></p>

<p>并在user_spec.rb中包含它：</p>

<p><code>require &lsquo;user&rsquo;
describe User do
end</code></p>

<p>现在再次运行spec命令：</p>

<p><code>$ spec user_spec.rb
Finished in 6.0e-06 seconds
0 examples, 0 failures</code></p>

<p>这个输出是说我们还没有定义样例，所以现在我们就来定义一个：</p>

<p><code>describe User do
  it &ldquo;should be in any roles assigned to it&rdquo; do
  end
end</code></p>

<p>it方法返回一个Example实例，因此我们可以将it方法理解成“用户行为的一个样例”。</p>

<p>再次运行spec：</p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it
Finished in 0.022865 seconds
1 example, 0 failures</code></p>

<p>specdoc参数格式化行为（describe方法创建的对象）以及样例（it方法创建的对象）的名字然后输出，这种格式来自于TestDox，一个为JUnit测试例及方法提供相似报告的工具。</p>

<p>现在我们开始增加Ruby代码：</p>

<p><code>describe User do
  it &ldquo;should be in any roles assigned to it&rdquo; do
    user.should be_in_role(&ldquo;assigned role&rdquo;)
  end
end</code></p>

<p>这句话的意思是User应该能够胜任所有分配给他的角色，那么事实是这样么？让我们运行spec试试看：</p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it (ERROR &ndash; 1)
1)
NameError in ‘User should be in any roles assigned to it’
undefined local variable or method `user’ for #&lt;#:0×14ecdd8&gt;
./user_spec.rb:6:
Finished in 0.017956 seconds
1 example, 1 failure</code></p>

<p>又出错了，是的，但在继续之前，让我们先仔细看看这段出错信息：</p>

<ul>
    <li>“ERROR -1)”告诉我们”should be in any roles assigned to it”这个样例出错了</li>
    <li>“1)”则为我们详细描述了这个错误，当样例很多时，你就会发现这个编号非常有用</li>
</ul>


<p>还有一点需要注意：这段信息没有给出RSpec代码的backtrace，如果你需要它，可以通过–backtrace选项来获取。</p>

<p>下面，我们继续我们的例子，上面的错误是因为我们没有创建User对象，那我们就创建一个：</p>

<p><code>describe User do
  it &ldquo;should be in any roles assigned to it&rdquo; do
    user = User.new
    user.should be_in_role(&ldquo;assigned role&rdquo;)
  end
end</code></p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it (ERROR &ndash; 1)
1)
NoMethodError in ‘User should be in any roles assigned to it’
undefined method `in_role?’ for #
./user_spec.rb:7:
Finished in 0.020779 seconds
1 example, 1 failure</code></p>

<p>还是失败，不过这次是因为User对象缺少role_in?方法，修改user.rb:</p>

<p><code>class User
  def in_role?(role)
  end</code></p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it (FAILED &ndash; 1)
1)
‘User should be in any roles assigned to it’ FAILED
expected in_role?(”assigned role”) to return true, got nil
./user_spec.rb:7:
Finished in 0.0172110000000001 seconds
1 example, 1 failure</code></p>

<p>虽然又失败了，但我们的第一个目标其实已经达到了，我们得到了一段更有意义的错误描述”User should be in any roles assigned to it”。</p>

<p>让这段代码避免失败很简单：</p>

<p><code>class User
  def in_role?(role)
    true
  end</code></p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it
Finished in 0.018173 seconds
1 example, 0 failures</code></p>

<p>现在终于通过了，但是让我们再来看看这段代码：</p>

<p><code>describe User do
  it &ldquo;should be in any roles assigned to it&rdquo; do
    user = User.new
    user.should be_in_role(&ldquo;assigned role&rdquo;)
  end
end</code></p>

<p>我们可以将这个样例理解成“用户应该接受所有分配给他的角色”，但问题是我们还没有分给他角色呢？</p>

<p><code>describe User do
  it &ldquo;should be in any roles assigned to it&rdquo; do
    user = User.new
    user.assign_role(&ldquo;assigned role&rdquo;)
    user.should be_in_role(&ldquo;assigned role&rdquo;)
  end
end</code></p>

<p>这段代码又会引发一个错误，因为User并没有assign_role这个方法：</p>

<p><code>class User
  def in_role?(role)
    true
  end
  def assign_role(role)
  end
end</code></p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it
Finished in 0.018998 seconds
1 example, 0 failures</code></p>

<p>样例再次通过，但是我们的任务还没结束，只要你再回头看看我们目前的代码，就会发现这个User的行为与我们的目标还有距离。</p>

<p>现在，我们只是解决了“用户必须接受所有分配给他的角色”，但是还有一个问题就是”用户不应该接受没有分配给他的角色“。所以我们需要为用户行为再增加一个样例：</p>

<p><code>describe User do
  it &ldquo;should be in any roles assigned to it&rdquo; do
    user = User.new
    user.assign_role(&ldquo;assigned role&rdquo;)
    user.should be_in_role(&ldquo;assigned role&rdquo;)
  end
  it “should NOT be in any roles not assigned to it” do
    user = User.new
    user.should_not be_in_role(”unassigned role”)
  end
end</code></p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it
&ndash; should NOT be in any roles not assigned to it (FAILED &ndash; 1)
1)
‘User should NOT be in any roles not assigned to it’ FAILED
expected in_role?(”unassigned role”) to return false, got true
./user_spec.rb:12:
Finished in 0.019014 seconds
2 examples, 1 failure</code></p>

<p>失败了，用户接受了没有分给他的角色，这需要我们对User的实现做些改动：</p>

<p><code>class User
  def in_role?(role)
    role == &ldquo;assigned role&rdquo;
  end
  def assign_role(role)
  end
end</code></p>

<p>现在，一切都搞定了，但是我们的代码与样例有些重复（它们都使用了”assigned role”），因此，有必要对User类进行重构：</p>

<p><code>class User
  def in_role?(role)
    role == @role
  end
  def assign_role(role)
    @role = role
  end
end</code></p>

<p>随后，让我们再来测试一下：</p>

<p><code>$ spec user_spec.rb &mdash;format specdoc
User
&ndash; should be in any roles assigned to it
&ndash; should NOT be in any roles not assigned to it
Finished in 0.018199 seconds
2 examples, 0 failures</code></p>

<p>事情就这么结束了么？你可能还有些疑惑，因为我们甚至可以将一个数字分配给用户，但这与”用户应该接受任何分配给他的角色”是吻合的，所以，这时候我们应该征求下我们的客户的意见，“每个用户在同一时间只能担当一个角色吗？”，如果客户的回答是Yes，那么很幸运，我们不需要对我们的代码进行改动，而只需对样例的描述进行一些修改，但如果客户的回答是No，那我们恐怕还得再做些工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails 3.1 Release Notes]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/12/30/ruby-on-rails-3-dot-1-release-notes/"/>
    <updated>2011-12-30T19:12:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/12/30/ruby-on-rails-3-dot-1-release-notes</id>
    <content type="html"><![CDATA[<h2>Ruby on Rails 3.1 Release Notes</h2>

<h2>Ruby on Rails 3.1 Release Notes</h2>


<p>Highlights in Rails 3.1:</p>

<p>Rails<span style="font-family: DejaVu Sans;">中的亮点：</span></p>

<ul>
    <li>Streaming <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">流</span></span></li>
    <li>Reversible Migrations <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">可逆（数据）迁移</span></span></li>
    <li>Assets Pipeline Assets<span style="font-family: DejaVu Sans;">管道</span></li>
    <li>jQuery as the default JavaScript library <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">以</span></span>jQuery<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">作为默认的 </span></span>JavaScript library</li>
</ul>


<p>This release notes cover the major changes, but don’t include every little bug fix and change. If you want to see everything, check out the <a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a> in the main Rails repository on GitHub.</p>

<p><span style="font-family: DejaVu Sans;">这次发行</span>notes<span style="font-family: DejaVu Sans;">涵盖了主要的</span>changes<span style="font-family: DejaVu Sans;">，但是没有包含每个很</span>little<span style="font-family: DejaVu Sans;">的</span>bug<span style="font-family: DejaVu Sans;">修复和</span>chage<span style="font-family: DejaVu Sans;">。如果你希望看到所有的事情，检查</span>Rails <span style="font-family: DejaVu Sans;">的</span>GitHub<span style="font-family: DejaVu Sans;">主代码仓库中的</span><a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a><span style="font-family: DejaVu Sans;">。</span></p>

<h3><a name="upgrading-to-rails-3-1"></a>1 Upgrading to Rails 3.1<span style="font-family: WenQuanYi Micro Hei;">升级到</span>Rails 3.1</h3>


<p>If you’re upgrading an existing application, it’s a great idea to have good test coverage before going in. You should also first upgrade to Rails 3 in case you haven’t and make sure your application still runs as expected before attempting to update to Rails 3.1. Then take heed of the following changes:</p>

<p><span style="font-family: DejaVu Sans;">如果你打算升级一个存在的应用程序，在开始进入升级的时候有一个很好的测试覆盖是一个好主意。你还应该首先升级到</span>Rails 3<span style="font-family: DejaVu Sans;">以防止你并没有确保你的应用程序在企图升级到</span>Rails 3.1<span style="font-family: DejaVu Sans;">之前能够预计到升级后仍然能够运行。然后留意随后（介绍）的</span>changes<span style="font-family: DejaVu Sans;">：</span></p>

<h4><a name="rails-3-1-requires-at-least-ruby-1-8-7"></a> 1.1 Rails 3.1 requires at least Ruby 1.8.7</h4>


<p>Rails 3.1 requires Ruby 1.8.7 or higher. Support for all of the previous Ruby versions has been dropped officially and you should upgrade as early as possible. Rails 3.1 is also compatible with Ruby 1.9.2.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">需要至少</span>Ruby 1.8.7<span style="font-family: DejaVu Sans;">或者更高。曾经支持的所有的早先的</span>Ruby<span style="font-family: DejaVu Sans;">版本被正式取消，你需要尽快升级。</span>Rails 3.1<span style="font-family: DejaVu Sans;">同时也与</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">兼容。</span></p>

<p>Note that Ruby 1.8.7 p248 and p249 have marshaling bugs that crash Rails. Ruby Enterprise Edition have these fixed since release 1.8.7-2010.02 though. On the 1.9 front, Ruby 1.9.1 is not usable because it outright segfaults, so if you want to use 1.9.x jump on 1.9.2 for smooth sailing.</p>

<p><span style="font-family: DejaVu Sans;">注意</span>Ruby 1.8.7 p248<span style="font-family: DejaVu Sans;">和</span>p249<span style="font-family: DejaVu Sans;">有</span>marshaling bugs<span style="font-family: DejaVu Sans;">其与</span>Rails<span style="font-family: DejaVu Sans;">冲突。</span>Ruby<span style="font-family: DejaVu Sans;">企业版自</span>1.8.7-2010.02 <span style="font-family: DejaVu Sans;">发行版已经修复了这些</span>bug<span style="font-family: DejaVu Sans;">。在以</span>1.9<span style="font-family: DejaVu Sans;">开头的</span>ruby<span style="font-family: DejaVu Sans;">，</span>Ruby 1.9.1<span style="font-family: DejaVu Sans;">是不可用的因为</span>it outright segfaults<span style="font-family: DejaVu Sans;">，因此如果你想使用</span>1.9.x<span style="font-family: DejaVu Sans;">可以平稳的跳至</span>1.9.2</p>

<h3><a name="creating-a-rails-3-1-application"></a>2 Creating a Rails 3.1 application</h3>


<h1>You should have the &lsquo;rails&rsquo; rubygem installed</h1>

<p>$ rails new myapp</p>

<p>$ cd myapp</p>

<h4><a name="vendoring-gems"></a>2.1 Vendoring Gems</h4>


<p>Rails now uses a <tt>Gemfile</tt> in the application root to determine the gems you require for your application to start. This <tt>Gemfile</tt> is processed by the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/carlhuda/bundler">Bundler</a></span></span> gem, which then installs all your dependencies. It can even install all the dependencies locally to your application so that it doesn’t depend on the system gems.</p>

<p>Rails<span style="font-family: DejaVu Sans;">现在使用一个位于应用程序根目录的</span>Gemfile<span style="font-family: DejaVu Sans;">文件来决定使你开始你的应用程序的</span>require<span style="font-family: DejaVu Sans;">。这个</span>Gemfile<span style="font-family: DejaVu Sans;">文件被</span>Bundler gem<span style="font-family: DejaVu Sans;">加工生成，它会随后安装你所有的依赖。它甚至可以以你的应用程序为</span>locally<span style="font-family: DejaVu Sans;">安装依赖，使得你的应用程序不用依赖系统</span>gems<span style="font-family: DejaVu Sans;">。</span></p>

<p>&nbsp;</p>

<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="74" /> <col width="583" /> </colgroup>
<tbody>
<tr>
<td width="74">vendor/</td>
<td width="583">A place for all third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.<span style="font-family: DejaVu Sans;">放置第三方代码的地方。在一个典型的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中，这里包含</span>Ruby Gems<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">源代码（如果你把</span>Rails<span style="font-family: DejaVu Sans;">安装到你的项目中）还包含一些预先包装好的额外的插件</span></td>
</tr>
</tbody>
</table>


<p>More information: – <a href="http://gembundler.com/"><span style="color: #000080;"><span style="text-decoration: underline;">bundler</span></span><span style="color: #000080;"><span style="text-decoration: underline;">homepage</span></span></a></p>

<h4><a name="living-on-the-edge"></a>2.2 Living on the Edge</h4>


<p><tt>Bundler</tt> and <tt>Gemfile</tt> makes freezing your Rails application easy as pie with the new dedicated <tt>bundle</tt> command. If you want to bundle straight from the Git repository, you can pass the <tt>&mdash;edge</tt> flag:</p>

<p>Bundler<span style="font-family: DejaVu Sans;">和</span>Gemfile<span style="font-family: DejaVu Sans;">通过新的专用</span>bundle <span style="font-family: DejaVu Sans;">命令来冻结你的应用程序就像吃馅饼一样简单。如果你想直接从</span>Git<span style="font-family: DejaVu Sans;">仓库</span>bundle<span style="font-family: DejaVu Sans;">，你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>edge flag<span style="font-family: DejaVu Sans;">：</span></p>

<p>$ rails new myapp &mdash;edge</p>

<p>If you have a local checkout of the Rails repository and want to generate an application using that, you can pass the <tt>&mdash;dev</tt> flag:</p>

<p><span style="font-family: DejaVu Sans;">如果你有一个从</span>Rails<span style="font-family: DejaVu Sans;">源代码仓库</span>checkout<span style="font-family: DejaVu Sans;">的本地</span>Rails<span style="font-family: DejaVu Sans;">并且你想生成一个应用程序使用（上面的方法）你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>dev <span style="font-family: DejaVu Sans;">标志：</span></p>

<p>$ ruby /path/to/rails/bin/rails new myapp &mdash;dev</p>

<h3><a name="rails-architectural-changes"></a>3 Rails Architectural<span style="font-family: WenQuanYi Micro Hei;">建筑的</span>Changes</h3>


<h4><a name="assets-pipeline"></a>3.1 Assets Pipeline</h4>


<p>The major change in Rails 3.1 is the Assets Pipeline. It makes CSS and JavaScript first-class code citizens and enables proper organization, including use in plugins and engines.</p>

<p><span style="font-family: DejaVu Sans;">在</span>Rails 3.1<span style="font-family: DejaVu Sans;">中主要的更改就是</span>Assets Pipeline<span style="font-family: DejaVu Sans;">（管道）。它使得</span>CSS<span style="font-family: DejaVu Sans;">和</span>JavaScript <span style="font-family: DejaVu Sans;">一流的代码公民可以合适的组织他们，包含使用</span>pluginis<span style="font-family: DejaVu Sans;">和</span>engines<span style="font-family: DejaVu Sans;">。</span></p>

<p>The assets pipeline is powered by <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/sstephenson/sprockets">Sprockets</a></span></span> and is covered in the <a href="http://guides.rubyonrails.org/asset_pipeline.html"><span style="color: #000080;"><span style="text-decoration: underline;">Asset</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Pipeline</span></span></a> guide.</p>

<h4><a name="http-streaming"></a>3.2 HTTP Streaming</h4>


<p>HTTP Streaming is another change that is new in Rails 3.1. This lets the browser download your stylesheets and JavaScript files while the server is still generating the response. This requires Ruby 1.9.2, is opt-in and requires support from the web server as well, but the popular combo of nginx and unicorn is ready to take advantage of it.</p>

<p>HTTP Streaming<span style="font-family: DejaVu Sans;">是</span>Rails 3.1<span style="font-family: DejaVu Sans;">另一更改。这使得浏览器下载你的</span>stylesheets<span style="font-family: DejaVu Sans;">和</span>JavaSript<span style="font-family: DejaVu Sans;">文件即使服务器仍然在响应。这需要</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">，它是需要从服务器中选择以及服务器同样支持</span>HTTP Streaming<span style="font-family: DejaVu Sans;">，但是受欢迎的</span>nginx<span style="font-family: DejaVu Sans;">和</span>unicom<span style="font-family: DejaVu Sans;">组织已经准备</span>advantage HTTP Streaming<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="default-js-library-is-now-jquery"></a>3.3 Default JS library is now jQuery</h4>


<p>jQuery is the default JavaScript library that ships with Rails 3.1. But if you use Prototype, it’s simple to switch.</p>

<p>Jquey<span style="font-family: DejaVu Sans;">是默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">搭载在</span>Rrails 3.1.<span style="font-family: DejaVu Sans;">但是如果你使用</span>Prototype<span style="font-family: DejaVu Sans;">，它更改很简单。</span></p>

<p>$ rails new myapp -j prototype</p>

<h4><a name="identity-map"></a>3.4 Identity Map <span style="font-family: WenQuanYi Micro Hei;">身份</span>map</h4>


<p>Active Record has an Identity Map in Rails 3.1. An identity map keeps previously instantiated records and returns the object associated with the record if accessed again. The identity map is created on a per-request basis and is flushed at request completion.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">的</span>Active Record<span style="font-family: DejaVu Sans;">有一个</span>Indentity Map<span style="font-family: DejaVu Sans;">。一个</span>identity map<span style="font-family: DejaVu Sans;">保留先前的实例化的记录并且如果再次访问返回记录的对象的关系。</span>Indentity map<span style="font-family: DejaVu Sans;">是基于每个请求创建的并且在请求完成刷新。</span></p>

<p>Rails 3.1 comes with the identity map turned off by default.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">默认</span>Identity map<span style="font-family: DejaVu Sans;">是关闭的。</span></p>

<h3><a name="railties"></a>4 Railties</h3>


<ul>
    <li><a name="railties1"></a>jQuery is the new default JavaScript library.</li>
</ul>


<p>Jquey<span style="font-family: DejaVu Sans;">是新的默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">。</span></p>

<ul>
    <li>jQuery and Prototype are no longer vendored and is provided from now on by the jquery-rails and prototype-rails gems.</li>
</ul>


<p>jQuey<span style="font-family: DejaVu Sans;">和</span>Prototype<span style="font-family: DejaVu Sans;">不再</span>vendored<span style="font-family: DejaVu Sans;">并且从现在开始提供的是</span>jquery-rails and prototype-rails gems<span style="font-family: DejaVu Sans;">。</span></p>

<ul>
    <li>The application generator accepts an option <tt>-j</tt> which can be an arbitrary string. If passed “foo”, the gem “foo-rails” is added to the <tt>Gemfile</tt>, and the application JavaScript manifest requires “foo” and “foo_ujs”. Currently only “prototype-rails” and “jquery-rails” exist and provide those files via the asset pipeline.</li>
</ul>


<p><span style="font-family: DejaVu Sans;">应用程序创建器接受一个选项</span>-j<span style="font-family: DejaVu Sans;">其可以是任意字符串。如果传递<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>foo”<span style="font-family: DejaVu Sans;">，</span>gem “foo-rails”<span style="font-family: DejaVu Sans;">就被添加到</span>Gemfile<span style="font-family: DejaVu Sans;">，并且应用程序的</span>JavaScript manifest requires “foo” and “foo_ujs”<span style="font-family: DejaVu Sans;">。当前只有<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>prototype-rails” and “jquery-rails”<span style="font-family: DejaVu Sans;">存在并且通过</span>asset pipeline<span style="font-family: DejaVu Sans;">提供这些文件。</span></p>

<ul>
    <li>Generating an application or a plugin runs <tt>bundle</tt><tt> </tt><tt>install</tt> unless <tt>--skip-gemfile</tt> or <tt>--skip-bundle</tt> is specified.</li>
</ul>


<p><span style="font-family: DejaVu Sans;">生成一个应用程序或者一个</span>plugin<span style="font-family: DejaVu Sans;">运行</span>bundle install<span style="font-family: DejaVu Sans;">除非</span>&mdash;skip-gemfile<span style="font-family: DejaVu Sans;">或者</span>&mdash;skip-bundle<span style="font-family: DejaVu Sans;">被指定</span></p>

<ul>
    <li>The controller and resource generators will now automatically produce asset stubs (this can be turned off with <tt>--skip-assets</tt>). These stubs will use CoffeeScript and Sass, if those libraries are available.</li>
</ul>


<p>Controller<span style="font-family: DejaVu Sans;">和</span>resource<span style="font-family: DejaVu Sans;">创建器将会自动的产生</span>asset stubs(this can be turned off with <tt>&mdash;skip-assets</tt>)<span style="font-family: DejaVu Sans;">。这些</span>stub<span style="font-family: DejaVu Sans;">将会使用</span>CoffeeScript and Sass<span style="font-family: DejaVu Sans;">，如果这些</span>libraries<span style="font-family: DejaVu Sans;">是可用的。</span></p>

<ul>
    <li>Scaffold and app generators use the Ruby 1.9 style hash when running on Ruby 1.9. To generate old style hash, <tt>--old-style-hash</tt> can be passed.</li>
</ul>


<ul>
    <li>Scaffold controller generator creates format block for JSON instead of XML.</li>
</ul>


<ul>
    <li>Active Record logging is directed to STDOUT and shown inline in the console.</li>
</ul>


<ul>
    <li>Added <tt>config.force_ssl</tt> configuration which loads <tt>Rack::SSL</tt> middleware and force all requests to be under HTTPS protocol.</li>
</ul>


<ul>
    <li>Added <tt>rails</tt><tt> </tt><tt>plugin</tt><tt> </tt><tt>new</tt> command which generates a Rails plugin with gemspec, tests and a dummy application for testing.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Etag</tt> and <tt>Rack::ConditionalGet</tt> to the default middleware stack.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Cache</tt> to the default middleware stack.</li>
</ul>


<ul>
    <li>Engines received a major update – You can mount them at any path, enable assets, run generators etc.</li>
</ul>


<h3><a name="action-pack"></a>5 Action Pack</h3>


<h4><a name="action-controller"></a>5.1 Action Controller</h4>


<ul>
    <li>A warning is given out if the CSRF token authenticity cannot be verified.</li>
</ul>


<ul>
    <li>Specify <tt>force_ssl</tt> in a controller to force the browser to transfer data via HTTPS protocol on that particular controller. To limit to specific actions, <tt>:only</tt> or <tt>:except</tt> can be used.</li>
</ul>


<ul>
    <li>Sensitive query string parameters specified in <tt>config.filter_parameters</tt> will now be filtered out from the request paths in the log.</li>
</ul>


<ul>
    <li>URL parameters which return <tt>nil</tt> for <tt>to_param</tt> are now removed from the query string.</li>
</ul>


<ul>
    <li>Added <tt>ActionController::ParamsWrapper</tt> to wrap parameters into a nested hash, and will be turned on for JSON request in new applications by default. This can be customized in <tt>config/initializers/wrap_parameters.rb</tt>.</li>
</ul>


<ul>
    <li>Added <tt>config.action_controller.include_all_helpers</tt>. By default <tt>helper</tt><tt> </tt><tt>:all</tt> is done in <tt>ActionController::Base</tt>, which includes all the helpers by default. Setting <tt>include_all_helpers</tt> to <tt>false</tt> will result in including only application_helper and the helper corresponding to controller (like foo_helper for foo_controller).</li>
</ul>


<ul>
    <li><tt>url_for</tt> and named url helpers now accept <tt>:subdomain</tt> and <tt>:domain</tt> as options.</li>
</ul>


<ul>
    <li>Added <tt>Base.http_basic_authenticate_with</tt> to do simple http basic authentication with a single class method call.</li>
</ul>


<p>class PostsController &lt; ApplicationController</p>

<p>USER_NAME, PASSWORD = &ldquo;dhh&rdquo;, &ldquo;secret&rdquo;</p>

<p>&nbsp;</p>

<p>before_filter :authenticate, :except =&gt; [ :index ]</p>

<p>&nbsp;</p>

<p>def index</p>

<p>render :text =&gt; &ldquo;Everyone can see me!&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>def edit</p>

<p>render :text =&gt; &ldquo;I&rsquo;m only accessible if you know the password&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>private</p>

<p>def authenticate</p>

<p>authenticate_or_request_with_http_basic do |user_name, password|</p>

<p>user_name == USER_NAME &amp;&amp; password == PASSWORD</p>

<p>end</p>

<p>end</p>

<p>end</p>

<p>..can now be written as</p>

<p>class PostsController &lt; ApplicationController</p>

<p>http_basic_authenticate_with :name =&gt; &ldquo;dhh&rdquo;, :password =&gt; &ldquo;secret&rdquo;, :except =&gt; :index</p>

<p>&nbsp;</p>

<p>def index</p>

<p>render :text =&gt; &ldquo;Everyone can see me!&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>def edit</p>

<p>render :text =&gt; &ldquo;I&rsquo;m only accessible if you know the password&rdquo;</p>

<p>end</p>

<p>end</p>

<p>Added streaming support, you can enable it with:</p>

<p>class PostsController &lt; ActionController::Base</p>

<p>stream</p>

<p>end</p>

<p>You can restrict<span style="font-family: DejaVu Sans;">限制</span>it to some actions by using <tt>:only</tt> or <tt>:except</tt>. Please read the docs at <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActionController/Streaming.html">ActionController::Streaming</a></span></span> for more information.</p>

<ul>
    <li>The redirect route method now also accepts a hash of options which will only change the parts of the url in question, or an object which responds to call, allowing for redirects to be reused.</li>
</ul>


<h4><a name="action-dispatch"></a>5.2 Action Dispatch</h4>


<ul>
    <li><tt>config.action_dispatch.x_sendfile_header</tt> now defaults to <tt>nil</tt> and <tt>config/environments/production.rb</tt> doesn’t set any particular value for it. This allows servers to set it through <tt>X-Sendfile-Type</tt>.</li>
</ul>


<ul>
    <li><tt>ActionDispatch::MiddlewareStack</tt> now uses composition<span style="font-family: DejaVu Sans;">组成</span>over inheritance and is no longer an array.</li>
</ul>


<ul>
    <li>Added <tt>ActionDispatch::Request.ignore_accept_header</tt> to ignore accept headers.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Cache</tt> to the default stack.</li>
</ul>


<ul>
    <li>Moved etag responsibility from <tt>ActionDispatch::Response</tt> to the middleware stack.</li>
</ul>


<ul>
    <li>Rely on <tt>Rack::Session</tt> stores API for more compatibility across the Ruby world. This is backwards incompatible since <tt>Rack::Session</tt> expects <tt>#get_session</tt> to accept four arguments and requires <tt>#destroy_session</tt> instead of simply <tt>#destroy</tt>.</li>
</ul>


<ul>
    <li>Template lookup now searches further up in the inheritance chain.</li>
</ul>


<h4><a name="action-view"></a>5.3 Action View</h4>


<ul>
    <li>Added an <tt>:authenticity_token</tt> option to <tt>form_tag</tt> for custom handling or to omit the token by passing <tt>:authenticity_token</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt>.</li>
</ul>


<ul>
    <li>Created <tt>ActionView::Renderer</tt> and specified an API for <tt>ActionView::Context</tt>.</li>
</ul>


<ul>
    <li>In place <tt>SafeBuffer</tt> mutation is prohibited<span style="font-family: DejaVu Sans;">禁止</span>in Rails 3.1.</li>
</ul>


<ul>
    <li>Added HTML5 <tt>button_tag</tt> helper.</li>
</ul>


<ul>
    <li><tt>file_field</tt> automatically adds <tt>:multipart</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> to the enclosing form.</li>
</ul>


<ul>
    <li>Added a convenience idiom to generate HTML5 data-* attributes in tag helpers from a <tt>:data</tt> hash of options:</li>
</ul>


<p>tag(&ldquo;div&rdquo;, :data =&gt; {:name =&gt; &lsquo;Stephen&rsquo;, :city_state =&gt; %w(Chicago IL)})</p>

<h1>=&gt; &lt;div data-name=&ldquo;Stephen&rdquo; data-city-state=&ldquo;[&amp;quot;Chicago&amp;quot;,&amp;quot;IL&amp;quot;]&rdquo; /&gt;</h1>

<p>Keys are dasherized. Values are JSON-encoded, except for strings and symbols.</p>

<ul>
    <li><tt>csrf_meta_tag</tt> is renamed to <tt>csrf_meta_tags</tt> and aliases <tt>csrf_meta_tag</tt> for backwards compatibility.</li>
</ul>


<ul>
    <li>The old template handler API is deprecated and the new API simply requires a template handler to respond to call.</li>
</ul>


<ul>
    <li>rhtml and rxml are finally removed as template handlers.</li>
</ul>


<ul>
    <li><tt>config.action_view.cache_template_loading</tt> is brought back which allows to decide whether templates should be cached or not.</li>
</ul>


<ul>
    <li>The submit form helper does not generate an id “object_name_id” anymore.</li>
</ul>


<ul>
    <li>Allows <tt>FormHelper#form_for</tt> to specify the <tt>:method</tt> as a direct option instead of through the <tt>:html</tt> hash. <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete)</tt> instead of <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>html:</tt><tt> </tt><tt>{</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete</tt><tt> </tt><tt>})</tt>.</li>
</ul>


<ul>
    <li>Provided <tt>JavaScriptHelper#j()</tt> as an alias for <tt>JavaScriptHelper#escape_javascript()</tt>. This supersedes the <tt>Object#j()</tt> method that the JSON gem adds within templates using the JavaScriptHelper.</li>
</ul>


<ul>
    <li>Allows AM/PM format in datetime selectors.</li>
</ul>


<ul>
    <li><tt>auto_link</tt> has been removed from Rails and extracted into the <a href="https://github.com/tenderlove/rails_autolink"><span style="color: #000080;"><span style="text-decoration: underline;">rails_autolink</span></span><span style="color: #000080;"><span style="text-decoration: underline;">gem</span></span></a></li>
</ul>


<h3><a name="active-record"></a>6 Active Record</h3>


<ul>
    <li>Added a class method <tt>pluralize_table_names</tt> to singularize/pluralize<span style="font-family: DejaVu Sans;">复数</span>table names of individual models. Previously this could only be set globally for all models through <tt>ActiveRecord::Base.pluralize_table_names</tt>.</li>
</ul>


<p>class User &lt; ActiveRecord::Base</p>

<p>self.pluralize_table_names = false</p>

<p>end</p>

<ul>
    <li>Added block setting of attributes to singular associations. The block will get called after the instance is initialized</li>
</ul>


<p>class User &lt; ActiveRecord::Base</p>

<p>has_one :account</p>

<p>end</p>

<p>&nbsp;</p>

<p>user.build_account{ |a| a.credit_limit =&gt; 100.0 }</p>

<ul>
    <li><strong>Added</strong><strong> </strong><tt><strong>ActiveRecord::Base.attribute_names</strong></tt><strong> </strong><strong>to</strong><strong> </strong><strong>return</strong><strong> </strong><strong>a</strong><strong> </strong><strong>list</strong><strong> </strong><strong>of</strong><strong> </strong><strong>attribute</strong><strong> </strong><strong>names.</strong><strong> </strong><strong>This</strong><strong> </strong><strong>will</strong><strong> </strong><strong>return</strong><strong> </strong><strong>an</strong><strong> </strong><strong>empty</strong><strong> </strong><strong>array</strong><strong> </strong><strong>if</strong><strong> </strong><strong>the</strong><strong> </strong><strong>model</strong><strong> </strong><strong>is</strong><strong> </strong><strong>abstract</strong><strong> </strong><strong>or</strong><strong> </strong><strong>the</strong><strong> </strong><strong>table</strong><strong> </strong><strong>does</strong><strong> </strong><strong>not</strong><strong> </strong><strong>exist.</strong><strong> </strong></li>
</ul>


<ul>
    <li>CSV Fixtures are deprecated and support will be removed in Rails 3.2.0.</li>
</ul>


<ul>
    <li><tt>ActiveRecord#new</tt>, <tt>ActiveRecord#create</tt> and <tt>ActiveRecord#update_attributes</tt> all accept a second hash as an option that allows you to specify which role to consider when assigning attributes. This is built on top of Active Model’s new mass assignment capabilities:</li>
</ul>


<p>class Post &lt; ActiveRecord::Base</p>

<p>attr_accessible :title</p>

<p>attr_accessible :title, :published_at, :as =&gt; :admin</p>

<p>end</p>

<p>&nbsp;</p>

<p>Post.new(params[:post], :as =&gt; :admin)</p>

<ul>
    <li><tt>default_scope</tt> can now take a block, lambda, or any other object which responds to call for lazy evaluation.</li>
</ul>


<ul>
    <li>Default scopes are now evaluated at the latest possible moment, to avoid problems where scopes would be created which would implicitly contain the default scope, which would then be impossible to get rid of via Model.unscoped.</li>
</ul>


<ul>
    <li>PostgreSQL adapter only supports PostgreSQL version 8.2 and higher.</li>
</ul>


<ul>
    <li><tt>ConnectionManagement</tt> middleware is changed to clean up the connection pool after the rack body has been flushed.</li>
</ul>


<ul>
    <li>Added an <tt>update_column</tt> method on Active Record. This new method updates a given attribute on an object, skipping validations and callbacks. It is recommended to use <tt>update_attribute</tt> unless you are sure you do not want to execute any callback, including the modification of the <tt>updated_at</tt> column. It should not be called on new records.</li>
</ul>


<ul>
    <li>Associations with a <tt>:through</tt> option can now use any association as the through or source association, including other associations which have a <tt>:through</tt> option and <tt>has_and_belongs_to_many</tt> associations.</li>
</ul>


<ul>
    <li>The configuration for the current database connection is now accessible via <tt>ActiveRecord::Base.connection_config</tt>.</li>
</ul>


<ul>
    <li>limits and offsets are removed from COUNT queries unless both are supplied.</li>
</ul>


<p>People.limit(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people&rsquo;</p>

<p>People.offset(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people&rsquo;</p>

<p>People.limit(1).offset(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people LIMIT 1 OFFSET 1&rsquo;</p>

<ul>
    <li><tt>ActiveRecord::Associations::AssociationProxy</tt> has been split. There is now an <tt>Association</tt> class (and subclasses) which are responsible for operating on associations, and then a separate, thin wrapper called <tt>CollectionProxy</tt>, which proxies collection associations. This prevents namespace pollution, separates concerns, and will allow further refactorings.</li>
</ul>


<ul>
    <li>Singular associations (<tt>has_one</tt>, <tt>belongs_to</tt>) no longer have a proxy and simply returns the associated record or <tt>nil</tt>. This means that you should not use undocumented methods such as <tt>bob.mother.create</tt> – use <tt>bob.create_mother</tt> instead.</li>
</ul>


<ul>
    <li>Support the <tt>:dependent</tt> option on <tt>has_many</tt><tt> </tt><tt>:through</tt> associations. For historical and practical reasons, <tt>:delete_all</tt> is the default deletion strategy employed by <tt>association.delete(*records)</tt>, despite the fact that the default strategy is <tt>:nullify</tt> for regular has_many. Also, this only works at all if the source reflection is a belongs_to. For other situations, you should directly modify the through association.</li>
</ul>


<ul>
    <li>The behavior of <tt>association.destroy</tt> for <tt>has_and_belongs_to_many</tt> and <tt>has_many</tt><tt> </tt><tt>:through</tt> is changed. From now on, ‘destroy’ or ‘delete’ on an association will be taken to mean ‘get rid of the link’, not (necessarily) ‘get rid of the associated records’.</li>
</ul>


<ul>
    <li>Previously, <tt>has_and_belongs_to_many.destroy(*records)</tt> would destroy the records themselves. It would not delete any records in the join table. Now, it deletes the records in the join table.</li>
</ul>


<ul>
    <li>Previously, <tt>has_many_through.destroy(*records)</tt> would destroy the records themselves, and the records in the join table. [Note: This has not always been the case; previous version of Rails only deleted the records themselves.] Now, it destroys only the records in the join table.</li>
</ul>


<ul>
    <li>Note that this change is backwards-incompatible to an extent, but there is unfortunately no way to ‘deprecate’ it before changing it. The change is being made in order to have consistency as to the meaning of ‘destroy’ or ‘delete’ across the different types of associations. If you wish to destroy the records themselves, you can do <tt>records.association.each(&amp;:destroy)</tt>.</li>
</ul>


<ul>
    <li>Add <tt>:bulk</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> option to <tt>change_table</tt> to make all the schema changes defined in a block using a single ALTER statement.</li>
</ul>


<p>change_table(:users, :bulk =&gt; true) do |t|</p>

<p>t.string :company_name</p>

<p>t.change :birthdate, :datetime</p>

<p>end</p>

<ul>
    <li>Removed support for accessing attributes on a <tt>has_and_belongs_to_many</tt> join table. <tt>has_many</tt><tt> </tt><tt>:through</tt> needs to be used.</li>
</ul>


<ul>
    <li>Added a <tt>create_association!</tt> method for <tt>has_one</tt> and <tt>belongs_to</tt> associations.</li>
</ul>


<ul>
    <li>Migrations are now reversible<span style="font-family: DejaVu Sans;">可逆</span>, meaning that Rails will figure out how to reverse your migrations. To use reversible migrations, just define the <tt>change</tt> method.</li>
</ul>


<p>class MyMigration &lt; ActiveRecord::Migration</p>

<p>def change</p>

<p>create_table(:horses) do</p>

<p>t.column :content, :text</p>

<p>t.column :remind_at, :datetime</p>

<p>end</p>

<p>end</p>

<p>end</p>

<ul>
    <li>Some things cannot be automatically reversed for you. If you know how to reverse those things, you should define <tt>up</tt> and <tt>down</tt> in your migration. If you define something in change that cannot be reversed, an <tt>IrreversibleMigration</tt> exception will be raised when going down.</li>
</ul>


<ul>
    <li>Migrations now use instance methods rather than class methods:</li>
</ul>


<p>class FooMigration &lt; ActiveRecord::Migration</p>

<p>def up # Not self.up</p>

<p>&hellip;</p>

<p>end</p>

<p>end</p>

<ul>
    <li>Migration files generated from model and constructive migration generators (for example, add_name_to_users) use the <strong>reversible</strong><strong> </strong><strong>migration</strong><strong>’</strong><strong>s</strong><strong> </strong><tt>change</tt> method instead of the ordinary <tt>up</tt> and <tt>down</tt> methods.</li>
</ul>


<ul>
    <li>Removed support for interpolating<span style="font-family: DejaVu Sans;">插值</span>string SQL conditions on associations. Instead, a proc should be used.</li>
</ul>


<p>has_many :things, :conditions =&gt; &lsquo;foo = #{bar}&rsquo; # before</p>

<p>has_many :things, :conditions =&gt; proc { &ldquo;foo = #{bar}&rdquo; } # after</p>

<p>&nbsp;</p>

<p>Inside the proc, <tt>self</tt> is the object which is the owner of the association, unless you are eager loading the association, in which case <tt>self</tt> is the class which the association is within.</p>

<p>You can have any “normal” conditions inside the proc, so the following will work too:</p>

<p>has_many :things, :conditions =&gt; proc { [&ldquo;foo = ?&rdquo;, bar] }</p>

<p>&nbsp;</p>

<ul>
    <li>Previously <tt>:insert_sql</tt> and <tt>:delete_sql</tt> on <tt>has_and_belongs_to_many</tt> association allowed you to call ‘record’ to get the record being inserted or deleted. This is now passed as an argument to the proc.</li>
</ul>


<ul>
    <li>Added <tt>ActiveRecord::Base#has_secure_password</tt> (via <tt>ActiveModel::SecurePassword</tt>) to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>


<h1>Schema: User(name:string, password_digest:string, password_salt:string)</h1>

<p>class User &lt; ActiveRecord::Base</p>

<p>has_secure_password</p>

<p>end</p>

<p>&nbsp;</p>

<ul>
    <li>When a model is generated <tt>add_index</tt> is added by default for <tt>belongs_to</tt> or <tt>references</tt> columns.</li>
</ul>


<ul>
    <li>Setting the id of a <tt>belongs_to</tt> object will update the reference to the object.</li>
</ul>


<ul>
    <li><tt>ActiveRecord::Base#dup</tt> and <tt>ActiveRecord::Base#clone</tt> semantics<span style="font-family: DejaVu Sans;">语义</span>have changed to closer match normal Ruby dup and clone semantics.</li>
</ul>


<ul>
    <li>Calling <tt>ActiveRecord::Base#clone</tt> will result in a shallow copy of the record, including copying the frozen state. No callbacks will be called.</li>
</ul>


<ul>
    <li>Calling <tt>ActiveRecord::Base#dup</tt> will duplicate the record, including calling after initialize hooks. Frozen state will not be copied, and all associations will be cleared. A duped record will return <tt>true</tt> for <tt>new_record?</tt>, have a <tt>nil</tt> id field, and is saveable.</li>
</ul>


<ul>
    <li>The query cache now works with prepared statements. No changes in the applications are required.</li>
</ul>


<h3><a name="active-model"></a>7 Active Model</h3>


<ul>
    <li><tt>attr_accessible</tt> accepts an option <tt>:as</tt> to specify a role.</li>
</ul>


<ul>
    <li><tt>InclusionValidator</tt>, <tt>ExclusionValidator</tt>, and <tt>FormatValidator</tt> now accepts an option which can be a proc, a lambda, or anything that respond to <tt>call</tt>. This option will be called with the current record as an argument and returns an object which respond to <tt>include?</tt> for <tt>InclusionValidator</tt> and <tt>ExclusionValidator</tt>, and returns a regular expression object for <tt>FormatValidator</tt>.</li>
</ul>


<ul>
    <li>Added <tt>ActiveModel::SecurePassword</tt> to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>


<ul>
    <li><tt>ActiveModel::AttributeMethods</tt> allows attributes to be defined on demand.</li>
</ul>


<ul>
    <li>Added support for selectively enabling and disabling observers.</li>
</ul>


<ul>
    <li>Alternate <tt>I18n</tt> namespace lookup is no longer supported.</li>
</ul>


<h3><a name="active-resource"></a>8 Active Resource</h3>


<ul>
    <li><strong>The</strong><strong> </strong><strong>default</strong><strong> </strong><strong>format</strong><strong> </strong><strong>has</strong><strong> </strong><strong>been</strong><strong> </strong><strong>changed</strong><strong> </strong><strong>to</strong><strong> </strong><strong>JSON</strong><strong> </strong><strong>for</strong><strong> </strong><strong>all</strong><strong> </strong><strong>requests</strong>. If you want to continue to use XML you will need to set <tt>self.format</tt><tt> </tt><tt>=</tt><tt> </tt><tt>:xml</tt> in the class. For example,</li>
</ul>


<p>class User &lt; ActiveResource::Base</p>

<p>self.format = :xml</p>

<p>end</p>

<h3><a name="active-support"></a>9 Active Support</h3>


<ul>
    <li><tt>ActiveSupport::Dependencies</tt> now raises <tt>NameError</tt> if it finds an existing constant in <tt>load_missing_constant</tt>.</li>
</ul>


<ul>
    <li>Added a new reporting method <tt>Kernel#quietly</tt> which silences both <tt>STDOUT</tt> and <tt>STDERR</tt>.</li>
</ul>


<ul>
    <li>Added <tt>String#inquiry</tt> as a convenience method for turning a String into a <tt>StringInquirer</tt> object.</li>
</ul>


<ul>
    <li>Added <tt>Object#in?</tt> to test if an object is included in another object.</li>
</ul>


<ul>
    <li><tt>LocalCache</tt> strategy is now a real middleware class and no longer an anonymous class.</li>
</ul>


<ul>
    <li><tt>ActiveSupport::Dependencies::ClassCache</tt> class has been introduced for holding references to reloadable classes.</li>
</ul>


<ul>
    <li><tt>ActiveSupport::Dependencies::Reference</tt> has been refactored to take direct advantage of the new <tt>ClassCache</tt>.</li>
</ul>


<ul>
    <li>Backports <tt>Range#cover?</tt> as an alias for <tt>Range#include?</tt> in Ruby 1.8.</li>
</ul>


<ul>
    <li>Added <tt>weeks_ago</tt> and <tt>prev_week</tt> to Date/DateTime/Time.</li>
</ul>


<ul>
    <li>Added <tt>before_remove_const</tt> callback to <tt>ActiveSupport::Dependencies.remove_unloadable_constants!</tt>.</li>
</ul>


<p>Deprecations:</p>

<ul>
    <li><tt>ActiveSupport::SecureRandom</tt> is deprecated in favor of <tt>SecureRandom</tt> from the Ruby standard library.</li>
</ul>


<h3><a name="credits"></a>10 Credits</h3>


<p>See the <a href="http://contributors.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">full</span></span><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">contributors</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a> for the many people who spent many hours making Rails, the stable and robust framework it is. Kudos to all of them.</p>

<p>Rails 3.1 Release Notes were compiled by <a href="https://github.com/vijaydev"><span style="color: #000080;"><span style="text-decoration: underline;">Vijay</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Dev</span></span></a>.</p>

<p>标签： <a href="http://jhjguxin.hwcrazy.com/tag/gem/">gem</a> <a href="http://jhjguxin.hwcrazy.com/tag/git/">git</a> <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/jquery/">jquery</a> <a href="http://jhjguxin.hwcrazy.com/tag/learning/">learning</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/release/">release</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Routing from the Outside In Rails]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/12/29/rails-routing-from-the-outside-in-rails/"/>
    <updated>2011-12-29T00:23:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/12/29/rails-routing-from-the-outside-in-rails</id>
    <content type="html"><![CDATA[<h2>Rails Routing from the Outside In Rails</h2>

<h2>Rails Routing from the Outside In Rails<span style="font-family: WenQuanYi Micro Hei;">来自外部的</span>Routing</h2>


<p>This guide covers the user-facing features of Rails routing. By referring to this guide, you will be able to:</p>

<p><span style="font-family: DejaVu Sans;">这个</span>guide<span style="font-family: DejaVu Sans;">涵盖了面向用户的</span>Rails<span style="font-family: DejaVu Sans;">路由特性。通过参考这个</span>guide<span style="font-family: DejaVu Sans;">，你将能够：</span></p>

<p>Understand the code in <tt>routes.rb</tt></p>

<p><span style="font-family: DejaVu Sans;">明白在</span><tt>routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>中的代码</tt></span></p>

<ul>
    <li>Construct your own routes, using either the preferred resourceful style or the <tt>match</tt> method</li>
</ul>


<p><span style="font-family: DejaVu Sans;">构建属于你的</span>routes<span style="font-family: DejaVu Sans;">，要么首选使用</span>resourceful style<span style="font-family: DejaVu Sans;">要么使用</span>match<span style="font-family: DejaVu Sans;">方法</span></p>

<ul>
    <li>Identify what parameters to expect an action to receive</li>
</ul>


<p><span style="font-family: DejaVu Sans;">确定什么样的参数</span>expect<span style="font-family: DejaVu Sans;">（预期）一个</span>action<span style="font-family: DejaVu Sans;">来接收（</span>url<span style="font-family: DejaVu Sans;">）</span></p>

<ul>
    <li>Automatically create paths and URLs using route helpers</li>
</ul>


<p><span style="font-family: DejaVu Sans;">自动的创建路径和</span>URLs<span style="font-family: DejaVu Sans;">使用</span>route helpers</p>

<ul>
    <li>Use advanced techniques such as constraints and Rack endpoints</li>
</ul>


<p><span style="font-family: DejaVu Sans;">使用高级的技术比如公约和</span>Rack endpoints</p>

<h3><a name="the-purpose-of-the-rails-router"></a>1 The Purpose of the Rails Router</h3>


<p>The Rails router recognizes URLs and dispatches them to a controller’s action. It can also generate paths and URLs, avoiding the need to hardcode strings in your views.</p>

<p>Rails router<span style="font-family: DejaVu Sans;">组织</span>URLs<span style="font-family: DejaVu Sans;">和</span>dispatches(<span style="font-family: DejaVu Sans;">调度</span>)<span style="font-family: DejaVu Sans;">到一个</span>controller<span style="font-family: DejaVu Sans;">的</span>action<span style="font-family: DejaVu Sans;">中。它也可以创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">，避免需要</span>hardcode string<span style="font-family: DejaVu Sans;">到你的视图中。</span></p>

<h4><a name="connecting-urls-to-code"></a>1.1 Connecting URLs to Code<span style="font-family: WenQuanYi Micro Hei;">连接</span>URLs<span style="font-family: WenQuanYi Micro Hei;">到</span>Code</h4>


<p>When your Rails application receives an incoming request</p>

<p><span style="font-family: DejaVu Sans;">当你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序收到一个传入请求（</span>incoming requests (<span style="font-family: DejaVu Sans;">传入请求</span>)<span style="font-family: DejaVu Sans;">正传递给用户的网站内容。）</span></p>

<p>GET /patients/17</p>

<p>it asks the router to match it to a controller action. If the first matching route is</p>

<p><span style="font-family: DejaVu Sans;">它请求</span>router<span style="font-family: DejaVu Sans;">匹配</span>URLs<span style="font-family: DejaVu Sans;">到一个</span>controller action<span style="font-family: DejaVu Sans;">。如果第一个匹配的</span>route<span style="font-family: DejaVu Sans;">是</span></p>

<p>match &ldquo;/patients/:id&rdquo; =&gt; &ldquo;patients#show&rdquo;</p>

<p>the request is dispatched to the <tt>patients</tt> controller’s <tt>show</tt> action with <tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt> in <tt>params</tt>.</p>

<p><span style="font-family: DejaVu Sans;">这个请求被调度给</span>patients controller<span style="font-family: DejaVu Sans;">的</span>show action<span style="font-family: DejaVu Sans;">以及</span><tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>字典中。</tt></span></p>

<h4><a name="generating-paths-and-urls-from-code"></a> 1.2 Generating Paths and URLs from Code<span style="font-family: WenQuanYi Micro Hei;">从</span>Code<span style="font-family: WenQuanYi Micro Hei;">创建</span>Paths<span style="font-family: WenQuanYi Micro Hei;">和</span>URLs</h4>


<p>You can also generate paths and URLs. If your application contains this code:</p>

<p><span style="font-family: DejaVu Sans;">你可以创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">。如果你的应用程序中包含这样的代码：</span></p>

<p>@patient = Patient.find(17)</p>

<p>&lt;%= link_to &ldquo;Patient Record&rdquo;, patient_path(@patient) %&gt;</p>

<p>The router will generate the path <tt>/patients/17</tt>. This reduces the brittleness of your view and makes your code easier to understand. Note that the id does not need to be specified in the route helper.</p>

<p>Router<span style="font-family: DejaVu Sans;">将会创建</span>path <tt>/patients/17</tt><span style="font-family: DejaVu Sans;"><tt>。这样减少了你的视图的脆性并且使得你的代码更加容易明白。</tt></span></p>

<h3><a name="resource-routing-the-rails-default"></a>2 Resource Routing: the Rails Default</h3>


<p>Resource routing allows you to quickly declare all of the common routes for a given resourceful controller. Instead of declaring separate routes for your <tt>index</tt>, <tt>show</tt>, <tt>new</tt>, <tt>edit</tt>, <tt>create</tt>, <tt>update</tt> and <tt>destroy</tt> actions, a resourceful route declares them in a single line of code.</p>

<p>Resource routing<span style="font-family: DejaVu Sans;">让你快速的为一个提供的</span>resourceful<span style="font-family: DejaVu Sans;">的</span>controller<span style="font-family: DejaVu Sans;">声明所有的常用</span>routes<span style="font-family: DejaVu Sans;">。替代你去声明单个的</span><tt>index</tt>, <tt>show</tt>, <tt>new</tt>, <tt>edit</tt>, <tt>create</tt>, <tt>update</tt> and <tt>destroy</tt> actions<span style="font-family: DejaVu Sans;">的</span>routes<span style="font-family: DejaVu Sans;">，一个</span>resourceful route<span style="font-family: DejaVu Sans;">声明它们在一个单行代码中。</span></p>

<p>When your Rails application receives an incoming request for</p>

<p><span style="font-family: DejaVu Sans;">当你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序收到一个这样的传入请求</span></p>

<p>DELETE /photos/17</p>

<p>it asks the router to map it to a controller action. If the first matching route is</p>

<p><span style="font-family: DejaVu Sans;">它请求</span>router<span style="font-family: DejaVu Sans;">匹配</span>URLs<span style="font-family: DejaVu Sans;">到一个</span>controller action<span style="font-family: DejaVu Sans;">。如果第一个匹配的</span>route<span style="font-family: DejaVu Sans;">是</span></p>

<p>resources :photos</p>

<p>Rails would dispatch that request to the <tt>destroy</tt> method on the <tt>photos</tt> controller with <tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt> in <tt>params</tt>.</p>

<p>Rails<span style="font-family: DejaVu Sans;">将会把这个请求调度给</span><tt>photos</tt> controller<span style="font-family: DejaVu Sans;">的</span><tt>destroy</tt> action<span style="font-family: DejaVu Sans;">以及</span><tt>{</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>17</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>字典中</tt></span></p>

<h4><a name="crud-verbs-and-actions"></a>2.2 CRUD, Verbs, and Actions</h4>


<p>CRUD<span style="font-family: DejaVu Sans;">是指在做计算处理时的增加</span>(Create)<span style="font-family: DejaVu Sans;">、查询</span>(Retrieve)<span style="font-family: DejaVu Sans;">（重新得到数据）、更新</span>(Update)<span style="font-family: DejaVu Sans;">和删除</span>(Delete)<span style="font-family: DejaVu Sans;">几个单词的首字母简写。主要被用在描述软件系统中数据库或者持久层的基本操作功能。</span></p>

<p>HTTP Verb HTTP<span style="font-family: DejaVu Sans;">动作</span></p>

<p>In Rails, a resourceful route provides a mapping between HTTP verbs and URLs to controller actions. By convention, each action also maps to particular CRUD operations in a database. A single entry in the routing file, such as</p>

<p><span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">中，一个</span>resourceful route<span style="font-family: DejaVu Sans;">提供一个在</span>HTTP verbs<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">之间的映射到</span>controller actions<span style="font-family: DejaVu Sans;">。根据公约，每个</span>action<span style="font-family: DejaVu Sans;">都应该映射到数据库的</span>CRUD<span style="font-family: DejaVu Sans;">操作的一部分。一个单独的条目在</span>routing<span style="font-family: DejaVu Sans;">文件中，像这样</span></p>

<p>resources :photos</p>

<p>creates seven different routes in your application, all mapping to the <tt>Photos</tt> controller:</p>

<p><span style="font-family: DejaVu Sans;">创建七个不同的</span>routes<span style="font-family: DejaVu Sans;">在你的应用程序中，所有的这些</span>routes<span style="font-family: DejaVu Sans;">映射到</span>Photos controller<span style="font-family: DejaVu Sans;">：</span></p>

<p>&nbsp;</p>

<table width="573" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="102" /> <col width="54" /> <col width="311" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="311">used for</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="311">display a list of all photos</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="311">return an HTML form for creating a new photo</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="311">create a new photo</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="311">display a specific photo</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="311">return an HTML form for editing a photo</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="311">update a specific photo</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="311">delete a specific photo</td>
</tr>
</tbody>
</table>


<p>Rails routes are matched in the order they are specified, so if you have a <tt>resources</tt><tt> </tt><tt>:photos</tt> above a <tt>get</tt><tt> </tt><tt>&lsquo;photos/poll&rsquo;</tt> the <tt>show</tt> action’s route for the <tt>resources</tt> line will be matched before the <tt>get</tt> line. To fix this, move the <tt>get</tt> line <strong>above</strong> the <tt>resources</tt> line so that it is matched first.</p>

<p><strong>Rails</strong><strong> </strong><strong>routes</strong><span style="font-family: DejaVu Sans;"><strong>在它们指定的顺序中匹配，因此如果你有一个</strong></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>:photos</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>在</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>&lsquo;photos/poll&rsquo;</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的上面，</strong></tt></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的</strong></tt></span><tt><strong>show</strong></tt><tt><strong> </strong></tt><tt><strong>action</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>的</strong></tt></span><tt><strong>route</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>将会在</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>之前先被匹配。要修复这些，移动</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>在</strong></tt></span><tt><strong>resources</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>上面以确保</strong></tt></span><tt><strong>get</strong></tt><tt><strong> </strong></tt><tt><strong>line</strong></tt><span style="font-family: DejaVu Sans;"><tt><strong>被首先匹配。</strong></tt></span></p>

<h4><a name="paths-and-urls"></a>2.3 Paths and URLs</h4>


<p>Creating a resourceful route will also expose a number of helpers to the controllers in your application. In the case of <tt>resources</tt><tt> </tt><tt>:photos</tt>:</p>

<p><span style="font-family: DejaVu Sans;">在你的应用程序中创建一个</span>resourceful<span style="font-family: DejaVu Sans;">的</span>route<span style="font-family: DejaVu Sans;">也将会摆出一系列的</span>controllers<span style="font-family: DejaVu Sans;">的</span>helpers<span style="font-family: DejaVu Sans;">，在这里的情况中</span><tt>resources</tt><tt> </tt><tt>:photos</tt><span style="font-family: DejaVu Sans;"><tt>如下：</tt></span></p>

<ul>
    <li><tt>photos_path</tt> returns <tt>/photos</tt></li>
    <li><tt>new_photo_path</tt> returns <tt>/photos/new</tt></li>
    <li><tt>edit_photo_path(:id)</tt> returns <tt>/photos/:id/edit</tt> (for instance, <tt>edit_photo_path(10)</tt> returns <tt>/photos/10/edit</tt>)</li>
    <li><tt>photo_path(:id)</tt> returns <tt>/photos/:id</tt> (for instance, <tt>photo_path(10)</tt> returns <tt>/photos/10</tt>)</li>
</ul>


<p>Each of these helpers has a corresponding <tt>_url</tt> helper (such as <tt>photos_url</tt>) which returns the same path prefixed with the current host, port and path prefix.</p>

<p><span style="font-family: DejaVu Sans;">这里的每个</span>helpers<span style="font-family: DejaVu Sans;">都有一个相应的</span>_url helper<span style="font-family: DejaVu Sans;">（例如</span><tt>photos_url</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>edit_photo_url(1)</tt><span style="font-family: DejaVu Sans;">）</span></p>

<p><span style="font-family: DejaVu Sans;">其将会返回相同的路径后缀以及当前主机，端口和路径后缀。</span></p>

<h4>the code in my demo</h4>

<h1>@tmp=post_url(1)</h1>

<h1>@tmp=posts_url</h1>

<h1>@tmp=edit_post_url(:id)</h1>

<p>@tmp=new_post_url</p>

<p>Because the router uses the HTTP verb and URL to match inbound requests, four URLs map to seven different actions.</p>

<p><span style="font-family: DejaVu Sans;">因为</span>router<span style="font-family: DejaVu Sans;">使用</span>HTTP verb<span style="font-family: DejaVu Sans;">和</span>URL<span style="font-family: DejaVu Sans;">来匹配入站请求，四种</span>URLs<span style="font-family: DejaVu Sans;">映射到七种不同的</span>actions<span style="font-family: DejaVu Sans;">中。</span></p>

<h4><a name="defining-multiple-resources-at-the-same-"></a> 2.4 Defining Multiple Resources at the Same Time<span style="font-family: WenQuanYi Micro Hei;">在同一时间定义多个</span>Resource</h4>


<p>If you need to create routes for more than one resource, you can save a bit of typing by defining them all with a single call to <tt>resources</tt>:</p>

<p><span style="font-family: DejaVu Sans;">如果你需要为超过一个</span>resource<span style="font-family: DejaVu Sans;">创建</span>routes<span style="font-family: DejaVu Sans;">，你可以保存它们到一组中通过调用单个</span>resources<span style="font-family: DejaVu Sans;">来定义所有的</span>resource<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :photos, :books, :videos</p>

<p>This works exactly the same as</p>

<p><span style="font-family: DejaVu Sans;">这里工作类似于：</span></p>

<p>resources :photos</p>

<p>resources :books</p>

<p>resources :videos</p>

<h4><a name="singular-resources"></a>2.5 Singular Resources <span style="font-family: WenQuanYi Micro Hei;">单数</span>Resources</h4>


<p>Sometimes, you have a resource that clients always look up without referencing an ID. For example, you would like <tt>/profile</tt> to always show the profile of the currently logged in user. In this case, you can use a singular resource to map <tt>/profile</tt> (rather than <tt>/profile/:id</tt>) to the <tt>show</tt> action.</p>

<p><span style="font-family: DejaVu Sans;">有时候，你有一个</span>resource<span style="font-family: DejaVu Sans;">，</span>clients<span style="font-family: DejaVu Sans;">通常查找它们并不引用一个</span>ID<span style="font-family: DejaVu Sans;">。例如，你将会希望</span><tt>/profile</tt><span style="font-family: DejaVu Sans;"><tt>来总是显示当前的登录的用户的</tt></span><tt>profile</tt><span style="font-family: DejaVu Sans;"><tt>。在这种情况中，你可以使用一个单数的</tt></span><tt>resource</tt><span style="font-family: DejaVu Sans;"><tt>来映射</tt></span><tt>/profile</tt><tt> </tt><tt>(rather</tt><tt> </tt><tt>than</tt><tt> </tt><tt>/profile/:id)</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>show</tt><tt> </tt><tt>ation</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>match &ldquo;profile&rdquo; =&gt; &ldquo;users#show&rdquo;</p>

<p>This resourceful route<span style="font-family: DejaVu Sans;">这里是</span>resourceful route</p>

<p>resource :geocoder</p>

<p>creates six different routes in your application, all mapping to the <tt>Geocoders</tt> controller:</p>

<p><span style="font-family: DejaVu Sans;">在你的应用程序中创建六种不同的</span>routes<span style="font-family: DejaVu Sans;">，所有的</span>routes<span style="font-family: DejaVu Sans;">映射到</span><tt>Geocoders</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>cotroller</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>&nbsp;</p>

<table width="575" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="101" /> <col width="54" /> <col width="315" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="101">Path</th>
<th width="54">action</th>
<th width="315">used for</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder/new</td>
<td width="54">new</td>
<td width="315">return an HTML form for creating the geocoder</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="101">/geocoder</td>
<td width="54">create</td>
<td width="315">create the new geocoder</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder</td>
<td width="54">show</td>
<td width="315">display the one and only geocoder resource</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="101">/geocoder/edit</td>
<td width="54">edit</td>
<td width="315">return an HTML form for editing the geocoder</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="101">/geocoder</td>
<td width="54">update</td>
<td width="315">update the one and only geocoder resource</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="101">/geocoder</td>
<td width="54">destroy</td>
<td width="315">delete the geocoder resource</td>
</tr>
</tbody>
</table>


<p>Because you might want to use the same controller for a singular route (/account) and a plural route (/accounts/45), singular resources map to plural controllers.</p>

<p><span style="font-family: DejaVu Sans;"><tt>因为你可能希望对单数</tt></span><tt>route(/account)</tt><span style="font-family: DejaVu Sans;"><tt>和复数</tt></span><tt>route(/accounts/45)</tt><span style="font-family: DejaVu Sans;"><tt>使用相同的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>，单数</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>映射到复数</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>A</tt><tt> </tt><tt>singular</tt><tt> </tt><tt>resourceful</tt><tt> </tt><tt>route</tt><tt> </tt><tt>generates</tt><tt> </tt><tt>these</tt><tt> </tt><tt>helpers:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>一个单数</tt></span><tt>resourceful</tt><tt> </tt><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>创建这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<ul>
    <li><tt>new_geocoder_path</tt> returns <tt>/geocoder/new</tt></li>
    <li><tt>edit_geocoder_path</tt> returns <tt>/geocoder/edit</tt></li>
    <li><tt>geocoder_path</tt> returns <tt>/geocoder</tt></li>
</ul>


<p><tt>As</tt><tt> </tt><tt>with</tt><tt> </tt><tt>plural</tt><tt> </tt><tt>resources,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>helpers</tt><tt> </tt><tt>ending</tt><tt> </tt><tt>in</tt><tt> </tt><tt>_url</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>include</tt><tt> </tt><tt>the</tt><tt> </tt><tt>host,</tt><tt> </tt><tt>port</tt><tt> </tt><tt>and</tt><tt> </tt><tt>path</tt><tt> </tt><tt>prefix.</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>就像</tt></span><tt>plural</tt><tt> </tt><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>，相同的以</tt></span><tt>_url</tt><span style="font-family: DejaVu Sans;"><tt>结尾的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>同样包含，</tt></span><tt>host</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>port</tt><span style="font-family: DejaVu Sans;"><tt>和路径后缀。</tt></span></p>

<h4><a name="controller-namespaces-and-routing"></a><tt>2.6</tt><tt> </tt><tt>Controller</tt><tt> </tt><tt>Namespaces</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Routing</tt></h4>


<p>You may wish to organize groups of controllers under a namespace. Most commonly, you might group a number of administrative controllers under an <tt>Admin::</tt> namespace. You would place these controllers under the <tt>app/controllers/admin</tt> directory, and you can group them together in your router:</p>

<p><span style="font-family: DejaVu Sans;"><tt>你可能希望通过</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>分组组织</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>。通常大多数情况，你可以分组一系列的</tt><tt></tt></span><tt>administrative</tt><tt> </tt><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>到一个</tt></span><tt>Admin::</tt><span style="font-family: DejaVu Sans;"><tt>名称空间下面。你将会放置这些</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>在</tt><tt></tt></span><tt>app/controllers/admin</tt><span style="font-family: DejaVu Sans;"><tt>目录中，并且你可以在你的</tt></span><tt>router</tt><span style="font-family: DejaVu Sans;"><tt>中分组他们在一起</tt></span></p>

<p><tt>namespace</tt><tt> </tt><tt>:admin</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:comments</tt></p>

<p><tt>end</tt></p>

<p><tt>This</tt><tt> </tt><tt>will</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>number</tt><tt> </tt><tt>of</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>for</tt><tt> </tt><tt>each</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>posts</tt><tt> </tt><tt>and</tt><tt> </tt><tt>comments</tt><tt> </tt><tt>controller.</tt><tt> </tt><tt>For</tt><tt> </tt><tt>Admin::PostsController,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>will</tt><tt> </tt><tt>create:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>这将会对于每一个</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>comments</tt><tt> </tt><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>创建若干的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>。对于</tt><tt></tt></span><tt>Admin::PostsController</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会创建：</tt></span></p>

<p>&nbsp;</p>

<table width="473" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="136" /> <col width="54" /> <col width="178" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="136">Path</th>
<th width="54">action</th>
<th width="178">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts</td>
<td width="54">index</td>
<td width="178">admin_posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/new</td>
<td width="54">new</td>
<td width="178">new_admin_post_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="136">/admin/posts</td>
<td width="54">create</td>
<td width="178">admin_posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/:id</td>
<td width="54">show</td>
<td width="178">admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="136">/admin/posts/:id/edit</td>
<td width="54">edit</td>
<td width="178">edit_admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="136">/admin/posts/:id</td>
<td width="54">update</td>
<td width="178">admin_post_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="136">/admin/posts/:id</td>
<td width="54">destroy</td>
<td width="178">admin_post_path(:id)</td>
</tr>
</tbody>
</table>


<p>If you want to route /posts (without the prefix /admin) to Admin::PostsController, you could use</p>

<p><span style="font-family: DejaVu Sans;"><tt>如果你想</tt></span><tt>Admin::PostsController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>route</tt><tt> </tt><tt>/posts(without</tt><tt> </tt><tt>the</tt><tt> </tt><tt>prefix</tt><tt> </tt><tt>/admin)</tt><span style="font-family: DejaVu Sans;"><tt>，你可以使用</tt></span></p>

<p><tt>#</tt><span style="font-family: DejaVu Sans;"><tt>从</tt></span><tt>admin</tt><span style="font-family: DejaVu Sans;"><tt>中取出，重新声明为独立的</tt></span><tt>resources</tt></p>

<p><tt>scope</tt><tt> </tt><tt>:module</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;admin&rdquo;</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:comments</tt></p>

<p><tt>end</tt></p>

<p><tt>or,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>a</tt><tt> </tt><tt>single</tt><tt> </tt><tt>case</tt></p>

<p><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:module</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;admin&rdquo;</tt></p>

<p><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>route</tt><tt> </tt><tt>/admin/posts</tt><tt> </tt><tt>to</tt><tt> </tt><tt>PostsController</tt><tt> </tt><tt>(without</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Admin::</tt><tt> </tt><tt>module</tt><tt> </tt><tt>prefix),</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>use</tt></p>

<p>scope &ldquo;/admin&rdquo; do</p>

<p>resources :posts, :comments</p>

<p>end</p>

<p><tt>or,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>a</tt><tt> </tt><tt>single</tt><tt> </tt><tt>case</tt></p>

<p><tt>resources</tt><tt> </tt><tt>:posts,</tt><tt> </tt><tt>:path</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;/admin/posts&rdquo;</tt></p>

<p><tt>In</tt><tt> </tt><tt>each</tt><tt> </tt><tt>of</tt><tt> </tt><tt>these</tt><tt> </tt><tt>cases,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>named</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>remain</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>as</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>did</tt><tt> </tt><tt>not</tt><tt> </tt><tt>use</tt><tt> </tt><tt>scope.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>the</tt><tt> </tt><tt>last</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>following</tt><tt> </tt><tt>paths</tt><tt> </tt><tt>map</tt><tt> </tt><tt>to</tt><tt> </tt><tt>PostsController:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>在每个这样的情况中，</tt></span><tt>named</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>保持不变，如果你没有使用范围。在最后，随后的</tt></span><tt>paths</tt><span style="font-family: DejaVu Sans;"><tt>映射到</tt><tt></tt></span><tt>PostsController</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>&nbsp;</p>

<table width="417" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="132" /> <col width="54" /> <col width="126" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="132">Path</th>
<th width="54">action</th>
<th width="126">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts</td>
<td width="54">index</td>
<td width="126">posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/new</td>
<td width="54">new</td>
<td width="126">new_post_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="132">/admin/posts</td>
<td width="54">create</td>
<td width="126">posts_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/:id</td>
<td width="54">show</td>
<td width="126">post_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="132">/admin/posts/:id/edit</td>
<td width="54">edit</td>
<td width="126">edit_post_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="132">/admin/posts/:id</td>
<td width="54">update</td>
<td width="126">post_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="132">/admin/posts/:id</td>
<td width="54">destroy</td>
<td width="126">post_path(:id)</td>
</tr>
</tbody>
</table>


<h4><a name="nested-resources"></a>2.7 Nested Resources<span style="font-family: WenQuanYi Micro Hei;"><tt>嵌套</tt></span><tt>Resource</tt></h4>


<p>It’s common to have resources that are logically children of other resources. For example, suppose your application includes these models:</p>

<p><span style="font-family: DejaVu Sans;"><tt>在通常情况中有</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>是其他的</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>逻辑上的</tt></span><tt>children</tt><span style="font-family: DejaVu Sans;"><tt>。例如，假设你的应用程序包含这些</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><tt>class</tt><tt> </tt><tt>Magazine</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt></p>

<p><tt> </tt><tt>has_many</tt><tt> </tt><tt>:ads</tt></p>

<p><tt>end</tt></p>

<p>&nbsp;</p>

<p><tt>class</tt><tt> </tt><tt>Ad</tt><tt> </tt><tt>&lt;</tt><tt> </tt><tt>ActiveRecord::Base</tt></p>

<p><tt> </tt><tt>belongs_to</tt><tt> </tt><tt>:magazine</tt></p>

<p><tt>end</tt></p>

<p><tt>Nested</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>allow</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>capture</tt><tt> </tt><tt>this</tt><tt> </tt><tt>relationship</tt><tt> </tt><tt>in</tt><tt> </tt><tt>your</tt><tt> </tt><tt>routing.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>could</tt><tt> </tt><tt>include</tt><tt> </tt><tt>this</tt><tt> </tt><tt>route</tt><tt> </tt><tt>declaration:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>嵌套</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>允许你捕捉这些关系在你的</tt></span><tt>routing</tt><span style="font-family: DejaVu Sans;"><tt>中。在这里的情况中，你可包含这样的声明：</tt></span></p>

<p><tt>resources</tt><tt> </tt><tt>:magazines</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:ads</tt></p>

<p><tt>end</tt></p>

<p><tt>In</tt><tt> </tt><tt>addition</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>routes</tt><tt> </tt><tt>for</tt><tt> </tt><tt>magazines,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>declaration</tt><tt> </tt><tt>will</tt><tt> </tt><tt>also</tt><tt> </tt><tt>route</tt><tt> </tt><tt>ads</tt><tt> </tt><tt>to</tt><tt> </tt><tt>an</tt><tt> </tt><tt>AdsController.</tt><tt> </tt><tt>The</tt><tt> </tt><tt>ad</tt><tt> </tt><tt>URLs</tt><tt> </tt><tt>require</tt><tt> </tt><tt>a</tt><tt> </tt><tt>magazine:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>除了</tt><tt></tt></span><tt>magazines</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>，这里也同样声明</tt></span><tt>route</tt><tt> </tt><tt>ads</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>AdsController</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>ad</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>URLs</tt><span style="font-family: DejaVu Sans;"><tt>需要一个</tt><tt></tt></span><tt>magazine</tt><span style="font-family: DejaVu Sans;"><tt>（对象）：</tt></span></p>

<p>&nbsp;</p>

<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="82" /> <col width="144" /> <col width="53" /> <col width="371" /> </colgroup>
<tbody>
<tr>
<th width="82">HTTP Verb</th>
<th width="144">Path</th>
<th width="53">action</th>
<th width="371">used for</th>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads</td>
<td width="53">index</td>
<td width="371">display a list of all ads for a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/new</td>
<td width="53">new</td>
<td width="371">return an HTML form for creating a new ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">POST</td>
<td width="144">/magazines/:id/ads</td>
<td width="53">create</td>
<td width="371">create a new ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">show</td>
<td width="371">display a specific ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">GET</td>
<td width="144">/magazines/:id/ads/:id/edit</td>
<td width="53">edit</td>
<td width="371">return an HTML form for editing an ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">PUT</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">update</td>
<td width="371">update a specific ad belonging to a specific magazine</td>
</tr>
<tr>
<td width="82">DELETE</td>
<td width="144">/magazines/:id/ads/:id</td>
<td width="53">destroy</td>
<td width="371">delete a specific ad belonging to a specific magazine</td>
</tr>
</tbody>
</table>


<p>This will also create routing helpers such as magazine_ads_url and edit_magazine_ad_path. These helpers take an instance of Magazine as the first parameter (magazine_ads_url(@magazine)).</p>

<p><span style="font-family: DejaVu Sans;"><tt>这里也将会创建</tt></span><tt>routing</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>例如</tt><tt></tt></span><tt>magazine_ads_url</tt><span style="font-family: DejaVu Sans;"><tt>和</tt><tt></tt></span><tt>edit_magazine_ad_path</tt><span style="font-family: DejaVu Sans;"><tt>。这些</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>获取一个</tt><tt></tt></span><tt>Magazine</tt><span style="font-family: DejaVu Sans;"><tt>的实例作为第一个参数（</tt></span><tt>magazine_ads_url(@magazine)</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt></span></p>

<h5><a name="limits-to-nesting"></a><tt>2.7.1</tt><tt> </tt><tt>Limits</tt><tt> </tt><tt>to</tt><tt> </tt><tt>Nesting</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>嵌套的局限</tt></span></h5>


<p>You can nest resources within other nested resources if you like. For example:</p>

<p><span style="font-family: DejaVu Sans;"><tt>你可以嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>在其他嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>中如果你喜欢。例如：</tt></span></p>

<p><tt>resources</tt><tt> </tt><tt>:publishers</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:magazines</tt><tt> </tt><tt>do</tt></p>

<p><tt> </tt><tt>resources</tt><tt> </tt><tt>:photos</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p><tt>end</tt></p>

<p><tt>Deeply-nested</tt><tt> </tt><tt>resources</tt><tt> </tt><tt>quickly</tt><tt> </tt><tt>become</tt><tt> </tt><tt>cumbersome.</tt><tt> </tt><tt>In</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>for</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>application</tt><tt> </tt><tt>would</tt><tt> </tt><tt>recognize</tt><tt> </tt><tt>paths</tt><tt> </tt><tt>such</tt><tt> </tt><tt>as</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>深层的嵌套</tt></span><tt>resources</tt><span style="font-family: DejaVu Sans;"><tt>相当的累赘。在这样的情况下，例如，应用程序将会这样组织路径</tt></span></p>

<pre><tt>/publishers/1/magazines/2/photos/3</tt></pre>


<p><tt>The</tt><tt> </tt><tt>corresponding</tt><tt> </tt><tt>route</tt><tt> </tt><tt>helper</tt><tt> </tt><tt>would</tt><tt> </tt><tt>be</tt><tt> </tt><tt>publisher_magazine_photo_url,</tt><tt> </tt><tt>requiring</tt><tt> </tt><tt>you</tt><tt> </tt><tt>to</tt><tt> </tt><tt>specify</tt><tt> </tt><tt>objects</tt><tt> </tt><tt>at</tt><tt> </tt><tt>all</tt><tt> </tt><tt>three</tt><tt> </tt><tt>levels.</tt><tt> </tt><tt>Indeed,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>situation</tt><tt> </tt><tt>is</tt><tt> </tt><tt>confusing</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>that</tt><tt> </tt><tt>a</tt><tt> </tt><tt>popular</tt><tt> </tt><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://weblog.jamisbuck.org/2007/2/5/nesting-resources">article</a></span></span><tt> </tt><tt>by</tt><tt> </tt><tt>Jamis</tt><tt> </tt><tt>Buck</tt><tt> </tt><tt>proposes</tt><tt> </tt><tt>a</tt><tt> </tt><tt>rule</tt><tt> </tt><tt>of</tt><tt> </tt><tt>thumb</tt><tt> </tt><tt>for</tt><tt> </tt><tt>good</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>design:</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>相应的</tt></span><tt>route</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>将会是</tt><tt></tt></span><tt>publisher_magazine_photo_url</tt><span style="font-family: DejaVu Sans;"><tt>这需要你指定三个级别的所有对象。事实上，这种情况下太混乱了一篇受欢迎的文章来自</tt></span><tt>Jamis</tt><tt> </tt><tt>Buck</tt><span style="font-family: DejaVu Sans;"><tt>，关于一个设计良好的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的经验法则：</tt></span></p>

<p><em><strong>Resources</strong></em><em><strong> </strong></em><em><strong>should</strong></em><em><strong> </strong></em><em><strong>never</strong></em><em><strong> </strong></em><em><strong>be</strong></em><em><strong> </strong></em><em><strong>nested</strong></em><em><strong> </strong></em><em><strong>more</strong></em><em><strong> </strong></em><em><strong>than</strong></em><em><strong> </strong></em><em><strong>1</strong></em><em><strong> </strong></em><em><strong>level</strong></em><em><strong> </strong></em><em><strong>deep.</strong></em></p>

<h4><a name="creating-paths-and-urls-from-objects"></a> <tt>2.8</tt><tt> </tt><tt>Creating</tt><tt> </tt><tt>Paths</tt><tt> </tt><tt>and</tt><tt> </tt><tt>URLs</tt><tt> </tt><tt>From</tt><tt> </tt><tt>Objects</tt></h4>


<p>In addition to using the routing helpers, Rails can also create paths and URLs from an array of parameters. For example, suppose you have this set of routes:</p>

<p><span style="font-family: DejaVu Sans;">除了使用</span>routing helpers<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">也可以从一个</span>parameters<span style="font-family: DejaVu Sans;">数组创建</span>paths<span style="font-family: DejaVu Sans;">和</span>URLs<span style="font-family: DejaVu Sans;">。例如，假设你有这样的组</span>routes<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :magazines do</p>

<p>resources :ads</p>

<p>end</p>

<p>When using <tt> </tt><tt>magazine_ad_path</tt>, you can pass in instances of <tt> </tt><tt>Magazine</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Ad</tt> instead of the numeric IDs.</p>

<p><span style="font-family: DejaVu Sans;">在使用</span><tt>magazine_ad_path</tt><span style="font-family: DejaVu Sans;"><tt>的时候，你可以传递</tt><tt></tt></span><tt>Magazine</tt><tt> </tt><tt>and</tt><tt> </tt><tt>Ad</tt><span style="font-family: DejaVu Sans;"><tt>的实例替代数字</tt></span><tt>IDs</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>&lt;%= link_to &ldquo;Ad details&rdquo;, magazine_ad_path(@magazine, @ad) %&gt;</p>

<p>You can also use <tt>url_for</tt> with a set of objects, and Rails will automatically determine which route you want:</p>

<p><span style="font-family: DejaVu Sans;">你同样也可以使用</span><tt>url_for</tt><span style="font-family: DejaVu Sans;"><tt>和一组对象，那么</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>将会自动的决定那个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>是你希望的：</tt></span></p>

<p>&lt;%= link_to &ldquo;Ad details&rdquo;, url_for([@magazine, @ad]) %&gt;</p>

<p>In this case, Rails will see that <tt>@magazine</tt> is a <tt> </tt><tt>Magazine</tt> and <tt>@ad</tt> is an <tt>Ad</tt> and will therefore use the <tt>magazine_ad_path</tt> helper. In helpers like <tt>link_to</tt>, you can specify just the object in place of the full <tt>url_for</tt> call:</p>

<p><span style="font-family: DejaVu Sans;">在这里，</span>Rails<span style="font-family: DejaVu Sans;">将会明白</span><tt>@magazine</tt><span style="font-family: DejaVu Sans;"><tt>是</tt><tt></tt></span><tt>Magazine</tt><span style="font-family: DejaVu Sans;"><tt>并且</tt></span><tt>@ad</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>Ad</tt><span style="font-family: DejaVu Sans;"><tt>于此将会因此使用</tt><tt></tt></span><tt>magazine_ad_path</tt><tt> </tt><tt>helper</tt><span style="font-family: DejaVu Sans;"><tt>。在就像</tt></span><tt>link_to</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>中，你可以指定仅仅对象在</tt></span><tt>url_for</tt><span style="font-family: DejaVu Sans;"><tt>调用中：</tt></span></p>

<p>&lt;%= link_to &ldquo;Ad details&rdquo;, [@magazine, @ad] %&gt;</p>

<p>If you wanted to link to just a magazine, you could leave out the <tt>Array</tt>:</p>

<p><span style="font-family: DejaVu Sans;">如果你想仅仅</span>link<span style="font-family: DejaVu Sans;">到一个</span>magazine<span style="font-family: DejaVu Sans;">，你可以省去数组：</span></p>

<p>&lt;%= link_to &ldquo;Magazine details&rdquo;, @magazine %&gt;</p>

<p>This allows you to treat instances of your models as URLs, and is a key advantage to using the resourceful style.</p>

<p><a name="adding-more-restful-actions"></a><span style="font-family: DejaVu Sans;">这让你处理</span>models<span style="font-family: DejaVu Sans;">的实例为</span>URLs<span style="font-family: DejaVu Sans;">，并且这也是使用</span>resourceful style<span style="font-family: DejaVu Sans;">的关键优势。</span></p>

<h4><a name="adding-more-restful-actions1"></a>2.9 Adding More RESTful Actions<span style="font-family: WenQuanYi Micro Hei;">添加更多的</span>RESTful Action</h4>


<p>You are not limited to the seven routes that RESTful routing creates by default. If you like, you may add additional routes that apply to the collection or individual members of the collection.</p>

<p><span style="font-family: DejaVu Sans;">你并不限制于</span>RESTful routing<span style="font-family: DejaVu Sans;">默认创建的七个</span>routes<span style="font-family: DejaVu Sans;">。如果你喜欢，你可以添加额外的</span>routes<span style="font-family: DejaVu Sans;">用于多个或者个别的</span>collection<span style="font-family: DejaVu Sans;">。</span></p>

<h5><a name="adding-member-routes"></a>2.9.1 Adding Member Routes</h5>


<p>To add a member route, just add a <tt>member</tt> block into the resource block:</p>

<p><span style="font-family: DejaVu Sans;">添加一个</span>member route<span style="font-family: DejaVu Sans;">，仅仅添加一个</span>member<span style="font-family: DejaVu Sans;">的</span>block<span style="font-family: DejaVu Sans;">到</span>resource block<span style="font-family: DejaVu Sans;">中：</span></p>

<p>resources :photos do</p>

<p>member do</p>

<p>get &lsquo;preview&rsquo;</p>

<p>end</p>

<p>end</p>

<p>This will recognize <tt>/photos/1/preview</tt> with GET, and route to the <tt>preview</tt> action of <tt>PhotosController</tt>. It will also create the <tt>preview_photo_url</tt> and <tt>preview_photo_path</tt> helpers.</p>

<p>Within the block of member routes, each route name specifies the HTTP verb that it will recognize. You can use <tt>get</tt>, <tt>put</tt>, <tt>post</tt>, or <tt>delete</tt> here. If you don’t have multiple <tt>member</tt> routes, you can also pass <tt>:on</tt> to a route, eliminating the block:</p>

<p><span style="font-family: DejaVu Sans;">在</span>member<span style="font-family: DejaVu Sans;">的</span>routes<span style="font-family: DejaVu Sans;">中，每个</span>route<span style="font-family: DejaVu Sans;">名字指定</span>HTTP verb<span style="font-family: DejaVu Sans;">这是将会组织的。在这里你可以使用</span><tt>get</tt>, <tt>put</tt>, <tt>post</tt>, or <tt>delete</tt><span style="font-family: DejaVu Sans;"><tt>。如果你没有多个</tt></span><tt>member</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>，你同样也可以传递</tt></span><tt>:on</tt><span style="font-family: DejaVu Sans;"><tt>到一个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>，消除</tt></span><tt>block</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>resources :photos do</p>

<p>get &lsquo;preview&rsquo;, :on =&gt; :member</p>

<p>end</p>

<h5><a name="adding-collection-routes"></a>2.9.2 Adding Collection Routes</h5>


<p>To add a route to the collection:</p>

<p><span style="font-family: DejaVu Sans;">添加一个</span>route<span style="font-family: DejaVu Sans;">到</span>collection<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :photos do</p>

<p>collection do</p>

<p>get &lsquo;search&rsquo;</p>

<p>end</p>

<p>end</p>

<p>This will enable Rails to recognize paths such as <tt>/photos/search</tt> with GET, and route to the <tt>search</tt> action of <tt>PhotosController</tt>. It will also create the <tt>search_photos_url</tt> and <tt>search_photos_path</tt> route helpers.</p>

<p><span style="font-family: DejaVu Sans;">这将使</span>Rails<span style="font-family: DejaVu Sans;">能够像这样</span><tt>/photos/search</tt> with GET<span style="font-family: DejaVu Sans;">组织路径，并且</span>route<span style="font-family: DejaVu Sans;">到</span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>search</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。它将同样创建</tt><tt></tt></span><tt>search_photos_url</tt><span style="font-family: DejaVu Sans;"><tt>和</tt><tt></tt></span><tt>search_photos_path</tt><tt> </tt><tt>route</tt><tt> </tt><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>Just as with member routes, you can pass <tt>:on</tt> to a route:</p>

<p><span style="font-family: DejaVu Sans;">仅仅对于</span>member routes<span style="font-family: DejaVu Sans;">，你可以传递</span>:on<span style="font-family: DejaVu Sans;">给一个</span>route<span style="font-family: DejaVu Sans;">：</span></p>

<p>resources :photos do</p>

<p>get &lsquo;search&rsquo;, :on =&gt; :collection</p>

<p>end</p>

<h5><a name="a-note-of-caution"></a>2.9.3 A Note of Caution<span style="font-family: WenQuanYi Micro Hei;">一个慎重的提醒</span></h5>


<p>If you find yourself adding many extra actions to a resourceful route, it’s time to stop and ask yourself whether you’re disguising the presence of another resource.</p>

<p><span style="font-family: DejaVu Sans;">如果你发现你自己添加很多额外的</span>action<span style="font-family: DejaVu Sans;">到一个</span>resourceful<span style="font-family: DejaVu Sans;">的</span>route<span style="font-family: DejaVu Sans;">，是时候停下来并问你自己</span></p>

<p><a name="result_box"></a><span style="font-family: DejaVu Sans;">是否你在伪造另一个</span>resource<span style="font-family: DejaVu Sans;">。</span></p>

<h3><a name="non-resourceful-routes"></a>3 Non-Resourceful Routes<span style="font-family: WenQuanYi Micro Hei;">非</span>- Resourceful Routes</h3>


<p>In addition to resource routing, Rails has powerful support for routing arbitrary URLs to actions. Here, you don’t get groups of routes automatically generated by resourceful routing. Instead, you set up each route within your application separately.</p>

<p><span style="font-family: DejaVu Sans;">除了</span>resource routing<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">对任意的</span>URLs<span style="font-family: DejaVu Sans;">到</span>actions<span style="font-family: DejaVu Sans;">有强力的支持。这里，你没有得到被</span>resourceful routing<span style="font-family: DejaVu Sans;">自动创建的</span>groups of routes<span style="font-family: DejaVu Sans;">。作为替代，在你的应用程序中分别设置每个</span>route<span style="font-family: DejaVu Sans;">。</span></p>

<p>While you should usually use resourceful routing, there are still many places where the simpler routing is more appropriate. There’s no need to try to shoehorn every last piece of your application into a resourceful framework if that’s not a good fit.</p>

<p><span style="font-family: DejaVu Sans;">即使你应该通常使用</span>resourceful routing<span style="font-family: DejaVu Sans;">，这里仍然有很多地方简单的</span>routing<span style="font-family: DejaVu Sans;">更加适合。这里不需要尝试将你的应用程序最后写成一个</span>resourceful framework<span style="font-family: DejaVu Sans;">如果这样并不合适。</span></p>

<p>In particular, simple routing makes it very easy to map legacy URLs to new Rails actions.</p>

<p><a name="result_box1"></a><span style="font-family: DejaVu Sans;">特别是，简单的路</span>routing<span style="font-family: DejaVu Sans;">，使得它很容易映射（传入的）现有的</span>URL<span style="font-family: DejaVu Sans;">映射到新的</span>Rails action<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="bound-parameters"></a>3.1 Bound Parameters<span style="font-family: WenQuanYi Micro Hei;">绑定参数</span></h4>


<p>When you set up a regular route, you supply a series of symbols that Rails maps to parts of an incoming HTTP request. Two of these symbols are special: <tt>:controller</tt> maps to the name of a controller in your application, and <tt>:action</tt> maps to the name of an action within that controller. For example, consider one of the default Rails routes:</p>

<p><span style="font-family: DejaVu Sans;">当你设定一个正则</span>route<span style="font-family: DejaVu Sans;">，你供应一系列的字符，其将通过</span>Rails<span style="font-family: DejaVu Sans;">映射到传入</span>HTTP<span style="font-family: DejaVu Sans;">请求的一部分。这些字符的两部分分别是：</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>映射到你应用程序中的一个</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>，并且</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>映射到在指定的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中的一个</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。例如思考一个默认的</tt></span><tt>Rails</tt><tt> </tt><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>match &lsquo;:controller(/:action(/:id))&rsquo;</p>

<p>If an incoming request of <tt>/photos/show/1</tt> is processed by this route (because it hasn’t matched any previous route in the file), then the result will be to invoke the <tt>show</tt> action of the <tt> </tt><tt>PhotosController</tt>, and to make the final parameter <tt>&ldquo;1&rdquo;</tt> available as <tt>params[:id]</tt>. This route will also route the incoming request of <tt>/photos</tt> to <tt>PhotosController#index</tt>, since <tt>:action</tt> and <tt>:id</tt> are optional parameters, denoted by parentheses.</p>

<p><span style="font-family: DejaVu Sans;">如果传入请求</span><tt>/photos/show/1</tt><tt> </tt><tt>is</tt><tt> </tt><tt>processed</tt><tt> </tt><tt>by</tt><tt> </tt><tt>this</tt><tt> </tt><tt>route</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>（因为它并没有被先前的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>文件中任何的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>匹配成功），接着这个结果将会调用</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，并且使得最后的参数</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">”</span></tt></span><tt>1</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>可用于</tt></span><tt>params[:id]</tt><span style="font-family: DejaVu Sans;"><tt>。这个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>也还会</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>传入请求</tt></span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>PhotosController#index</tt><span style="font-family: DejaVu Sans;"><tt>，因为</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>:id</tt><span style="font-family: DejaVu Sans;"><tt>是被括号包起来的可选参数。</tt></span></p>

<h4><a name="dynamic-segments"></a>3.2 Dynamic Segments<span style="font-family: WenQuanYi Micro Hei;">动态分割</span></h4>


<p>You can set up as many dynamic segments within a regular route as you like. Anything other than <tt>:controller</tt> or <tt>:action</tt> will be available to the action as part of <tt>params</tt>. If you set up this route:</p>

<p><span style="font-family: DejaVu Sans;">你可以设置你希望的数目的</span>dynamic segments<span style="font-family: DejaVu Sans;">在一个正则</span>route<span style="font-family: DejaVu Sans;">中。超过</span><tt>:controller</tt> or <tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>的其他部分（是可用的）在</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>作为</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>第一部分。如果你设定这样的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><tt>match</tt><tt> </tt><tt>&lsquo;:controller/:action/:id/:user_id&rsquo;</tt></p>

<p>An incoming path of <tt>/photos/show/&frac12;</tt> will be dispatched to the <tt>show</tt> action of the <tt>PhotosController</tt>. <tt>params[:id]</tt> will be <tt>&ldquo;1&rdquo;</tt>, and <tt>params[:user_id]</tt> will be <tt>&ldquo;2&rdquo;</tt>.</p>

<p><span style="font-family: DejaVu Sans;">一个传入路径</span><tt>/photos/show/&frac12;</tt><span style="font-family: DejaVu Sans;"><tt>将会被调度给</tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>params[:id]</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>&ldquo;1&rdquo;,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>params[:user_id]</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>&ldquo;2&rdquo;.</tt></p>

<p>You can’t use <tt>namespace</tt> or <tt>:module</tt> with a <tt>:controller</tt> path segment. If you need to do this then use a constraint on :controller that matches the namespace you require. e.g:</p>

<p><span style="font-family: DejaVu Sans;">你不能对一个</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>路径</tt></span><tt>segment</tt><span style="font-family: DejaVu Sans;"><tt>使用</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>:module</tt><span style="font-family: DejaVu Sans;"><tt>。如果你需要这么做那么使用对</tt><tt></tt></span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>一个限制使其匹配你请求的</tt></span><tt>namespace</tt><span style="font-family: DejaVu Sans;"><tt>。例如：</tt></span></p>

<p><tt>match</tt><tt> </tt><tt>&lsquo;:controller(/:action(/:id))&rsquo;,</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>/admin\/[^\/]+/</tt></p>

<p>&nbsp;</p>

<p>By default dynamic segments don’t accept dots – this is because the dot is used as a separator for formatted routes. If you need to use a dot within a dynamic segment add a constraint which overrides this – for example <tt>:id</tt> =&gt; /[^\/]+/ allows anything except a slash.</p>

<p><span style="font-family: DejaVu Sans;">默认的动态分割不接受</span>dots<span style="font-family: DejaVu Sans;">（</span>.<span style="font-family: DejaVu Sans;">）<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>这是因为</span>dot<span style="font-family: DejaVu Sans;">被作为格式化</span>routes<span style="font-family: DejaVu Sans;">的一个分割。如果你需要在一个</span>dynamic segment<span style="font-family: DejaVu Sans;">中使用</span>dot<span style="font-family: DejaVu Sans;">，添加一个限制来重写它<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>例如</span><tt>:id</tt> =&gt; /[^\/]+/<span style="font-family: DejaVu Sans;">允许除了斜线之外的任何字符。</span></p>

<h4><a name="static-segments"></a>3.3 Static Segments</h4>


<p>You can specify static segments when creating a route:</p>

<p>match &lsquo;:controller/:action/:id/with_user/:user_id&rsquo;</p>

<p>This route would respond to paths such as <tt>/photos/show/1/with_user/2</tt>. In this case, <tt>params</tt> would be <tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt>.</p>

<h4><a name="the-query-string"></a>3.4 The Query String<span style="font-family: WenQuanYi Micro Hei;">查询字符串</span></h4>


<p>The <tt>params</tt> will also include any parameters from the query string. For example, with this route:</p>

<p>params<span style="font-family: DejaVu Sans;">将也会包含来自查询字符串的任何参数。例如，使用这个</span>route<span style="font-family: DejaVu Sans;">：</span></p>

<p>match &lsquo;:controller/:action/:id&rsquo;</p>

<p>An incoming path of <tt>/photos/show/1?user_id=2</tt> will be dispatched to the <tt>show</tt> action of the <tt>Photos</tt> controller. <tt>params</tt> will be <tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt>.</p>

<p><span style="font-family: DejaVu Sans;">一个传入路径</span><tt>/photos/show/1?user_id=2</tt><span style="font-family: DejaVu Sans;"><tt>将会被调度给</tt><tt></tt></span><tt>Photos</tt><tt> </tt><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span><tt>params</tt><span style="font-family: DejaVu Sans;"><tt>将会是</tt></span><tt>{</tt><tt> </tt><tt>:controller</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>photos</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>show</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>1</tt><tt>”</tt><tt>,</tt><tt> </tt><tt>:user_id</tt><tt> </tt><tt>=&gt;</tt><tt> “</tt><tt>2</tt><tt>” </tt><tt>}</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<h4><a name="defining-defaults"></a>3.5 Defining Defaults<span style="font-family: WenQuanYi Micro Hei;">默认定义</span></h4>


<p>You do not need to explicitly use the <tt>:controller</tt> and <tt>:action</tt> symbols within a route. You can supply them as defaults:</p>

<p><span style="font-family: DejaVu Sans;">你不需要准确的使用</span><tt>:controller</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>:action</tt><span style="font-family: DejaVu Sans;"><tt>字符在一个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>中。你可以默认的提供他们：</tt></span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;</p>

<p>With this route, Rails will match an incoming path of <tt>/photos/12</tt> to the <tt>show</tt> action of <tt>PhotosController</tt>.</p>

<p><span style="font-family: DejaVu Sans;">通过这个</span>route<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">将会匹配一个传入路径</span><tt>/photos/12</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>You can also define other defaults in a route by supplying a hash for the <tt>:defaults</tt> option. This even applies to parameters that you do not specify as dynamic segments. For example:</p>

<p><span style="font-family: DejaVu Sans;"><tt>你同样也可以在</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>中定义其他的默认（设置）通过提供一个</tt></span><tt>hash</tt><span style="font-family: DejaVu Sans;"><tt>字典给</tt><tt></tt></span><tt>:defaults</tt><span style="font-family: DejaVu Sans;"><tt>选项。这甚至会应用于不需要指定参数作为动态分割。例如：</tt></span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;, :defaults =&gt; { :format =&gt; &lsquo;jpg&rsquo; }</p>

<p>Rails would match <tt>photos/12</tt> to the <tt>show</tt> action of <tt>PhotosController</tt>, and set <tt>params[:format]</tt> to <tt>&ldquo;jpg&rdquo;</tt>.</p>

<p>Rails<span style="font-family: DejaVu Sans;">将会匹配</span><tt>photos/12</tt><span style="font-family: DejaVu Sans;"><tt>到</tt><tt></tt></span><tt>PhotosController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，并且设置</tt></span><tt>params[:format]</tt><tt> </tt><tt>to</tt><tt> </tt><tt>&ldquo;jpg&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<h4><a name="naming-routes"></a>3.6 Naming Routes</h4>


<p>You can specify a name for any route using the <tt>:as</tt> option.</p>

<p><span style="font-family: DejaVu Sans;">你可以指定一个</span>name<span style="font-family: DejaVu Sans;">给任何</span>route<span style="font-family: DejaVu Sans;">使用</span>:as<span style="font-family: DejaVu Sans;">选项。</span></p>

<p>match &lsquo;exit&rsquo; =&gt; &lsquo;sessions#destroy&rsquo;, :as =&gt; :logout</p>

<p>This will create <tt>logout_path</tt> and <tt>logout_url</tt> as named helpers in your application. Calling <tt>logout_path</tt> will return <tt>/exit</tt></p>

<p><span style="font-family: DejaVu Sans;"><tt>这里将会在应用程序中创建</tt><tt></tt></span><tt>logout_path</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>logout_url</tt><span style="font-family: DejaVu Sans;"><tt>作为（刚才）命名的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>helpers</tt><span style="font-family: DejaVu Sans;"><tt>。调用</tt></span><tt>logout_path</tt><span style="font-family: DejaVu Sans;"><tt>将会返回</tt></span><tt>/exit</tt></p>

<h4><a name="http-verb-constraints"></a>3.7 HTTP Verb Constraints <span style="font-family: WenQuanYi Micro Hei;">限定</span>HTTP <span style="font-family: WenQuanYi Micro Hei;">动作</span></h4>


<p>You can use the <tt>:via</tt> option to constrain the request to one or more HTTP methods:</p>

<p><span style="font-family: DejaVu Sans;">你可以使用</span>:via<span style="font-family: DejaVu Sans;">选项来限定请求一个或多个（</span>HTTP<span style="font-family: DejaVu Sans;">）方法：</span></p>

<p>match &lsquo;photos/show&rsquo; =&gt; &lsquo;photos#show&rsquo;, :via =&gt; :get</p>

<p>There is a shorthand version of this as well:</p>

<p><span style="font-family: DejaVu Sans;">这里的短操作版本同样也是可以的：</span></p>

<p>get &lsquo;photos/show&rsquo;</p>

<p>You can also permit more than one verb to a single route:</p>

<p><span style="font-family: DejaVu Sans;">你也可以运行超过一个动作到一个单独的</span>route<span style="font-family: DejaVu Sans;">：</span></p>

<p>match &lsquo;photos/show&rsquo; =&gt; &lsquo;photos#show&rsquo;, :via =&gt; [:get, :post]</p>

<h4><a name="segment-constraints"></a>3.8 Segment Constraints<span style="font-family: WenQuanYi Micro Hei;">分割限制</span></h4>


<p>You can use the <tt>:constraints</tt> option to enforce a format for a dynamic segment:</p>

<p><span style="font-family: DejaVu Sans;">你可以使用</span>:constraints<span style="font-family: DejaVu Sans;">选项来强制一个动态分割的格式：</span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;, :constraints =&gt; { :id =&gt; /[A-Z]\d{5}/ }</p>

<p>This route would match paths such as <tt>/photos/A12345</tt>. You can more succinctly express the same route this way:</p>

<p><span style="font-family: DejaVu Sans;">这个</span>route<span style="font-family: DejaVu Sans;">将会匹配像这样的路径</span><tt>/photos/A12345</tt><span style="font-family: DejaVu Sans;"><tt>。你可以使用这样的方式来更加简洁的表达相同的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p>match &lsquo;photos/:id&rsquo; =&gt; &lsquo;photos#show&rsquo;, :id =&gt; /[A-Z]\d{5}/</p>

<p><tt>:constraints</tt> takes regular expressions with the restriction that regexp anchors can’t be used. For example, the following route will not work:</p>

<p><tt>:constraints</tt><span style="font-family: DejaVu Sans;"><tt>获取的正则表达式，其限定了正则表达式的锚不能被使用。例如下面的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>将不会工作（使用了</tt></span><tt>^</tt><span style="font-family: DejaVu Sans;"><tt>锚指定从这里开始）：</tt></span></p>

<p>match &lsquo;/:id&rsquo; =&gt; &lsquo;posts#show&rsquo;, :constraints =&gt; {:id =&gt; /^\d/}</p>

<p>However, note that you don’t need to use anchors because all routes are anchored at the start.</p>

<p><span style="font-family: DejaVu Sans;">然而，注意你不需要使用锚因为所有的</span>routes<span style="font-family: DejaVu Sans;">锚定在开始位置。</span></p>

<p>For example, the following routes would allow for <tt>posts</tt> with <tt>to_param</tt> values like <tt>1-hello-world</tt> that always begin with a number and <tt>users</tt> with <tt>to_param</tt> values like <tt>david</tt> that never begin with a number to share the root namespace:</p>

<p><span style="font-family: DejaVu Sans;">例如，下面的</span>route<span style="font-family: DejaVu Sans;">将会允许</span>posts<span style="font-family: DejaVu Sans;">及</span><tt>to_param</tt><span style="font-family: DejaVu Sans;"><tt>像</tt><tt></tt></span><tt>1-hello-world</tt><span style="font-family: DejaVu Sans;"><tt>的值，其总是以一个数字和</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>user</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>to_param</tt><span style="font-family: DejaVu Sans;"><tt>的值就像</tt></span><tt>david</tt><span style="font-family: DejaVu Sans;"><tt>）它从不以数字开始来</tt></span><tt>share</tt><span style="font-family: DejaVu Sans;"><tt>根名称空间。</tt></span></p>

<p>match &lsquo;/:id&rsquo; =&gt; &lsquo;posts#show&rsquo;, :constraints =&gt; { :id =&gt; /\d.+/ }</p>

<p>match &lsquo;/:username&rsquo; =&gt; &lsquo;users#show&rsquo;</p>

<h4><a name="request-based-constraints"></a>3.9 Request-Based Constraints Request-Based<span style="font-family: WenQuanYi Micro Hei;">的限制</span></h4>


<p>You can also constrain a route based on any method on the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/action_controller_overview.html#the-request-object">Request</a></span></span> object that returns a <tt>String</tt>.</p>

<p>You specify a request-based constraint the same way that you specify a segment constraint:</p>

<p><span style="font-family: DejaVu Sans;">你也可以限制一个</span>route <span style="font-family: DejaVu Sans;">基于任何方法在</span>Request<span style="font-family: DejaVu Sans;">对象时它都会返回一个</span>String<span style="font-family: DejaVu Sans;">。</span></p>

<p><span style="font-family: DejaVu Sans;">你指定一个</span>request-basedcontraint<span style="font-family: DejaVu Sans;">和你指定一个</span>segment constaint<span style="font-family: DejaVu Sans;">是一样的。</span></p>

<p>match &ldquo;photos&rdquo;, :constraints =&gt; {:subdomain =&gt; &ldquo;admin&rdquo;}</p>

<p>You can also specify constraints in a block form:</p>

<p><span style="font-family: DejaVu Sans;">你也可以指定限制在一个</span>block form<span style="font-family: DejaVu Sans;">中：</span></p>

<p>namespace :admin do</p>

<p>constraints :subdomain =&gt; &ldquo;admin&rdquo; do</p>

<p>resources :photos</p>

<p>end</p>

<p>end</p>

<h4><a name="advanced-constraints"></a>3.10 Advanced Constraints<span style="font-family: WenQuanYi Micro Hei;">高级</span>constraints</h4>


<p>If you have a more advanced constraint, you can provide an object that responds to <tt>matches?</tt> that Rails should use. Let’s say you wanted to route all users on a blacklist to the <tt>BlacklistController</tt>. You could do:</p>

<p><span style="font-family: DejaVu Sans;">如果你有一个更高级的</span>contraint<span style="font-family: DejaVu Sans;">，你可以提供一个对象，</span>Rails<span style="font-family: DejaVu Sans;">将会使用</span>matches?<span style="font-family: DejaVu Sans;">回应这个对象。</span></p>

<p><span style="font-family: DejaVu Sans;">让我来告诉你要想</span>route<span style="font-family: DejaVu Sans;">所有的用户在一个黑名单中匹配（通过</span><tt>BlacklistController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><code>matches?</code><span style="font-family: DejaVu Sans;"><code>方法）。你应该：</code></span></p>

<p>class BlacklistConstraint</p>

<p>def initialize</p>

<p>@ips = Blacklist.retrieve_ips</p>

<p>end</p>

<p>&nbsp;</p>

<p>def matches?(request)</p>

<p>@ips.include?(request.remote_ip)</p>

<p>end</p>

<p>end</p>

<p>&nbsp;</p>

<p>TwitterClone::Application.routes.draw do</p>

<p>match &ldquo;*path&rdquo; =&gt; &ldquo;blacklist#index&rdquo;,</p>

<p>:constraints =&gt; BlacklistConstraint.new</p>

<p>end</p>

<h4><a name="route-globbing"></a>3.11 Route Globbing</h4>


<p>Route globbing is a way to specify that a particular parameter should be matched to all the remaining parts of a route. For example</p>

<p>Route globbing<span style="font-family: DejaVu Sans;">是一种方式来指定特定的</span>paramerter<span style="font-family: DejaVu Sans;">应该被一个</span>route<span style="font-family: DejaVu Sans;">的其余的所有部分匹配。例如</span></p>

<p>match &lsquo;photos/*other&rsquo; =&gt; &lsquo;photos#unknown&rsquo;</p>

<p>This route would match <tt>photos/12</tt> or <tt>/photos/long/path/to/12</tt>, setting <tt>params[:other]</tt> to <tt>&ldquo;12&rdquo;</tt> or <tt>&ldquo;long/path/to/12&rdquo;</tt>.</p>

<p><span style="font-family: DejaVu Sans;">这个</span>route<span style="font-family: DejaVu Sans;">将会匹配</span><tt>photos/12</tt><span style="font-family: DejaVu Sans;"><tt>或者</tt></span><tt>/photos/long/path/to/12</tt><span style="font-family: DejaVu Sans;"><tt>，设置</tt></span><tt>params[:other]</tt><tt> </tt><tt>to</tt><tt> </tt><tt>&ldquo;12&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>或</tt></span><tt>&ldquo;long/path/to/12&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>Wildcard segments can occur anywhere in a route. For example,</p>

<p><span style="font-family: DejaVu Sans;">通配符分割可以发生在一个</span>route<span style="font-family: DejaVu Sans;">的任何地方。例如，</span></p>

<p>match &lsquo;books/*section/:title&rsquo; =&gt; &lsquo;books#show&rsquo;</p>

<p>would match <tt>books/some/section/last-words-a-memoir</tt> with <tt>params[:section]</tt> equals <tt>&ldquo;some/section&rdquo;</tt>, and <tt>params[:title]</tt> equals <tt>&ldquo;last-words-a-memoir&rdquo;</tt>.</p>

<p><span style="font-family: DejaVu Sans;">将会匹配</span><tt>books/some/section/last-words-a-memoir</tt><span style="font-family: DejaVu Sans;"><tt>为</tt></span><tt>params[:section]</tt><span style="font-family: DejaVu Sans;"><tt>等于</tt></span><tt>&ldquo;some/section&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>，以及</tt></span><tt>params[:title]</tt><span style="font-family: DejaVu Sans;"><tt>相当于</tt></span><tt>&ldquo;last-words-a-memoir&rdquo;</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>Technically a route can have even more than one wildcard segment. The matcher assigns segments to parameters in an intuitive way. For example,</p>

<p><span style="font-family: DejaVu Sans;">从技术上讲一个</span>route<span style="font-family: DejaVu Sans;">可以有甚至超过一个通配符的分割。</span>matcher<span style="font-family: DejaVu Sans;">分配</span>segments<span style="font-family: DejaVu Sans;">到参数是一个直观的方式。例如，</span></p>

<p>match &lsquo;<em>a/foo/</em>b&rsquo; =&gt; &lsquo;test#index&rsquo; # <tt>*a</tt><span style="font-family: DejaVu Sans;"><tt>这一部分通配为</tt></span><tt>a</tt></p>

<p>would match <tt>zoo/woo/foo/bar/baz</tt> with <tt>params[:a]</tt> equals <tt>&ldquo;zoo/woo&rdquo;</tt>, and <tt>params[:b]</tt> equals <tt>&ldquo;bar/baz&rdquo;</tt>.</p>

<p>Starting from Rails 3.1, wildcard routes will always match the optional format segment by default. For example if you have this route:</p>

<p><code>match</code><code> </code><code>&lsquo;*pages&rsquo;</code> <code>=&gt;</code><code> </code><code>&lsquo;pages#show&rsquo;</code></p>

<p><code>By</code><code> </code><code>requesting</code><code> </code><tt>&ldquo;/foo/bar.json&rdquo;</tt><code>,</code><code> </code><code>your</code><code> </code><tt>params[:pages]</tt><code> </code><code>will</code><code> </code><code>be</code><code> </code><code>equals</code><code> </code><code>to</code><code> </code><tt>&ldquo;foo/bar&rdquo;</tt><code> </code><code>with</code><code> </code><code>the</code><code> </code><code>request</code><code> </code><code>format</code><code> </code><code>of</code><code> </code><code>JSON.</code><code> </code><code>If</code><code> </code><code>you</code><code> </code><code>want</code><code> </code><code>the</code><code> </code><code>old</code><code> </code><code>3.0.x</code><code> </code><code>behavior</code><code> </code><code>back,</code><code> </code><code>you</code><code> </code><code>could</code><code> </code><code>supply</code><code> </code><tt>:format</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt><code> </code><code>like</code><code> </code><code>this:</code></p>

<p><code>match</code><code> </code><code>&lsquo;*pages&rsquo;</code><code> </code><code>=&gt;</code><code> </code><code>&lsquo;pages#show&rsquo;,</code><code> </code><code>:format</code><code> </code><code>=&gt;</code><code> </code><code>false</code></p>

<p><code>If</code><code> </code><code>you</code><code> </code><code>want</code><code> </code><code>to</code><code> </code><code>make</code><code> </code><code>the</code><code> </code><code>format</code><code> </code><code>segment</code><code> </code><code>mandatory,</code><code> </code><code>so</code><code> </code><code>it</code><code> </code><code>cannot</code><code> </code><code>be</code><code> </code><code>omitted,</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>supply</code><code> </code><tt>:format</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt><code> </code><code>like</code><code> </code><code>this:</code></p>

<p><code>match</code><code> </code><code>&lsquo;*pages&rsquo;</code><code> </code><code>=&gt;</code><code> </code><code>&lsquo;pages#show&rsquo;,</code><code> </code><code>:format</code><code> </code><code>=&gt;</code><code> </code><code>true</code></p>

<h4><a name="redirection"></a><code>3.12</code><code> </code><code>Redirection</code></h4>


<p>You can redirect any path to another path using the <tt>redirect</tt> helper in your router:</p>

<p><span style="font-family: DejaVu Sans;"><code>你可以重定向任何</code></span><code>path</code><span style="font-family: DejaVu Sans;"><code>到另一个</code></span><code>path</code><span style="font-family: DejaVu Sans;"><code>使用</code></span><code>redirect</code><code> </code><code>helper</code><span style="font-family: DejaVu Sans;"><code>在你的</code></span><code>router</code><span style="font-family: DejaVu Sans;"><code>：</code></span></p>

<p>match &ldquo;/stories&rdquo; =&gt; redirect(&ldquo;/posts&rdquo;)</p>

<p>You can also reuse dynamic segments from the match in the path to redirect to:</p>

<p>match &ldquo;/stories/:name&rdquo; =&gt; redirect(&ldquo;/posts/%{name}&rdquo;)</p>

<p>You can also provide a block to redirect, which receives the params and (optionally) the request object:</p>

<p>match &ldquo;/stories/:name&rdquo; =&gt; redirect {|params| &ldquo;/posts/#{params[:name].pluralize}&rdquo; }</p>

<p>match &ldquo;/stories&rdquo; =&gt; redirect {|p, req| &ldquo;/posts/#{req.subdomain}&rdquo; }</p>

<p>In all of these cases, if you don’t provide the leading host (<tt><a href="http://www.example.com">http://www.example.com</a></tt>), Rails will take those details from the current request.</p>

<h4><a name="routing-to-rack-applications"></a>3.13 Routing to Rack Applications</h4>


<p>Instead of a String, like <tt>&ldquo;posts#index&rdquo;</tt>, which corresponds to the <tt>index</tt> action in the <tt>PostsController</tt>, you can specify any <a href="http://guides.rubyonrails.org/rails_on_rack.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rack</span></span><span style="color: #000080;"><span style="text-decoration: underline;">application</span></span></a> as the endpoint for a matcher.</p>

<p>match &ldquo;/application.js&rdquo; =&gt; Sprockets</p>

<p>As long as <tt>Sprockets</tt> responds to <tt>call</tt> and returns a <tt>[status,</tt><tt> </tt><tt>headers,</tt><tt> </tt><tt>body]</tt>, the router won’t know the difference between the Rack application and an action.</p>

<p>For the curious, <tt>&ldquo;posts#index&rdquo;</tt> actually expands out to <tt>PostsController.action(:index)</tt>, which returns a valid Rack application.</p>

<h4><a name="using-root"></a>3.14 Using <tt>root</tt></h4>


<p>You can specify what Rails should route <tt>&ldquo;/&rdquo;</tt> to with the <tt>root</tt> method:</p>

<p>root :to =&gt; &lsquo;pages#main&rsquo;</p>

<p><strong>You</strong><strong> </strong><strong>should</strong><strong> </strong><strong>put</strong><strong> </strong><strong>the</strong><strong> </strong><tt><strong>root</strong></tt><strong> </strong><strong>route</strong><strong> </strong><strong>at</strong><strong> </strong><strong>the</strong><strong> </strong><strong>top</strong><strong> </strong><strong>of</strong><strong> </strong><strong>the</strong><strong> </strong><strong>file</strong>, because it is the most popular route and should be matched first. You also need to delete the <tt>public/index.html</tt> file for the root route to take effect.</p>

<h3><a name="customizing-resourceful-routes"></a>4 Customizing Resourceful Routes</h3>


<p>While the default routes and helpers generated by <tt>resources</tt><tt> </tt><tt>:posts</tt> will usually serve you well, you may want to customize them in some way. Rails allows you to customize virtually any generic part of the resourceful helpers.</p>

<h4><a name="specifying-a-controller-to-use"></a>4.1 Specifying a Controller to Use</h4>


<p>The <tt>:controller</tt> option lets you explicitly specify a controller to use for the resource. For example:</p>

<p>resources :photos, :controller =&gt; &ldquo;images&rdquo;</p>

<p>will recognize incoming paths beginning with <tt>/photos</tt> but route to the <tt>Images</tt> controller:</p>

<table width="402" cellspacing="0" cellpadding="2"><colgroup><col width="89" /> <col width="102" /> <col width="54" /> <col width="140" /> </colgroup>
<tbody>
<tr>
<th width="89">HTTP Verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="140">named helper</th>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="140">photos_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="140">new_photo_path</td>
</tr>
<tr>
<td width="89">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="140">photos_path</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="140">photo_path(:id)</td>
</tr>
<tr>
<td width="89">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="140">edit_photo_path(:id)</td>
</tr>
<tr>
<td width="89">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="140">photo_path(:id)</td>
</tr>
<tr>
<td width="89">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="140">photo_path(:id)</td>
</tr>
</tbody>
</table>


<p>Use <tt>photos_path</tt>, <tt>new_photo_path</tt>, etc. to generate paths for this resource.</p>

<h4><a name="specifying-constraints"></a>4.2 Specifying Constraints</h4>


<p>You can use the <tt>:constraints</tt> option to specify a required format on the implicit <tt>id</tt>. For example:</p>

<p>This declaration constraints the <tt>:id</tt> parameter to match the supplied regular expression. So, in this case, the router would no longer match <tt>/photos/1</tt> to this route. Instead, <tt>/photos/RR27</tt> would match.</p>

<p>You can specify a single constraint to apply to a number of routes by using the block form:</p>

<p>constraints(:id =&gt; /[A-Z][A-Z][0-9]+/) do</p>

<p>resources :photos</p>

<p>resources :accounts</p>

<p>end</p>

<p>Of course, you can use the more advanced constraints available in non-resourceful routes in this context.</p>

<p>&nbsp;</p>

<p>By default the <tt>:id</tt> parameter doesn’t accept dots – this is because the dot is used as a separator for formatted routes. If you need to use a dot within an <tt>:id</tt> add a constraint which overrides this – for example <tt>:id</tt> =&gt; /[^\/]+/ allows anything except a slash.</p>

<h4><a name="overriding-the-named-helpers"></a>4.3 Overriding the Named Helpers</h4>


<p>The <tt>:as</tt> option lets you override the normal naming for the named route helpers. For example:</p>

<p>resources :photos, :as =&gt; &ldquo;images&rdquo;</p>

<p>will recognize incoming paths beginning with <tt>/photos</tt> and route the requests to <tt>PhotosController</tt>, but use the value of the :as option to name the helpers.</p>

<table width="398" cellspacing="0" cellpadding="2"><colgroup><col width="83" /> <col width="102" /> <col width="54" /> <col width="143" /> </colgroup>
<tbody>
<tr>
<th width="83">HTTP verb</th>
<th width="102">Path</th>
<th width="54">action</th>
<th width="143">named helper</th>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos</td>
<td width="54">index</td>
<td width="143">images_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/new</td>
<td width="54">new</td>
<td width="143">new_image_path</td>
</tr>
<tr>
<td width="83">POST</td>
<td width="102">/photos</td>
<td width="54">create</td>
<td width="143">images_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/:id</td>
<td width="54">show</td>
<td width="143">image_path(:id)</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="102">/photos/:id/edit</td>
<td width="54">edit</td>
<td width="143">edit_image_path(:id)</td>
</tr>
<tr>
<td width="83">PUT</td>
<td width="102">/photos/:id</td>
<td width="54">update</td>
<td width="143">image_path(:id)</td>
</tr>
<tr>
<td width="83">DELETE</td>
<td width="102">/photos/:id</td>
<td width="54">destroy</td>
<td width="143">image_path(:id)</td>
</tr>
</tbody>
</table>


<h4><a name="overriding-the-new-and-edit-segments"></a> 4.4 Overriding the <tt>new</tt> and <tt>edit</tt> Segments<span style="font-family: WenQuanYi Micro Hei;">重写</span>new<span style="font-family: WenQuanYi Micro Hei;">和</span>edit Segments</h4>


<p>The <tt>:path_names</tt> option lets you override the automatically-generated “new” and “edit” segments in paths:</p>

<p>resources :photos, :path_names =&gt; { :new =&gt; &lsquo;make&rsquo;, :edit =&gt; &lsquo;change&rsquo; }</p>

<p>This would cause the routing to recognize paths such as</p>

<p><code>/photos/make</code></p>

<p><code>/photos/1/change</code></p>

<p>The actual action names aren’t changed by this option. The two paths shown would still route to the <tt>new</tt> and <tt>edit</tt> actions.</p>

<p>&nbsp;</p>

<p>If you find yourself wanting to change this option uniformly for all of your routes, you can use a scope.</p>

<p>scope :path_names =&gt; { :new =&gt; &ldquo;make&rdquo; } do</p>

<h1>rest of your routes</h1>

<p>end</p>

<h4><a name="prefixing-the-named-route-helpers"></a>4.5 Prefixing the Named Route Helpers</h4>


<p>You can use the <tt>:as</tt> option to prefix the named route helpers that Rails generates for a route. Use this option to prevent name collisions between routes using a path scope</p>

<p>scope &ldquo;admin&rdquo; do</p>

<p>resources :photos, :as =&gt; &ldquo;admin_photos&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>resources :photos</p>

<p>This will provide route helpers such as <tt>admin_photos_path</tt>, <tt>new_admin_photo_path</tt> etc.<span style="font-family: DejaVu Sans;">这将会提供比如 </span><tt>admin_photos_path</tt>, <tt>new_admin_photo_path</tt><span style="font-family: DejaVu Sans;"><tt>等这样的</tt></span><tt>route helpers</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>To prefix a group of route helpers, use <tt>:as</tt> with <tt>scope</tt>:</p>

<p>scope &ldquo;admin&rdquo;, :as =&gt; &ldquo;admin&rdquo; do</p>

<p>resources :photos, :accounts</p>

<p>end</p>

<p>&nbsp;</p>

<p>resources :photos, :accounts</p>

<p>This will generate routes such as <tt>admin_photos_path</tt> and <tt>admin_accounts_path</tt> which map to <tt>/admin/photos</tt> and <tt>/admin/accounts</tt> respectively.</p>

<p>The <tt><strong>namespace</strong></tt> scope will automatically add <tt>:as</tt> as well as <tt>:module</tt> and <tt>:path</tt> prefixes.</p>

<p>You can prefix routes with a named parameter also:</p>

<p>scope &ldquo;:username&rdquo; do</p>

<p>resources :posts</p>

<p>end</p>

<p>This will provide you with URLs such as <tt>/bob/posts/1</tt> and will allow you to reference the <tt>username</tt> part of the path as <tt>params[:username]</tt> in controllers, helpers and views.</p>

<h4><a name="restricting-the-routes-created"></a>4.6 Restricting the Routes Created<span style="font-family: WenQuanYi Micro Hei;">限制</span>routes<span style="font-family: WenQuanYi Micro Hei;">被创建</span></h4>


<p>By default, Rails creates routes for the seven default actions (index, show, new, create, edit, update, and destroy) for every RESTful route in your application. You can use the <tt>:only</tt> and <tt>:except</tt> options to fine-tune this behavior. The <tt>:only</tt> option tells Rails to create only the specified routes:</p>

<p><span style="font-family: DejaVu Sans;">默认的，</span>Rails<span style="font-family: DejaVu Sans;">按照七种默认的</span>action<span style="font-family: DejaVu Sans;">（</span>index, show, new, create, edit, update, and destroy<span style="font-family: DejaVu Sans;">）为你应用程序中的每个</span>RESTful route<span style="font-family: DejaVu Sans;">创建</span>routes<span style="font-family: DejaVu Sans;">。</span></p>

<p>resources :photos, :only =&gt; [:index, :show]</p>

<p>Now, a <tt>GET</tt> request to <tt>/photos</tt> would succeed, but a <tt>POST</tt> request to <tt>/photos</tt> (which would ordinarily be routed to the <tt>create</tt> action) will fail.</p>

<p><span style="font-family: DejaVu Sans;">现在一个</span>GET<span style="font-family: DejaVu Sans;">请求到</span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>将会成功，但是一个</tt></span><tt>POST</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>/photos</tt><span style="font-family: DejaVu Sans;"><tt>（其按理将会</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>create action</tt><span style="font-family: DejaVu Sans;"><tt>）将会失败。</tt></span></p>

<p>The <tt>:except</tt> option specifies a route or list of routes that Rails should <em>not</em> create:</p>

<p>resources :photos, :except =&gt; :destroy</p>

<p>In this case, Rails will create all of the normal routes except the route for <tt>destroy</tt> (a <tt>DELETE</tt> request to <tt>/photos/:id</tt>).</p>

<p>If your application has many RESTful routes, using <tt>:only</tt> and <tt>:except</tt> to generate only the routes that you actually need can cut down on memory use and speed up the routing process.</p>

<p><span style="font-family: DejaVu Sans;">如果你的应用程序中有很多 </span>RESTful routes<span style="font-family: DejaVu Sans;">，使用</span><tt>:only</tt> and <tt>:except</tt><span style="font-family: DejaVu Sans;"><tt>来生成仅仅你实际需要的</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>能够消减内存使用和提速</tt></span><tt>routing </tt><span style="font-family: DejaVu Sans;"><tt>进程。</tt></span></p>

<h4><a name="translated-paths"></a>4.7 Translated Paths<span style="font-family: WenQuanYi Micro Hei;">翻译路径</span></h4>


<p>Using <tt>scope</tt>, we can alter path names generated by resources:</p>

<p><span style="font-family: DejaVu Sans;">使用</span>scope<span style="font-family: DejaVu Sans;">，我们可以别名</span>resources<span style="font-family: DejaVu Sans;">生成的路径</span>name<span style="font-family: DejaVu Sans;">：</span></p>

<p>scope(:path_names =&gt; { :new =&gt; &ldquo;neu&rdquo;, :edit =&gt; &ldquo;bearbeiten&rdquo; }) do</p>

<p>resources :categories, :path =&gt; &ldquo;kategorien&rdquo;</p>

<p>end</p>

<p><tt>Rails now creates routes to the CategoriesController.</tt></p>

<table width="482" cellspacing="0" cellpadding="2"><colgroup><col width="83" /> <col width="170" /> <col width="54" /> <col width="159" /> </colgroup>
<tbody>
<tr>
<th width="83">HTTP verb</th>
<th width="170">Path</th>
<th width="54">action</th>
<th width="159">named helper</th>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien</td>
<td width="54">index</td>
<td width="159">categories_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/neu</td>
<td width="54">new</td>
<td width="159">new_category_path</td>
</tr>
<tr>
<td width="83">POST</td>
<td width="170">/kategorien</td>
<td width="54">create</td>
<td width="159">categories_path</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/:id</td>
<td width="54">show</td>
<td width="159">category_path(:id)</td>
</tr>
<tr>
<td width="83">GET</td>
<td width="170">/kategorien/:id/bearbeiten</td>
<td width="54">edit</td>
<td width="159">edit_category_path(:id)</td>
</tr>
<tr>
<td width="83">PUT</td>
<td width="170">/kategorien/:id</td>
<td width="54">update</td>
<td width="159">category_path(:id)</td>
</tr>
<tr>
<td width="83">DELETE</td>
<td width="170">/kategorien/:id</td>
<td width="54">destroy</td>
<td width="159">category_path(:id)</td>
</tr>
</tbody>
</table>


<h4><a name="overriding-the-singular-form"></a><tt>4.8 Overriding the Singular Form</tt></h4>


<p>If you want to define the singular form of a resource, you should add additional rules to the <tt>Inflector</tt>.</p>

<p><span style="font-family: DejaVu Sans;"><tt>如果你想定义一个单数形式的</tt></span><tt>resource</tt><span style="font-family: DejaVu Sans;"><tt>，你应该添加补充的</tt></span><tt>rules</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>Inflector</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>ActiveSupport::Inflector.inflections do |inflect|</p>

<p>inflect.irregular &lsquo;tooth&rsquo;, &lsquo;teeth&rsquo;</p>

<p>end</p>

<h4><a name="nested-names"></a>4.9 Using <tt>:as</tt> in Nested Resources<span style="font-family: WenQuanYi Micro Hei;">在嵌套</span>resources<span style="font-family: WenQuanYi Micro Hei;">中使用</span>:as</h4>


<p>The <tt>:as</tt> option overrides the automatically-generated name for the resource in nested route helpers. For example,</p>

<p>:as<span style="font-family: DejaVu Sans;">选项覆盖嵌套的</span>resource<span style="font-family: DejaVu Sans;">自动生成的</span>route<span style="font-family: DejaVu Sans;">的名字。例如：</span></p>

<p>resources :magazines do</p>

<p>resources :ads, :as =&gt; &lsquo;periodical_ads&rsquo;</p>

<p>end</p>

<p>This will create routing helpers such as <tt>magazine_periodical_ads_url</tt> and <tt>edit_magazine_periodical_ad_path</tt>.</p>

<h3><a name="inspecting-and-testing-routes"></a>5 Inspecting and Testing Routes<span style="font-family: WenQuanYi Micro Hei;">检查和测试</span>routes</h3>


<p>Rails offers facilities for inspecting and testing your routes.</p>

<p>Rails<span style="font-family: DejaVu Sans;">提供设施来检查和测试你的</span>routes<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="seeing-existing-routes-with-rake"></a>5.1 Seeing Existing Routes with <tt>rake</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>使用</tt></span><tt>rake</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>来查看存在的</tt></span><tt>routes</tt></h4>


<p>If you want a complete list of all of the available routes in your application, run <tt> rake routes</tt> command. This will print all of your routes, in the same order that they appear in <tt>routes.rb</tt>. For each route, you’ll see:</p>

<p><span style="font-family: DejaVu Sans;">如果你需要一个你应用程序中可用的完整的</span>list<span style="font-family: DejaVu Sans;">，运行 </span><tt>rake routes</tt><span style="font-family: DejaVu Sans;"><tt>命令。这将会打印所有你的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>（到终端），与</tt></span><tt>routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>中出现的顺序一样。对于每个</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>，你将会看到：</tt></span></p>

<ul>
    <li>The route name (if any)</li>
    <li>The HTTP verb used (if the route doesn’t respond to all verbs)</li>
    <li>The URL pattern to match <span style="font-family: DejaVu Sans;">匹配的</span>URL<span style="font-family: DejaVu Sans;">模式</span></li>
    <li>The routing parameters for the route</li>
</ul>


<p>For example, here’s a small section of the <tt>rake routes</tt> output for a RESTful route:</p>

<pre>          users GET  /users          {:controller=&gt;"users", :action=&gt;"index"}
formatted_users GET  /users.:format  {:controller=&gt;"users", :action=&gt;"index"}
                POST /users          {:controller=&gt;"users", :action=&gt;"create"}
                POST /users.:format  {:controller=&gt;"users", :action=&gt;"create"}</pre>


<p>You may restrict the listing to the routes that map to a particular controller setting the <tt>CONTROLLER</tt> environment variable:</p>

<p><span style="font-family: DejaVu Sans;">你可以限制列出的</span>routes<span style="font-family: DejaVu Sans;">映射到一个别的</span>controller<span style="font-family: DejaVu Sans;">设置 </span><tt>CONTROLLER</tt><span style="font-family: DejaVu Sans;"><tt>环境变量：</tt></span></p>

<p>$ CONTROLLER=users rake routes</p>

<p>You’ll find that the output from <tt>rake routes</tt> is much more readable if you widen your terminal window until the output lines don’t wrap.</p>

<p><span style="font-family: DejaVu Sans;">你会发现如果你扩大到你的终端不自动换行，<tt>来自</tt></span><tt>rake routes</tt><span style="font-family: DejaVu Sans;"><tt>会更具可读性。</tt></span></p>

<h4><a name="testing-routes"></a>5.2 Testing Routes</h4>


<p>Routes should be included in your testing strategy<span style="font-family: DejaVu Sans;">策略 </span>(just like the rest of your application). Rails offers three <a href="http://api.rubyonrails.org/classes/ActionDispatch/Assertions/RoutingAssertions.html">built-in assertions</a> designed to make testing routes simpler:</p>

<ul>
    <li><tt>assert_generates</tt></li>
    <li><tt>assert_recognizes</tt></li>
    <li><tt>assert_routing</tt></li>
</ul>


<h5><a name="the-assert_generates-assertion"></a>5.2.1 The <tt>assert_generates</tt> Assertion</h5>


<p><tt>assert_generates</tt> asserts that a particular set of options generate a particular path and can be used with default routes or custom routes.</p>

<p><tt>assert_generates</tt><span style="font-family: DejaVu Sans;"><tt>断言是一个特别的设置选项生成一个特别的路径并且可以与默认的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>和定制的</tt></span><tt>routes</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>assert_generates &ldquo;/photos/1&rdquo;, { :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;show&rdquo;, :id =&gt; &ldquo;1&rdquo; }</p>

<p>assert_generates &ldquo;/about&rdquo;, :controller =&gt; &ldquo;pages&rdquo;, :action =&gt; &ldquo;about&rdquo;</p>

<h5><a name="the-assert_recognizes-assertion"></a>5.2.2 The <tt>assert_recognizes</tt> Assertion</h5>


<p><tt>assert_recognizes</tt> is the inverse of <tt> </tt><tt>assert_generates</tt>. It asserts that a given path is recognized and routes it to a particular spot in your application.</p>

<p><a name="result_box2"></a><tt>assert_recognizes</tt><span style="font-family: DejaVu Sans;"><tt>是 </tt></span><tt>assert_generates</tt><span style="font-family: DejaVu Sans;"><tt>的逆。它断言</tt>一个给定的</span>path<span style="font-family: DejaVu Sans;">是被承认的并</span>route<span style="font-family: DejaVu Sans;">到应用程序中的特定地点。</span></p>

<p><tt>assert_recognizes({ :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;show&rdquo;, :id =&gt; &ldquo;1&rdquo; }, &ldquo;/photos/1&rdquo;)</tt></p>

<p>You can supply a <tt>:method</tt> argument to specify the HTTP verb:</p>

<p><span style="font-family: DejaVu Sans;">你可以提供一个</span>:method<span style="font-family: DejaVu Sans;">参数来指定</span>HTTP verbe<span style="font-family: DejaVu Sans;">：</span></p>

<p>assert_recognizes({ :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;create&rdquo; }, { :path =&gt; &ldquo;photos&rdquo;, :method =&gt; :post })</p>

<p>assert_recognizes({ :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;create&rdquo; }, { :path =&gt; &ldquo;photos&rdquo;, :method =&gt; :post })</p>

<h5><a name="the-assert_routing-assertion"></a>5.2.3 The <tt>assert_routing</tt> Assertion</h5>


<p>The assertion checks the route both ways: it tests that the path generates the options, and that the options generate the path. Thus, it combines the functions of <tt> assert_generates and </tt><tt>assert_recognizes</tt>.</p>

<p><span style="font-family: DejaVu Sans;">断言 </span><tt>assert_routing</tt><span style="font-family: DejaVu Sans;"><tt>检测</tt></span><tt>route</tt><span style="font-family: DejaVu Sans;"><tt>两方面：它测试访问路径生成选项，并且测试这个选项生成的路径。这样，它联合了 </tt></span><tt>assert_generates and assert_recognizes</tt><span style="font-family: DejaVu Sans;"><tt>的功能。</tt></span></p>

<p>assert_routing({ :path =&gt; &ldquo;photos&rdquo;, :method =&gt; :post }, { :controller =&gt; &ldquo;photos&rdquo;, :action =&gt; &ldquo;create&rdquo; })</p>

<p>标签： <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/http/">http</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/route/">route</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a> <a href="http://jhjguxin.hwcrazy.com/tag/translate/">translate</a></p>
]]></content>
  </entry>
  
</feed>
