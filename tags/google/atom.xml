<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Google | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/google/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Rails flash isn't just for messages]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/08/24/the-rails-flash-isnt-just-for-messages/"/>
    <updated>2012-08-24T00:04:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/08/24/the-rails-flash-isnt-just-for-messages</id>
    <content type="html"><![CDATA[<h2>The Rails flash isn&rsquo;t just for messages</h2>

<p><a href="http://guides.rubyonrails.org/action_controller_overview.html#the-flash">The Rails flash</a> is typically used for short messages:</p>

<p>app/controllers/sessions_controller.rb</p>

<pre>&lt;code&gt;redirect_to root_url, notice: &quot;You have been logged out.&quot;&lt;/code&gt;</pre>


<p>But it can be used for more than that, any time that you redirect and want to pass along some state without making it part of the URL.</p>

<p>These are some things I’ve used it for.</p>

<h2>Identifiers for more complex messages</h2>


<p>Maybe you want to show a more complex message after signing up, containing things like links and bullet points.</p>

<p>Rather than send all that in the flash, you can send some identifier that your views know how to handle.</p>

<p>This could be the name of a partial:</p>

<p>app/controllers/users_controller.rb</p>

<pre>class UsersController &lt; ApplicationController
  def create
   @user = actually_create_user
   flash[:partial] = &quot;welcome&quot;
   redirect_to some_path
 end
end</pre>


<p>&nbsp;
app/views/layouts/application.html.haml
</figcaption></p>

<div>
<pre>- if flash[:partial]
 = render partial: &quot;shared/flashes/#{flash[:partial]}&quot;</pre>
app/views/shared/flashes/_welcome.html.haml

</div>




<pre>%p Welcome!
 %ul
   %li= link_to(&quot;Do this!&quot;, this_path)
   %li= link_to(&quot;Do that!&quot;, that_path)</pre>


<p></figure></p>

<p>&nbsp;</p>

<p>Or just a flag:</p>

<p>&nbsp;</p>

<p>app/controllers/users_controller.rb</p>

<div>
<pre>&lt;code&gt;flash[:signed_up] = true redirect_to root_path&lt;/code&gt;</pre>
</div>


<p></figure> <figure> <figcaption>app/views/welcomes/show.html.haml</figcaption></p>

<div>
<pre>&lt;code&gt;- if flash[:signed_up] %p Welcome!&lt;/code&gt;</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>Pass on the referer</h2>


<p>Say you have some filter redirecting incoming requests. Maybe you’re detecting the locale and adding it to the URL, or verifying credentials.</p>

<p>You can use the flash to make sure the redirected-to controller gets the original referer.</p>

<p>&nbsp;</p>

<p><figure> <figcaption>app/controllers/application_controller.rb</figcaption></p>

<div>
<pre>class ApplicationController &lt; ActionController::Base
 before_filter :make_locale_explicit

  private
  def make_locale_explicit
    if params[:locale].blank? &amp;&amp; request.get?
      flash[:referer] = request.referer
      redirect_to params.merge(locale: I18n.locale)
    end
  end
end</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>Now, any controller that cares about the referer could get it with:</p>

<pre>&lt;code&gt;flash[:referer] || request.referer&lt;/code&gt;</pre>


<h2>Google Analytics events</h2>


<p>Say you want to track a <a href="https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide">Google Analytics event</a> event with JavaScript when a user has signed up. You could do something like this.</p>

<p>Send event data from the controller:</p>

<p>&nbsp;</p>

<p><figure> <figcaption>app/controllers/users_controller.rb</figcaption></p>

<div>
<pre>class UsersController &lt; ApplicationController
  def create
    @user = actually_create_user
    flash[:events] = [ [&quot;_trackEvent&quot;, &quot;users&quot;, &quot;signup&quot;] ]
    redirect_to some_path
  end
end</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>Then turn it into JavaScript in your view:</p>

<p>&nbsp;</p>

<p><figure> <figcaption>app/helpers/layout_helper.rb</figcaption></p>

<div>
<pre>def analytics_events
  Array(flash[:events]).map do |event|
    &quot;_gaq.push(#{raw event.to_json});&quot;
  end.join(&quot;\n&quot;)
end</pre>
</div>


<p></figure> <figure> <figcaption>app/views/layouts/application.html.haml</figcaption></p>

<div>
<pre>:javascript
  = analytics_events</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>The flash vs. params</h2>


<p>You may have considered that any of the above could have be done with query parameters instead. Including common flash messages:
&nbsp;</p>

<p><figure> <figcaption>app/controllers/sessions_controller.rb</figcaption></p>

<div>
<pre>redirect_to root_url(notice: &quot;You have been logged out.&quot;)</pre>
<span style="font-size: small;"><span style="line-height: normal;">
</span></span>

</div>


<p></figure> <figure> <figcaption>app/views/layouts/application.html.haml</figcaption></p>

<div>
<pre>- if params[:notice]
  %p= params[:notice]</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>Using the flash means that the passed data doesn’t show in the URL, so it won’t happen twice if the link is shared, bookmarked or reloaded. Also the URL will be a little cleaner.</p>

<p>Additionally, the user can’t manipulate the flash, as it’s stored in the session. This adds some protection. If the flash partial example above used <code>params</code>, a user could pass in <code>../../admin/some_partial</code> to see things they shouldn’t.</p>

<h2>Fin</h2>


<p>I’d love to hear about what unconventional uses you’ve put the flash to!</p>
]]></content>
  </entry>
  
</feed>
