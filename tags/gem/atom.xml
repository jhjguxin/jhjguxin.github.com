<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: gem | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/gem/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[devise]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/01/06/devise/"/>
    <updated>2012-01-06T12:44:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/01/06/devise</id>
    <content type="html"><![CDATA[<h2>devise</h2>

<div>
<div>

<strong>IMPORTANT:</strong> Devise 2.0.0.rc is out. If you are upgrading, please read: <a href="https://github.com/plataformatec/devise/wiki/How-To:-Upgrade-to-Devise-2.0">github.com/plataformatec/devise/wiki/How-To:-Upgrade-to-Devise-2.0</a>
<h2>Devise</h2>
<a href="http://travis-ci.org/plataformatec/devise"><img src="https://secure.travis-ci.org/plataformatec/devise.png" alt="" /></a>

Devise is a flexible authentication solution for Rails based on Warden. It:
<ul>
    <li>Is Rack based;</li>
    <li>Is a complete MVC solution based on Rails engines;</li>
    <li>Allows you to have multiple roles (or models/scopes) signed in at the same time;</li>
    <li>Is based on a modularity concept: use just what you really need.</li>
</ul>
It’s comprised of 12 modules:
<ul>
    <li>Database Authenticatable: encrypts and stores a password in the database to validate the authenticity of a user while signing in. The authentication can be done both through POST requests or HTTP Basic Authentication.</li>
    <li>Token Authenticatable: signs in a user based on an authentication token (also known as “single access token”). The token can be given both through query string or HTTP Basic Authentication.</li>
    <li>Omniauthable: adds Omniauth (github.com/intridea/omniauth) support;</li>
    <li>Confirmable: sends emails with confirmation instructions and verifies whether an account is already confirmed during sign in.</li>
    <li>Recoverable: resets the user password and sends reset instructions.</li>
    <li>Registerable: handles signing up users through a registration process, also allowing them to edit and destroy their account.</li>
    <li>Rememberable: manages generating and clearing a token for remembering the user from a saved cookie.</li>
    <li>Trackable: tracks sign in count, timestamps and IP address.</li>
    <li>Timeoutable: expires sessions that have no activity in a specified period of time.</li>
    <li>Validatable: provides validations of email and password. It’s optional and can be customized, so you’re able to define your own validations.</li>
    <li>Lockable: locks an account after a specified number of failed sign-in attempts. Can unlock via email or after a specified time period.</li>
    <li>Encryptable: adds support of other authentication mechanisms besides the built-in Bcrypt (the default).</li>
</ul>
<h2>Information</h2>
<h3>The Devise wiki</h3>
The Devise Wiki has lots of additional information about Devise including many “how-to” articles and answers to the most frequently asked questions. Please browse the Wiki after finishing this README:

<a href="https://wiki.github.com/plataformatec/devise">wiki.github.com/plataformatec/devise</a>
<h3>Bug reports</h3>
If you discover a problem with Devise, we would like to know about it. However, we ask that you please review these guidelines before submitting a bug report:

<a href="https://github.com/plataformatec/devise/wiki/Bug-reports">github.com/plataformatec/devise/wiki/Bug-reports</a>

If you found a security bug, do <strong>NOT</strong> use the GitHub issue tracker. Send email or a private GitHub message to the maintainers listed at the bottom of the README.
<h3>Mailing list</h3>
If you have any questions, comments, or concerns, please use the Google Group instead of the GitHub issue tracker:

<a href="https://groups.google.com/group/plataformatec-devise">groups.google.com/group/plataformatec-devise</a>
<h3>RDocs</h3>
You can view the Devise documentation in RDoc format here:

<a href="http://rubydoc.info/github/plataformatec/devise/master/frames">rubydoc.info/github/plataformatec/devise/master/frames</a>

If you need to use Devise with Rails 2.3, you can always run `gem server` from the command line after you install the gem to access the old documentation.
<h3>Example applications</h3>
There are a few example applications available on GitHub that demonstrate various features of Devise with different versions of Rails. You can view them here:

<a href="https://github.com/plataformatec/devise/wiki/Example-Applications">github.com/plataformatec/devise/wiki/Example-Applications</a>
<h3>Extensions</h3>
Our community has created a number of extensions that add functionality above and beyond what is included with Devise. You can view a list of available extensions and add your own here:

<a href="https://github.com/plataformatec/devise/wiki/Extensions">github.com/plataformatec/devise/wiki/Extensions</a>
<h3>Contributing</h3>
We hope that you will consider contributing to Devise. Please read this short overview for some information about how to get started:

<a href="https://github.com/plataformatec/devise/wiki/Contributing">github.com/plataformatec/devise/wiki/Contributing</a>

You will usually want to write tests for your changes. To run the test suite, `cd` into Devise’s top-level directory and run `bundle install` and `rake`. For the tests to pass, you will need to have a MongoDB server (version 2.0 or newer) running on your system.
<h2>Installation</h2>
You can use the latest Rails 3 gem with the latest Devise gem:
<pre>gem install devise</pre>
After you install Devise and add it to your Gemfile, you need to run the generator:
<pre>rails generate devise:install</pre>
The generator will install an initializer which describes ALL Devise’s configuration options and you MUST take a look at it. When you are done, you are ready to add Devise to any of your models using the generator:
<pre>rails generate devise MODEL</pre>
Replace MODEL by the class name used for the applications users, it’s frequently ‘User’ but could also be ‘Admin’. This will create a model (if one does not exist) and configure it with default Devise modules. Next, you’ll usually run db:migrate as the generator will have created a migration file (if your ORM supports them). This generator also configures your config/routes.rb file, continue reading this file to understand exactly what the generator produces and how to use it. Finally, if your server was already running, then restart it as Rails doesn’t automatically load methods from a new gem.

Support for Rails 2.3.x can be found by installing Devise 1.0.x from the v1.0 branch.
<h2>Starting with Rails?</h2>
If you are building your first Rails application, we recommend you to <strong>not</strong> use Devise. Devise requires a good understanding of the Rails Framework. In such cases, we advise you to start a simple authentication system from scratch, today we have two resources:
<ul>
    <li>Michael Hartl’s online book: <a href="http://railstutorial.org/chapters/modeling-and-viewing-users-two#top">railstutorial.org/chapters/modeling-and-viewing-users-two#top</a></li>
    <li>Ryan Bates’ Railscast: <a href="http://railscasts.com/episodes/250-authentication-from-scratch">railscasts.com/episodes/250-authentication-from-scratch</a></li>
</ul>
Once you have solidified your understanding of Rails and authentication mechanisms, we assure you Devise will be very pleasant to work with. :)
<h2>Getting started</h2>
This is a walkthrough with all steps you need to setup a devise resource, including model, migration, route files, and optional configuration.

Devise must be set up within the model (or models) you want to use. Devise routes must be created inside your config/routes.rb file.

We’re assuming here you want a User model with some Devise modules, as outlined below:
<pre>class User &lt; ActiveRecord::Base
  devise :database_authenticatable, :registerable, :confirmable, :recoverable, :rememberable, :trackable, :validatable
end</pre>
After you choose which modules to use, you need to set up your migrations. Luckily, Devise has some helpers to save you from this boring work:
<pre>create_table :users do |t|
  t.database_authenticatable
  t.confirmable
  t.recoverable
  t.rememberable
  t.trackable
  t.timestamps
end</pre>
Devise doesn’t use <em>attr_accessible</em> or <em>attr_protected</em> inside its modules, so be sure to define attributes as accessible or protected in your model.

Configure your routes after setting up your model. Open your config/routes.rb file and add:
<pre>devise_for :users</pre>
This will use your User model to create a set of needed routes (you can see them by running `rake routes`). If you invoked the devise generator, you noticed that this is exactly what the generator produces for us: model, routes and migrations.

Don’t forget to run rake db:migrate and you are ready to go! But don’t stop reading here, we still have a lot to tell you.
<h3>Controller filters and helpers</h3>
Devise will create some helpers to use inside your controllers and views. To set up a controller with user authentication, just add this before_filter:
<pre>before_filter :authenticate_user!</pre>
To verify if a user is signed in, use the following helper:
<pre>user_signed_in?</pre>
For the current signed-in user, this helper is available:
<pre>current_user</pre>
You can access the session for this scope:
<pre>user_session</pre>
After signing in a user, confirming the account or updating the password, Devise will look for a scoped root path to redirect. Example: For a :user resource, it will use user_root_path if it exists, otherwise default root_path will be used. This means that you need to set the root inside your routes:
<pre>root :to =&gt; "home#index"</pre>
You can also overwrite after_sign_in_path_for and after_sign_out_path_for to customize your redirect hooks.

Finally, you need to set up default url options for the mailer in each environment. Here is the configuration for config/environments/development.rb:
<pre>config.action_mailer.default_url_options = { :host =&gt; 'localhost:3000' }</pre>
Notice that if your devise model is not called “user” but “member”, then the helpers you should use are:
<pre>before_filter :authenticate_member!

member_signed_in?

current_member

member_session</pre>
<h3>Configuring Models</h3>
The devise method in your models also accepts some options to configure its modules. For example, you can choose which encryptor to use in database_authenticatable:
<pre>devise :database_authenticatable, :registerable, :confirmable, :recoverable, :stretches =&gt; 20</pre>
Besides :stretches, you can define :pepper, :encryptor, :confirm_within, :remember_for, :timeout_in, :unlock_in and other values. For details, see the initializer file that was created when you invoked the “devise:install” generator described above.
<h3>Configuring multiple models</h3>
Devise allows you to set up as many roles as you want. For example, you may have a User model and also want an Admin model with just authentication, trackable, lockable and timeoutable features and no confirmation or password-recovery features. Just follow these steps:
<pre># Create a migration with the required fields
create_table :admins do |t|
  t.database_authenticatable
  t.lockable
  t.trackable
  t.timestamps
end

# Inside your Admin model
devise :database_authenticatable, :trackable, :timeoutable, :lockable

# Inside your routes
devise_for :admins

# Inside your protected controller
before_filter :authenticate_admin!

# Inside your controllers and views
admin_signed_in?
current_admin
admin_session</pre>
<h3>Configuring views</h3>
We built Devise to help you quickly develop an application that uses authentication. However, we don’t want to be in your way when you need to customize it.

Since Devise is an engine, all its views are packaged inside the gem. These views will help you get started, but after sometime you may want to change them. If this is the case, you just need to invoke the following generator, and it will copy all views to your application:
<pre>rails generate devise:views</pre>
If you have more than one role in your application (such as “User” and “Admin”), you will notice that Devise uses the same views for all roles. Fortunately, Devise offers an easy way to customize views. All you need to do is set “config.scoped_views = true” inside “config/initializers/devise.rb”.

After doing so, you will be able to have views based on the role like “users/sessions/new” and “admins/sessions/new”. If no view is found within the scope, Devise will use the default view at “devise/sessions/new”. You can also use the generator to generate scoped views:
<pre>rails generate devise:views users</pre>
<h3>Configuring controllers</h3>
If the customization at the views level is not enough, you can customize each controller by following these steps:

1) Create your custom controller, for example a Admins::SessionsController:
<pre>class Admins::SessionsController &lt; Devise::SessionsController
end</pre>
2) Tell the router to use this controller:
<pre>devise_for :admins, :controllers =&gt; { :sessions =&gt; "admins/sessions" }</pre>
3) And since we changed the controller, it won’t use the “devise/sessions” views, so remember to copy “devise/sessions” to “admin/sessions”.

Remember that Devise uses flash messages to let users know if sign in was successful or failed. Devise expects your application to call “flash[:notice]” and “flash[:alert]” as appropriate.
<h3>Configuring routes</h3>
Devise also ships with default routes. If you need to customize them, you should probably be able to do it through the devise_for method. It accepts several options like :class_name, :path_prefix and so on, including the possibility to change path names for I18n:
<pre>devise_for :users, :path =&gt; "usuarios", :path_names =&gt; { :sign_in =&gt; 'login', :sign_out =&gt; 'logout', :password =&gt; 'secret', :confirmation =&gt; 'verification', :unlock =&gt; 'unblock', :registration =&gt; 'register', :sign_up =&gt; 'cmon_let_me_in' }</pre>
Be sure to check devise_for documentation for details.

If you have the need for more deep customization, for instance to also allow “/sign_in” besides “/users/sign_in”, all you need to do is to create your routes normally and wrap them in a <tt>devise_scope</tt> block in the router:
<pre>devise_scope :user do
  get "sign_in", :to =&gt; "devise/sessions#new"
end</pre>
This way you tell devise to use the scope :user when “/sign_in” is accessed. Notice <tt>devise_scope</tt> is also aliased as <tt>as</tt> and you can also give a block to <tt>devise_for</tt>, resulting in the same behavior:
<pre>devise_for :users do
  get "sign_in", :to =&gt; "devise/sessions#new"
end</pre>
Feel free to choose the one you prefer!
<h3>I18n</h3>
Devise uses flash messages with I18n with the flash keys :notice and :alert. To customize your app, you can set up your locale file:
<pre>en:
  devise:
    sessions:
      signed_in: 'Signed in successfully.'</pre>
You can also create distinct messages based on the resource you’ve configured using the singular name given in routes:
<pre>en:
  devise:
    sessions:
      user:
        signed_in: 'Welcome user, you are signed in.'
      admin:
        signed_in: 'Hello admin!'</pre>
The Devise mailer uses a similar pattern to create subject messages:
<pre>en:
  devise:
    mailer:
      confirmation_instructions:
        subject: 'Hello everybody!'
        user_subject: 'Hello User! Please confirm your email'
      reset_password_instructions:
        subject: 'Reset instructions'</pre>
Take a look at our locale file to check all available messages. You may also be interested in one of the many translations that are available on our wiki:

<a href="https://github.com/plataformatec/devise/wiki/I18n">github.com/plataformatec/devise/wiki/I18n</a>
<h3>Test helpers</h3>
Devise includes some tests helpers for functional specs. To use them, you just need to include Devise::TestHelpers in your test class and use the sign_in and sign_out method. Such methods have the same signature as in controllers:
<pre>sign_in :user, @user   # sign_in(scope, resource)
sign_in @user          # sign_in(resource)

sign_out :user         # sign_out(scope)
sign_out @user         # sign_out(resource)</pre>
You can include the Devise Test Helpers in all of your tests by adding the following to the bottom of your test/test_helper.rb file:
<pre>class ActionController::TestCase
  include Devise::TestHelpers
end</pre>
If you’re using RSpec and want the helpers automatically included within all <tt>describe</tt> blocks, add a file called spec/support/devise.rb with the following contents:
<pre>RSpec.configure do |config|
  config.include Devise::TestHelpers, :type =&gt; :controller
end</pre>
Do not use such helpers for integration tests such as Cucumber or Webrat. Instead, fill in the form or explicitly set the user in session. For more tips, check the wiki (<a href="https://wiki.github.com/plataformatec/devise">wiki.github.com/plataformatec/devise</a>).
<h3>Omniauth</h3>
Devise comes with Omniauth support out of the box to authenticate from other providers. You can read more about Omniauth support in the wiki:
<ul>
    <li><a href="https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview">github.com/plataformatec/devise/wiki/OmniAuth:-Overview</a></li>
</ul>
<h3>Other ORMs</h3>
Devise supports ActiveRecord (default) and Mongoid. To choose other ORM, you just need to require it in the initializer file.
<h3>Migrating from other solutions</h3>
Devise implements encryption strategies for Clearance, Authlogic and Restful-Authentication. To make use of these strategies, you need set the desired encryptor in the encryptor initializer config option and add :encryptable to your model. You might also need to rename your encrypted password and salt columns to match Devise’s fields (encrypted_password and password_salt).
<h2>Troubleshooting</h2>
<h3>Heroku</h3>
Using devise on Heroku with Ruby on Rails 3.1 requires setting:
<pre>config.assets.initialize_on_precompile = false</pre>
Read more about the potential issues at <a href="http://guides.rubyonrails.org/asset_pipeline.html">guides.rubyonrails.org/asset_pipeline.html</a>
<h2>Additional information</h2>
<h3>Warden</h3>
Devise is based on Warden, which is a general Rack authentication framework created by Daniel Neighman. We encourage you to read more about Warden here:

<a href="https://github.com/hassox/warden">github.com/hassox/warden</a>
<h3>Contributors</h3>
We have a long list of valued contributors. Check them all at:

<a href="https://github.com/plataformatec/devise/contributors">github.com/plataformatec/devise/contributors</a>
<h3>Maintainers</h3>
<ul>
    <li>José Valim (<a href="https://github.com/josevalim">github.com/josevalim</a>)</li>
    <li>Carlos Antônio da Silva (<a href="https://github.com/carlosantoniodasilva">github.com/carlosantoniodasilva</a>)</li>
    <li>Rodrigo Flores (<a href="https://github.com/rodrigoflores">github.com/rodrigoflores</a>)</li>
</ul>
<h2>License</h2>
MIT License. Copyright 2011 Plataforma Tecnologia. <a href="http://blog.plataformatec.com.br/">blog.plataformatec.com.br</a>

</div>
</div>


<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/devise/">devise</a> <a href="http://jhjguxin.hwcrazy.com/tag/gem/">gem</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails 3.1 Release Notes]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/12/30/ruby-on-rails-3-dot-1-release-notes/"/>
    <updated>2011-12-30T19:12:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/12/30/ruby-on-rails-3-dot-1-release-notes</id>
    <content type="html"><![CDATA[<h2>Ruby on Rails 3.1 Release Notes</h2>

<h2>Ruby on Rails 3.1 Release Notes</h2>


<p>Highlights in Rails 3.1:</p>

<p>Rails<span style="font-family: DejaVu Sans;">中的亮点：</span></p>

<ul>
    <li>Streaming <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">流</span></span></li>
    <li>Reversible Migrations <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">可逆（数据）迁移</span></span></li>
    <li>Assets Pipeline Assets<span style="font-family: DejaVu Sans;">管道</span></li>
    <li>jQuery as the default JavaScript library <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">以</span></span>jQuery<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">作为默认的 </span></span>JavaScript library</li>
</ul>


<p>This release notes cover the major changes, but don’t include every little bug fix and change. If you want to see everything, check out the <a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a> in the main Rails repository on GitHub.</p>

<p><span style="font-family: DejaVu Sans;">这次发行</span>notes<span style="font-family: DejaVu Sans;">涵盖了主要的</span>changes<span style="font-family: DejaVu Sans;">，但是没有包含每个很</span>little<span style="font-family: DejaVu Sans;">的</span>bug<span style="font-family: DejaVu Sans;">修复和</span>chage<span style="font-family: DejaVu Sans;">。如果你希望看到所有的事情，检查</span>Rails <span style="font-family: DejaVu Sans;">的</span>GitHub<span style="font-family: DejaVu Sans;">主代码仓库中的</span><a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a><span style="font-family: DejaVu Sans;">。</span></p>

<h3><a name="upgrading-to-rails-3-1"></a>1 Upgrading to Rails 3.1<span style="font-family: WenQuanYi Micro Hei;">升级到</span>Rails 3.1</h3>


<p>If you’re upgrading an existing application, it’s a great idea to have good test coverage before going in. You should also first upgrade to Rails 3 in case you haven’t and make sure your application still runs as expected before attempting to update to Rails 3.1. Then take heed of the following changes:</p>

<p><span style="font-family: DejaVu Sans;">如果你打算升级一个存在的应用程序，在开始进入升级的时候有一个很好的测试覆盖是一个好主意。你还应该首先升级到</span>Rails 3<span style="font-family: DejaVu Sans;">以防止你并没有确保你的应用程序在企图升级到</span>Rails 3.1<span style="font-family: DejaVu Sans;">之前能够预计到升级后仍然能够运行。然后留意随后（介绍）的</span>changes<span style="font-family: DejaVu Sans;">：</span></p>

<h4><a name="rails-3-1-requires-at-least-ruby-1-8-7"></a> 1.1 Rails 3.1 requires at least Ruby 1.8.7</h4>


<p>Rails 3.1 requires Ruby 1.8.7 or higher. Support for all of the previous Ruby versions has been dropped officially and you should upgrade as early as possible. Rails 3.1 is also compatible with Ruby 1.9.2.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">需要至少</span>Ruby 1.8.7<span style="font-family: DejaVu Sans;">或者更高。曾经支持的所有的早先的</span>Ruby<span style="font-family: DejaVu Sans;">版本被正式取消，你需要尽快升级。</span>Rails 3.1<span style="font-family: DejaVu Sans;">同时也与</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">兼容。</span></p>

<p>Note that Ruby 1.8.7 p248 and p249 have marshaling bugs that crash Rails. Ruby Enterprise Edition have these fixed since release 1.8.7-2010.02 though. On the 1.9 front, Ruby 1.9.1 is not usable because it outright segfaults, so if you want to use 1.9.x jump on 1.9.2 for smooth sailing.</p>

<p><span style="font-family: DejaVu Sans;">注意</span>Ruby 1.8.7 p248<span style="font-family: DejaVu Sans;">和</span>p249<span style="font-family: DejaVu Sans;">有</span>marshaling bugs<span style="font-family: DejaVu Sans;">其与</span>Rails<span style="font-family: DejaVu Sans;">冲突。</span>Ruby<span style="font-family: DejaVu Sans;">企业版自</span>1.8.7-2010.02 <span style="font-family: DejaVu Sans;">发行版已经修复了这些</span>bug<span style="font-family: DejaVu Sans;">。在以</span>1.9<span style="font-family: DejaVu Sans;">开头的</span>ruby<span style="font-family: DejaVu Sans;">，</span>Ruby 1.9.1<span style="font-family: DejaVu Sans;">是不可用的因为</span>it outright segfaults<span style="font-family: DejaVu Sans;">，因此如果你想使用</span>1.9.x<span style="font-family: DejaVu Sans;">可以平稳的跳至</span>1.9.2</p>

<h3><a name="creating-a-rails-3-1-application"></a>2 Creating a Rails 3.1 application</h3>


<h1>You should have the &lsquo;rails&rsquo; rubygem installed</h1>

<p>$ rails new myapp</p>

<p>$ cd myapp</p>

<h4><a name="vendoring-gems"></a>2.1 Vendoring Gems</h4>


<p>Rails now uses a <tt>Gemfile</tt> in the application root to determine the gems you require for your application to start. This <tt>Gemfile</tt> is processed by the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/carlhuda/bundler">Bundler</a></span></span> gem, which then installs all your dependencies. It can even install all the dependencies locally to your application so that it doesn’t depend on the system gems.</p>

<p>Rails<span style="font-family: DejaVu Sans;">现在使用一个位于应用程序根目录的</span>Gemfile<span style="font-family: DejaVu Sans;">文件来决定使你开始你的应用程序的</span>require<span style="font-family: DejaVu Sans;">。这个</span>Gemfile<span style="font-family: DejaVu Sans;">文件被</span>Bundler gem<span style="font-family: DejaVu Sans;">加工生成，它会随后安装你所有的依赖。它甚至可以以你的应用程序为</span>locally<span style="font-family: DejaVu Sans;">安装依赖，使得你的应用程序不用依赖系统</span>gems<span style="font-family: DejaVu Sans;">。</span></p>

<p>&nbsp;</p>

<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="74" /> <col width="583" /> </colgroup>
<tbody>
<tr>
<td width="74">vendor/</td>
<td width="583">A place for all third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.<span style="font-family: DejaVu Sans;">放置第三方代码的地方。在一个典型的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中，这里包含</span>Ruby Gems<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">源代码（如果你把</span>Rails<span style="font-family: DejaVu Sans;">安装到你的项目中）还包含一些预先包装好的额外的插件</span></td>
</tr>
</tbody>
</table>


<p>More information: – <a href="http://gembundler.com/"><span style="color: #000080;"><span style="text-decoration: underline;">bundler</span></span><span style="color: #000080;"><span style="text-decoration: underline;">homepage</span></span></a></p>

<h4><a name="living-on-the-edge"></a>2.2 Living on the Edge</h4>


<p><tt>Bundler</tt> and <tt>Gemfile</tt> makes freezing your Rails application easy as pie with the new dedicated <tt>bundle</tt> command. If you want to bundle straight from the Git repository, you can pass the <tt>&mdash;edge</tt> flag:</p>

<p>Bundler<span style="font-family: DejaVu Sans;">和</span>Gemfile<span style="font-family: DejaVu Sans;">通过新的专用</span>bundle <span style="font-family: DejaVu Sans;">命令来冻结你的应用程序就像吃馅饼一样简单。如果你想直接从</span>Git<span style="font-family: DejaVu Sans;">仓库</span>bundle<span style="font-family: DejaVu Sans;">，你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>edge flag<span style="font-family: DejaVu Sans;">：</span></p>

<p>$ rails new myapp &mdash;edge</p>

<p>If you have a local checkout of the Rails repository and want to generate an application using that, you can pass the <tt>&mdash;dev</tt> flag:</p>

<p><span style="font-family: DejaVu Sans;">如果你有一个从</span>Rails<span style="font-family: DejaVu Sans;">源代码仓库</span>checkout<span style="font-family: DejaVu Sans;">的本地</span>Rails<span style="font-family: DejaVu Sans;">并且你想生成一个应用程序使用（上面的方法）你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>dev <span style="font-family: DejaVu Sans;">标志：</span></p>

<p>$ ruby /path/to/rails/bin/rails new myapp &mdash;dev</p>

<h3><a name="rails-architectural-changes"></a>3 Rails Architectural<span style="font-family: WenQuanYi Micro Hei;">建筑的</span>Changes</h3>


<h4><a name="assets-pipeline"></a>3.1 Assets Pipeline</h4>


<p>The major change in Rails 3.1 is the Assets Pipeline. It makes CSS and JavaScript first-class code citizens and enables proper organization, including use in plugins and engines.</p>

<p><span style="font-family: DejaVu Sans;">在</span>Rails 3.1<span style="font-family: DejaVu Sans;">中主要的更改就是</span>Assets Pipeline<span style="font-family: DejaVu Sans;">（管道）。它使得</span>CSS<span style="font-family: DejaVu Sans;">和</span>JavaScript <span style="font-family: DejaVu Sans;">一流的代码公民可以合适的组织他们，包含使用</span>pluginis<span style="font-family: DejaVu Sans;">和</span>engines<span style="font-family: DejaVu Sans;">。</span></p>

<p>The assets pipeline is powered by <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/sstephenson/sprockets">Sprockets</a></span></span> and is covered in the <a href="http://guides.rubyonrails.org/asset_pipeline.html"><span style="color: #000080;"><span style="text-decoration: underline;">Asset</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Pipeline</span></span></a> guide.</p>

<h4><a name="http-streaming"></a>3.2 HTTP Streaming</h4>


<p>HTTP Streaming is another change that is new in Rails 3.1. This lets the browser download your stylesheets and JavaScript files while the server is still generating the response. This requires Ruby 1.9.2, is opt-in and requires support from the web server as well, but the popular combo of nginx and unicorn is ready to take advantage of it.</p>

<p>HTTP Streaming<span style="font-family: DejaVu Sans;">是</span>Rails 3.1<span style="font-family: DejaVu Sans;">另一更改。这使得浏览器下载你的</span>stylesheets<span style="font-family: DejaVu Sans;">和</span>JavaSript<span style="font-family: DejaVu Sans;">文件即使服务器仍然在响应。这需要</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">，它是需要从服务器中选择以及服务器同样支持</span>HTTP Streaming<span style="font-family: DejaVu Sans;">，但是受欢迎的</span>nginx<span style="font-family: DejaVu Sans;">和</span>unicom<span style="font-family: DejaVu Sans;">组织已经准备</span>advantage HTTP Streaming<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="default-js-library-is-now-jquery"></a>3.3 Default JS library is now jQuery</h4>


<p>jQuery is the default JavaScript library that ships with Rails 3.1. But if you use Prototype, it’s simple to switch.</p>

<p>Jquey<span style="font-family: DejaVu Sans;">是默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">搭载在</span>Rrails 3.1.<span style="font-family: DejaVu Sans;">但是如果你使用</span>Prototype<span style="font-family: DejaVu Sans;">，它更改很简单。</span></p>

<p>$ rails new myapp -j prototype</p>

<h4><a name="identity-map"></a>3.4 Identity Map <span style="font-family: WenQuanYi Micro Hei;">身份</span>map</h4>


<p>Active Record has an Identity Map in Rails 3.1. An identity map keeps previously instantiated records and returns the object associated with the record if accessed again. The identity map is created on a per-request basis and is flushed at request completion.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">的</span>Active Record<span style="font-family: DejaVu Sans;">有一个</span>Indentity Map<span style="font-family: DejaVu Sans;">。一个</span>identity map<span style="font-family: DejaVu Sans;">保留先前的实例化的记录并且如果再次访问返回记录的对象的关系。</span>Indentity map<span style="font-family: DejaVu Sans;">是基于每个请求创建的并且在请求完成刷新。</span></p>

<p>Rails 3.1 comes with the identity map turned off by default.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">默认</span>Identity map<span style="font-family: DejaVu Sans;">是关闭的。</span></p>

<h3><a name="railties"></a>4 Railties</h3>


<ul>
    <li><a name="railties1"></a>jQuery is the new default JavaScript library.</li>
</ul>


<p>Jquey<span style="font-family: DejaVu Sans;">是新的默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">。</span></p>

<ul>
    <li>jQuery and Prototype are no longer vendored and is provided from now on by the jquery-rails and prototype-rails gems.</li>
</ul>


<p>jQuey<span style="font-family: DejaVu Sans;">和</span>Prototype<span style="font-family: DejaVu Sans;">不再</span>vendored<span style="font-family: DejaVu Sans;">并且从现在开始提供的是</span>jquery-rails and prototype-rails gems<span style="font-family: DejaVu Sans;">。</span></p>

<ul>
    <li>The application generator accepts an option <tt>-j</tt> which can be an arbitrary string. If passed “foo”, the gem “foo-rails” is added to the <tt>Gemfile</tt>, and the application JavaScript manifest requires “foo” and “foo_ujs”. Currently only “prototype-rails” and “jquery-rails” exist and provide those files via the asset pipeline.</li>
</ul>


<p><span style="font-family: DejaVu Sans;">应用程序创建器接受一个选项</span>-j<span style="font-family: DejaVu Sans;">其可以是任意字符串。如果传递<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>foo”<span style="font-family: DejaVu Sans;">，</span>gem “foo-rails”<span style="font-family: DejaVu Sans;">就被添加到</span>Gemfile<span style="font-family: DejaVu Sans;">，并且应用程序的</span>JavaScript manifest requires “foo” and “foo_ujs”<span style="font-family: DejaVu Sans;">。当前只有<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>prototype-rails” and “jquery-rails”<span style="font-family: DejaVu Sans;">存在并且通过</span>asset pipeline<span style="font-family: DejaVu Sans;">提供这些文件。</span></p>

<ul>
    <li>Generating an application or a plugin runs <tt>bundle</tt><tt> </tt><tt>install</tt> unless <tt>--skip-gemfile</tt> or <tt>--skip-bundle</tt> is specified.</li>
</ul>


<p><span style="font-family: DejaVu Sans;">生成一个应用程序或者一个</span>plugin<span style="font-family: DejaVu Sans;">运行</span>bundle install<span style="font-family: DejaVu Sans;">除非</span>&mdash;skip-gemfile<span style="font-family: DejaVu Sans;">或者</span>&mdash;skip-bundle<span style="font-family: DejaVu Sans;">被指定</span></p>

<ul>
    <li>The controller and resource generators will now automatically produce asset stubs (this can be turned off with <tt>--skip-assets</tt>). These stubs will use CoffeeScript and Sass, if those libraries are available.</li>
</ul>


<p>Controller<span style="font-family: DejaVu Sans;">和</span>resource<span style="font-family: DejaVu Sans;">创建器将会自动的产生</span>asset stubs(this can be turned off with <tt>&mdash;skip-assets</tt>)<span style="font-family: DejaVu Sans;">。这些</span>stub<span style="font-family: DejaVu Sans;">将会使用</span>CoffeeScript and Sass<span style="font-family: DejaVu Sans;">，如果这些</span>libraries<span style="font-family: DejaVu Sans;">是可用的。</span></p>

<ul>
    <li>Scaffold and app generators use the Ruby 1.9 style hash when running on Ruby 1.9. To generate old style hash, <tt>--old-style-hash</tt> can be passed.</li>
</ul>


<ul>
    <li>Scaffold controller generator creates format block for JSON instead of XML.</li>
</ul>


<ul>
    <li>Active Record logging is directed to STDOUT and shown inline in the console.</li>
</ul>


<ul>
    <li>Added <tt>config.force_ssl</tt> configuration which loads <tt>Rack::SSL</tt> middleware and force all requests to be under HTTPS protocol.</li>
</ul>


<ul>
    <li>Added <tt>rails</tt><tt> </tt><tt>plugin</tt><tt> </tt><tt>new</tt> command which generates a Rails plugin with gemspec, tests and a dummy application for testing.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Etag</tt> and <tt>Rack::ConditionalGet</tt> to the default middleware stack.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Cache</tt> to the default middleware stack.</li>
</ul>


<ul>
    <li>Engines received a major update – You can mount them at any path, enable assets, run generators etc.</li>
</ul>


<h3><a name="action-pack"></a>5 Action Pack</h3>


<h4><a name="action-controller"></a>5.1 Action Controller</h4>


<ul>
    <li>A warning is given out if the CSRF token authenticity cannot be verified.</li>
</ul>


<ul>
    <li>Specify <tt>force_ssl</tt> in a controller to force the browser to transfer data via HTTPS protocol on that particular controller. To limit to specific actions, <tt>:only</tt> or <tt>:except</tt> can be used.</li>
</ul>


<ul>
    <li>Sensitive query string parameters specified in <tt>config.filter_parameters</tt> will now be filtered out from the request paths in the log.</li>
</ul>


<ul>
    <li>URL parameters which return <tt>nil</tt> for <tt>to_param</tt> are now removed from the query string.</li>
</ul>


<ul>
    <li>Added <tt>ActionController::ParamsWrapper</tt> to wrap parameters into a nested hash, and will be turned on for JSON request in new applications by default. This can be customized in <tt>config/initializers/wrap_parameters.rb</tt>.</li>
</ul>


<ul>
    <li>Added <tt>config.action_controller.include_all_helpers</tt>. By default <tt>helper</tt><tt> </tt><tt>:all</tt> is done in <tt>ActionController::Base</tt>, which includes all the helpers by default. Setting <tt>include_all_helpers</tt> to <tt>false</tt> will result in including only application_helper and the helper corresponding to controller (like foo_helper for foo_controller).</li>
</ul>


<ul>
    <li><tt>url_for</tt> and named url helpers now accept <tt>:subdomain</tt> and <tt>:domain</tt> as options.</li>
</ul>


<ul>
    <li>Added <tt>Base.http_basic_authenticate_with</tt> to do simple http basic authentication with a single class method call.</li>
</ul>


<p>class PostsController &lt; ApplicationController</p>

<p>USER_NAME, PASSWORD = &ldquo;dhh&rdquo;, &ldquo;secret&rdquo;</p>

<p>&nbsp;</p>

<p>before_filter :authenticate, :except =&gt; [ :index ]</p>

<p>&nbsp;</p>

<p>def index</p>

<p>render :text =&gt; &ldquo;Everyone can see me!&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>def edit</p>

<p>render :text =&gt; &ldquo;I&rsquo;m only accessible if you know the password&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>private</p>

<p>def authenticate</p>

<p>authenticate_or_request_with_http_basic do |user_name, password|</p>

<p>user_name == USER_NAME &amp;&amp; password == PASSWORD</p>

<p>end</p>

<p>end</p>

<p>end</p>

<p>..can now be written as</p>

<p>class PostsController &lt; ApplicationController</p>

<p>http_basic_authenticate_with :name =&gt; &ldquo;dhh&rdquo;, :password =&gt; &ldquo;secret&rdquo;, :except =&gt; :index</p>

<p>&nbsp;</p>

<p>def index</p>

<p>render :text =&gt; &ldquo;Everyone can see me!&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>def edit</p>

<p>render :text =&gt; &ldquo;I&rsquo;m only accessible if you know the password&rdquo;</p>

<p>end</p>

<p>end</p>

<p>Added streaming support, you can enable it with:</p>

<p>class PostsController &lt; ActionController::Base</p>

<p>stream</p>

<p>end</p>

<p>You can restrict<span style="font-family: DejaVu Sans;">限制</span>it to some actions by using <tt>:only</tt> or <tt>:except</tt>. Please read the docs at <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActionController/Streaming.html">ActionController::Streaming</a></span></span> for more information.</p>

<ul>
    <li>The redirect route method now also accepts a hash of options which will only change the parts of the url in question, or an object which responds to call, allowing for redirects to be reused.</li>
</ul>


<h4><a name="action-dispatch"></a>5.2 Action Dispatch</h4>


<ul>
    <li><tt>config.action_dispatch.x_sendfile_header</tt> now defaults to <tt>nil</tt> and <tt>config/environments/production.rb</tt> doesn’t set any particular value for it. This allows servers to set it through <tt>X-Sendfile-Type</tt>.</li>
</ul>


<ul>
    <li><tt>ActionDispatch::MiddlewareStack</tt> now uses composition<span style="font-family: DejaVu Sans;">组成</span>over inheritance and is no longer an array.</li>
</ul>


<ul>
    <li>Added <tt>ActionDispatch::Request.ignore_accept_header</tt> to ignore accept headers.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Cache</tt> to the default stack.</li>
</ul>


<ul>
    <li>Moved etag responsibility from <tt>ActionDispatch::Response</tt> to the middleware stack.</li>
</ul>


<ul>
    <li>Rely on <tt>Rack::Session</tt> stores API for more compatibility across the Ruby world. This is backwards incompatible since <tt>Rack::Session</tt> expects <tt>#get_session</tt> to accept four arguments and requires <tt>#destroy_session</tt> instead of simply <tt>#destroy</tt>.</li>
</ul>


<ul>
    <li>Template lookup now searches further up in the inheritance chain.</li>
</ul>


<h4><a name="action-view"></a>5.3 Action View</h4>


<ul>
    <li>Added an <tt>:authenticity_token</tt> option to <tt>form_tag</tt> for custom handling or to omit the token by passing <tt>:authenticity_token</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt>.</li>
</ul>


<ul>
    <li>Created <tt>ActionView::Renderer</tt> and specified an API for <tt>ActionView::Context</tt>.</li>
</ul>


<ul>
    <li>In place <tt>SafeBuffer</tt> mutation is prohibited<span style="font-family: DejaVu Sans;">禁止</span>in Rails 3.1.</li>
</ul>


<ul>
    <li>Added HTML5 <tt>button_tag</tt> helper.</li>
</ul>


<ul>
    <li><tt>file_field</tt> automatically adds <tt>:multipart</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> to the enclosing form.</li>
</ul>


<ul>
    <li>Added a convenience idiom to generate HTML5 data-* attributes in tag helpers from a <tt>:data</tt> hash of options:</li>
</ul>


<p>tag(&ldquo;div&rdquo;, :data =&gt; {:name =&gt; &lsquo;Stephen&rsquo;, :city_state =&gt; %w(Chicago IL)})</p>

<h1>=&gt; &lt;div data-name=&ldquo;Stephen&rdquo; data-city-state=&ldquo;[&amp;quot;Chicago&amp;quot;,&amp;quot;IL&amp;quot;]&rdquo; /&gt;</h1>

<p>Keys are dasherized. Values are JSON-encoded, except for strings and symbols.</p>

<ul>
    <li><tt>csrf_meta_tag</tt> is renamed to <tt>csrf_meta_tags</tt> and aliases <tt>csrf_meta_tag</tt> for backwards compatibility.</li>
</ul>


<ul>
    <li>The old template handler API is deprecated and the new API simply requires a template handler to respond to call.</li>
</ul>


<ul>
    <li>rhtml and rxml are finally removed as template handlers.</li>
</ul>


<ul>
    <li><tt>config.action_view.cache_template_loading</tt> is brought back which allows to decide whether templates should be cached or not.</li>
</ul>


<ul>
    <li>The submit form helper does not generate an id “object_name_id” anymore.</li>
</ul>


<ul>
    <li>Allows <tt>FormHelper#form_for</tt> to specify the <tt>:method</tt> as a direct option instead of through the <tt>:html</tt> hash. <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete)</tt> instead of <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>html:</tt><tt> </tt><tt>{</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete</tt><tt> </tt><tt>})</tt>.</li>
</ul>


<ul>
    <li>Provided <tt>JavaScriptHelper#j()</tt> as an alias for <tt>JavaScriptHelper#escape_javascript()</tt>. This supersedes the <tt>Object#j()</tt> method that the JSON gem adds within templates using the JavaScriptHelper.</li>
</ul>


<ul>
    <li>Allows AM/PM format in datetime selectors.</li>
</ul>


<ul>
    <li><tt>auto_link</tt> has been removed from Rails and extracted into the <a href="https://github.com/tenderlove/rails_autolink"><span style="color: #000080;"><span style="text-decoration: underline;">rails_autolink</span></span><span style="color: #000080;"><span style="text-decoration: underline;">gem</span></span></a></li>
</ul>


<h3><a name="active-record"></a>6 Active Record</h3>


<ul>
    <li>Added a class method <tt>pluralize_table_names</tt> to singularize/pluralize<span style="font-family: DejaVu Sans;">复数</span>table names of individual models. Previously this could only be set globally for all models through <tt>ActiveRecord::Base.pluralize_table_names</tt>.</li>
</ul>


<p>class User &lt; ActiveRecord::Base</p>

<p>self.pluralize_table_names = false</p>

<p>end</p>

<ul>
    <li>Added block setting of attributes to singular associations. The block will get called after the instance is initialized</li>
</ul>


<p>class User &lt; ActiveRecord::Base</p>

<p>has_one :account</p>

<p>end</p>

<p>&nbsp;</p>

<p>user.build_account{ |a| a.credit_limit =&gt; 100.0 }</p>

<ul>
    <li><strong>Added</strong><strong> </strong><tt><strong>ActiveRecord::Base.attribute_names</strong></tt><strong> </strong><strong>to</strong><strong> </strong><strong>return</strong><strong> </strong><strong>a</strong><strong> </strong><strong>list</strong><strong> </strong><strong>of</strong><strong> </strong><strong>attribute</strong><strong> </strong><strong>names.</strong><strong> </strong><strong>This</strong><strong> </strong><strong>will</strong><strong> </strong><strong>return</strong><strong> </strong><strong>an</strong><strong> </strong><strong>empty</strong><strong> </strong><strong>array</strong><strong> </strong><strong>if</strong><strong> </strong><strong>the</strong><strong> </strong><strong>model</strong><strong> </strong><strong>is</strong><strong> </strong><strong>abstract</strong><strong> </strong><strong>or</strong><strong> </strong><strong>the</strong><strong> </strong><strong>table</strong><strong> </strong><strong>does</strong><strong> </strong><strong>not</strong><strong> </strong><strong>exist.</strong><strong> </strong></li>
</ul>


<ul>
    <li>CSV Fixtures are deprecated and support will be removed in Rails 3.2.0.</li>
</ul>


<ul>
    <li><tt>ActiveRecord#new</tt>, <tt>ActiveRecord#create</tt> and <tt>ActiveRecord#update_attributes</tt> all accept a second hash as an option that allows you to specify which role to consider when assigning attributes. This is built on top of Active Model’s new mass assignment capabilities:</li>
</ul>


<p>class Post &lt; ActiveRecord::Base</p>

<p>attr_accessible :title</p>

<p>attr_accessible :title, :published_at, :as =&gt; :admin</p>

<p>end</p>

<p>&nbsp;</p>

<p>Post.new(params[:post], :as =&gt; :admin)</p>

<ul>
    <li><tt>default_scope</tt> can now take a block, lambda, or any other object which responds to call for lazy evaluation.</li>
</ul>


<ul>
    <li>Default scopes are now evaluated at the latest possible moment, to avoid problems where scopes would be created which would implicitly contain the default scope, which would then be impossible to get rid of via Model.unscoped.</li>
</ul>


<ul>
    <li>PostgreSQL adapter only supports PostgreSQL version 8.2 and higher.</li>
</ul>


<ul>
    <li><tt>ConnectionManagement</tt> middleware is changed to clean up the connection pool after the rack body has been flushed.</li>
</ul>


<ul>
    <li>Added an <tt>update_column</tt> method on Active Record. This new method updates a given attribute on an object, skipping validations and callbacks. It is recommended to use <tt>update_attribute</tt> unless you are sure you do not want to execute any callback, including the modification of the <tt>updated_at</tt> column. It should not be called on new records.</li>
</ul>


<ul>
    <li>Associations with a <tt>:through</tt> option can now use any association as the through or source association, including other associations which have a <tt>:through</tt> option and <tt>has_and_belongs_to_many</tt> associations.</li>
</ul>


<ul>
    <li>The configuration for the current database connection is now accessible via <tt>ActiveRecord::Base.connection_config</tt>.</li>
</ul>


<ul>
    <li>limits and offsets are removed from COUNT queries unless both are supplied.</li>
</ul>


<p>People.limit(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people&rsquo;</p>

<p>People.offset(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people&rsquo;</p>

<p>People.limit(1).offset(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people LIMIT 1 OFFSET 1&rsquo;</p>

<ul>
    <li><tt>ActiveRecord::Associations::AssociationProxy</tt> has been split. There is now an <tt>Association</tt> class (and subclasses) which are responsible for operating on associations, and then a separate, thin wrapper called <tt>CollectionProxy</tt>, which proxies collection associations. This prevents namespace pollution, separates concerns, and will allow further refactorings.</li>
</ul>


<ul>
    <li>Singular associations (<tt>has_one</tt>, <tt>belongs_to</tt>) no longer have a proxy and simply returns the associated record or <tt>nil</tt>. This means that you should not use undocumented methods such as <tt>bob.mother.create</tt> – use <tt>bob.create_mother</tt> instead.</li>
</ul>


<ul>
    <li>Support the <tt>:dependent</tt> option on <tt>has_many</tt><tt> </tt><tt>:through</tt> associations. For historical and practical reasons, <tt>:delete_all</tt> is the default deletion strategy employed by <tt>association.delete(*records)</tt>, despite the fact that the default strategy is <tt>:nullify</tt> for regular has_many. Also, this only works at all if the source reflection is a belongs_to. For other situations, you should directly modify the through association.</li>
</ul>


<ul>
    <li>The behavior of <tt>association.destroy</tt> for <tt>has_and_belongs_to_many</tt> and <tt>has_many</tt><tt> </tt><tt>:through</tt> is changed. From now on, ‘destroy’ or ‘delete’ on an association will be taken to mean ‘get rid of the link’, not (necessarily) ‘get rid of the associated records’.</li>
</ul>


<ul>
    <li>Previously, <tt>has_and_belongs_to_many.destroy(*records)</tt> would destroy the records themselves. It would not delete any records in the join table. Now, it deletes the records in the join table.</li>
</ul>


<ul>
    <li>Previously, <tt>has_many_through.destroy(*records)</tt> would destroy the records themselves, and the records in the join table. [Note: This has not always been the case; previous version of Rails only deleted the records themselves.] Now, it destroys only the records in the join table.</li>
</ul>


<ul>
    <li>Note that this change is backwards-incompatible to an extent, but there is unfortunately no way to ‘deprecate’ it before changing it. The change is being made in order to have consistency as to the meaning of ‘destroy’ or ‘delete’ across the different types of associations. If you wish to destroy the records themselves, you can do <tt>records.association.each(&amp;:destroy)</tt>.</li>
</ul>


<ul>
    <li>Add <tt>:bulk</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> option to <tt>change_table</tt> to make all the schema changes defined in a block using a single ALTER statement.</li>
</ul>


<p>change_table(:users, :bulk =&gt; true) do |t|</p>

<p>t.string :company_name</p>

<p>t.change :birthdate, :datetime</p>

<p>end</p>

<ul>
    <li>Removed support for accessing attributes on a <tt>has_and_belongs_to_many</tt> join table. <tt>has_many</tt><tt> </tt><tt>:through</tt> needs to be used.</li>
</ul>


<ul>
    <li>Added a <tt>create_association!</tt> method for <tt>has_one</tt> and <tt>belongs_to</tt> associations.</li>
</ul>


<ul>
    <li>Migrations are now reversible<span style="font-family: DejaVu Sans;">可逆</span>, meaning that Rails will figure out how to reverse your migrations. To use reversible migrations, just define the <tt>change</tt> method.</li>
</ul>


<p>class MyMigration &lt; ActiveRecord::Migration</p>

<p>def change</p>

<p>create_table(:horses) do</p>

<p>t.column :content, :text</p>

<p>t.column :remind_at, :datetime</p>

<p>end</p>

<p>end</p>

<p>end</p>

<ul>
    <li>Some things cannot be automatically reversed for you. If you know how to reverse those things, you should define <tt>up</tt> and <tt>down</tt> in your migration. If you define something in change that cannot be reversed, an <tt>IrreversibleMigration</tt> exception will be raised when going down.</li>
</ul>


<ul>
    <li>Migrations now use instance methods rather than class methods:</li>
</ul>


<p>class FooMigration &lt; ActiveRecord::Migration</p>

<p>def up # Not self.up</p>

<p>&hellip;</p>

<p>end</p>

<p>end</p>

<ul>
    <li>Migration files generated from model and constructive migration generators (for example, add_name_to_users) use the <strong>reversible</strong><strong> </strong><strong>migration</strong><strong>’</strong><strong>s</strong><strong> </strong><tt>change</tt> method instead of the ordinary <tt>up</tt> and <tt>down</tt> methods.</li>
</ul>


<ul>
    <li>Removed support for interpolating<span style="font-family: DejaVu Sans;">插值</span>string SQL conditions on associations. Instead, a proc should be used.</li>
</ul>


<p>has_many :things, :conditions =&gt; &lsquo;foo = #{bar}&rsquo; # before</p>

<p>has_many :things, :conditions =&gt; proc { &ldquo;foo = #{bar}&rdquo; } # after</p>

<p>&nbsp;</p>

<p>Inside the proc, <tt>self</tt> is the object which is the owner of the association, unless you are eager loading the association, in which case <tt>self</tt> is the class which the association is within.</p>

<p>You can have any “normal” conditions inside the proc, so the following will work too:</p>

<p>has_many :things, :conditions =&gt; proc { [&ldquo;foo = ?&rdquo;, bar] }</p>

<p>&nbsp;</p>

<ul>
    <li>Previously <tt>:insert_sql</tt> and <tt>:delete_sql</tt> on <tt>has_and_belongs_to_many</tt> association allowed you to call ‘record’ to get the record being inserted or deleted. This is now passed as an argument to the proc.</li>
</ul>


<ul>
    <li>Added <tt>ActiveRecord::Base#has_secure_password</tt> (via <tt>ActiveModel::SecurePassword</tt>) to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>


<h1>Schema: User(name:string, password_digest:string, password_salt:string)</h1>

<p>class User &lt; ActiveRecord::Base</p>

<p>has_secure_password</p>

<p>end</p>

<p>&nbsp;</p>

<ul>
    <li>When a model is generated <tt>add_index</tt> is added by default for <tt>belongs_to</tt> or <tt>references</tt> columns.</li>
</ul>


<ul>
    <li>Setting the id of a <tt>belongs_to</tt> object will update the reference to the object.</li>
</ul>


<ul>
    <li><tt>ActiveRecord::Base#dup</tt> and <tt>ActiveRecord::Base#clone</tt> semantics<span style="font-family: DejaVu Sans;">语义</span>have changed to closer match normal Ruby dup and clone semantics.</li>
</ul>


<ul>
    <li>Calling <tt>ActiveRecord::Base#clone</tt> will result in a shallow copy of the record, including copying the frozen state. No callbacks will be called.</li>
</ul>


<ul>
    <li>Calling <tt>ActiveRecord::Base#dup</tt> will duplicate the record, including calling after initialize hooks. Frozen state will not be copied, and all associations will be cleared. A duped record will return <tt>true</tt> for <tt>new_record?</tt>, have a <tt>nil</tt> id field, and is saveable.</li>
</ul>


<ul>
    <li>The query cache now works with prepared statements. No changes in the applications are required.</li>
</ul>


<h3><a name="active-model"></a>7 Active Model</h3>


<ul>
    <li><tt>attr_accessible</tt> accepts an option <tt>:as</tt> to specify a role.</li>
</ul>


<ul>
    <li><tt>InclusionValidator</tt>, <tt>ExclusionValidator</tt>, and <tt>FormatValidator</tt> now accepts an option which can be a proc, a lambda, or anything that respond to <tt>call</tt>. This option will be called with the current record as an argument and returns an object which respond to <tt>include?</tt> for <tt>InclusionValidator</tt> and <tt>ExclusionValidator</tt>, and returns a regular expression object for <tt>FormatValidator</tt>.</li>
</ul>


<ul>
    <li>Added <tt>ActiveModel::SecurePassword</tt> to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>


<ul>
    <li><tt>ActiveModel::AttributeMethods</tt> allows attributes to be defined on demand.</li>
</ul>


<ul>
    <li>Added support for selectively enabling and disabling observers.</li>
</ul>


<ul>
    <li>Alternate <tt>I18n</tt> namespace lookup is no longer supported.</li>
</ul>


<h3><a name="active-resource"></a>8 Active Resource</h3>


<ul>
    <li><strong>The</strong><strong> </strong><strong>default</strong><strong> </strong><strong>format</strong><strong> </strong><strong>has</strong><strong> </strong><strong>been</strong><strong> </strong><strong>changed</strong><strong> </strong><strong>to</strong><strong> </strong><strong>JSON</strong><strong> </strong><strong>for</strong><strong> </strong><strong>all</strong><strong> </strong><strong>requests</strong>. If you want to continue to use XML you will need to set <tt>self.format</tt><tt> </tt><tt>=</tt><tt> </tt><tt>:xml</tt> in the class. For example,</li>
</ul>


<p>class User &lt; ActiveResource::Base</p>

<p>self.format = :xml</p>

<p>end</p>

<h3><a name="active-support"></a>9 Active Support</h3>


<ul>
    <li><tt>ActiveSupport::Dependencies</tt> now raises <tt>NameError</tt> if it finds an existing constant in <tt>load_missing_constant</tt>.</li>
</ul>


<ul>
    <li>Added a new reporting method <tt>Kernel#quietly</tt> which silences both <tt>STDOUT</tt> and <tt>STDERR</tt>.</li>
</ul>


<ul>
    <li>Added <tt>String#inquiry</tt> as a convenience method for turning a String into a <tt>StringInquirer</tt> object.</li>
</ul>


<ul>
    <li>Added <tt>Object#in?</tt> to test if an object is included in another object.</li>
</ul>


<ul>
    <li><tt>LocalCache</tt> strategy is now a real middleware class and no longer an anonymous class.</li>
</ul>


<ul>
    <li><tt>ActiveSupport::Dependencies::ClassCache</tt> class has been introduced for holding references to reloadable classes.</li>
</ul>


<ul>
    <li><tt>ActiveSupport::Dependencies::Reference</tt> has been refactored to take direct advantage of the new <tt>ClassCache</tt>.</li>
</ul>


<ul>
    <li>Backports <tt>Range#cover?</tt> as an alias for <tt>Range#include?</tt> in Ruby 1.8.</li>
</ul>


<ul>
    <li>Added <tt>weeks_ago</tt> and <tt>prev_week</tt> to Date/DateTime/Time.</li>
</ul>


<ul>
    <li>Added <tt>before_remove_const</tt> callback to <tt>ActiveSupport::Dependencies.remove_unloadable_constants!</tt>.</li>
</ul>


<p>Deprecations:</p>

<ul>
    <li><tt>ActiveSupport::SecureRandom</tt> is deprecated in favor of <tt>SecureRandom</tt> from the Ruby standard library.</li>
</ul>


<h3><a name="credits"></a>10 Credits</h3>


<p>See the <a href="http://contributors.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">full</span></span><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">contributors</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a> for the many people who spent many hours making Rails, the stable and robust framework it is. Kudos to all of them.</p>

<p>Rails 3.1 Release Notes were compiled by <a href="https://github.com/vijaydev"><span style="color: #000080;"><span style="text-decoration: underline;">Vijay</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Dev</span></span></a>.</p>

<p>标签： <a href="http://jhjguxin.hwcrazy.com/tag/gem/">gem</a> <a href="http://jhjguxin.hwcrazy.com/tag/git/">git</a> <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/jquery/">jquery</a> <a href="http://jhjguxin.hwcrazy.com/tag/learning/">learning</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/release/">release</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[折腾rails3]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/11/03/zhe-teng-rails3/"/>
    <updated>2011-11-03T13:45:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/11/03/zhe-teng-rails3</id>
    <content type="html"><![CDATA[<h2>折腾rails3</h2>

<p>///////////gem install 报错或是太慢,gem install 本地安装/////////////////////////</p>

<p>或是gem install 太慢 或是无法联接 timeout</p>

<p>这时可以通过本地安装的方式安装gem</p>

<p>首先进入gem官网<a href="http://rubygems.org/"><a href="http://rubygems.org/">http://rubygems.org/</a></a></p>

<p>然后搜索找到你要安装的gem，下载下来</p>

<p>应该是像rails-3.0.gem的文件</p>

<p>然后执行gem install -l rails-3.0.gem</p>

<p>-l参数意思是直接执行从本地安装</p>

<p>如果该gem没有依赖包，则直接就安装成功了</p>

<p>如果有依赖包，则会抱错提示缺少依赖的gem</p>

<p>然后只要再去下载该包，gem install -l xxx.gem</p>

<p>按照这个步骤安装虽然操作不方便，但是非常快。</p>

<p>如果要新装一台机器的话，只需把所有依赖包放到一个文件夹里，依次安装所有包，那会非常节省时间的，而且不一定需要联网的。</p>

<p>/////////////////////////安装不了rails3////////////////////////////</p>

<p>当出现以上错误时，有几种原因，网速过慢、gem服务器太慢、被墙了。
解决方案有几种，一种是自己一个一个下载gem包，本地安装，不过太麻烦。
另一种是修改源地址：
先查看一下当前源地址</p>

<pre>gem env
gem sources list</pre>


<p>一般默认是：<a href="http://rubygems.org/">http://rubygems.org/</a>
增加几个源路径：</p>

<pre>sudo gem sources -a http://gems.rubyforge.org
sudo gem sources -a http://gems.github.com</pre>


<p>问题应该解决了。关于gem sources的用法可以看帮助:gem help sources</p>

<p>//////////////////////////////////////加速gem///////////////////</p>

<p>下载gem-fast， 来加速你的Gem安装！（还有附赠下载进度条显示噢）</p>

<p>terminal中输入： gem install gem-fast</p>

<p>如果遇到问题， 想回退到之前的下载模式， 只需：gem uninstall gem-fast即可</p>

<p>一切如你所愿！</p>

<p>项目地址： <a href="http://github.com/dazuiba/gem-fast">http://github.com/dazuiba/gem-fast</a></p>

<p>Bug Track:  <a href="http://github.com/dazuiba/gem-fast/issues">http://github.com/dazuiba/gem-fast/issues</a></p>

<ol>
    <li>jhjguxin@jhjguxin-Aspire-4750:~$ sudo apt-get install curl</li>
    <li>Reading package lists... Done</li>
    <li>Building dependency tree</li>
    <li>Reading state information... Done</li>
    <li>The following NEW packages will be installed:</li>
    <li>  curl</li>
    <li>0 upgraded, 1 newly installed, 0 to remove and 1 not upgraded.</li>
    <li>Need to get 134 kB of archives.</li>
    <li>After this operation, 389 kB of additional disk space will be used.</li>
    <li>Get:1 http://mirrors.sohu.com/ubuntu/ oneiric/main curl i386 7.21.6-3ubuntu3 [134 kB]</li>
    <li>Fetched 134 kB in 1s (132 kB/s)</li>
    <li>Selecting previously deselected package curl.</li>
    <li>(Reading database ... 182147 files and directories currently installed.)</li>
    <li>Unpacking curl (from .../curl_7.21.6-3ubuntu3_i386.deb) ...</li>
    <li>Processing triggers for man-db ...</li>
    <li>Setting up curl (7.21.6-3ubuntu3) ...</li>
    <li>j</li>
    <li>jhjguxin@jhjguxin-Aspire-4750:~$ sudo gem install gem-fast</li>
    <li>Fetching: gem-fast-0.0.6.3.gem (100%)</li>
    <li>========================================================================</li>
    <li>  Thanks for installing Gem-Fast!</li>
    <li>  Gem-Fast will use curl to make your gem install faster!</li>
    <li>  Try it now use:  gem install rails</li>
    <li>========================================================================</li>
    <li>Successfully installed gem-fast-0.0.6.3</li>
    <li>1 gem installed</li>
    <li>Installing ri documentation for gem-fast-0.0.6.3...</li>
    <li>Installing RDoc documentation for gem-fast-0.0.6.3...</li>
    <li>jhjguxin@jhjguxin-Aspire-4750:~$ sudo gem install rails</li>
    <li>Downloading http://rubygems.org/latest_specs.4.8.gz</li>
    <li>##############################                                            42.2%</li>
</ol>


<p>///////////结果呢 各种爬墙 各种 折腾都没能在线安装好 rails3 最后实在不行 本地安装咯 31个gem包//////////////////////</p>

<p>我的ubuntu11.10 在<a href="http://rubygems.org/"><a href="http://rubygems.org/">http://rubygems.org/</a></a> 上面下载了如下的包（放在一个文件中），实际上还是根据实际的依赖提示来</p>

<p>actionmailer-3.1.1.gem    i18n-0.6.0.gem         rails-3.1.1.gem
actionpack-3.1.1.gem      json-1.6.1.gem         railties-3.1.1.gem
activemodel-3.1.1.gem     mail-2.3.0.gem         rake-0.9.2.2.gem
activerecord-3.1.1.gem    mime-types-1.17.2.gem  rdoc-3.11.gem
activeresource-3.1.1.gem  multi_json-1.0.3.gem   sprockets-2.0.3.gem
activesupport-3.1.1.gem   polyglot-0.3.3.gem     thor-0.14.6.gem
arel-2.2.1.gem            rack-1.3.5.gem         tilt-1.3.3.gem
builder-3.0.0.gem         rack-cache-1.1.gem     treetop-1.4.10.gem
bundler-1.0.21.gem        rack-mount-0.8.3.gem   tzinfo-0.3.30.gem
erubis-2.7.0.gem          rack-ssl-1.3.2.gem
hike-1.2.1.gem            rack-test-0.6.1.gem</p>

<p>然后：：：</p>

<p><a href="mailto:jhjguxin@jhjguxin-virtual-machine:~/Downloads/rails$">jhjguxin@jhjguxin-virtual-machine:~/Downloads/rails$</a> sudo gem install rails-3.1.1.gem
Building native extensions.  This could take a while&hellip;
Depending on your version of ruby, you may need to install ruby rdoc/ri data:</p>

<p>&lt;= 1.8.6 : unsupported
 = 1.8.7 : gem install rdoc-data; rdoc-data &mdash;install
 = 1.9.1 : gem install rdoc-data; rdoc-data &mdash;install
&gt;= 1.9.2 : nothing to do! Yay!
Successfully installed multi_json-1.0.3
Successfully installed activesupport-3.1.1
Successfully installed builder-3.0.0
Successfully installed i18n-0.6.0
Successfully installed activemodel-3.1.1
Successfully installed rack-1.3.5
Successfully installed rack-cache-1.1
Successfully installed rack-test-0.6.1
Successfully installed rack-mount-0.8.3
Successfully installed hike-1.2.1
Successfully installed tilt-1.3.3
Successfully installed sprockets-2.0.3
Successfully installed erubis-2.7.0
Successfully installed actionpack-3.1.1
Successfully installed arel-2.2.1
Successfully installed tzinfo-0.3.30
Successfully installed activerecord-3.1.1
Successfully installed activeresource-3.1.1
Successfully installed mime-types-1.17.2
Successfully installed polyglot-0.3.3
Successfully installed treetop-1.4.10
Successfully installed mail-2.3.0
Successfully installed actionmailer-3.1.1
Successfully installed rake-0.9.2.2
Successfully installed thor-0.14.6
Successfully installed rack-ssl-1.3.2
Successfully installed json-1.6.1
Successfully installed rdoc-3.11
Successfully installed railties-3.1.1
Successfully installed bundler-1.0.21
Successfully installed rails-3.1.1
31 gems installed
Installing ri documentation for multi_json-1.0.3&hellip;
Installing ri documentation for activesupport-3.1.1&hellip;
Installing ri documentation for builder-3.0.0&hellip;
Installing ri documentation for i18n-0.6.0&hellip;
Installing ri documentation for activemodel-3.1.1&hellip;
Installing ri documentation for rack-1.3.5&hellip;
Installing ri documentation for rack-cache-1.1&hellip;
Installing ri documentation for rack-test-0.6.1&hellip;
Installing ri documentation for rack-mount-0.8.3&hellip;
Installing ri documentation for hike-1.2.1&hellip;
Installing ri documentation for tilt-1.3.3&hellip;
Installing ri documentation for sprockets-2.0.3&hellip;
Installing ri documentation for erubis-2.7.0&hellip;
Installing ri documentation for actionpack-3.1.1&hellip;
Installing ri documentation for arel-2.2.1&hellip;
Installing ri documentation for tzinfo-0.3.30&hellip;
Installing ri documentation for activerecord-3.1.1&hellip;
Installing ri documentation for activeresource-3.1.1&hellip;
Installing ri documentation for mime-types-1.17.2&hellip;
Installing ri documentation for polyglot-0.3.3&hellip;
Installing ri documentation for treetop-1.4.10&hellip;
Installing ri documentation for mail-2.3.0&hellip;
Installing ri documentation for actionmailer-3.1.1&hellip;
Installing ri documentation for rake-0.9.2.2&hellip;
Installing ri documentation for thor-0.14.6&hellip;
Installing ri documentation for rack-ssl-1.3.2&hellip;
Installing ri documentation for json-1.6.1&hellip;
Installing ri documentation for rdoc-3.11&hellip;
Installing ri documentation for railties-3.1.1&hellip;
Installing ri documentation for bundler-1.0.21&hellip;
Installing ri documentation for rails-3.1.1&hellip;
Installing RDoc documentation for multi_json-1.0.3&hellip;
Installing RDoc documentation for activesupport-3.1.1&hellip;
Installing RDoc documentation for builder-3.0.0&hellip;
Installing RDoc documentation for i18n-0.6.0&hellip;
Installing RDoc documentation for activemodel-3.1.1&hellip;
Installing RDoc documentation for rack-1.3.5&hellip;
Installing RDoc documentation for rack-cache-1.1&hellip;
Installing RDoc documentation for rack-test-0.6.1&hellip;
Installing RDoc documentation for rack-mount-0.8.3&hellip;
Installing RDoc documentation for hike-1.2.1&hellip;
Installing RDoc documentation for tilt-1.3.3&hellip;
Installing RDoc documentation for sprockets-2.0.3&hellip;
Installing RDoc documentation for erubis-2.7.0&hellip;
Installing RDoc documentation for actionpack-3.1.1&hellip;
Installing RDoc documentation for arel-2.2.1&hellip;
Installing RDoc documentation for tzinfo-0.3.30&hellip;
Installing RDoc documentation for activerecord-3.1.1&hellip;
Installing RDoc documentation for activeresource-3.1.1&hellip;
Installing RDoc documentation for mime-types-1.17.2&hellip;
Installing RDoc documentation for polyglot-0.3.3&hellip;
Installing RDoc documentation for treetop-1.4.10&hellip;
Installing RDoc documentation for mail-2.3.0&hellip;
Installing RDoc documentation for actionmailer-3.1.1&hellip;
Installing RDoc documentation for rake-0.9.2.2&hellip;
Installing RDoc documentation for thor-0.14.6&hellip;
Installing RDoc documentation for rack-ssl-1.3.2&hellip;
Installing RDoc documentation for json-1.6.1&hellip;
Installing RDoc documentation for rdoc-3.11&hellip;
Installing RDoc documentation for railties-3.1.1&hellip;
Installing RDoc documentation for bundler-1.0.21&hellip;
Installing RDoc documentation for rails-3.1.1&hellip;
jhjguxin@jhjguxin-virtual-machine:~/Downloads/rails$ rails -v
Rails 3.1.1</p>
]]></content>
  </entry>
  
</feed>
