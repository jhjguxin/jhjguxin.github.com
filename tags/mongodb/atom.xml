<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: MongoDB | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/mongodb/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过mongodump和mongorestore实现Mongodb备份和恢复 --by chenzhou123520]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/10/08/tong-guo-mongodumphe-mongorestoreshi-xian-mongodbbei-fen-he-hui-fu-by-chenzhou123520/"/>
    <updated>2012-10-08T22:29:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/10/08/tong-guo-mongodumphe-mongorestoreshi-xian-mongodbbei-fen-he-hui-fu-by-chenzhou123520</id>
    <content type="html"><![CDATA[<h2>通过mongodump和mongorestore实现Mongodb备份和恢复 &mdash;by chenzhou123520</h2>

<p>from <a href="http://chenzhou123520.iteye.com/blog/1630993"><a href="http://chenzhou123520.iteye.com/blog/1630993">http://chenzhou123520.iteye.com/blog/1630993</a></a></p>

<p>Mongodb自带了mongodump和mongorestore这两个工具来实现对数据的备份和恢复。</p>

<p>mongodump能够在Mongodb运行时进行备份，它的工作原理是对运行的Mongodb做查询，然后将所有查到的文档写入磁盘。但是存在的问题时使用mongodump产生的备份不一定是数据库的实时快照，如果我们在备份时对数据库进行了写入操作，则备份出来的文件可能不完全和Mongodb实时数据相等。另外在备份时可能会对其它客户端性能产生不利的影响。</p>

<p>mongodump用法如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongodump --help
Export MongoDB data to BSON files.

options:
  --help                   produce help message
  -v [ --verbose ]         be more verbose (include multiple times for more
                           verbosity e.g. -vvvvv)
  --version                print the program&#039;s version and exit
  -h [ --host ] arg        mongo host to connect to ( &lt;set name&gt;/s1,s2 for
                           sets)
  --port arg               server port. Can also use --host hostname:port
  --ipv6                   enable IPv6 support (disabled by default)
  -u [ --username ] arg    username
  -p [ --password ] arg    password
  --dbpath arg             directly access mongod database files in the given
                           path, instead of connecting to a mongod  server -
                           needs to lock the data directory, so cannot be used
                           if a mongod is currently accessing the same path
  --directoryperdb         if dbpath specified, each db is in a separate
                           directory
  --journal                enable journaling
  -d [ --db ] arg          database to use
  -c [ --collection ] arg  collection to use (some commands)
  -o [ --out ] arg (=dump) output directory or &quot;-&quot; for stdout
  -q [ --query ] arg       json query
  --oplog                  Use oplog for point-in-time snapshotting
  --repair                 try to recover a crashed database
  --forceTableScan         force a table scan (do not use $snapshot)</pre>


<p>参数说明：</p>

<p>-h:指明数据库宿主机的IP</p>

<p>-u:指明数据库的用户名</p>

<p>-p:指明数据库的密码</p>

<p>-d:指明数据库的名字</p>

<p>-c:指明collection的名字</p>

<p>-o:指明到要导出的文件名</p>

<p>-q:指明导出数据的过滤条件</p>

<p>具体使用示例如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongodump -d test -o data/backup
connected to: 127.0.0.1
DATABASE: test   to     data/backup/test
    test.system.indexes to data/backup/test/system.indexes.bson
         9 objects
    test.users to data/backup/test/users.bson
         3 objects
    test.games to data/backup/test/games.bson
         1 objects
    test.blog.post to data/backup/test/blog.post.bson
         1 objects
    test.lists to data/backup/test/lists.bson
         1 objects
    test.math to data/backup/test/math.bson
         1 objects
    test.map to data/backup/test/map.bson
         8 objects
    test.my_collection to data/backup/test/my_collection.bson
         0 objects
    test.foo to data/backup/test/foo.bson
         6 objects
    test.system.users to data/backup/test/system.users.bson
         1 objects</pre>


<p>mongorestore是Mongodb从备份中恢复数据的工具，它主要用来获取mongodump的输出结果，并将备份的数据插入到运行的Mongodb中。</p>

<p>mongorestore命令使用方法如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongorestore --help
usage: ./bin/mongorestore [options] [directory or filename to restore from]
options:
  --help                  produce help message
  -v [ --verbose ]        be more verbose (include multiple times for more
                          verbosity e.g. -vvvvv)
  --version               print the program&#039;s version and exit
  -h [ --host ] arg       mongo host to connect to ( &lt;set name&gt;/s1,s2 for sets)
  --port arg              server port. Can also use --host hostname:port
  --ipv6                  enable IPv6 support (disabled by default)
  -u [ --username ] arg   username
  -p [ --password ] arg   password
  --dbpath arg            directly access mongod database files in the given
                          path, instead of connecting to a mongod  server -
                          needs to lock the data directory, so cannot be used
                          if a mongod is currently accessing the same path
  --directoryperdb        if dbpath specified, each db is in a separate
                          directory
  --journal               enable journaling
  -d [ --db ] arg         database to use
  -c [ --collection ] arg collection to use (some commands)
  --objcheck              validate object before inserting
  --filter arg            filter to apply before inserting
  --drop                  drop each collection before import
  --oplogReplay           replay oplog for point-in-time restore
  --keepIndexVersion      don&#039;t upgrade indexes to newest version</pre>


<p>参数说明：</p>

<p>-h:指明数据库宿主机的IP</p>

<p>-u:指明数据库的用户名</p>

<p>-p:指明数据库的密码</p>

<p>-d:指明数据库的名字</p>

<p>-c:指明collection的名字</p>

<p>-o:指明到要备份的文件名</p>

<p>-q:指明备份数据的过滤条件</p>

<p>&nbsp;</p>

<p>具体使用示例如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongorestore -d test --drop data/backup/test/
connected to: 127.0.0.1
Tue Aug 14 01:18:17 data/backup/test/games.bson
Tue Aug 14 01:18:17      going into namespace [test.games]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/foo.bson
Tue Aug 14 01:18:17      going into namespace [test.foo]
Tue Aug 14 01:18:17      dropping
6 objects found
Tue Aug 14 01:18:17 data/backup/test/blog.post.bson
Tue Aug 14 01:18:17      going into namespace [test.blog.post]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/lists.bson
Tue Aug 14 01:18:17      going into namespace [test.lists]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/map.bson
Tue Aug 14 01:18:17      going into namespace [test.map]
Tue Aug 14 01:18:17      dropping
8 objects found
Tue Aug 14 01:18:17 data/backup/test/math.bson
Tue Aug 14 01:18:17      going into namespace [test.math]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/system.users.bson
Tue Aug 14 01:18:17      going into namespace [test.system.users]
1 objects found
Tue Aug 14 01:18:17 data/backup/test/my_collection.bson
Tue Aug 14 01:18:17      going into namespace [test.my_collection]
Tue Aug 14 01:18:17      dropping
Tue Aug 14 01:18:17 file data/backup/test/my_collection.bson empty, skipping
Tue Aug 14 01:18:17 data/backup/test/users.bson
Tue Aug 14 01:18:17      going into namespace [test.users]
Tue Aug 14 01:18:17      dropping
3 objects found
Tue Aug 14 01:18:17 data/backup/test/system.indexes.bson
Tue Aug 14 01:18:17      going into namespace [test.system.indexes]
Tue Aug 14 01:18:17      dropping
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.users&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.games&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.blog.post&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.lists&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.math&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.map&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { gps: &quot;2d&quot; }, ns: &quot;test.map&quot;, name: &quot;gps_&quot;, min: -180.0, max: 181.0 }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.foo&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.system.users&quot;, name: &quot;_id_&quot; }
9 objects found</pre>


<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple CRUD with MongoDB ]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/07/27/simple-crud-with-mongodb/"/>
    <updated>2012-07-27T12:34:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/07/27/simple-crud-with-mongodb</id>
    <content type="html"><![CDATA[<h2>Simple CRUD with MongoDB</h2>

<p>When I meet a new technology, I like to experience it &ldquo;just as it comes&rdquo;. I&rsquo;m happy at the command line and I like to type actual commands and see man pages before I use any wrappers or helper tools. So when I met <a href="http://www.mongodb.org/">MongoDB</a> for the first time, I did exactly that. This post shows those first steps of creating a database, and inserting, reading, deleting and updating data.</p>

<p><em>Before we begin, you should install mongo. This is painless and for me, on ubuntu, <code>sudo aptitude install mongodb</code> did the trick.</em></p>

<h3>Some Terminology</h3>


<p>Here are some translations from the RDBMS equivalent wording:</p>

<ul>
    <li>"database" is still "database"</li>
    <li>"table" becomes "collection"</li>
    <li>"row" becomes "record"</li>
    <li>try to forget the word "column", we don't have those</li>
</ul>


<h3>Let's Begin</h3>


<p><strong>Creating a Database</strong></p>

<p>You don&rsquo;t really create a database with mongo, you just kind of start using it. Once you put something in there, it exists. I&rsquo;m going to name my new database <code>pets</code>.</p>

<pre>use pets</pre>


<p><strong>Adding Data</strong></p>

<p>To do anything in mongo, you start your command with <code>db</code> which refers to the database you&rsquo;re using. The different parts of the command are separated by dots. To insert data you use a command like <code>db.[collection].save()</code> and feed in the data to save. The format of the data is JSON-esque &ndash; I read JSON but I don&rsquo;t really write it, however I found it became familiar pretty quickly. To insert some data, you can do:</p>

<pre>&gt; db.animals.save({'animal':'cat', 'name':'fluffy', 'type':'long-haired', 'owner':'Anna'});
&gt; db.animals.save({'animal':'dog', 'type':'spaniel', 'name':'toffee', 'colour':'toffee', 'owner':'Ben'});
&gt; db.animals.save({'owner':'Ben', 'animal':'cat', 'name':'ginger', 'collar':true});</pre>


<p><strong>Fetching Data</strong></p>

<p>Did anything happen? We can check, using <code>db.[collection].find()</code> - this will give us everything in the collection, a bit like <code>select * from [table]</code> does in SQL.</p>

<pre>&gt; db.animals.find();
{ "_id" : ObjectId("4ebb8fd68f7aaffc5d287383"), "animal" : "cat", "name" : "fluffy", "type" : "long-haired", "owner" : "Anna" }
{ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "type" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" }
{ "_id" : ObjectId("4ebb90768f7aaffc5d287385"), "owner" : "Ben", "animal" : "cat", "name" : "ginger", "collar" : true }</pre>


<p>We definitely have data! We can also filter this down, the equivalent of adding a &ldquo;where&rdquo; clause, for example, let&rsquo;s only see cats:</p>

<pre>&gt; db.animals.find({'animal':'cat'});
{ "_id" : ObjectId("4ebb8fd68f7aaffc5d287383"), "animal" : "cat", "name" : "fluffy", "type" : "long-haired", "owner" : "Anna" }
{ "_id" : ObjectId("4ebb90768f7aaffc5d287385"), "owner" : "Ben", "animal" : "cat", "name" : "ginger", "collar" : true }</pre>


<p>You can add multiple constraints here, how about cats belonging to Ben?</p>

<pre>&gt; db.animals.find({'animal':'cat', 'owner':'Ben'});
{ "_id" : ObjectId("4ebb90768f7aaffc5d287385"), "owner" : "Ben", "animal" : "cat", "name" : "ginger", "collar" : true }</pre>


<p>If any of the records don&rsquo;t have the field you&rsquo;re searching on, they won&rsquo;t appear in the results. We&rsquo;re not tied to a rigid structure of columns so you can just throw in whichever data seems useful at the time, and search on whatever is there. We can also search on whether we have the field at all, for example, animals where we know what colour they are:</p>

<pre>&gt; db.animals.find({colour: {$exists: true}});
{ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "type" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" }</pre>


<p><strong>Updating Data</strong></p>

<p>This confused me for a long time, as mongo does have an <code>update()</code> function, which you can use to update one or many records in a particular way. What I found I really wanted though was to use the <code>save()</code> method again, because if the record has an identifier that exists, mongo will update it, otherwise it will insert it as we saw above. So we can just grab a record and change it, then save it:</p>

<pre>&gt; db.animals.find({'animal':'dog'});
{ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "type" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" }
db.animals.save({ "_id" : ObjectId("4ebb90048f7aaffc5d287384"), "animal" : "dog", "breed" : "spaniel", "name" : "toffee", "colour" : "toffee", "owner" : "Ben" });</pre>


<p>I realised that calling a spaniel a &ldquo;type&rdquo; of dog would be better expressed as being a &ldquo;breed&rdquo;, so I simply changed that record and mongo updated it for me. The <code>update() </code>statement is better for working on sets of records &ndash; for example if we decide Ben should be using his Sunday name:</p>

<pre>&gt; db.animals.update({'owner':'Ben'}, {$set: {'owner':'Benjamin'}}, false, true);</pre>


<p>There&rsquo;s a lot going on here, so let&rsquo;s look at the pieces step-by-step. The <a href="http://www.mongodb.org/display/DOCS/Updating">documentation</a> describes the update function as:</p>

<pre>db.collection.update( criteria, objNew, upsert, multi )</pre>


<p>The first part, the <em>criteria</em> is the same as we would use for the <code>find()</code> method. The next argument is what we&rsquo;re changing. I&rsquo;m just setting one field to a given value, so I used the <code>$set</code> modifier (modifiers are an art in themselves, this post is rambling on already so I&rsquo;ll write about those another day if you&rsquo;re interested). The next argument is the <em>upsert</em>, which is whether to insert a new record if we didn&rsquo;t find any matches &ndash; I want to update existing records, not insert anything, so I set this to false. Finally the <em>multi</em> flag tells mongo to update ALL the records it can find that match the<em>criteria</em>, if this is false it will stop after one (lazy thing!).</p>

<p><strong>Deleting Data</strong></p>

<p>If you&rsquo;ve come this far then I&rsquo;m impressed, and deleting is the easy part so we&rsquo;re almost there! Exactly like the <code>find()</code>and <code>update()</code> commands, we just supply a criteria to the <code>remove()</code> command. This could be either one of the fields, as we used already, or the object ID itself, like this:</p>

<pre>&gt; db.animals.remove({_id: ObjectId("4ebb90768f7aaffc5d287385")});</pre>


<p>As with all things mongo, you won&rsquo;t get any feedback about whether it worked, since most of the time we&rsquo;re using this on systems so fast there isn&rsquo;t time for niceties, but if you try to <code>find()</code> this record now, you won&rsquo;t be able to.</p>

<h3>MongoDB</h3>


<p>There&rsquo;s so much that&rsquo;s exciting about mongo, the sheer size and speed of this data store, the support for map reduce, the sharding support &hellip; I could go on. However you still need to be able to have a quick word with your database and check what data it has, maybe tweak something, and I hope that these mongo examples will serve as a quick reference for anyone who needs them, including me of course! I like databases, APIs and command line, so working with mongo is kind of magical for me, are you working with it? I&rsquo;d love to hear how others are getting on and what other tips I need to know, so leave a comment and share, please!</p>
]]></content>
  </entry>
  
</feed>
