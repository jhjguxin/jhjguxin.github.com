<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: git | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/git/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git Submodule 的認識與正確使用！]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/04/19/git-submodule-de-ren-shi-yu-zheng-que-shi-yong-%21/"/>
    <updated>2012-04-19T18:36:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/04/19/git-submodule-de-ren-shi-yu-zheng-que-shi-yong-!</id>
    <content type="html"><![CDATA[<h2>Git Submodule 的認識與正確使用！</h2>

<div>

已經用了 git submodule 好一陣子了，今天看到了 <a href="http://johnleach.co.uk/words/323/git-submodules-in-n-easy-steps" target="_blank">Git submodules in N easy steps</a> 才覺得比較搞懂一些之前碰到的問題。趁機來整理、釐清之前常碰到的小問題吧~~
<h2>什麼是 Git Submodule</h2>
剛剛從 SVN 或 CVS 等 Client-Server 架構的版本控制系統切換到 Git 時，可能會有這個想法：「<em>能不能只取得一部分的程式碼、而非整個 Repository？</em>」因為在 SVN/CVS 可以針對 Repository 中的某個目錄 checkout，不需要是整個 Repository、甚至還可以用 SVN Externals 達到不同角色 （視覺、前端、後端）checkout 不同 File Layout（之前在無名小站時，超喜歡 svn:externals 的概念）。

但 Git 是分散式的版本控制系統，每個人都是一個完整的 Repository，沒辦法像 SVN/CVS 指定到某個資料夾。例如你要取得 YUI 3 的 Git，只能 git clone https://github.com/yui/yui3.git、而不能指定到底下的目錄。

SVN/CVS 你可以用目錄區隔大小專案、都在同一個大的 Repository。而 Git 的想法必須修正為<em>每個小專案就是一個 Repository</em>、或<em>不同團隊開發是一個 Repository</em>、甚至<em>功能獨立也可以是一個 Repository</em>。若說 SVN 是包容百川、<em>Git 就是各自獨立的小河流</em>。

但<em>軟體開發團隊不太容易如此單純</em>，有時需要給外包開發、有時需要分工、有時需要用 Open Source，<em>光用以上的切分方式是沒辦法達成所有需求的</em>、還是得將各自獨立的小河流連接起來。例如我先前在 WebRebuild 與 COSCUP 分享的 JavaScript Platform，為了分享把原始碼放了一份到 Github : <a href="http://github.com/josephj/javascript-platform-yui" target="_blank">http://github.com/josephj/javascript-platform-yui</a>，但我的工作及部落格都有使用的需求，該怎麼做呢？如果每次都得 git clone 再 copy 檔案到兩個地方、這樣手工做真的是個很遜的解決方案。好在有 Git Submodule 可以幫忙解決!

簡單來說，Git Submodule 可以<em>輕易地將別人的 git 掛入到你目前 git 的任何位置</em>。
<h2>新增一個 Git Submodule</h2>
例如我有目前本機有一個 josephj.git、在 /home/josephj/www 下，而我需要將 javascript platform 放到 /home/josephj/www/static/ 可以用以下幾行快速達成。
<ul>
    <li>切換到我的 repository 目錄：
<code>$ cd /home/josephj/www</code></li>
    <li>使用 <em>git submodule add [repository 位置] [欲放置的位置]</em> 增加一個新的 submodule：
<code>$ git submodule add git@github.com:josephj/javascript-platform-yui.git static/platform</code>需要注意 [欲放置的位置] 不能以 / 結尾（會造成修改不生效）、也不能已經是現有的路徑喔（不能順利 Clone）。</li>
    <li>按下去就會看到以下結果：
<pre><code>$ git submodule add git://github.com/josephj/javascript-platform-yui.git static/platform Initialized empty Git repository in /home/josephj/www/static/platform/.git/ remote: Counting objects: 31, done. remote: Compressing objects: 100% (31/31), done. remote: Total 31 (delta 14), reused 0 (delta 0) Receiving objects: 100% (31/31), 6.06 KiB, done. Resolving deltas: 100% (14/14), done. </code></pre>
這時在 /home/josephj/www/ 會產生一個 <em>.gitmodules</em> 記錄你的 Submodule 資訊。該 git 的<em>相關檔案也都會在此時被拉下來</em>。</li>
    <li>用 git status 看一下：
<pre><code>$ git status # On branch master # Changes to be committed: # (use "git reset HEAD ..." to unstage) # # new file: .gitmodules # new file: static/platform # </code></pre>
會發現它只列出 submodule 目錄而非所有底下檔案，parent git 實際上也只會記錄 submodule 的 commit id 以供未來做比對用。這裡一個很重要的點是大家必須理解的：<em>parent git 與 submodule git 的關連性（被掛入的目錄、repository 位置）記錄在 .gitmodules 中，而版本控制則是靠 parent git 記住 submodule git 的 commit id。</em></li>
    <li>先 commit 一下：
<pre><code>$ git add .gitmodules static/platform git commit -m "Add submodule into version control";</code></pre>
</li>
    <li>但是你還必須做 init 的動作，你的 .git/config 才會有對應 submodule 的資訊。
<pre><code>$ git submodule init </code></pre>
</li>
</ul>
<h2>更新已安裝的 Submodule</h2>
當初我第一次新增一個 Submodule 後，以為未來它都會像 SVN External 一樣、在我 git pull 的時候自動更新。但實際情況是你<em>必須手動處理才能更新 Submodule</em>。
<ol>
    <li>進入該目錄 Subomdule 目錄： <code>$ cd static/platform</code></li>
    <li>向來源的 master branch 做 git pull 的動作（這裡的 git pull 不會更新你 parent git 的檔案） <code>$ git pull origin master</code></li>
    <li>若 submodule 有更新的檔案，你可以到 parent git 觀看一下情況：
<pre><code>$ cd ../../ $ git status # Not currently on any branch. # Changed but not updated: # (use "git add ..." to update what will be committed) # (use "git checkout -- ..." to discard changes in working directory) # # modified: static/platform (new commits) # no changes added to commit (use "git add" and/or "git commit -a")</code></pre>
與第一次 git submodule add 相同，submodule 更新的檔案並不會在 git status 中要求你 commit 喔！</li>
    <li>我們前面提到，submodule 的版本控制在於 submodule git 的 commit id，上面看到 static/platform 有 new commit。表示你既然把新的內容 pull 回來、應該要更新 submodule 的 commit id 到你的 git 中：
<pre><code>$ git add static/platform $ git commit -m "static/platform submodule updated"</code></pre>
如此一來，新的 submodule commit id 就被你的 repositiory 給記錄下來囉！</li>
</ol>
<h2>團隊使用 Submodule</h2>
在一個多人的軟體開發團隊中，通常還是會有 Centralized Git Repositiory，像我們公司就採用了 gitosis 的解決方案。而像上述更新 Submodule 的情形，通常只有一兩個負責架構的人來做（大多是一開始把東西掛進來的人）、<em>其他人只是單純使用者的角色，並不需要負責更新的工作</em>。
<ol>
    <li>像上面我增加了一個 Submodule，對於團隊其他人來說，他們在下一次的 git pull 會看到以下的狀況：
<pre><code>$ git status # On branch develop # Changed but not updated: # (use "git add ..." to update what will be committed) # (use "git checkout -- ..." to discard changes in working directory) # # modified: static/platform (new commits) # no changes added to commit (use "git add" and/or "git commit -a")</code></pre>
這表示其他人也會拿到 .gitmodules 的設定，但他必須使用 git submodule init 將新的 Submodule 註冊到自己的 .git/config、未來才能使用。
<pre><code>$ git submodule init Submodule 'static/platform' (http://github.com/josephj/javascript-platform-yui.git) registered for path 'static/platform'</code></pre>
</li>
    <li>接著其他人使用 git submodule update 把該 Submodule 的內容全部拉下來！
<pre><code>$ git submodule update Cloning into static/platform... remote: Counting objects: 34, done. remote: Compressing objects: 100% (34/34), done. remote: Total 34 (delta 15), reused 0 (delta 0) Unpacking objects: 100% (34/34), done. Submodule path 'static/platform': checked out '117c5b3c5a195deac2e53aa118b78ef3f01ae371' </code></pre>
</li>
</ol>
<h3>使用時機</h3>
簡單整理一下：
<ul>
    <li><em>git submodule init</em>: 在 .gitmodules 第一次被其他人建立或有新增內容的時候，用 git submodule init <em>更新你的 .git/config、設定目錄與增加 submodule 的 remote URL</em>。</li>
    <li><em>git submodule update</em>: 在 init 完有新的 submodule commit id 後就可以做了，會把所有相關檔案拉下來。若其他人更新 submodule 造成你拿到新的 commit id 時，你可以直接用 git submodule update 做更新即可、不需要做任何 add 或 commit 的動作！</li>
</ul>
可以想見，其他成員使用 git submodule update 的情況會遠比 git submodule init 多很多。
<h2>修改 Submodule 的內容</h2>
有時自己也是 Submodule 的 Owner，碰到要改 Code 時，要我切回原本的此 Git 開發位置有點麻煩... 不如就<em>直接改被當成 Submodule 掛進來的原始碼吧</em>！
<ol>
    <li>到 submodule 目錄去做些修改：
<pre><code>$ cd static/platform $ vim README # 做些修改 </code></pre>
</li>
    <li>接著就是常見的 git add , git commit, git push
<pre><code>$ git add README $ git commit -m "Add comments" $ git push </code></pre>
</li>
    <li>push 完回到根目錄git status 看一下！會看到
<pre><code>$ git status # On branch master # Changed but not updated: # (use "git add ..." to update what will be committed) # (use "git checkout -- ..." to discard changes in working directory) # # modified: static/platform # no changes added to commit (use "git add" and/or "git commit -a")</code></pre>
</li>
    <li>這裡也需要再做一次 Commit 喔！
<pre><code>$ git add static/platform $ git commit -m 'Submodule updated' $ git push </code></pre>
</li>
</ol>
這裡有一點非常需要注意，因為 Submodule 的更新只記錄 commit id，所以<em>你必須先在 submodule 內做 commit、push 後、再到 parent git 做 push</em>，不然會出現版本錯亂的問題，別人跟你 submodule 的內容將會不一致。
<h2>如何移除 Submodule</h2>
這點也<em>非常地不直覺</em>，不是想像中 git submodule remove [欲移除的目錄] 這麼簡單...
<ol>
    <li>先砍掉目錄：
<pre><code>$ git rm --cached [欲移除的目錄] $ rm -rf [欲移除的目錄]</code></pre>
</li>
    <li>再修改 .gitmodules
<pre><code>$ vim .gitmodules</code></pre>
將相關內容移除</li>
    <li>再修改 .git/config
<pre><code>$ vim .git/config</code></pre>
將相關內容移除</li>
    <li>最後再 commit，改變整個 Repository。
<pre><code>$ git add .gitmodules $ git commit -m "Remove a submodule" </code></pre>
</li>
    <li>安全起見再做個 sync：
<pre><code>$ git submodule sync</code></pre>
</li>
</ol>
<h2>結語</h2>
我們公司目前主要將 Submodule 運用在<em>與外包公司的合作</em>上，因為彼此 <span>Engine</span>ering 團隊負責的專案項目雖不同，但<em>有部分的開發會需要在我們的結構下開目錄，我們也不希望他們改到我們的程式</em>，此時 Git Submodule 提供了非常好的分工效果：把他們開發好的東西掛進來、更新即可。另有一點很重要的是， <em>Git Submodule 內還可以將其他的 Submodule 給掛進來，形成一個巢狀式的結構</em>，彈性非常地大。我們只要抓他們的大 Git 當 Submodule，下面怎麼掛就由外包公司決定。

整篇文章看下來，會發現 <em>git submodule 的操作有許多需要注意的地方</em>，像是更新、修改、刪除都要遵循一定的程序，不然你 PUSH 回 Central Repository 時，別人 PULL 下來的 Submodule 可能並不會更新，就會產生混亂了 Orz...

暇不掩瑜，Git Submodule 還是一個強大且團隊開發上非常重要的功能，就盡量使用前先搞懂、小心使用囉 ;)

</div>


<div>

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Heroku上部署（托管）你的Rails应用]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/02/01/zai-herokushang-bu-shu-%28tuo-guan-%29ni-de-railsying-yong/"/>
    <updated>2012-02-01T14:56:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/02/01/zai-herokushang-bu-shu-(tuo-guan-)ni-de-railsying-yong</id>
    <content type="html"><![CDATA[<h2>在Heroku上部署（托管）你的Rails应用</h2>

<p>Heroku 是Ruby on Rails的托管提供商，提供运行Ruby on Rails应用的整套环境。和传统的托管商相比，他并不仅仅是提供一个服务器给你，而且提供有趣的工具和接口来帮助你更加容易的工作，使你从繁重的安装、配置、管理和保证服务器安全中解脱出来。
Heroku是用git来管理项目的，另外还要用到ssh来登录，这两个工具在Linux环境下的安装方法如下：
git安装</p>

<p>ssh安装</p>

<p>当然要使用Heroku，你就要到其 官方网 注册一个账号；
以上工作完成后，并可进行如下操作，将你的Rails应用托管到Heroku：</p>

<p>以来内容转自： <a href="http://hi.baidu.com/haifreeidea/blog/item/e09279c53b7d06c338db49c9.html">http://hi.baidu.com/haifreeidea/blog/item/e09279c53b7d06c338db49c9.html</a></p>

<p>①、＄ gem install heroku</p>

<p>②、先要生成一个公钥，使用命令:
$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/user/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/user/.ssh/id_rsa.
Your public key has been saved in /home/user/.ssh/id_rsa.pub.
The key fingerprint is:
a6:88:0a:bb:74:70:c6:e0:d5:49:65:e3:04:d5:6c:3e <a href="&#109;&#97;&#105;&#x6c;&#x74;&#111;&#58;&#117;&#115;&#x65;&#114;&#64;&#119;&#111;&#114;&#x6b;&#115;&#x74;&#97;&#x74;&#105;&#111;&#x6e;&#46;&#108;&#x6f;&#99;&#x61;&#108;">&#117;&#x73;&#101;&#114;&#x40;&#x77;&#x6f;&#114;&#107;&#x73;&#116;&#x61;&#x74;&#105;&#x6f;&#x6e;&#46;&#108;&#111;&#x63;&#x61;&#x6c;</a></p>

<p>把公钥加入到Heroku
$ heroku keys:add
Uploading ssh public key /home/user/.ssh/id_rsa.pub</p>

<p>如果想删除公钥，可以用命令：
$ heroku keys:remove <a href="&#109;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#117;&#x73;&#x65;&#x72;&#x40;&#x77;&#x6f;&#x72;&#x6b;&#x73;&#x74;&#97;&#x74;&#105;&#111;&#x6e;&#x2e;&#x6c;&#111;&#x63;&#x61;&#x6c;">&#117;&#115;&#x65;&#x72;&#64;&#119;&#x6f;&#114;&#107;&#x73;&#x74;&#x61;&#x74;&#x69;&#x6f;&#110;&#46;&#108;&#x6f;&#x63;&#97;&#108;</a></p>

<p>查看公钥，用命令：
$ heroku keys</p>

<p>③、现在就可以创建一个项目了(预先要安装好rails)。
$ rails myapp            (如果是已有的应用，这一步可以跳过)</p>

<p>$ cd myapp
$ git init
$ git add .
$ git commit -m &ldquo;my first commit&rdquo;
Created initial commit 5df2d09: my first commit
44 files changed, 8393 insertions(+), 0 deletions(&ndash;)
create mode 100644 README
create mode 100644 Rakefile
create mode 100644 app/controllers/application.rb
&hellip;</p>

<h2>In heroku how to control the ruby version</h2>


<p>Usage: heroku stack</p>

<p>show the list of available stacks</p>

<p>&mdash;all  # include deprecated stacks</p>

<p>Additional commands, type &ldquo;heroku help COMMAND&rdquo; for more details:</p>

<p>stack:migrate STACK  # prepare migration of this app to a new stack</p>

<p>use heroku create &mdash;stack to creat the stack</p>

<p>heroku create &mdash;stack bamboo-ree-1.8.7</p>

<p>&nbsp;</p>

<p>④、把这个项目创建到Heroku上。
＄ heroku create myapp
Enter your Heroku credentials.
Email: <a href="&#x6d;&#97;&#x69;&#108;&#116;&#x6f;&#x3a;&#x75;&#x73;&#101;&#114;&#64;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#101;&#46;&#99;&#x6f;&#x6d;">&#x75;&#x73;&#x65;&#x72;&#64;&#101;&#120;&#97;&#x6d;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;</a>
Password:
Uploading ssh public key /home/user/.ssh/id_rsa.pub
（当第一次运行heroku命令时，要求输入Email，password，这个是你在Heroku注册的Email和密码，以便创建~/.heroku/credentials文件，这个文件记录了你输入的用户名和密码，以后就不再需要输入了。）</p>

<p>⑤、接下来运行：
$ git push heroku master
Counting objects: 65, done.
Compressing objects: 100% (58/58), done.
Writing objects: 100% (65/65), 80.54 KiB, done.
Total 65 (delta 14), reused 0 (delta 0)</p>

<p>&mdash;&mdash;&ndash;&gt; Heroku receiving push
&mdash;&mdash;&ndash;&gt; Rails app detected
Compiled slug size is 0.1MB
&mdash;&mdash;&ndash;&gt; Launching&hellip;&hellip;. done
App deployed to Heroku</p>

<p>To git@heroku.com:vivid-mountain-91.git
* [new branch]      master &ndash;&gt; master</p>

<p>⑥、再做一个数据库迁移：
$ heroku rake db:migrate</p>

<p>现在就可以像平常使用Rails一样编写程序了。</p>

<p>更新代码可以用：
$ git push heroku</p>

<p>The rake db:reset task is not supported. Heroku apps do not have permission to drop and create databases. Use the heroku pg:reset command instead.</p>

<p>将本地数据更新到Heroku网站上:
$ heroku db:push
（这个命令会使用taps，如果没有安装，请先安装。）</p>

<p>要打开网页浏览，就可以用
$ heroku open</p>

<p><strong>Permission denied (publickey) when deploying heroku code. fatal: The remote end hung up unexpectedly</strong></p>

<p>jhjguxin@jhjguxin-virtual-machine:~/heroku_enki$ git push heroku master
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
jhjguxin@jhjguxin-virtual-machine:~/heroku_enki$ heroku keys:add ~/.ssh/id_rsa.pub
Uploading ssh public key /home/jhjguxin/.ssh/id_rsa.pub
jhjguxin@jhjguxin-virtual-machine:~/heroku_enki$ git push heroku masterCounting objects: 460, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (418/418), done.
Writing objects: 100% (460/460), 447.32 KiB | 141 KiB/s, done.
Total 460 (delta 55), reused 0 (delta 0)</p>

<p>about db</p>

<p>To ease deployment of typical Rails applications, Heroku automatically generates a new database.yml file on deployment. This auto-generated database.yml file configures your RACK_ENV environment to your selected postgres db. This enables you to simply push a Rails app up to Heroku and have it automatically connect to your database.</p>

<p>I had the same problem, and although I did not solve the problem, I found a workaround.</p>

<p>Instead of using:</p>

<p>heroku run rake db:migrate</p>

<p>You can use:</p>

<p>heroku run:detached rake db:migrate</p>

<p>This runs the command in the background, writing the output to the log. When it is finished you can view the log for the result.</p>

<p>自己生成的git地址不好看，最好在<strong>本地</strong>改</p>

<div id="">
<ol start="1">
    <li>heroku rename newname</li>
</ol>
</div>


<p>帐号下改完要</p>

<ol start="1">
    <li>$ git remote rm heroku</li>
    <li>$ git remote add heroku git@heroku.com:newname.git</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails 3.1 Release Notes]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/12/30/ruby-on-rails-3-dot-1-release-notes/"/>
    <updated>2011-12-30T19:12:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/12/30/ruby-on-rails-3-dot-1-release-notes</id>
    <content type="html"><![CDATA[<h2>Ruby on Rails 3.1 Release Notes</h2>

<h2>Ruby on Rails 3.1 Release Notes</h2>


<p>Highlights in Rails 3.1:</p>

<p>Rails<span style="font-family: DejaVu Sans;">中的亮点：</span></p>

<ul>
    <li>Streaming <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">流</span></span></li>
    <li>Reversible Migrations <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">可逆（数据）迁移</span></span></li>
    <li>Assets Pipeline Assets<span style="font-family: DejaVu Sans;">管道</span></li>
    <li>jQuery as the default JavaScript library <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">以</span></span>jQuery<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">作为默认的 </span></span>JavaScript library</li>
</ul>


<p>This release notes cover the major changes, but don’t include every little bug fix and change. If you want to see everything, check out the <a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a> in the main Rails repository on GitHub.</p>

<p><span style="font-family: DejaVu Sans;">这次发行</span>notes<span style="font-family: DejaVu Sans;">涵盖了主要的</span>changes<span style="font-family: DejaVu Sans;">，但是没有包含每个很</span>little<span style="font-family: DejaVu Sans;">的</span>bug<span style="font-family: DejaVu Sans;">修复和</span>chage<span style="font-family: DejaVu Sans;">。如果你希望看到所有的事情，检查</span>Rails <span style="font-family: DejaVu Sans;">的</span>GitHub<span style="font-family: DejaVu Sans;">主代码仓库中的</span><a href="https://github.com/rails/rails/commits/master"><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">commits</span></span></a><span style="font-family: DejaVu Sans;">。</span></p>

<h3><a name="upgrading-to-rails-3-1"></a>1 Upgrading to Rails 3.1<span style="font-family: WenQuanYi Micro Hei;">升级到</span>Rails 3.1</h3>


<p>If you’re upgrading an existing application, it’s a great idea to have good test coverage before going in. You should also first upgrade to Rails 3 in case you haven’t and make sure your application still runs as expected before attempting to update to Rails 3.1. Then take heed of the following changes:</p>

<p><span style="font-family: DejaVu Sans;">如果你打算升级一个存在的应用程序，在开始进入升级的时候有一个很好的测试覆盖是一个好主意。你还应该首先升级到</span>Rails 3<span style="font-family: DejaVu Sans;">以防止你并没有确保你的应用程序在企图升级到</span>Rails 3.1<span style="font-family: DejaVu Sans;">之前能够预计到升级后仍然能够运行。然后留意随后（介绍）的</span>changes<span style="font-family: DejaVu Sans;">：</span></p>

<h4><a name="rails-3-1-requires-at-least-ruby-1-8-7"></a> 1.1 Rails 3.1 requires at least Ruby 1.8.7</h4>


<p>Rails 3.1 requires Ruby 1.8.7 or higher. Support for all of the previous Ruby versions has been dropped officially and you should upgrade as early as possible. Rails 3.1 is also compatible with Ruby 1.9.2.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">需要至少</span>Ruby 1.8.7<span style="font-family: DejaVu Sans;">或者更高。曾经支持的所有的早先的</span>Ruby<span style="font-family: DejaVu Sans;">版本被正式取消，你需要尽快升级。</span>Rails 3.1<span style="font-family: DejaVu Sans;">同时也与</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">兼容。</span></p>

<p>Note that Ruby 1.8.7 p248 and p249 have marshaling bugs that crash Rails. Ruby Enterprise Edition have these fixed since release 1.8.7-2010.02 though. On the 1.9 front, Ruby 1.9.1 is not usable because it outright segfaults, so if you want to use 1.9.x jump on 1.9.2 for smooth sailing.</p>

<p><span style="font-family: DejaVu Sans;">注意</span>Ruby 1.8.7 p248<span style="font-family: DejaVu Sans;">和</span>p249<span style="font-family: DejaVu Sans;">有</span>marshaling bugs<span style="font-family: DejaVu Sans;">其与</span>Rails<span style="font-family: DejaVu Sans;">冲突。</span>Ruby<span style="font-family: DejaVu Sans;">企业版自</span>1.8.7-2010.02 <span style="font-family: DejaVu Sans;">发行版已经修复了这些</span>bug<span style="font-family: DejaVu Sans;">。在以</span>1.9<span style="font-family: DejaVu Sans;">开头的</span>ruby<span style="font-family: DejaVu Sans;">，</span>Ruby 1.9.1<span style="font-family: DejaVu Sans;">是不可用的因为</span>it outright segfaults<span style="font-family: DejaVu Sans;">，因此如果你想使用</span>1.9.x<span style="font-family: DejaVu Sans;">可以平稳的跳至</span>1.9.2</p>

<h3><a name="creating-a-rails-3-1-application"></a>2 Creating a Rails 3.1 application</h3>


<h1>You should have the &lsquo;rails&rsquo; rubygem installed</h1>

<p>$ rails new myapp</p>

<p>$ cd myapp</p>

<h4><a name="vendoring-gems"></a>2.1 Vendoring Gems</h4>


<p>Rails now uses a <tt>Gemfile</tt> in the application root to determine the gems you require for your application to start. This <tt>Gemfile</tt> is processed by the <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/carlhuda/bundler">Bundler</a></span></span> gem, which then installs all your dependencies. It can even install all the dependencies locally to your application so that it doesn’t depend on the system gems.</p>

<p>Rails<span style="font-family: DejaVu Sans;">现在使用一个位于应用程序根目录的</span>Gemfile<span style="font-family: DejaVu Sans;">文件来决定使你开始你的应用程序的</span>require<span style="font-family: DejaVu Sans;">。这个</span>Gemfile<span style="font-family: DejaVu Sans;">文件被</span>Bundler gem<span style="font-family: DejaVu Sans;">加工生成，它会随后安装你所有的依赖。它甚至可以以你的应用程序为</span>locally<span style="font-family: DejaVu Sans;">安装依赖，使得你的应用程序不用依赖系统</span>gems<span style="font-family: DejaVu Sans;">。</span></p>

<p>&nbsp;</p>

<table width="665" cellspacing="0" cellpadding="2"><colgroup><col width="74" /> <col width="583" /> </colgroup>
<tbody>
<tr>
<td width="74">vendor/</td>
<td width="583">A place for all third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.<span style="font-family: DejaVu Sans;">放置第三方代码的地方。在一个典型的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中，这里包含</span>Ruby Gems<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">源代码（如果你把</span>Rails<span style="font-family: DejaVu Sans;">安装到你的项目中）还包含一些预先包装好的额外的插件</span></td>
</tr>
</tbody>
</table>


<p>More information: – <a href="http://gembundler.com/"><span style="color: #000080;"><span style="text-decoration: underline;">bundler</span></span><span style="color: #000080;"><span style="text-decoration: underline;">homepage</span></span></a></p>

<h4><a name="living-on-the-edge"></a>2.2 Living on the Edge</h4>


<p><tt>Bundler</tt> and <tt>Gemfile</tt> makes freezing your Rails application easy as pie with the new dedicated <tt>bundle</tt> command. If you want to bundle straight from the Git repository, you can pass the <tt>&mdash;edge</tt> flag:</p>

<p>Bundler<span style="font-family: DejaVu Sans;">和</span>Gemfile<span style="font-family: DejaVu Sans;">通过新的专用</span>bundle <span style="font-family: DejaVu Sans;">命令来冻结你的应用程序就像吃馅饼一样简单。如果你想直接从</span>Git<span style="font-family: DejaVu Sans;">仓库</span>bundle<span style="font-family: DejaVu Sans;">，你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>edge flag<span style="font-family: DejaVu Sans;">：</span></p>

<p>$ rails new myapp &mdash;edge</p>

<p>If you have a local checkout of the Rails repository and want to generate an application using that, you can pass the <tt>&mdash;dev</tt> flag:</p>

<p><span style="font-family: DejaVu Sans;">如果你有一个从</span>Rails<span style="font-family: DejaVu Sans;">源代码仓库</span>checkout<span style="font-family: DejaVu Sans;">的本地</span>Rails<span style="font-family: DejaVu Sans;">并且你想生成一个应用程序使用（上面的方法）你可以通过<span style="font-family: Liberation Serif,Times New Roman,serif;">—</span></span>dev <span style="font-family: DejaVu Sans;">标志：</span></p>

<p>$ ruby /path/to/rails/bin/rails new myapp &mdash;dev</p>

<h3><a name="rails-architectural-changes"></a>3 Rails Architectural<span style="font-family: WenQuanYi Micro Hei;">建筑的</span>Changes</h3>


<h4><a name="assets-pipeline"></a>3.1 Assets Pipeline</h4>


<p>The major change in Rails 3.1 is the Assets Pipeline. It makes CSS and JavaScript first-class code citizens and enables proper organization, including use in plugins and engines.</p>

<p><span style="font-family: DejaVu Sans;">在</span>Rails 3.1<span style="font-family: DejaVu Sans;">中主要的更改就是</span>Assets Pipeline<span style="font-family: DejaVu Sans;">（管道）。它使得</span>CSS<span style="font-family: DejaVu Sans;">和</span>JavaScript <span style="font-family: DejaVu Sans;">一流的代码公民可以合适的组织他们，包含使用</span>pluginis<span style="font-family: DejaVu Sans;">和</span>engines<span style="font-family: DejaVu Sans;">。</span></p>

<p>The assets pipeline is powered by <span style="color: #000080;"><span style="text-decoration: underline;"><a href="https://github.com/sstephenson/sprockets">Sprockets</a></span></span> and is covered in the <a href="http://guides.rubyonrails.org/asset_pipeline.html"><span style="color: #000080;"><span style="text-decoration: underline;">Asset</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Pipeline</span></span></a> guide.</p>

<h4><a name="http-streaming"></a>3.2 HTTP Streaming</h4>


<p>HTTP Streaming is another change that is new in Rails 3.1. This lets the browser download your stylesheets and JavaScript files while the server is still generating the response. This requires Ruby 1.9.2, is opt-in and requires support from the web server as well, but the popular combo of nginx and unicorn is ready to take advantage of it.</p>

<p>HTTP Streaming<span style="font-family: DejaVu Sans;">是</span>Rails 3.1<span style="font-family: DejaVu Sans;">另一更改。这使得浏览器下载你的</span>stylesheets<span style="font-family: DejaVu Sans;">和</span>JavaSript<span style="font-family: DejaVu Sans;">文件即使服务器仍然在响应。这需要</span>Ruby 1.9.2<span style="font-family: DejaVu Sans;">，它是需要从服务器中选择以及服务器同样支持</span>HTTP Streaming<span style="font-family: DejaVu Sans;">，但是受欢迎的</span>nginx<span style="font-family: DejaVu Sans;">和</span>unicom<span style="font-family: DejaVu Sans;">组织已经准备</span>advantage HTTP Streaming<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="default-js-library-is-now-jquery"></a>3.3 Default JS library is now jQuery</h4>


<p>jQuery is the default JavaScript library that ships with Rails 3.1. But if you use Prototype, it’s simple to switch.</p>

<p>Jquey<span style="font-family: DejaVu Sans;">是默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">搭载在</span>Rrails 3.1.<span style="font-family: DejaVu Sans;">但是如果你使用</span>Prototype<span style="font-family: DejaVu Sans;">，它更改很简单。</span></p>

<p>$ rails new myapp -j prototype</p>

<h4><a name="identity-map"></a>3.4 Identity Map <span style="font-family: WenQuanYi Micro Hei;">身份</span>map</h4>


<p>Active Record has an Identity Map in Rails 3.1. An identity map keeps previously instantiated records and returns the object associated with the record if accessed again. The identity map is created on a per-request basis and is flushed at request completion.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">的</span>Active Record<span style="font-family: DejaVu Sans;">有一个</span>Indentity Map<span style="font-family: DejaVu Sans;">。一个</span>identity map<span style="font-family: DejaVu Sans;">保留先前的实例化的记录并且如果再次访问返回记录的对象的关系。</span>Indentity map<span style="font-family: DejaVu Sans;">是基于每个请求创建的并且在请求完成刷新。</span></p>

<p>Rails 3.1 comes with the identity map turned off by default.</p>

<p>Rails 3.1<span style="font-family: DejaVu Sans;">默认</span>Identity map<span style="font-family: DejaVu Sans;">是关闭的。</span></p>

<h3><a name="railties"></a>4 Railties</h3>


<ul>
    <li><a name="railties1"></a>jQuery is the new default JavaScript library.</li>
</ul>


<p>Jquey<span style="font-family: DejaVu Sans;">是新的默认的</span>JavaScript library<span style="font-family: DejaVu Sans;">。</span></p>

<ul>
    <li>jQuery and Prototype are no longer vendored and is provided from now on by the jquery-rails and prototype-rails gems.</li>
</ul>


<p>jQuey<span style="font-family: DejaVu Sans;">和</span>Prototype<span style="font-family: DejaVu Sans;">不再</span>vendored<span style="font-family: DejaVu Sans;">并且从现在开始提供的是</span>jquery-rails and prototype-rails gems<span style="font-family: DejaVu Sans;">。</span></p>

<ul>
    <li>The application generator accepts an option <tt>-j</tt> which can be an arbitrary string. If passed “foo”, the gem “foo-rails” is added to the <tt>Gemfile</tt>, and the application JavaScript manifest requires “foo” and “foo_ujs”. Currently only “prototype-rails” and “jquery-rails” exist and provide those files via the asset pipeline.</li>
</ul>


<p><span style="font-family: DejaVu Sans;">应用程序创建器接受一个选项</span>-j<span style="font-family: DejaVu Sans;">其可以是任意字符串。如果传递<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>foo”<span style="font-family: DejaVu Sans;">，</span>gem “foo-rails”<span style="font-family: DejaVu Sans;">就被添加到</span>Gemfile<span style="font-family: DejaVu Sans;">，并且应用程序的</span>JavaScript manifest requires “foo” and “foo_ujs”<span style="font-family: DejaVu Sans;">。当前只有<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>prototype-rails” and “jquery-rails”<span style="font-family: DejaVu Sans;">存在并且通过</span>asset pipeline<span style="font-family: DejaVu Sans;">提供这些文件。</span></p>

<ul>
    <li>Generating an application or a plugin runs <tt>bundle</tt><tt> </tt><tt>install</tt> unless <tt>--skip-gemfile</tt> or <tt>--skip-bundle</tt> is specified.</li>
</ul>


<p><span style="font-family: DejaVu Sans;">生成一个应用程序或者一个</span>plugin<span style="font-family: DejaVu Sans;">运行</span>bundle install<span style="font-family: DejaVu Sans;">除非</span>&mdash;skip-gemfile<span style="font-family: DejaVu Sans;">或者</span>&mdash;skip-bundle<span style="font-family: DejaVu Sans;">被指定</span></p>

<ul>
    <li>The controller and resource generators will now automatically produce asset stubs (this can be turned off with <tt>--skip-assets</tt>). These stubs will use CoffeeScript and Sass, if those libraries are available.</li>
</ul>


<p>Controller<span style="font-family: DejaVu Sans;">和</span>resource<span style="font-family: DejaVu Sans;">创建器将会自动的产生</span>asset stubs(this can be turned off with <tt>&mdash;skip-assets</tt>)<span style="font-family: DejaVu Sans;">。这些</span>stub<span style="font-family: DejaVu Sans;">将会使用</span>CoffeeScript and Sass<span style="font-family: DejaVu Sans;">，如果这些</span>libraries<span style="font-family: DejaVu Sans;">是可用的。</span></p>

<ul>
    <li>Scaffold and app generators use the Ruby 1.9 style hash when running on Ruby 1.9. To generate old style hash, <tt>--old-style-hash</tt> can be passed.</li>
</ul>


<ul>
    <li>Scaffold controller generator creates format block for JSON instead of XML.</li>
</ul>


<ul>
    <li>Active Record logging is directed to STDOUT and shown inline in the console.</li>
</ul>


<ul>
    <li>Added <tt>config.force_ssl</tt> configuration which loads <tt>Rack::SSL</tt> middleware and force all requests to be under HTTPS protocol.</li>
</ul>


<ul>
    <li>Added <tt>rails</tt><tt> </tt><tt>plugin</tt><tt> </tt><tt>new</tt> command which generates a Rails plugin with gemspec, tests and a dummy application for testing.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Etag</tt> and <tt>Rack::ConditionalGet</tt> to the default middleware stack.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Cache</tt> to the default middleware stack.</li>
</ul>


<ul>
    <li>Engines received a major update – You can mount them at any path, enable assets, run generators etc.</li>
</ul>


<h3><a name="action-pack"></a>5 Action Pack</h3>


<h4><a name="action-controller"></a>5.1 Action Controller</h4>


<ul>
    <li>A warning is given out if the CSRF token authenticity cannot be verified.</li>
</ul>


<ul>
    <li>Specify <tt>force_ssl</tt> in a controller to force the browser to transfer data via HTTPS protocol on that particular controller. To limit to specific actions, <tt>:only</tt> or <tt>:except</tt> can be used.</li>
</ul>


<ul>
    <li>Sensitive query string parameters specified in <tt>config.filter_parameters</tt> will now be filtered out from the request paths in the log.</li>
</ul>


<ul>
    <li>URL parameters which return <tt>nil</tt> for <tt>to_param</tt> are now removed from the query string.</li>
</ul>


<ul>
    <li>Added <tt>ActionController::ParamsWrapper</tt> to wrap parameters into a nested hash, and will be turned on for JSON request in new applications by default. This can be customized in <tt>config/initializers/wrap_parameters.rb</tt>.</li>
</ul>


<ul>
    <li>Added <tt>config.action_controller.include_all_helpers</tt>. By default <tt>helper</tt><tt> </tt><tt>:all</tt> is done in <tt>ActionController::Base</tt>, which includes all the helpers by default. Setting <tt>include_all_helpers</tt> to <tt>false</tt> will result in including only application_helper and the helper corresponding to controller (like foo_helper for foo_controller).</li>
</ul>


<ul>
    <li><tt>url_for</tt> and named url helpers now accept <tt>:subdomain</tt> and <tt>:domain</tt> as options.</li>
</ul>


<ul>
    <li>Added <tt>Base.http_basic_authenticate_with</tt> to do simple http basic authentication with a single class method call.</li>
</ul>


<p>class PostsController &lt; ApplicationController</p>

<p>USER_NAME, PASSWORD = &ldquo;dhh&rdquo;, &ldquo;secret&rdquo;</p>

<p>&nbsp;</p>

<p>before_filter :authenticate, :except =&gt; [ :index ]</p>

<p>&nbsp;</p>

<p>def index</p>

<p>render :text =&gt; &ldquo;Everyone can see me!&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>def edit</p>

<p>render :text =&gt; &ldquo;I&rsquo;m only accessible if you know the password&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>private</p>

<p>def authenticate</p>

<p>authenticate_or_request_with_http_basic do |user_name, password|</p>

<p>user_name == USER_NAME &amp;&amp; password == PASSWORD</p>

<p>end</p>

<p>end</p>

<p>end</p>

<p>..can now be written as</p>

<p>class PostsController &lt; ApplicationController</p>

<p>http_basic_authenticate_with :name =&gt; &ldquo;dhh&rdquo;, :password =&gt; &ldquo;secret&rdquo;, :except =&gt; :index</p>

<p>&nbsp;</p>

<p>def index</p>

<p>render :text =&gt; &ldquo;Everyone can see me!&rdquo;</p>

<p>end</p>

<p>&nbsp;</p>

<p>def edit</p>

<p>render :text =&gt; &ldquo;I&rsquo;m only accessible if you know the password&rdquo;</p>

<p>end</p>

<p>end</p>

<p>Added streaming support, you can enable it with:</p>

<p>class PostsController &lt; ActionController::Base</p>

<p>stream</p>

<p>end</p>

<p>You can restrict<span style="font-family: DejaVu Sans;">限制</span>it to some actions by using <tt>:only</tt> or <tt>:except</tt>. Please read the docs at <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://api.rubyonrails.org/classes/ActionController/Streaming.html">ActionController::Streaming</a></span></span> for more information.</p>

<ul>
    <li>The redirect route method now also accepts a hash of options which will only change the parts of the url in question, or an object which responds to call, allowing for redirects to be reused.</li>
</ul>


<h4><a name="action-dispatch"></a>5.2 Action Dispatch</h4>


<ul>
    <li><tt>config.action_dispatch.x_sendfile_header</tt> now defaults to <tt>nil</tt> and <tt>config/environments/production.rb</tt> doesn’t set any particular value for it. This allows servers to set it through <tt>X-Sendfile-Type</tt>.</li>
</ul>


<ul>
    <li><tt>ActionDispatch::MiddlewareStack</tt> now uses composition<span style="font-family: DejaVu Sans;">组成</span>over inheritance and is no longer an array.</li>
</ul>


<ul>
    <li>Added <tt>ActionDispatch::Request.ignore_accept_header</tt> to ignore accept headers.</li>
</ul>


<ul>
    <li>Added <tt>Rack::Cache</tt> to the default stack.</li>
</ul>


<ul>
    <li>Moved etag responsibility from <tt>ActionDispatch::Response</tt> to the middleware stack.</li>
</ul>


<ul>
    <li>Rely on <tt>Rack::Session</tt> stores API for more compatibility across the Ruby world. This is backwards incompatible since <tt>Rack::Session</tt> expects <tt>#get_session</tt> to accept four arguments and requires <tt>#destroy_session</tt> instead of simply <tt>#destroy</tt>.</li>
</ul>


<ul>
    <li>Template lookup now searches further up in the inheritance chain.</li>
</ul>


<h4><a name="action-view"></a>5.3 Action View</h4>


<ul>
    <li>Added an <tt>:authenticity_token</tt> option to <tt>form_tag</tt> for custom handling or to omit the token by passing <tt>:authenticity_token</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>false</tt>.</li>
</ul>


<ul>
    <li>Created <tt>ActionView::Renderer</tt> and specified an API for <tt>ActionView::Context</tt>.</li>
</ul>


<ul>
    <li>In place <tt>SafeBuffer</tt> mutation is prohibited<span style="font-family: DejaVu Sans;">禁止</span>in Rails 3.1.</li>
</ul>


<ul>
    <li>Added HTML5 <tt>button_tag</tt> helper.</li>
</ul>


<ul>
    <li><tt>file_field</tt> automatically adds <tt>:multipart</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> to the enclosing form.</li>
</ul>


<ul>
    <li>Added a convenience idiom to generate HTML5 data-* attributes in tag helpers from a <tt>:data</tt> hash of options:</li>
</ul>


<p>tag(&ldquo;div&rdquo;, :data =&gt; {:name =&gt; &lsquo;Stephen&rsquo;, :city_state =&gt; %w(Chicago IL)})</p>

<h1>=&gt; &lt;div data-name=&ldquo;Stephen&rdquo; data-city-state=&ldquo;[&amp;quot;Chicago&amp;quot;,&amp;quot;IL&amp;quot;]&rdquo; /&gt;</h1>

<p>Keys are dasherized. Values are JSON-encoded, except for strings and symbols.</p>

<ul>
    <li><tt>csrf_meta_tag</tt> is renamed to <tt>csrf_meta_tags</tt> and aliases <tt>csrf_meta_tag</tt> for backwards compatibility.</li>
</ul>


<ul>
    <li>The old template handler API is deprecated and the new API simply requires a template handler to respond to call.</li>
</ul>


<ul>
    <li>rhtml and rxml are finally removed as template handlers.</li>
</ul>


<ul>
    <li><tt>config.action_view.cache_template_loading</tt> is brought back which allows to decide whether templates should be cached or not.</li>
</ul>


<ul>
    <li>The submit form helper does not generate an id “object_name_id” anymore.</li>
</ul>


<ul>
    <li>Allows <tt>FormHelper#form_for</tt> to specify the <tt>:method</tt> as a direct option instead of through the <tt>:html</tt> hash. <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete)</tt> instead of <tt>form_for(@post,</tt><tt> </tt><tt>remote:</tt><tt> </tt><tt>true,</tt><tt> </tt><tt>html:</tt><tt> </tt><tt>{</tt><tt> </tt><tt>method:</tt><tt> </tt><tt>:delete</tt><tt> </tt><tt>})</tt>.</li>
</ul>


<ul>
    <li>Provided <tt>JavaScriptHelper#j()</tt> as an alias for <tt>JavaScriptHelper#escape_javascript()</tt>. This supersedes the <tt>Object#j()</tt> method that the JSON gem adds within templates using the JavaScriptHelper.</li>
</ul>


<ul>
    <li>Allows AM/PM format in datetime selectors.</li>
</ul>


<ul>
    <li><tt>auto_link</tt> has been removed from Rails and extracted into the <a href="https://github.com/tenderlove/rails_autolink"><span style="color: #000080;"><span style="text-decoration: underline;">rails_autolink</span></span><span style="color: #000080;"><span style="text-decoration: underline;">gem</span></span></a></li>
</ul>


<h3><a name="active-record"></a>6 Active Record</h3>


<ul>
    <li>Added a class method <tt>pluralize_table_names</tt> to singularize/pluralize<span style="font-family: DejaVu Sans;">复数</span>table names of individual models. Previously this could only be set globally for all models through <tt>ActiveRecord::Base.pluralize_table_names</tt>.</li>
</ul>


<p>class User &lt; ActiveRecord::Base</p>

<p>self.pluralize_table_names = false</p>

<p>end</p>

<ul>
    <li>Added block setting of attributes to singular associations. The block will get called after the instance is initialized</li>
</ul>


<p>class User &lt; ActiveRecord::Base</p>

<p>has_one :account</p>

<p>end</p>

<p>&nbsp;</p>

<p>user.build_account{ |a| a.credit_limit =&gt; 100.0 }</p>

<ul>
    <li><strong>Added</strong><strong> </strong><tt><strong>ActiveRecord::Base.attribute_names</strong></tt><strong> </strong><strong>to</strong><strong> </strong><strong>return</strong><strong> </strong><strong>a</strong><strong> </strong><strong>list</strong><strong> </strong><strong>of</strong><strong> </strong><strong>attribute</strong><strong> </strong><strong>names.</strong><strong> </strong><strong>This</strong><strong> </strong><strong>will</strong><strong> </strong><strong>return</strong><strong> </strong><strong>an</strong><strong> </strong><strong>empty</strong><strong> </strong><strong>array</strong><strong> </strong><strong>if</strong><strong> </strong><strong>the</strong><strong> </strong><strong>model</strong><strong> </strong><strong>is</strong><strong> </strong><strong>abstract</strong><strong> </strong><strong>or</strong><strong> </strong><strong>the</strong><strong> </strong><strong>table</strong><strong> </strong><strong>does</strong><strong> </strong><strong>not</strong><strong> </strong><strong>exist.</strong><strong> </strong></li>
</ul>


<ul>
    <li>CSV Fixtures are deprecated and support will be removed in Rails 3.2.0.</li>
</ul>


<ul>
    <li><tt>ActiveRecord#new</tt>, <tt>ActiveRecord#create</tt> and <tt>ActiveRecord#update_attributes</tt> all accept a second hash as an option that allows you to specify which role to consider when assigning attributes. This is built on top of Active Model’s new mass assignment capabilities:</li>
</ul>


<p>class Post &lt; ActiveRecord::Base</p>

<p>attr_accessible :title</p>

<p>attr_accessible :title, :published_at, :as =&gt; :admin</p>

<p>end</p>

<p>&nbsp;</p>

<p>Post.new(params[:post], :as =&gt; :admin)</p>

<ul>
    <li><tt>default_scope</tt> can now take a block, lambda, or any other object which responds to call for lazy evaluation.</li>
</ul>


<ul>
    <li>Default scopes are now evaluated at the latest possible moment, to avoid problems where scopes would be created which would implicitly contain the default scope, which would then be impossible to get rid of via Model.unscoped.</li>
</ul>


<ul>
    <li>PostgreSQL adapter only supports PostgreSQL version 8.2 and higher.</li>
</ul>


<ul>
    <li><tt>ConnectionManagement</tt> middleware is changed to clean up the connection pool after the rack body has been flushed.</li>
</ul>


<ul>
    <li>Added an <tt>update_column</tt> method on Active Record. This new method updates a given attribute on an object, skipping validations and callbacks. It is recommended to use <tt>update_attribute</tt> unless you are sure you do not want to execute any callback, including the modification of the <tt>updated_at</tt> column. It should not be called on new records.</li>
</ul>


<ul>
    <li>Associations with a <tt>:through</tt> option can now use any association as the through or source association, including other associations which have a <tt>:through</tt> option and <tt>has_and_belongs_to_many</tt> associations.</li>
</ul>


<ul>
    <li>The configuration for the current database connection is now accessible via <tt>ActiveRecord::Base.connection_config</tt>.</li>
</ul>


<ul>
    <li>limits and offsets are removed from COUNT queries unless both are supplied.</li>
</ul>


<p>People.limit(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people&rsquo;</p>

<p>People.offset(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people&rsquo;</p>

<p>People.limit(1).offset(1).count # =&gt; &lsquo;SELECT COUNT(*) FROM people LIMIT 1 OFFSET 1&rsquo;</p>

<ul>
    <li><tt>ActiveRecord::Associations::AssociationProxy</tt> has been split. There is now an <tt>Association</tt> class (and subclasses) which are responsible for operating on associations, and then a separate, thin wrapper called <tt>CollectionProxy</tt>, which proxies collection associations. This prevents namespace pollution, separates concerns, and will allow further refactorings.</li>
</ul>


<ul>
    <li>Singular associations (<tt>has_one</tt>, <tt>belongs_to</tt>) no longer have a proxy and simply returns the associated record or <tt>nil</tt>. This means that you should not use undocumented methods such as <tt>bob.mother.create</tt> – use <tt>bob.create_mother</tt> instead.</li>
</ul>


<ul>
    <li>Support the <tt>:dependent</tt> option on <tt>has_many</tt><tt> </tt><tt>:through</tt> associations. For historical and practical reasons, <tt>:delete_all</tt> is the default deletion strategy employed by <tt>association.delete(*records)</tt>, despite the fact that the default strategy is <tt>:nullify</tt> for regular has_many. Also, this only works at all if the source reflection is a belongs_to. For other situations, you should directly modify the through association.</li>
</ul>


<ul>
    <li>The behavior of <tt>association.destroy</tt> for <tt>has_and_belongs_to_many</tt> and <tt>has_many</tt><tt> </tt><tt>:through</tt> is changed. From now on, ‘destroy’ or ‘delete’ on an association will be taken to mean ‘get rid of the link’, not (necessarily) ‘get rid of the associated records’.</li>
</ul>


<ul>
    <li>Previously, <tt>has_and_belongs_to_many.destroy(*records)</tt> would destroy the records themselves. It would not delete any records in the join table. Now, it deletes the records in the join table.</li>
</ul>


<ul>
    <li>Previously, <tt>has_many_through.destroy(*records)</tt> would destroy the records themselves, and the records in the join table. [Note: This has not always been the case; previous version of Rails only deleted the records themselves.] Now, it destroys only the records in the join table.</li>
</ul>


<ul>
    <li>Note that this change is backwards-incompatible to an extent, but there is unfortunately no way to ‘deprecate’ it before changing it. The change is being made in order to have consistency as to the meaning of ‘destroy’ or ‘delete’ across the different types of associations. If you wish to destroy the records themselves, you can do <tt>records.association.each(&amp;:destroy)</tt>.</li>
</ul>


<ul>
    <li>Add <tt>:bulk</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>true</tt> option to <tt>change_table</tt> to make all the schema changes defined in a block using a single ALTER statement.</li>
</ul>


<p>change_table(:users, :bulk =&gt; true) do |t|</p>

<p>t.string :company_name</p>

<p>t.change :birthdate, :datetime</p>

<p>end</p>

<ul>
    <li>Removed support for accessing attributes on a <tt>has_and_belongs_to_many</tt> join table. <tt>has_many</tt><tt> </tt><tt>:through</tt> needs to be used.</li>
</ul>


<ul>
    <li>Added a <tt>create_association!</tt> method for <tt>has_one</tt> and <tt>belongs_to</tt> associations.</li>
</ul>


<ul>
    <li>Migrations are now reversible<span style="font-family: DejaVu Sans;">可逆</span>, meaning that Rails will figure out how to reverse your migrations. To use reversible migrations, just define the <tt>change</tt> method.</li>
</ul>


<p>class MyMigration &lt; ActiveRecord::Migration</p>

<p>def change</p>

<p>create_table(:horses) do</p>

<p>t.column :content, :text</p>

<p>t.column :remind_at, :datetime</p>

<p>end</p>

<p>end</p>

<p>end</p>

<ul>
    <li>Some things cannot be automatically reversed for you. If you know how to reverse those things, you should define <tt>up</tt> and <tt>down</tt> in your migration. If you define something in change that cannot be reversed, an <tt>IrreversibleMigration</tt> exception will be raised when going down.</li>
</ul>


<ul>
    <li>Migrations now use instance methods rather than class methods:</li>
</ul>


<p>class FooMigration &lt; ActiveRecord::Migration</p>

<p>def up # Not self.up</p>

<p>&hellip;</p>

<p>end</p>

<p>end</p>

<ul>
    <li>Migration files generated from model and constructive migration generators (for example, add_name_to_users) use the <strong>reversible</strong><strong> </strong><strong>migration</strong><strong>’</strong><strong>s</strong><strong> </strong><tt>change</tt> method instead of the ordinary <tt>up</tt> and <tt>down</tt> methods.</li>
</ul>


<ul>
    <li>Removed support for interpolating<span style="font-family: DejaVu Sans;">插值</span>string SQL conditions on associations. Instead, a proc should be used.</li>
</ul>


<p>has_many :things, :conditions =&gt; &lsquo;foo = #{bar}&rsquo; # before</p>

<p>has_many :things, :conditions =&gt; proc { &ldquo;foo = #{bar}&rdquo; } # after</p>

<p>&nbsp;</p>

<p>Inside the proc, <tt>self</tt> is the object which is the owner of the association, unless you are eager loading the association, in which case <tt>self</tt> is the class which the association is within.</p>

<p>You can have any “normal” conditions inside the proc, so the following will work too:</p>

<p>has_many :things, :conditions =&gt; proc { [&ldquo;foo = ?&rdquo;, bar] }</p>

<p>&nbsp;</p>

<ul>
    <li>Previously <tt>:insert_sql</tt> and <tt>:delete_sql</tt> on <tt>has_and_belongs_to_many</tt> association allowed you to call ‘record’ to get the record being inserted or deleted. This is now passed as an argument to the proc.</li>
</ul>


<ul>
    <li>Added <tt>ActiveRecord::Base#has_secure_password</tt> (via <tt>ActiveModel::SecurePassword</tt>) to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>


<h1>Schema: User(name:string, password_digest:string, password_salt:string)</h1>

<p>class User &lt; ActiveRecord::Base</p>

<p>has_secure_password</p>

<p>end</p>

<p>&nbsp;</p>

<ul>
    <li>When a model is generated <tt>add_index</tt> is added by default for <tt>belongs_to</tt> or <tt>references</tt> columns.</li>
</ul>


<ul>
    <li>Setting the id of a <tt>belongs_to</tt> object will update the reference to the object.</li>
</ul>


<ul>
    <li><tt>ActiveRecord::Base#dup</tt> and <tt>ActiveRecord::Base#clone</tt> semantics<span style="font-family: DejaVu Sans;">语义</span>have changed to closer match normal Ruby dup and clone semantics.</li>
</ul>


<ul>
    <li>Calling <tt>ActiveRecord::Base#clone</tt> will result in a shallow copy of the record, including copying the frozen state. No callbacks will be called.</li>
</ul>


<ul>
    <li>Calling <tt>ActiveRecord::Base#dup</tt> will duplicate the record, including calling after initialize hooks. Frozen state will not be copied, and all associations will be cleared. A duped record will return <tt>true</tt> for <tt>new_record?</tt>, have a <tt>nil</tt> id field, and is saveable.</li>
</ul>


<ul>
    <li>The query cache now works with prepared statements. No changes in the applications are required.</li>
</ul>


<h3><a name="active-model"></a>7 Active Model</h3>


<ul>
    <li><tt>attr_accessible</tt> accepts an option <tt>:as</tt> to specify a role.</li>
</ul>


<ul>
    <li><tt>InclusionValidator</tt>, <tt>ExclusionValidator</tt>, and <tt>FormatValidator</tt> now accepts an option which can be a proc, a lambda, or anything that respond to <tt>call</tt>. This option will be called with the current record as an argument and returns an object which respond to <tt>include?</tt> for <tt>InclusionValidator</tt> and <tt>ExclusionValidator</tt>, and returns a regular expression object for <tt>FormatValidator</tt>.</li>
</ul>


<ul>
    <li>Added <tt>ActiveModel::SecurePassword</tt> to encapsulate dead-simple password usage with BCrypt encryption and salting.</li>
</ul>


<ul>
    <li><tt>ActiveModel::AttributeMethods</tt> allows attributes to be defined on demand.</li>
</ul>


<ul>
    <li>Added support for selectively enabling and disabling observers.</li>
</ul>


<ul>
    <li>Alternate <tt>I18n</tt> namespace lookup is no longer supported.</li>
</ul>


<h3><a name="active-resource"></a>8 Active Resource</h3>


<ul>
    <li><strong>The</strong><strong> </strong><strong>default</strong><strong> </strong><strong>format</strong><strong> </strong><strong>has</strong><strong> </strong><strong>been</strong><strong> </strong><strong>changed</strong><strong> </strong><strong>to</strong><strong> </strong><strong>JSON</strong><strong> </strong><strong>for</strong><strong> </strong><strong>all</strong><strong> </strong><strong>requests</strong>. If you want to continue to use XML you will need to set <tt>self.format</tt><tt> </tt><tt>=</tt><tt> </tt><tt>:xml</tt> in the class. For example,</li>
</ul>


<p>class User &lt; ActiveResource::Base</p>

<p>self.format = :xml</p>

<p>end</p>

<h3><a name="active-support"></a>9 Active Support</h3>


<ul>
    <li><tt>ActiveSupport::Dependencies</tt> now raises <tt>NameError</tt> if it finds an existing constant in <tt>load_missing_constant</tt>.</li>
</ul>


<ul>
    <li>Added a new reporting method <tt>Kernel#quietly</tt> which silences both <tt>STDOUT</tt> and <tt>STDERR</tt>.</li>
</ul>


<ul>
    <li>Added <tt>String#inquiry</tt> as a convenience method for turning a String into a <tt>StringInquirer</tt> object.</li>
</ul>


<ul>
    <li>Added <tt>Object#in?</tt> to test if an object is included in another object.</li>
</ul>


<ul>
    <li><tt>LocalCache</tt> strategy is now a real middleware class and no longer an anonymous class.</li>
</ul>


<ul>
    <li><tt>ActiveSupport::Dependencies::ClassCache</tt> class has been introduced for holding references to reloadable classes.</li>
</ul>


<ul>
    <li><tt>ActiveSupport::Dependencies::Reference</tt> has been refactored to take direct advantage of the new <tt>ClassCache</tt>.</li>
</ul>


<ul>
    <li>Backports <tt>Range#cover?</tt> as an alias for <tt>Range#include?</tt> in Ruby 1.8.</li>
</ul>


<ul>
    <li>Added <tt>weeks_ago</tt> and <tt>prev_week</tt> to Date/DateTime/Time.</li>
</ul>


<ul>
    <li>Added <tt>before_remove_const</tt> callback to <tt>ActiveSupport::Dependencies.remove_unloadable_constants!</tt>.</li>
</ul>


<p>Deprecations:</p>

<ul>
    <li><tt>ActiveSupport::SecureRandom</tt> is deprecated in favor of <tt>SecureRandom</tt> from the Ruby standard library.</li>
</ul>


<h3><a name="credits"></a>10 Credits</h3>


<p>See the <a href="http://contributors.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">full</span></span><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">contributors</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a> for the many people who spent many hours making Rails, the stable and robust framework it is. Kudos to all of them.</p>

<p>Rails 3.1 Release Notes were compiled by <a href="https://github.com/vijaydev"><span style="color: #000080;"><span style="text-decoration: underline;">Vijay</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Dev</span></span></a>.</p>

<p>标签： <a href="http://jhjguxin.hwcrazy.com/tag/gem/">gem</a> <a href="http://jhjguxin.hwcrazy.com/tag/git/">git</a> <a href="http://jhjguxin.hwcrazy.com/tag/guide/">guide</a> <a href="http://jhjguxin.hwcrazy.com/tag/jquery/">jquery</a> <a href="http://jhjguxin.hwcrazy.com/tag/learning/">learning</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/release/">release</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a></p>
]]></content>
  </entry>
  
</feed>
