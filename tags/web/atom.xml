<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: web | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/tags/web/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[十个免费的Web压力测试工具]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/05/03/shi-ge-mian-fei-de-webya-li-ce-shi-gong-ju/"/>
    <updated>2012-05-03T11:15:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/05/03/shi-ge-mian-fei-de-webya-li-ce-shi-gong-ju</id>
    <content type="html"><![CDATA[<h2>十个免费的Web压力测试工具</h2>

<p>relate resources:</p>

<p><a href="http://ruby-china.org/topics/3027">如何测试 rails 网站在高并发下的性能？</a></p>

<p>两天，jnj在本站发布了《<a href="http://coolshell.cn/articles/2574.html" rel="bookmark" target="_blank">如何在低速率网络中测试 Web 应用</a>》，那是测试网络不好的情况。而下面是十个免费的可以用来进行Web的负载/压力测试的工具，这样，你就可以知道你的服务器以及你的WEB应用能够顶得住多少的并发量，以及你的网站的性能。我相信，北京奥组委的订票网站的开发团队并不知道有这样的测试工具。</p>

<p><strong><a href="http://grinder.sourceforge.net/" target="_blank">Grinder</a></strong> –  Grinder是一个开源的JVM负载测试框架，它通过很多负载注射器来为分布式测试提供了便利。 支持用于执行测试脚本的Jython脚本引擎HTTP测试可通过HTTP代理进行管理。根据项目网站的说法，Grinder的 主要目标用户是“理解他们所测代码的人——Grinder不仅仅是带有一组相关响应时间的‘黑盒’测试。由于测试过程可以进行编码——而不是简单地脚本 化，所以程序员能测试应用中内部的各个层次，而不仅仅是通过用户界面测试响应时间。</p>

<p><strong><a href="http://www.pylot.org/" target="_blank">Pylot</a></strong> -Pylot是一款开源的测试web service性能和扩展性的工具，它运行HTTP 负载测试，这对容量计划，确定基准点，分析以及系统调优都很有用处。Pylot产生并发负载（HTTP Requests），检验服务器响应，以及产生带有metrics的报表。通过GUI或者shell/console来执行和监视test suites。</p>

<p><a href="http://www.iis.net/community/default.aspx?tabid=34&amp;i=1466&amp;g=6" target="_blank"><strong>Web Capacity Analysis Tool (WCAT)</strong></a> – 这是一种轻量级负载生成实用工具，不仅能够重现对 Web 服务器（或负载平衡服务器场）的脚本 HTTP 请求，同时还可以收集性能统计数据供日后分析之用。WCAT 是多线程应用程序，并且支持从单个源控制多个负载测试客户端，因此您可以模拟数千个并发用户。该实用工具利用您的旧机器作为测试客户端，其中每个测试客户 端又可以产生多个虚拟客户端（最大数量取决于客户端机器的网络适配器和其他硬件）。您可以选择使用 HTTP 1.0 还是 HTTP 1.1 请求，以及是否使用 SSL。并且，如果测试方案需要，您还可以使用脚本执行的基本或 NTLM 身份验证来访问站点的受限部分。（如果您的站点使用 cookie、表单或基于会话的身份验证，那您可以创建正确的 GET 或 POST 请求来对测试用户进行身份验证。）WCAT 还可管理您站点可能设置的任何 cookie，所以配置文件和会话信息将永久保存。</p>

<p>&nbsp;</p>

<p><strong><a href="http://fwptt.sourceforge.net/index.html" target="_blank">fwptt</a></strong> – fwptt 也是一个用来进行WEB应用负载测试的工具。它可以记录一般的请求，也可以记录Ajax请求。它可以用来测试 asp.net， jsp， php 或是其它的Web应用。</p>

<p><strong><a href="http://jcrawler.sourceforge.net/" target="_blank">JCrawler</a></strong> – JCrawler是一个开源(<a href="http://www.opensource.org/licenses/cpl.php" target="_blank"> CPL</a>) 的WEB应用压力测试工具。通过其名字，你就可以知道这是一个用Java写的像网页爬虫一样的工具。只要你给其几个URL，它就可以开始爬过去了，它用一 种特殊的方式来产生你WEB应用的负载。这个工具可以用来测试搜索引擎对你站点产生的负载。当然，其还有另一功能，你可以建立你的网站地图和再点击一下， 将自动提交Sitemap给前5名的搜索引擎！</p>

<p><strong><a href="http://jakarta.apache.org/jmeter/" target="_blank">Apache JMeter</a></strong> – Apache JMeter是一个专门为运行和服务器装载测试而设计的、100％的纯Java桌面运行程序。原先它是为Web/HTTP测试而设计的，但是它已经扩展以 支持各种各样的测试模块。它和用于HTTP和SQL数据库（使用JDBC）的模块一起运送。它可以用来测试静止资料库或者活动资料库中的服务器的运行情 况，可以用来模拟对服务器或者网络系统加以重负荷以测试它的抵抗力，或者用来分析不同负荷类型下的所有运行情况。它也提供了一个可替换的界面用来定制数据 显示，测试同步及测试的创建和执行。</p>

<p><strong><a href="http://www.joedog.org/index/siege-home" target="_blank">Siege</a></strong> -Siege（英文意思是围攻）是一个压力测试和评测工具，设计用于WEB开发这评估应用在压力下的承受能力：可以根据配置对一个WEB站点进行多用户的 并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。 Siege 支持基本的认证，cookies， HTTP 和 HTTPS 协议。</p>

<p><strong><a href="http://www.acme.com/software/http_load/" target="_blank">http_load</a></strong> – http_load 以并行复用的方式运行，用以测试web服务器的吞吐量与负载。但是它不同于大多数压力测试工具，它可以以一个单一的进程运行，一般不会把客户机搞死。可以可以测试HTTPS类的网站请求。</p>

<p><strong><a href="http://www.web-polygraph.org/" target="_blank">Web Polygraph</a></strong> – Web Polygraph这个软件也是一个用于测试WEB性能的工具，这个工具是很多公司的标准测试工具，包括微软在分析其软件性能的时候，也是使用这个工具做为基准工具的。很多招聘测试员的广告中都注明需要熟练掌握这个测试工具。</p>

<p><strong><a href="http://opensta.org/" target="_blank">OpenSTA</a></strong> – OpenSTA是一个免费的、开放源代码的web性能测试工具，能录制功能非常强大的脚本过程，执行性能测试。例如虚拟多个不同的用户同时登陆被测试网 站。其还能对录制的测试脚本进行,按指定的语法进行编辑。在录制完测试脚本后，可以对测试脚本进行编辑，以便进行特定的性能指标分析。其较为丰富的图形化 测试结果大大提高了测试报告的可阅读性。OpenSTA 基于CORBA 的结构体系，它通过虚拟一个proxy，使用其专用的脚本控制语言，记录通过 proxy 的一切HTTP/S traffic。通过分析OpenSTA的性能指标收集器收集的各项性能指标，以及HTTP 数据，对系统的性能进行分析。</p>

<p>欢迎您留下你认为不错的WEB应用性能测试的工具。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phusion Passenger users guide]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/01/09/phusion-passenger-users-guide/"/>
    <updated>2012-01-09T14:26:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/01/09/phusion-passenger-users-guide</id>
    <content type="html"><![CDATA[<h2>Phusion Passenger users guide</h2>

<div>

Phusion Passenger is an Apache module, which makes deploying Ruby and Ruby on Rails applications on Apache a breeze. It follows the usual Ruby on Rails conventions, such as "Don’t-Repeat-Yourself" and ease of setup, while at the same time providing enough flexibility.

</div>


<div>

This users guide will teach you:

</div>


<div>
<ul>
    <li>How to install Phusion Passenger.</li>
    <li>How to configure Phusion Passenger.</li>
    <li>How to deploy a Ruby on Rails application.</li>
    <li>How to deploy a <a href="http://rack.rubyforge.org/">Rack</a>-based Ruby application.</li>
    <li>How to solve common problems.</li>
</ul>
</div>


<div>

This guide assumes that the reader is somewhat familiar with Apache and with using the commandline.

</div>


<div>
<h2 id="_support_information">1. Support information</h2>
<div>
<div>
<h3 id="_supported_operating_systems">1.1. Supported operating systems</h3>
<div>

Phusion Passenger works on any POSIX-compliant operating system. In other words: practically any operating system on earth, except Microsoft Windows.

</div>
<div>

Phusion Passenger is confirmed on a large number of operating systems and Linux distributions, including, but not limited to, Ubuntu, Debian, CentOS/Fedora/RHEL, Gentoo, Mac OS X, FreeBSD and Solaris. Both 32-bit and 64-bit platforms are supported.

</div>
<div>

The only POSIX-compliant operating system on which Phusion Passenger for Apache is known not to work at this time, is OpenBSD. Please use Phusion Passenger for Nginx instead.

</div>
<div>

Please <a href="http://code.google.com/p/phusion-passenger/issues/list">report a bug</a> or <a href="http://groups.google.com/group/phusion-passenger">join our discussion forum</a> if it doesn’t work on your POSIX-compliant operating system.

</div>
</div>
<div>
<h3 id="_where_to_get_support">1.2. Where to get support</h3>
<div>
<ul>
    <li><a href="http://code.google.com/p/phusion-passenger/issues/list">Issue tracker</a> - report bugs here.</li>
    <li><a href="http://groups.google.com/group/phusion-passenger">Discussion forum</a> - post a message here if you’re experiencing problems.</li>
</ul>
</div>
</div>
</div>
</div>


<div>
<h2 id="_installing_upgrading_and_uninstalling_phusion_passenger">2. Installing, upgrading and uninstalling Phusion Passenger</h2>
<div>
<div>
<h3 id="_generic_installation_instructions">2.1. Generic installation instructions</h3>
<div>
<h4 id="install_passenger">2.1.1. Overview of installation methods</h4>
<div>

There are three ways to install Phusion Passenger:

</div>
<div>
<ol>
    <li>By installing the Phusion Passenger gem, as instructed on the <a href="http://www.modrails.com/install.html">“Install” page on the Phusion Passenger website</a>.</li>
    <li>By downloading the source tarball from the Phusion Passenger website (<em>passenger-x.x.x.tar.gz</em>).</li>
    <li>By installing a native Linux package (e.g. Debian package).</li>
</ol>
</div>
<div>

The following sections will explain each installation method. Please read the section for the installation method that you prefer. In our opinion, installing the gem or the native package is easiest. For these two installation methods, Phusion Passenger provides an easy-to-use installer.

</div>
</div>
<div>
<h4 id="_preparation_gem_and_source_tarball_only">2.1.2. Preparation (gem and source tarball only)</h4>
<div>

If you want to install Phusion Passenger via the gem or the source tarball, then some preparations might be required. You can skip this subsection if you’re installing Phusion Passenger via a native Linux package, because no compilation is necessary.

</div>
<div>
<h5 id="_switching_to_a_root_command_prompt">Switching to a root command prompt</h5>
<div>

Before installing, you will probably need to switch to the root user first. When you install Phusion Passenger via a gem or a source tarball, some Phusion Passenger files have to be compiled, which requires write access to the directory in which the Phusion Passenger files are located. On Unix systems, the root user is the user who has write access to the entire system. So unless you know that your normal user account has write access to the Phusion Passenger directory, you should switch to root before installing Phusion Passenger.

</div>
<div>

You can switch to root by typing the following command:

</div>
<div>
<div>
<pre>sudo -s</pre>
</div>
</div>
<div>

This will open a command prompt as the root user, from which you can proceed with installing Phusion Passenger.

</div>
<div>

If your system does not have <em>sudo</em> installed, please type the following command instead, which should do the same thing:

</div>
<div>
<div>
<pre>su</pre>
</div>
</div>
</div>
<div>
<h5 id="specifying_correct_apache_install">Specifying the correct Apache installation</h5>
<div>

The Phusion Passenger installer will attempt to automatically detect Apache, and compile Phusion Passenger against that Apache version. It does this by looking for the apxs or apxs2 command in the PATH environment variable. Apxs is an integral part of any Apache installation.

</div>
<div>

However, some systems have multiple Apache installations. This is likely the case on MacOS X: the OS ships with Apache, but users tend to install another Apache version seperately, e.g. via MacPorts. If your system has multiple Apache installations, then you will need to tell the Phusion Passenger installer which one to use. It is very important that you specify the correct Apache installation, because if you load Phusion Passenger in an Apache installation that it wasn’t compiled against, then it will likely crash.

</div>
<div>

On yet other systems, Apache is installed in a non-standard location, preventing the Phusion Passenger installer from detecting Apache. This is most likely the case on systems on which Apache was installed by hand from source, i.e. as opposed to installed through the system’s native package manager. If this is the case, then you will also have to tell the installer where it can find Apache.

</div>
<div>

To do so, set the APXS2 environment variable to the full path of the correct apxs or apxs2 command. Suppose that you want to use the Apache installation in <em>/opt/apache2</em>. Then, assuming that the corresponding apxs program’s path is <em>/opt/apache2/bin/apxs</em>, type:

</div>
<div>
<div>
<pre>export APXS2=/opt/apache2/bin/apxs</pre>
</div>
</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>On some systems, the apxs program might be called apxs2, and it might be located in the sbin folder instead of the bin folder.</td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>
<div>Environment variables and <em>sudo</em></div>
By default, the <em>sudo</em> command will erase any environment variables that it doesn’t recognize, prior to executing the given command. So if you set APXS2 as a normal user, then run sudo passenger-install-apache2-module (which is the command for the Phusion Passenger installer), then the installer will not receive the environment variable value that you set. To solve this problem, please become root prior to setting any environment variables, as described in the previous subsection.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h5 id="specifying_ruby_installation">Specifying the correct Ruby installation</h5>
<div>

If your system has multiple Ruby installations — which is likely the case on MacOS X, or if you’ve also installed <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a>  — then you will need to tell the operating system which Ruby installation to use, prior to running the Phusion Passenger installer. If you only have one Ruby installation (the case on most Linux systems), then you can skip this section because Phusion Passenger will automatically detect it.

</div>
<div>

To specify a Ruby installation, prepend your Ruby installation’s bin directory to the PATH environment variable. For example, if you have the following Ruby installations:

</div>
<div>
<ul>
    <li>/usr/bin/ruby</li>
    <li>/opt/myruby/bin/ruby</li>
</ul>
</div>
<div>

and you want to use the latter, then type:

</div>
<div>
<div>
<pre>export PATH=/opt/myruby/bin:$PATH</pre>
</div>
</div>
</div>
</div>
<div>
<h4 id="_installing_via_the_gem">2.1.3. Installing via the gem</h4>
<div>

Please install the gem and then run the Phusion Passenger installer, by typing the following commands:

</div>
<div>
<div>
<pre>gem install passenger-x.x.x.gem
passenger-install-apache2-module</pre>
</div>
</div>
<div>

Please follow the instructions given by the installer.

</div>
</div>
<div>
<h4 id="_installing_via_the_source_tarball">2.1.4. Installing via the source tarball</h4>
<div>

Extract the tarball to whatever location you prefer. <strong>The Phusion Passenger files are to reside in that location permanently.</strong> For example, if you would like Phusion Passenger to reside in /opt/passenger-x.x.x:

</div>
<div>
<div>
<pre>cd /opt
tar xzvf ~/YourDownloadsFolder/passenger-x.x.x.tar.gz</pre>
</div>
</div>
<div>

Next, run the included installer:

</div>
<div>
<div>
<pre>/opt/passenger-x.x.x/bin/passenger-install-apache2-module</pre>
</div>
</div>
<div>

Please follow the instructions given by the installer.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/important.png" alt="Important" /></td>
<td>Please do not remove the <em>passenger-x.x.x</em> folder after installation. Furthermore, the <em>passenger-x.x.x</em> folder must be accessible by Apache.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="_installing_via_a_native_linux_package">2.1.5. Installing via a native Linux package</h4>
<div>

John Leach from Brightbox has kindly provided an Ubuntu Hardy package for Phusion Passenger. The package is available from the <a href="http://apt.brightbox.net/">Brightbox repository</a>.

</div>
<div>

Please install the native Linux package, e.g.:

</div>
<div>
<div>
<pre>sudo sh -c 'echo "deb http://apt.brightbox.net hardy main" &gt; /etc/apt/sources.list.d/brightbox.list'
sudo sh -c 'wget -q -O - http://apt.brightbox.net/release.asc | apt-key add -'
sudo apt-get update
sudo apt-get install libapache2-mod-passenger</pre>
</div>
</div>
</div>
<div>
<h4 id="_what_does_the_installer_do">2.1.6. What does the installer do?</h4>
<div>

Although we call it an “installer”, it doesn’t actually install anything. The installer checks whether all required dependencies are installed, compiles Phusion Passenger for you, and tells you how to modify the Apache configuration file, but it doesn’t copy any files around.

</div>
<div>

passenger-install-apache2-module is actually just a user-friendly frontend around the command rake apache2, which performs the actual compilation of Phusion Passenger.

</div>
</div>
</div>
<div>
<h3 id="_operating_system_specific_instructions_and_information">2.2. Operating system-specific instructions and information</h3>
<div>
<h4 id="_macos_x">2.2.1. MacOS X</h4>
<div>

Ben Ruebenstein has written an excellent <a href="http://benr75.com/articles/2008/04/12/setup-mod_rails-phusion-mac-os-x-leopard">tutorial on installing Phusion Passenger on OS X</a>.

</div>
</div>
<div>
<h4 id="_ubuntu_linux">2.2.2. Ubuntu Linux</h4>
<div>

Ben Hughes has written an <a href="http://www.railsgarden.com/2008/04/12/configurating-passenger-mod_rails-on-slicehost-with-ubuntu-710/">article on installing Phusion Passenger on Ubuntu</a>.

</div>
</div>
<div>
<h4 id="_opensolaris">2.2.3. OpenSolaris</h4>
<div>

J Aaron Farr has written a <a href="http://cubiclemuses.com/cm/articles/2009/04/09/rails-passenger-open-solaris-ec2/">guide</a> about setting up Ruby on Rails and Phusion Passenger on OpenSolaris and EC2.

</div>
</div>
</div>
<div>
<h3 id="_upgrading_or_downgrading_phusion_passenger">2.3. Upgrading or downgrading Phusion Passenger</h3>
<div>
<h4 id="_via_a_gem_or_a_source_tarball">2.3.1. Via a gem or a source tarball</h4>
<div>

To upgrade or downgrade Phusion Passenger via the gem or the source tarball, install the newer or older version as you normally would; that is, install the gem or unpack the tarball, and run passenger-install-apache2-module. Eventually passenger-install-apache2-module will tell you to copy &amp; paste some settings into the Apache configuration file; something that looks along the lines of:

</div>
<div>
<div>
<pre>LoadModule passenger_module ...
PassengerRoot ...
PassengerRuby ...</pre>
</div>
</div>
<div>

Because you already had Phusion Passenger installed, you already had similar settings in your Apache configuration file, just with different values. <strong>Replace</strong> the old settings with the new ones that the installer outputs. It is important that the old settings are removed, otherwise Phusion Passenger may malfunction.

</div>
<div>

When you’re done, restart Apache.

</div>
</div>
<div>
<h4 id="_via_a_native_linux_package">2.3.2. Via a native Linux package</h4>
<div>

There are no special instructions required to upgrade or downgrade Phusion Passenger via a native Linux package.

</div>
</div>
</div>
<div>
<h3 id="_unloading_disabling_phusion_passenger_from_apache_without_uninstalling_it">2.4. Unloading (disabling) Phusion Passenger from Apache without uninstalling it</h3>
<div>

You can temporarily unload (disable) Phusion Passenger from Apache, without uninstalling the Phusion Passenger files, so that Apache behaves as if Phusion Passenger was never installed in the first place. This might be useful to you if, for example, you seem to be experiencing a problem caused by Phusion Passenger, but you want to make sure whether that’s actually the case, without having to through the hassle of uninstalling Phusion Passenger completely. When disabled, Phusion Passenger will not occupy any memory or CPU or otherwise interfere with Apache.

</div>
<div>

To unload Phusion Passenger from Apache, edit your Apache configuration file(s) and comment out:

</div>
<div>
<ul>
    <li>all Phusion Passenger configuration directives.</li>
    <li>the <em>LoadModule passenger_module</em> directive.</li>
</ul>
</div>
<div>

For example, if your configuration file looks like this…

</div>
<div>
<div>
<pre>Listen *:80
NameVirtualHosts *:80
....

LoadModule passenger_module /somewhere/passenger-x.x.x/ext/apache2/mod_passenger.so

PassengerRuby /usr/bin/ruby
PassengerRoot /somewhere/passenger/x.x.x
PassengerMaxPoolSize 10

&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /webapps/foo/public
    RailsBaseURI /rails
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

…then comment out the relevant directives, so that it looks like this:

</div>
<div>
<div>
<pre>Listen *:80
NameVirtualHosts *:80
....

# LoadModule passenger_module /somewhere/passenger-x.x.x/ext/apache2/mod_passenger.so

# PassengerRuby /usr/bin/ruby
# PassengerRoot /somewhere/passenger/x.x.x
# PassengerMaxPoolSize 10

&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /webapps/foo/public
    # RailsBaseURI /rails
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

After you’ve done this, save the file and restart Apache.

</div>
</div>
<div>
<h3 id="_uninstalling_phusion_passenger">2.5. Uninstalling Phusion Passenger</h3>
<div>

To uninstall Phusion Passenger, please first remove all Phusion Passenger configuration directives from your Apache configuration file(s). After you’ve done this, you need to remove the Phusion Passenger files.

</div>
<div>
<ul>
    <li>If you installed Phusion Passenger via a gem, then type gem uninstall passenger. You might have to run this as root.</li>
    <li>If you installed Phusion Passenger via a source tarball, then remove the directory in which you placed the extracted Phusion Passenger files. This directory is the same as the one pointed to the by <em>PassengerRoot</em> configuration directive.</li>
    <li>If you installed Phusion Passenger via a Debian package, then remove type sudo apt-get remove libapache2-mod-passenger.</li>
</ul>
</div>
</div>
</div>
</div>


<div>
<h2 id="_deploying_a_ruby_on_rails_1_x_or_2_x_but_not_rails_gt_3_x_application">3. Deploying a Ruby on Rails 1.x or 2.x (but NOT Rails &gt;= 3.x) application</h2>
<div>
<div>

Suppose you have a Ruby on Rails application in <em>/webapps/mycook</em>, and you own the domain <em>www.mycook.com</em>. You can either deploy your application to the virtual host’s root (i.e. the application will be accessible from the root URL, <em>http://www.mycook.com/</em>), or in a sub URI (i.e. the application will be accessible from a sub URL, such as <em>http://www.mycook.com/railsapplication</em>).

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>The default RAILS_ENV environment in which deployed Rails applications are run, is “production”. You can change this by changing the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#rails_env"><em>RailsEnv</em></a> configuration option.</td>
</tr>
</tbody>
</table>
</div>
<div>
<h3 id="_deploying_to_a_virtual_host_8217_s_root">3.1. Deploying to a virtual host’s root</h3>
<div>

Add a virtual host entry to your Apache configuration file. Make sure that the following conditions are met:

</div>
<div>
<ul>
    <li>The virtual host’s document root must point to your Ruby on Rails application’s <em>public</em> folder.</li>
    <li>The Apache per-directory permissions must allow access to this folder.</li>
    <li>MultiViews must be disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.mycook.com
    DocumentRoot /webapps/mycook/public
    &lt;Directory /webapps/mycook/public&gt;
        Allow from all
        Options -MultiViews
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

You may also need to tweak your file/folder permissions. Make sure that the following folders are readable and executable by Apache:

</div>
<div>
<ul>
    <li>this <em>public</em> folder.</li>
    <li>the application’s <em>config</em> folder.</li>
    <li>all parent folders. That is, /webapps/mycook and /webapps must also be readable and executable by Apache.</li>
</ul>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
</div>
<div>
<h3 id="deploying_rails_to_sub_uri">3.2. Deploying to a sub URI</h3>
<div>

Suppose that you already have a virtual host:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

And you want your Ruby on Rails application to be accessible from the URL <em>http://www.phusion.nl/rails</em>.

</div>
<div>

To do this, make a symlink in the virtual host’s document root, and have it point to your Ruby on Rails application’s <em>public</em> folder. For example:

</div>
<div>
<div>
<pre>ln -s /webapps/mycook/public /websites/phusion/rails</pre>
</div>
</div>
<div>

Next, add a <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsBaseURI">RailsBaseURI</a> option to the virtual host configuration, and also make sure that:

</div>
<div>
<ul>
    <li>The Apache per-directory permissions allow access to this folder.</li>
    <li>MultiViews is disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;

    RailsBaseURI /rails                   # &lt;-- These lines have
    &lt;Directory /websites/phusion/rails&gt;   # &lt;-- been added.
        Options -MultiViews               # &lt;--
    &lt;/Directory&gt;                          # &lt;--
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>If you’re deploying to a sub-URI then please make sure that your view templates correctly handles references to sub-URI static assets! Otherwise you may find broken links to images, CSS files, JavaScripts, etc. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#sub_uri_deployment_uri_fix">How to fix broken images/CSS/JavaScript URIs in sub-URI deployments</a> for more information.</td>
</tr>
</tbody>
</table>
</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>

You can deploy multiple Rails applications under a virtual host, by specifying <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsBaseURI">RailsBaseURI</a> multiple times. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ....
    RailsBaseURI /app1
    RailsBaseURI /app2
    RailsBaseURI /app3
&lt;/VirtualHost&gt;</pre>
</div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_redeploying_restarting_the_ruby_on_rails_application">3.3. Redeploying (restarting the Ruby on Rails application)</h3>
<div>

Deploying a new version of a Ruby on Rails application is as simple as re-uploading the application files, and restarting the application.

</div>
<div>

There are two ways to restart the application:

</div>
<div>
<ol>
    <li>By restarting Apache.</li>
    <li>By creating or modifying the file <em>tmp/restart.txt</em> in the Rails application’s <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">root folder</a>. Phusion Passenger will automatically restart the application during the next request.</li>
</ol>
</div>
<div>

For example, to restart our example MyCook application, we type this in the command line:

</div>
<div>
<div>
<pre>touch /webapps/mycook/tmp/restart.txt</pre>
</div>
</div>
<div>

Please note that, unlike earlier versions of Phusion Passenger, <em>restart.txt</em> is not automatically deleted. Phusion Passenger checks whether the timestamp of this file has changed in order to determine whether the application should be restarted.

</div>
</div>
<div>
<h3 id="_migrations">3.4. Migrations</h3>
<div>

Phusion Passenger is not related to Ruby on Rails migrations in any way. To run migrations on your deployment server, please login to your deployment server (e.g. with <em>ssh</em>) and type rake db:migrate RAILS_ENV=production in a shell console, just like one would normally run migrations.

</div>
</div>
<div>
<h3 id="_capistrano_integration">3.5. Capistrano integration</h3>
<div>

See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#capistrano">Capistrano recipe</a>.

</div>
</div>
</div>
</div>


<div>
<h2 id="_deploying_a_rack_based_ruby_application_including_rails_gt_3">4. Deploying a Rack-based Ruby application (including Rails &gt;= 3)</h2>
<div>
<div>

Phusion Passenger supports arbitrary Ruby web applications that follow the <a href="http://rack.rubyforge.org/">Rack</a> interface.

</div>
<div>

Phusion Passenger assumes that Rack application directories have a certain layout. Suppose that you have a Rack application in <em>/webapps/rackapp</em>. Then that folder must contain at least three entries:

</div>
<div>
<ul>
    <li><em>config.ru</em>, a Rackup file for starting the Rack application. This file must contain the complete logic for initializing the application.</li>
    <li><em>public/</em>, a folder containing public static web assets, like images and stylesheets.</li>
    <li><em>tmp/</em>, used for <em>restart.txt</em> (our application restart mechanism). This will be explained in a following subsection.</li>
</ul>
</div>
<div>

So <em>/webapps/rackapp</em> must, at minimum, look like this:

</div>
<div>
<div>
<pre>/webapps/rackapp
  |
  +-- config.ru
  |
  +-- public/
  |
  +-- tmp/</pre>
</div>
</div>
<div>

Suppose you own the domain <em>www.rackapp.com</em>. You can either deploy your application to the virtual host’s root (i.e. the application will be accessible from the root URL, <em>http://www.rackapp.com/</em>), or in a sub URI (i.e. the application will be accessible from a sub URL, such as <em>http://www.rackapp.com/rackapp</em>).

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>The default RACK_ENV environment in which deployed Rack applications are run, is “production”. You can change this by changing the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#rack_env"><em>RackEnv</em></a> configuration option.</td>
</tr>
</tbody>
</table>
</div>
<div>
<h3 id="_tutorial_example_writing_and_deploying_a_hello_world_rack_application">4.1. Tutorial/example: writing and deploying a Hello World Rack application</h3>
<div>

First we create a Phusion Passenger-compliant Rack directory structure:

</div>
<div>
<div>
<pre>$ mkdir /webapps/rack_example
$ mkdir /webapps/rack_example/public
$ mkdir /webapps/rack_example/tmp</pre>
</div>
</div>
<div>

Next, we write a minimal "hello world" Rack application:

</div>
<div>
<div>
<pre>$ cd /webapps/rack_example
$ some_awesome_editor config.ru
...type in some source code...
$ cat config.ru
app = proc do |env|
    [200, { "Content-Type" =&gt; "text/html" }, ["hello &lt;b&gt;world&lt;/b&gt;"]]
end
run app</pre>
</div>
</div>
<div>

Finally, we deploy it by adding the following configuration options to the Apache configuration file:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.rackexample.com
    DocumentRoot /webapps/rack_example/public
    &lt;Directory /webapps/rack_example/public&gt;
        Allow from all
        Options -MultiViews
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

And we’re done! After an Apache restart, the above Rack application will be available under the URL <em>http://www.rackexample.com/</em>.

</div>
</div>
<div>
<h3 id="_deploying_to_a_virtual_host_8217_s_root_2">4.2. Deploying to a virtual host’s root</h3>
<div>

Add a virtual host entry to your Apache configuration file. Make sure that the following conditions are met:

</div>
<div>
<ul>
    <li>The virtual host’s document root must point to your Rack application’s <em>public</em> folder.</li>
    <li>The Apache per-directory permissions must allow access to this folder.</li>
    <li>MultiViews must be disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.rackapp.com
    DocumentRoot /webapps/rackapp/public
    &lt;Directory /webapps/rackapp/public&gt;
        Allow from all
        Options -MultiViews
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

You may also need to tweak your file/folder permissions. Make sure that the following folders are readable and executable by Apache:

</div>
<div>
<ul>
    <li>this <em>public</em> folder.</li>
    <li>the application’s <em>config</em> folder.</li>
    <li>all parent folders. That is, /webapps/rackapp and /webapps must also be readable and executable by Apache.</li>
</ul>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
</div>
<div>
<h3 id="deploying_rack_to_sub_uri">4.3. Deploying to a sub URI</h3>
<div>

Suppose that you already have a virtual host:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

And you want your Rack application to be accessible from the URL <em>http://www.phusion.nl/rack</em>.

</div>
<div>

To do this, make a symlink in the virtual host’s document root, and have it point to your Rack application’s <em>public</em> folder. For example:

</div>
<div>
<div>
<pre>ln -s /webapps/rackapp/public /websites/phusion/rack</pre>
</div>
</div>
<div>

Next, add a <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RackBaseURI">RackBaseURI</a> option to the virtual host configuration, and also make sure that:

</div>
<div>
<ul>
    <li>The Apache per-directory permissions allow access to this folder.</li>
    <li>MultiViews is disabled for this folder.</li>
</ul>
</div>
<div>

For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion
    &lt;Directory /websites/phusion&gt;
        Allow from all
    &lt;/Directory&gt;

    RackBaseURI /rails                    # &lt;-- These lines have
    &lt;Directory /websites/phusion/rails&gt;   # &lt;-- been added.
        Options -MultiViews               # &lt;--
    &lt;/Directory&gt;                          # &lt;--
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

Then restart Apache. The application has now been deployed.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>

You can deploy multiple Rack applications under a virtual host, by specifying <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RackBaseURI">RackBaseURI</a> multiple times. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ....
    RackBaseURI /app1
    RackBaseURI /app2
    RackBaseURI /app3
&lt;/VirtualHost&gt;</pre>
</div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_redeploying_restarting_the_rack_application">4.4. Redeploying (restarting the Rack application)</h3>
<div>

Deploying a new version of a Rack application is as simple as re-uploading the application files, and restarting the application.

</div>
<div>

There are two ways to restart the application:

</div>
<div>
<ol>
    <li>By restarting Apache.</li>
    <li>By creating or modifying the file <em>tmp/restart.txt</em> in the Rack application’s <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">root folder</a>. Phusion Passenger will automatically restart the application.</li>
</ol>
</div>
<div>

For example, to restart our example application, we type this in the command line:

</div>
<div>
<div>
<pre>touch /webapps/rackapp/tmp/restart.txt</pre>
</div>
</div>
</div>
<div>
<h3 id="_rackup_specifications_for_various_web_frameworks">4.5. Rackup specifications for various web frameworks</h3>
<div>

This subsection shows example <em>config.ru</em> files for various web frameworks.

</div>
<div>
<h4 id="_camping">4.5.1. Camping</h4>
<div>
<div>
<pre>require 'rubygems'
require 'rack'
require 'camping'

##### Begin Camping application
Camping.goes :Blog

...your application code here...
##### End Camping application

run Rack::Adapter::Camping.new(Blog)</pre>
</div>
</div>
<div>

For Camping versions 2.0 and up, using run Blog as the final line will do.

</div>
</div>
<div>
<h4 id="_halcyon">4.5.2. Halcyon</h4>
<div>
<div>
<pre>require 'rubygems'
require 'halcyon'
$LOAD_PATH.unshift(Halcyon.root / 'lib')
Halcyon::Runner.load_config Halcyon.root/'config'/'config.yml'
run Halcyon::Runner.new</pre>
</div>
</div>
</div>
<div>
<h4 id="_mack">4.5.3. Mack</h4>
<div>
<div>
<pre>ENV["MACK_ENV"] = ENV["RACK_ENV"]
load("Rakefile")
require 'rubygems'
require 'mack'
run Mack::Utils::Server.build_app</pre>
</div>
</div>
</div>
<div>
<h4 id="_merb">4.5.4. Merb</h4>
<div>
<div>
<pre>require 'rubygems'
require 'merb-core'

Merb::Config.setup(
  :merb_root   =&gt; ::File.expand_path(::File.dirname(__FILE__)),
  :environment =&gt; ENV['RACK_ENV']
)
Merb.environment = Merb::Config[:environment]
Merb.root = Merb::Config[:merb_root]
Merb::BootLoader.run

run Merb::Rack::Application.new</pre>
</div>
</div>
</div>
<div>
<h4 id="_ramaze">4.5.5. Ramaze</h4>
<div>
<div>
<pre>require "rubygems"
require "ramaze"
Ramaze.trait[:essentials].delete Ramaze::Adapter
require "start"
Ramaze.start!
run Ramaze::Adapter::Base</pre>
</div>
</div>
</div>
<div>
<h4 id="_sinatra">4.5.6. Sinatra</h4>
<div>
<div>
<pre>require 'rubygems'
require 'sinatra'
require 'app.rb'

run Sinatra::Application</pre>
</div>
</div>
</div>
</div>
</div>
</div>


<div>
<h2 id="_configuring_phusion_passenger">5. Configuring Phusion Passenger</h2>
<div>
<div>

After installation, Phusion Passenger does not need any further configurations. Nevertheless, the system administrator may be interested in changing Phusion Passenger’s behavior. Phusion Passenger’s Apache module supports the following configuration options:

</div>
<div>
<h3 id="_passengerroot_lt_directory_gt">5.1. PassengerRoot &lt;directory&gt;</h3>
<div>

The location to the Phusion Passenger root directory. This configuration option is essential to Phusion Passenger, and allows Phusion Passenger to locate its own data files. The correct value is given by the installer.

</div>
<div>

If you’ve moved Phusion Passenger to a different directory then you need to update this option as well. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#moving_phusion_passenger">Moving Phusion Passenger to a different directory</a> for more information.

</div>
<div>

This required option may only occur once, in the global server configuration.

</div>
</div>
<div>
<h3 id="PassengerRuby">5.2. PassengerRuby &lt;filename&gt;</h3>
<div>

This option allows one to specify the Ruby interpreter to use.

</div>
<div>

This option may only occur once, in the global server configuration. The default is <em>ruby</em>.

</div>
</div>
<div>
<h3 id="PassengerAppRoot">5.3. PassengerAppRoot &lt;path/to/root&gt;</h3>
<div>

By default, Phusion Passenger assumes that the application’s root directory is the parent directory of the <em>public</em> directory. This option allows one to specify the application’s root independently from the DocumentRoot, which is useful if the <em>public</em> directory lives in a non-standard place.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
<div>

Example:

</div>
<div>
<div>
<pre>&lt;VirtualHost test.host&gt;
    DocumentRoot /var/rails/zena/sites/example.com/public
    PassengerAppRoot /var/rails/zena   # &lt;-- normally Phusion Passenger would
                                       #     have assumed that the application
                                       #     root is "/var/rails/zena/sites/example.com"
&lt;/VirtualHost&gt;</pre>
</div>
</div>
</div>
<div>
<h3 id="PassengerSpawnMethod">5.4. PassengerSpawnMethod &lt;string&gt;</h3>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>"What spawn method should I use?"</div>
<div>

This subsection attempts to describe spawn methods, but it’s okay if you don’t (want to) understand it, as it’s mostly a technical detail. You can basically follow this rule of thumb:

</div>
<div>
<div>
<div>

If your application works on Mongrel, but not on Phusion Passenger, then set PassengerSpawnMethod to <em>conservative</em>. Otherwise, leave it at <em>smart-lv2</em> (the default).

</div>
</div>
</div>
<div>

However, we do recommend you to try to understand it. The <em>smart</em> and <em>smart-lv2</em> spawn methods bring many benefits.

</div></td>
</tr>
</tbody>
</table>
</div>
<div>

Internally, Phusion Passenger spawns multiple Ruby application processes in order to handle requests. But there are multiple ways with which processes can be spawned, each having its own set of pros and cons. Supported spawn methods are:

</div>
<div><dl><dt><em>smart</em></dt><dd>When this spawn method is used, Phusion Passenger will attempt to cache any framework code (e.g. Ruby on Rails itself) and application code for a limited period of time. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for a more detailed explanation of what smart spawning exactly does.
<div>

<strong>Pros:</strong> This can significantly decrease spawn time (by as much as 90%). And, when Ruby Enterprise Edition is used, <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">memory usage can be reduced by 33% on average</a>.

</div>
<div>

<strong>Cons:</strong> Some applications and libraries are not compatible with smart spawning. If that’s the case for your application, then you should use <em>conservative</em> as spawning method. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for possible compatibility issues.

</div>
</dd><dt><em>smart-lv2</em></dt><dd>This spawning method is similar to <em>smart</em> but it skips the framework spawner and uses the application spawner directly. This means the framework code is not cached between multiple applications, although it is still cached within instances of the same application. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for a more detailed explanation of what smart-lv2 spawning exactly does.
<div>

<strong>Pros:</strong> It is compatible with a larger number of applications when compared to the <em>smart</em> method, and still performs some caching.

</div>
<div>

<strong>Cons:</strong> It is slower than smart spawning if you have many applications which use the same framework version. It is therefore advised that shared hosts use the <em>smart</em> method instead.

</div>
</dd><dt><em>conservative</em></dt><dd>This spawning method is similar to the one used in Mongrel Cluster. It does not perform any code caching at all. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a> for a more detailed explanation of what conservative spawning exactly does.
<div>

<strong>Pros:</strong> Conservative spawning is guaranteed to be compatible with all applications and libraries.

</div>
<div>

<strong>Cons:</strong> Much slower than smart spawning. Every spawn action will be equally slow, though no slower than the startup time of a single server in Mongrel Cluster. Conservative spawning will also render <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">Ruby Enterprise Edition’s memory reduction technology</a> useless.

</div>
</dd></dl></div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>smart-lv2</em>.

</div>
</div>
<div>
<h3 id="PassengerUseGlobalQueue">5.5. PassengerUseGlobalQueue &lt;on|off&gt;</h3>
<div>

Turns the use of global queuing on or off.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
<div>

<em>This feature is sponsored by <a href="http://www.37signals.com/">37signals</a>.</em>

</div>
<div>
<div>What does this option do?</div>
Recall that Phusion Passenger spawns multiple backend processes (e.g. multiple Ruby on Rails processes), each which processes HTTP requests serially. One of Phusion Passenger’s jobs is to forward HTTP requests to a suitable backend process. A backend process may take an arbitrary amount of time to process a specific HTTP request. If the websites are (temporarily) under high load, and the backend processes cannot process the requests fast enough, then some requests may have to be queued.

</div>
<div>

If global queuing is turned off, then Phusion Passenger will use <em>fair load balancing</em>. This means that each backend process will have its own private queue. Phusion Passenger will forward an HTTP request to the backend process that has the least amount of requests in its queue.

</div>
<div>

If global queuing is turned on, then Phusion Passenger will use a global queue that’s shared between all backend processes. If an HTTP request comes in, and all the backend processes are still busy, then Phusion Passenger will wait until at least one backend process is done, and will then forward the request to that process.

</div>
<div>
<div>When to turn on global queuing?</div>
You should turn on global queuing if one of your web applications may have long-running requests.

</div>
<div>

For example suppose that:

</div>
<div>
<ul>
    <li>global queuing is turned off.</li>
    <li>we’re currently in a state where all backend processes have 3 requests in their queue, except for a single backend process, which has 1 request in its queue.</li>
</ul>
</div>
<div>

The situation looks like this:

</div>
<div>
<div>
<pre>Backend process A:  [*     ]  (1 request in queue)
Backend process B:  [***   ]  (3 requests in queue)
Backend process C:  [***   ]  (3 requests in queue)
Backend process D:  [***   ]  (3 requests in queue)</pre>
</div>
</div>
<div>

Each process is currently serving short-running requests.

</div>
<div>

Phusion Passenger will forward the next request to backend process A. A will now have 2 items in its queue. We’ll mark this new request with an X:

</div>
<div>
<div>
<pre>Backend process A:  [*X    ]  (2 request in queue)
Backend process B:  [***   ]  (3 requests in queue)
Backend process C:  [***   ]  (3 requests in queue)
Backend process D:  [***   ]  (3 requests in queue)</pre>
</div>
</div>
<div>

Assuming that B, C and D still aren’t done with their current request, the next HTTP request - let’s call this Y - will be forwarded to backend process A as well, because it has the least number of items in its queue:

</div>
<div>
<div>
<pre>Backend process A:  [*XY   ]  (3 requests in queue)
Backend process B:  [***   ]  (3 requests in queue)
Backend process C:  [***   ]  (3 requests in queue)
Backend process D:  [***   ]  (3 requests in queue)</pre>
</div>
</div>
<div>

But if request X happens to be a long-running request that needs 60 seconds to complete, then we’ll have a problem. Y won’t be processed for at least 60 seconds. It would have been a better idea if Y was forward to processes B, C or D instead, because they only have short-living requests in their queues.

</div>
<div>

This problem will be avoided entirely if you turn global queuing on. With global queuing, all backend processes will share the same queue. The first backend process that becomes available will take from the queue, and so this “queuing-behind-long-running-request” problem will never occur.

</div>
</div>
<div>
<h3 id="_passengerenabled_lt_on_off_gt">5.6. PassengerEnabled &lt;on|off&gt;</h3>
<div>

You can set this option to <em>off</em> to completely disable Phusion Passenger for a certain location. This is useful if, for example, you want to integrate a PHP application into the same virtual host as a Rails application.

</div>
<div>

Suppose that you have a Rails application in <em>/apps/foo</em>. Suppose that you’ve dropped Wordpress — a blogging application written in PHP — in <em>/apps/foo/public/wordpress</em>. You can then configure Phusion Passenger as follows:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /apps/foo/public
    &lt;Directory /apps/foo/public/wordpress&gt;
        PassengerEnabled off
        AllowOverride all      # &lt;-- Makes Wordpress's .htaccess file work.
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

This way, Phusion Passenger will not interfere with Wordpress.

</div>
<div>

<em>PassengerEnabled</em> may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
</div>
<div>
<h3 id="PassengerTempDir">5.7. PassengerTempDir &lt;directory&gt;</h3>
<div>

Specifies the directory that Phusion Passenger should use for storing temporary files. This includes things such as Unix socket files, buffered file uploads (see also <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUploadBufferDir">PassengerUploadBufferDir</a>), etc.

</div>
<div>

This option may be specified once, in the global server configuration. The default temp directory that Phusion Passenger uses is <em>/tmp</em>.

</div>
<div>

This option is especially useful if Apache is not allowed to write to /tmp (which is the case on some systems with strict SELinux policies) or if the partition that /tmp lives on doesn’t have enough disk space.

</div>
<div>
<div>Command line tools</div>
Some Phusion Passenger command line administration tools, such as passenger-status, must know what Phusion Passenger’s temp directory is in order to function properly. You can pass the directory through the PASSENGER_TMPDIR environment variable, or the TMPDIR environment variable (the former will be used if both are specified).

</div>
<div>

For example, if you set <em>PassengerTempDir</em> to <em>/my_temp_dir</em>, then invoke passenger-status after you’ve set the PASSENGER_TMPDIR or TMPDIR environment variable, like this:

</div>
<div>
<div>
<pre>export PASSENGER_TMPDIR=/my_temp-dir
sudo -E passenger-status
# The -E option tells 'sudo' to preserve environment variables.</pre>
</div>
</div>
</div>
<div>
<h3 id="PassengerUploadBufferDir">5.8. PassengerUploadBufferDir &lt;directory&gt;</h3>
<div>

Phusion Passenger buffers large file uploads to disk in order prevent slow file uploads from blocking web applications. By default, a subdirectory in the system’s temporary files directory (or a subdirectory in the directory specified in <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerTempDir">PassengerTempDir</a>, if set) is automatically created for storing these buffered file uploads.

</div>
<div>

This configuration directive allows you to specify a different directory for storing buffered file uploads. If you’ve specified such a directory (as opposed to using Phusion Passenger’s default) then you <strong>must</strong> ensure that this directory exists.

</div>
<div>

This configuration directive is also useful if you’re using apache2-mpm-itk. The buffered file upload directory that Phusion Passenger creates by default has very strict permissions: it can only be accessed by the Apache worker processes. However, Phusion Passenger assumes that all Apache worker processes are running as the same user. apache2-mpm-itk breaks this assumption by running multiple Apache worker processes as different users. So if you’re using apace2-mpm-itk, you should set this option to a directory that is writable by all Apache worker processes, such as <em>/tmp</em>.

</div>
<div>

You may specify <em>PassengerUploadBufferDir</em> in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverrides Options is enabled.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
</div>
<div>
<h3 id="_passengerrestartdir_lt_directory_gt">5.9. PassengerRestartDir &lt;directory&gt;</h3>
<div>

As described in the deployment chapters of this document, Phusion Passenger checks the file <em>tmp/restart.txt</em> in the applications' <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">root directory</a> for restarting applications. Sometimes it may be desirable for Phusion Passenger to look in a different directory instead, for example for security reasons (see below). This option allows you to customize the directory in which <em>restart.txt</em> is searched for.

</div>
<div>

You may specify <em>PassengerRestartDir</em> in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverrides Options is enabled.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
<div>

You can either set it to an absolute directory, or to a directory relative to the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_root">application root</a>. Examples:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    # Phusion Passenger will check for /apps/foo/public/tmp/restart.txt
    DocumentRoot /apps/foo/public
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.bar.com
    DocumentRoot /apps/bar/public
    # An absolute filename is given; Phusion Passenger will
    # check for /restart_files/bar/restart.txt
    PassengerRestartDir /restart_files/bar
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.baz.com
    DocumentRoot /apps/baz/public
    # A relative filename is given; Phusion Passenger will
    # check for /apps/baz/restart_files/restart.txt
    #
    # Note that this directory is relative to the APPLICATION ROOT, *not*
    # the value of DocumentRoot!
    PassengerRestartDir restart_files
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>
<div>What are the security reasons for wanting to customize PassengerRestartDir?</div>
Touching restart.txt will cause Phusion Passenger to restart the application. So anybody who can touch restart.txt can effectively cause a Denial-of-Service attack by touching restart.txt over and over. If your web server or one of your web applications has the permission to touch restart.txt, and one of them has a security flaw which allows an attacker to touch restart.txt, then that will allow the attacker to cause a Denial-of-Service.

</div>
<div>

You can prevent this from happening by pointing PassengerRestartDir to a directory that’s readable by Apache, but only writable by administrators.

</div>
</div>
<div>
<h3 id="PassengerBufferResponse">5.10. PassengerBufferResponse &lt;on|off&gt;</h3>
<div>

When turned on, application-generated responses are buffered in memory. By buffering responses, protection is provided against slow HTTP clients that can not read your response immediately.

</div>
<div>

For example, consider an HTTP client that’s on a dial-up modem link, and your application instance generates a 2 MB response. If response buffering is turned off then your application instance will be blocked until the entire 2 MB has been sent out to the HTTP client. This disallows your application instance to do any useful work in the mean time. By enabling response buffering, Phusion Passenger will read the application response as quickly as possible and will take care of slow clients.

</div>
<div>

However, keep in mind that enabling this option will make streaming responses impossible. Consider for example this piece of Rails code:

</div>
<div>
<div>
<pre>render :text =&gt; lambda { |response, output|
    10.times do |i|
        output.write("entry #{i}\n")
        output.flush
        sleep 1
    end
}</pre>
</div>
</div>
<div>

…or this piece of Rack code:

</div>
<div>
<div>
<pre>class Response
    def each
        10.times do |i|
            yield("entry #{i}\n")
            sleep 1
        end
    end
end

app = lambda do |env|
    [200, { "Content-Type" =&gt; "text/plain" }, Response.new]
end</pre>
</div>
</div>
<div>

When response buffering is turned on, Phusion Passenger will wait until the application is done sending the entire response before forwarding it to the client. The client will not receive anything for 10 seconds, after which it receives the entire response at once. When response buffering is turned off, it works as expected: the client receives an "entry X" message every second for 10 seconds.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>
<div>

The <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerBufferResponse">PassengerBufferResponse</a> directive should be turned off if responses can be huge. Because entire responses are buffered in memory when turned on.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_security_options">5.11. Security options</h3>
<div>
<h4 id="PassengerUserSwitching">5.11.1. PassengerUserSwitching &lt;on|off&gt;</h4>
<div>

Whether to enable <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a>.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>on</em>.

</div>
</div>
<div>
<h4 id="_passengeruser_lt_username_gt">5.11.2. PassengerUser &lt;username&gt;</h4>
<div>

If <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> is enabled, then Phusion Passenger will by default run the web application as the owner of the file <em>config/environment.rb</em> (for Rails apps) or <em>config.ru</em> (for Rack apps). This option allows you to override that behavior and explicitly set a user to run the web application as, regardless of the ownership of <em>environment.rb</em>/<em>config.ru</em>.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
</div>
<div>
<h4 id="_passengergroup_lt_group_name_gt">5.11.3. PassengerGroup &lt;group name&gt;</h4>
<div>

If <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> is enabled, then Phusion Passenger will by default run the web application as the primary group of the owner of the file <em>config/environment.rb</em> (for Rails apps) or <em>config.ru</em> (for Rack apps). This option allows you to override that behavior and explicitly set a group to run the web application as, regardless of the ownership of <em>environment.rb</em>/<em>config.ru</em>.

</div>
<div>

<em>&lt;group name&gt;</em> may also be set to the special value <em>!STARTUP_FILE!</em>, in which case the web application’s group will be set to <em>environment.rb</em>/<em>config.ru</em>'s group.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once.

</div>
</div>
<div>
<h4 id="PassengerDefaultUser">5.11.4. PassengerDefaultUser &lt;username&gt;</h4>
<div>

Phusion Passenger enables <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> by default. This configuration option allows one to specify the user that applications must run as, if user switching fails or is disabled.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>nobody</em>.

</div>
</div>
<div>
<h4 id="PassengerDefaultGroup">5.11.5. PassengerDefaultGroup &lt;group name&gt;</h4>
<div>

Phusion Passenger enables <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">user switching support</a> by default. This configuration option allows one to specify the group that applications must run as, if user switching fails or is disabled.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is the primary group of the user specifified by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultUser">PassengerDefaultUser</a>.

</div>
</div>
<div>
<h4 id="_passengerfriendlyerrorpages_lt_on_off_gt">5.11.6. PassengerFriendlyErrorPages &lt;on|off&gt;</h4>
<div>

Phusion Passenger can display friendly error pages whenever an application fails to start. This friendly error page presents the startup error message, some suggestions for solving the problem, and a backtrace. This feature is very useful during application development and useful for less experienced system administrators, but the page might reveal potentially sensitive information, depending on the application. Experienced system administrators who are using Phusion Passenger on serious production servers should consider turning this feature off.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>on</em>.

</div>
</div>
</div>
<div>
<h3 id="_resource_control_and_optimization_options">5.12. Resource control and optimization options</h3>
<div>
<h4 id="_passengermaxpoolsize_lt_integer_gt">5.12.1. PassengerMaxPoolSize &lt;integer&gt;</h4>
<div>

The maximum number of Ruby on Rails or Rack application instances that may be simultaneously active. A larger number results in higher memory usage, but improved ability to handle concurrent HTTP clients.

</div>
<div>

The optimal value depends on your system’s hardware and the server’s average load. You should experiment with different values. But generally speaking, the value should be at least equal to the number of CPUs (or CPU cores) that you have. If your system has 2 GB of RAM, then we recommend a value of <em>30</em>. If your system is a Virtual Private Server (VPS) and has about 256 MB RAM, and is also running other services such as MySQL, then we recommend a value of <em>2</em>.

</div>
<div>

If you find that your server is unable to handle the load on your Rails/Rack websites (i.e. running out of memory) then you should lower this value. (Though if your sites are really that popular, then you should strongly consider upgrading your hardware or getting more servers.)

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>6</em>.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>We strongly recommend you to <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">use Ruby Enterprise Edition</a>. This allows you to reduce the memory usage of your Ruby on Rails applications by about 33%. And it’s not hard to install.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="PassengerMinInstances">5.12.2. PassengerMinInstances &lt;integer&gt;</h4>
<div>

This specifies the minimum number of application instances that must be kept around whenever Phusion Passenger cleans up idle instances. You should set this option to a non-zero value if you want to avoid potentially long startup times after a website has been idle for an extended period.

</div>
<div>

Please note that this option does <strong>not</strong> pre-start application instances during Apache startup. It just makes sure that when the application is first accessed:

</div>
<div>
<ol>
    <li>at least the given number of instances will be spawned.</li>
    <li>the given number of processes will be kept around even when instances are being idle cleaned (see <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">PassengerPoolIdleTime</a>).</li>
</ol>
</div>
<div>

If you want to pre-start application instances during Apache startup, then you should use the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPreStart">PassengerPreStart</a> directive, possibly in combination with <em>PassengerMinInstances</em>. This behavior might seem counter-intuitive at first sight, but <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPreStart">PassengerPreStart</a> explains the rationale behind it.

</div>
<div>

For example, suppose that you have the following configuration:

</div>
<div>
<div>
<pre>PassengerMaxPoolSize 15
PassengerPoolIdleTime 10

&lt;VirtualHost *:80&gt;
    ServerName foobar.com
    DocumentRoot /webapps/foobar/public
    PassengerMinInstances 3
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

When you start Apache, there are 0 application instances for <em>foobar.com</em>. Things will stay that way until someone visits <em>foobar.com</em>. Suppose that there is only 1 visitor. 1 application instance will be started immediately to serve the visitor, while 2 will be spawned in the background. After 10 seconds, when the idle timeout has been reached, these 3 application instances will not be cleaned up.

</div>
<div>

Now suppose that there’s a sudden spike of traffic, and 100 users visit <em>foobar.com</em> simultanously. Phusion Passenger will start 12 more application instances. After the idle timeout of 10 seconds have passed, Phusion Passenger will clean up 12 application instances, keeping 3 instances around.

</div>
<div>

The PassengerMinInstances option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Limits is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>1</em>.

</div>
</div>
<div>
<h4 id="_passengermaxinstancesperapp_lt_integer_gt">5.12.3. PassengerMaxInstancesPerApp &lt;integer&gt;</h4>
<div>

The maximum number of application instances that may be simultaneously active for a single application. This helps to make sure that a single application will not occupy all available slots in the application pool.

</div>
<div>

This value must be less than <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">PassengerMaxPoolSize</a>. A value of 0 means that there is no limit placed on the number of instances a single application may use, i.e. only the global limit of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">PassengerMaxPoolSize</a> will be enforced.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>0</em>.

</div>
</div>
<div>
<h4 id="PassengerPoolIdleTime">5.12.4. PassengerPoolIdleTime &lt;integer&gt;</h4>
<div>

The maximum number of seconds that an application instance may be idle. That is, if an application instance hasn’t received any traffic after the given number of seconds, then it will be shutdown in order to conserve memory.

</div>
<div>

Decreasing this value means that applications will have to be spawned more often. Since spawning is a relatively slow operation, some visitors may notice a small delay when they visit your Rails/Rack website. However, it will also free up resources used by applications more quickly.

</div>
<div>

The optimal value depends on the average time that a visitor spends on a single Rails/Rack web page. We recommend a value of 2 * x, where x is the average number of seconds that a visitor spends on a single Rails/Rack web page. But your mileage may vary.

</div>
<div>

When this value is set to <em>0</em>, application instances will not be shutdown unless it’s really necessary, i.e. when Phusion Passenger is out of worker processes for a given application and one of the inactive application instances needs to make place for another application instance. Setting the value to 0 is recommended if you’re on a non-shared host that’s only running a few applications, each which must be available at all times.

</div>
<div>

This option may only occur once, in the global server configuration. The default value is <em>300</em>.

</div>
</div>
<div>
<h4 id="PassengerMaxRequests">5.12.5. PassengerMaxRequests &lt;integer&gt;</h4>
<div>

The maximum number of requests an application instance will process. After serving that many requests, the application instance will be shut down and Phusion Passenger will restart it. A value of 0 means that there is no maximum: an application instance will thus be shut down when its idle timeout has been reached.

</div>
<div>

This option is useful if your application is leaking memory. By shutting it down after a certain number of requests, all of its memory is guaranteed to be freed by the operating system.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Limits is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>0</em>.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/caution.png" alt="Caution" /></td>
<td>
<div>

The <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxRequests">PassengerMaxRequests</a> directive should be considered as a workaround for misbehaving applications. It is advised that you fix the problem in your application rather than relying on these directives as a measure to avoid memory leaks.

</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="_passengerstatthrottlerate_lt_integer_gt">5.12.6. PassengerStatThrottleRate &lt;integer&gt;</h4>
<div>

By default, Phusion Passenger performs several filesystem checks (or, in programmers jargon, <em>stat() calls</em>) each time a request is processed:

</div>
<div>
<ul>
    <li>It checks whether <em>config/environment.rb</em>, <em>config.ru</em> or <em>passenger_wsgi.py</em> is present, in order to autodetect Rails, Rack and WSGI applications.</li>
    <li>It checks whether <em>restart.txt</em> has changed or whether <em>always_restart.txt</em> exists, in order to determine whether the application should be restarted.</li>
</ul>
</div>
<div>

On some systems where disk I/O is expensive, e.g. systems where the harddisk is already being heavily loaded, or systems where applications are stored on NFS shares, these filesystem checks can incur a lot of overhead.

</div>
<div>

You can decrease or almost entirely eliminate this overhead by setting <em>PassengerStatThrottleRate</em>. Setting this option to a value of <em>x</em> means that the above list of filesystem checks will be performed at most once every <em>x</em> seconds. Setting it to a value of <em>0</em> means that no throttling will take place, or in other words, that the above list of filesystem checks will be performed on every request.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Limits is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>0</em>.

</div>
</div>
<div>
<h4 id="PassengerPreStart">5.12.7. PassengerPreStart &lt;url&gt;</h4>
<div>

By default, Phusion Passenger does not start any application instances until said web application is first accessed. The result is that the first visitor of said web application might experience a small delay as Phusion Passenger is starting the web application on demand. If that is undesirable, then this directive can be used to pre-started application instances during Apache startup.

</div>
<div>

A few things to be careful of:

</div>
<div>
<ul>
    <li>This directive accepts the <strong>URL</strong> of the web application you want to pre-start, not a on/off value! This might seem a bit weird, but read on for rationale. As for the specifics of the URL:
<div>
<ul>
    <li>The domain part of the URL must be equal to the value of the <em>ServerName</em> directive of the VirtualHost block that defines the web application.</li>
    <li>Unless the web application is deployed on port 80, the URL should contain the web application’s port number too.</li>
    <li>The path part of the URL must point to some URI that the web application handles.</li>
</ul>
</div></li>
    <li>You will probably want to combine this option with <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMinInstances">PassengerMinInstances</a> because application instances started with <em>PassengerPreStart</em> are subject to the usual idle timeout rules. See the example below for an explanation.</li>
</ul>
</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified any number of times.

</div>
<div>
<h5 id="_example_1_basic_usage">Example 1: basic usage</h5>
<div>

Suppose that you have the following web applications.

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName foo.com
   DocumentRoot /webapps/foo/public
&lt;/VirtualHost&gt;

&lt;VirtualHost *:3500&gt;
   ServerName bar.com
   DocumentRoot /webapps/bar/public
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

You want both of them to be pre-started during Apache startup. The URL for foo.com is <em>http://foo.com/</em> (or, equivalently, <em>http://foo.com:80/</em>) and the URL for bar.com is <em>http://bar.com:3500/</em>. So we add two PassengerPreStart directives, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName foo.com
   DocumentRoot /webapps/foo/public
&lt;/VirtualHost&gt;

&lt;VirtualHost *:3500&gt;
   ServerName bar.com
   DocumentRoot /webapps/bar/public
&lt;/VirtualHost&gt;

PassengerPreStart http://foo.com/           # &lt;--- added
PassengerPreStart http://bar.com:3500/      # &lt;--- added</pre>
</div>
</div>
</div>
<div>
<h5 id="_example_2_pre_starting_apps_that_are_deployed_in_sub_uris">Example 2: pre-starting apps that are deployed in sub-URIs</h5>
<div>

Suppose that you have a web application deployed in a sub-URI <em>/store</em>, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName myblog.com
   DocumentRoot /webapps/wordpress
   RailsBaseURI /store
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

Then specify the domain name of its containing virtual host followed by the sub-URI, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName myblog.com
   DocumentRoot /webapps/wordpress
   RailsBaseURI /store
&lt;/VirtualHost&gt;

PassengerPreStart http://myblog.com/store    # &lt;----- added</pre>
</div>
</div>
<div>

The sub-URI <strong>must</strong> be included; if you don’t then the directive will have no effect. The following example is wrong and won’t pre-start the store web application:

</div>
<div>
<div>
<pre>PassengerPreStart http://myblog.com/    # &lt;----- WRONG! Missing "/store" part.</pre>
</div>
</div>
</div>
<div>
<h5 id="_example_3_combining_with_passengermininstances">Example 3: combining with PassengerMinInstances</h5>
<div>

Application instances started with PassengerPreStart are also subject to the idle timeout rules as specified by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">PassengerPoolIdleTime</a>! That means that by default, the pre-started application instances for foo.com are bar.com are shut down after a few minutes of inactivity. If you don’t want that to happen, then you should combine PassengerPreStart with <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMinInstances">PassengerMinInstances</a>, like this:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
   ServerName foo.com
   DocumentRoot /webapps/foo/public
   PassengerMinInstances 1      # &lt;--- added
&lt;/VirtualHost&gt;

&lt;VirtualHost *:3500&gt;
   ServerName bar.com
   DocumentRoot /webapps/bar/public
   PassengerMinInstances 1      # &lt;--- added
&lt;/VirtualHost&gt;

PassengerPreStart http://foo.com/
PassengerPreStart http://bar.com:3500/</pre>
</div>
</div>
</div>
<div>
<h5 id="_so_why_a_url_why_not_just_an_on_off_flag">So why a URL? Why not just an on/off flag?</h5>
<div>

A directive that accepts a simple on/off flag is definitely more intuitive, but due technical difficulties w.r.t. the way Apache works, it’s very hard to implement it like that:

</div>
<div>
<ul>
    <li>It is very hard to obtain a full list of web applications defined in the Apache configuration file(s). In other words, it’s hard for Phusion Passenger to know which web applications are deployed on Apache until a web application is first accessed, and without such a list Phusion Passenger wouldn’t know which web applications to pre-start. It’s probably not completely impossible to obtain such a list, but this brings us to the following point;</li>
    <li>Users expect things like <em>mod_env</em> to work even in combination with Phusion Passenger. For example some people put “SetEnv PATH=….” in their virtual host block and they expect the web application to pick that environment variable up when it’s started. Information like this is stored in module-specific locations that Phusion Passenger cannot access directly. Even if the previous bullet point is solved and we can obtain a list of web applications, we cannot start the application with the correct mod_env information. mod_env is just one such example; there are probably many other Apache modules, all of which people expect to work, but we cannot answer to those expectations if PassengerPreStart is implemented as a simple on/off flag.</li>
</ul>
</div>
<div>

So as a compromise, we made it accept a URL. This is easier to implement for us and altough it looks weird, it behaves consistently w.r.t. cooperation with other Apache modules.

</div>
</div>
<div>
<h5 id="_what_does_phusion_passenger_do_with_the_url">What does Phusion Passenger do with the URL?</h5>
<div>

During Apache startup, Phusion Passenger will send a dummy HEAD request to the given URL and discard the result. In other words, Phusion Passenger simulates a web access at the given URL. However this simulated request is always sent to localhost, <strong>not</strong> to the IP that the domain resolves to. Suppose that bar.com in example 1 resolves to 209.85.227.99; Phusion Passenger will send the following HTTP request to 127.0.0.1 port 3500 (and not to 209.85.227.99 port 3500):

</div>
<div>
<div>
<pre>HEAD / HTTP/1.1
Host: bar.com
Connection: close</pre>
</div>
</div>
<div>

Similarly, for example 2, Phusion Passenger will send the following HTTP request to 127.0.0.1 port 80:

</div>
<div>
<div>
<pre>HEAD /store HTTP/1.1
Host: myblog.com
Connection: close</pre>
</div>
</div>
</div>
<div>
<h5 id="_do_i_need_to_edit_etc_hosts_and_point_the_domain_in_the_url_to_127_0_0_1">Do I need to edit /etc/hosts and point the domain in the URL to 127.0.0.1?</h5>
<div>

No. See previous subsection.

</div>
</div>
<div>
<h5 id="_my_web_application_consists_of_multiple_web_servers_what_url_do_i_need_to_specify_and_in_which_web_server_8217_s_apache_config_file">My web application consists of multiple web servers. What URL do I need to specify, and in which web server’s Apache config file?</h5>
<div>

Put the web application’s virtual host’s ServerName value and the virtual host’s port in the URL, and put PassengerPreStart on all machines that you want to pre-start the web application on. The simulated web request is always sent to 127.0.0.1, with the domain name in the URL as value for the <em>Host</em> HTTP header, so you don’t need to worry about the request ending up at a different web server in the cluster.

</div>
</div>
<div>
<h5 id="_does_passengerprestart_support_https_urls">Does PassengerPreStart support https:// URLs?</h5>
<div>

Yes. And it does not perform any certificate validation.

</div>
</div>
</div>
<div>
<h4 id="PassengerHighPerformance">5.12.8. PassengerHighPerformance &lt;on|off&gt;</h4>
<div>

By default, Phusion Passenger is compatible with mod_rewrite and most other Apache modules. However, a lot of effort is required in order to be compatible. If you turn <em>PassengerHighPerformance</em> to <em>on</em>, then Phusion Passenger will be a little faster, in return for reduced compatibility with other Apache modules.

</div>
<div>

In places where <em>PassengerHighPerformance</em> is turned on, mod_rewrite rules will likely not work. mod_autoindex (the module which displays a directory index) will also not work. Other Apache modules may or may not work, depending on what they exactly do. We recommend you to find out how other modules behave in high performance mode via testing.

</div>
<div>

This option is <strong>not</strong> an all-or-nothing global option: you can enable high performance mode for certain virtual hosts or certain URLs only. The <em>PassengerHighPerformance</em> option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>off</em>, so high performance mode is disabled by default, and you have to explicitly enable it.

</div>
<div>
<div>When to enable high performance mode?</div>
If you do not use mod_rewrite or other Apache modules then it might make sense to enable high performance mode.

</div>
<div>

It’s likely that some of your applications depend on mod_rewrite or other Apache modules, while some do not. In that case you can enable high performance for only those applications that don’t use other Apache modules. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /apps/foo/public
    .... mod_rewrite rules or options for other Apache modules here ...
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName www.bar.com
    DocumentRoot /apps/bar/public
    PassengerHighPerformance on
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

In the above example, high performance mode is only enabled for www.bar.com. It is disabled for everything else.

</div>
<div>

If your application generally depends on mod_rewrite or other Apache modules, but a certain URL that’s accessed often doesn’t depend on those other modules, then you can enable high performance mode for a certain URL only. For example:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.foo.com
    DocumentRoot /apps/foo/public
    .... mod_rewrite rules or options for other Apache modules here ...

    &lt;Location /chatroom/ajax_update_poll&gt;
        PassengerHighPerformance on
    &lt;/Location&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

This enables high performance mode for <a href="http://www.foo.com/chatroom/ajax_update_poll">http://www.foo.com/chatroom/ajax_update_poll</a> only.

</div>
</div>
</div>
<div>
<h3 id="_compatibility_options">5.13. Compatibility options</h3>
<div>
<h4 id="PassengerResolveSymlinksInDocumentRoot">5.13.1. PassengerResolveSymlinksInDocumentRoot &lt;on|off&gt;</h4>
<div>

Configures whether Phusion Passenger should resolve symlinks in the document root. Please refer to <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#application_detection">How Phusion Passenger detects whether a virtual host is a web application</a> for more information.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. It is off by default.

</div>
</div>
<div>
<h4 id="_passengerallowencodedslashes_lt_on_off_gt">5.13.2. PassengerAllowEncodedSlashes &lt;on|off&gt;</h4>
<div>

By default, Apache doesn’t support URLs with encoded slashes (%2f), e.g. URLs like this: /users/fujikura%2fyuu. If you access such an URL then Apache will return a 404 Not Found error. This can be solved by turning on PassengerAllowEncodedSlashes as well as Apache’s <a href="http://httpd.apache.org/docs/2.0/mod/core.html#allowencodedslashes">AllowEncodedSlashes</a>.

</div>
<div>

Is it important that you turn on both AllowEncodedSlashes <strong>and</strong> PassengerAllowEncodedSlashes, otherwise this feature will not work properly.

</div>
<div>

PassengerAllowEncodedSlashes may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. It is off by default.

</div>
<div>

Please note however that turning on support for encoded slashes will break support for mod_rewrite passthrough rules. Because of bugs/limitations in Apache, Phusion Passenger can support either encoded slashes or mod_rewrite passthrough rules, but not both at the same time. Luckily this option can be specified anywhere, so you can enable it only for virtual hosts or URLs that need it:

</div>
<div>
<div>
<pre>&lt;VirtualHost *:80&gt;
    ServerName www.example.com
    DocumentRoot /webapps/example/public
    AllowEncodedSlashes on
    RewriteEngine on

    # Check for maintenance file and redirect all requests
    RewriteCond %{DOCUMENT_ROOT}/system/maintenance.html -f
    RewriteCond %{SCRIPT_FILENAME} !maintenance.html
    RewriteRule ^.*$ /system/maintenance.html [L]

    # Make /about an alias for /info/about.
    RewriteRule ^/about$ /info/about [PT,L]

    &lt;Location ~ "^/users/"&gt;
        # In a location block so that it doesn't interfere with the
        # above /about mod_rewrite rule.
        PassengerAllowEncodedSlashes on
    &lt;/Location&gt;
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

With this, <a href="http://www.example.com/users/fujikura%2fyuu">http://www.example.com/users/fujikura%2fyuu</a> will work properly, and accessing <a href="http://www.example.com/about">http://www.example.com/about</a> will properly display the result of <a href="http://www.example.com/info/about">http://www.example.com/info/about</a>. Notice that PassengerAllowEncodedSlashes only interferes with passthrough rules, not with any other mod_rewrite rules. The rules for displaying maintenance.html will work fine even for URLs starting with "/users".

</div>
</div>
</div>
<div>
<h3 id="_logging_and_debugging_options">5.14. Logging and debugging options</h3>
<div>
<h4 id="_passengerloglevel_lt_integer_gt">5.14.1. PassengerLogLevel &lt;integer&gt;</h4>
<div>

This option allows one to specify how much information Phusion Passenger should write to the Apache error log file. A higher log level value means that more information will be logged.

</div>
<div>

Possible values are:

</div>
<div>
<ul>
    <li><em>0</em>: Show only errors and warnings.</li>
    <li><em>1</em>: Show the most important debugging information. This might be useful for system administrators who are trying to figure out the cause of a problem.</li>
    <li><em>2</em>: Show more debugging information. This is typically only useful for developers.</li>
    <li><em>3</em>: Show even more debugging information.</li>
</ul>
</div>
<div>

This option may only occur once, in the global server configuration. The default is <em>0</em>.

</div>
</div>
<div>
<h4 id="_passengerdebuglogfile_lt_filename_gt">5.14.2. PassengerDebugLogFile &lt;filename&gt;</h4>
<div>

By default Phusion Passenger debugging and error messages are written to the global web server error log. This option allows one to specify the file that debugging and error messages should be written to instead.

</div>
<div>

This option may only occur once, in the global server configuration.

</div>
</div>
</div>
<div>
<h3 id="_ruby_on_rails_specific_options">5.15. Ruby on Rails-specific options</h3>
<div>
<h4 id="_railsautodetect_lt_on_off_gt">5.15.1. RailsAutoDetect &lt;on|off&gt;</h4>
<div>

Whether Phusion Passenger should automatically detect whether a virtual host’s document root is a Ruby on Rails application. The default is <em>on</em>.

</div>
<div>

This option may occur in the global server configuration or in a virtual host configuration block.

</div>
<div>

For example, consider the following configuration:

</div>
<div>
<div>
<pre>RailsAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.mycook.com
    DocumentRoot /webapps/mycook/public
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

If one goes to <em>http://www.mycook.com/</em>, the visitor will see the contents of the <em>/webapps/mycook/public</em> folder, instead of the output of the Ruby on Rails application.

</div>
<div>

It is possible to explicitly specify that the host is a Ruby on Rails application by using the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsBaseURI">RailsBaseURI</a> configuration option:

</div>
<div>
<div>
<pre>RailsAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.mycook.com
    DocumentRoot /webapps/mycook/public
    RailsBaseURI /           # This line has been added.
&lt;/VirtualHost&gt;</pre>
</div>
</div>
</div>
<div>
<h4 id="RailsBaseURI">5.15.2. RailsBaseURI &lt;uri&gt;</h4>
<div>

Used to specify that the given URI is a Rails application. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#deploying_rails_to_sub_uri">Deploying Rails to a sub URI</a> for an example.

</div>
<div>

It is allowed to specify this option multiple times. Do this to deploy multiple Rails applications in different sub-URIs under the same virtual host.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
</div>
<div>
<h4 id="rails_env">5.15.3. RailsEnv &lt;string&gt;</h4>
<div>

This option allows one to specify the default RAILS_ENV value.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>production</em>.

</div>
</div>
<div>
<h4 id="_railsframeworkspawneridletime_lt_integer_gt">5.15.4. RailsFrameworkSpawnerIdleTime &lt;integer&gt;</h4>
<div>

The FrameworkSpawner server (explained in <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a>) has an idle timeout, just like the backend processes spawned by Phusion Passenger do. That is, it will automatically shutdown if it hasn’t done anything for a given period.

</div>
<div>

This option allows you to set the FrameworkSpawner server’s idle timeout, in seconds. A value of <em>0</em> means that it should never idle timeout.

</div>
<div>

Setting a higher value will mean that the FrameworkSpawner server is kept around longer, which may slightly increase memory usage. But as long as the FrameworkSpawner server is running, the time to spawn a Ruby on Rails backend process only takes about 40% of the time that is normally needed, assuming that you’re using the <em>smart</em> <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">spawning method</a>. So if your system has enough memory, is it recommended that you set this option to a high value or to <em>0</em>.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>1800</em> (30 minutes).

</div>
</div>
<div>
<h4 id="_railsappspawneridletime_lt_integer_gt">5.15.5. RailsAppSpawnerIdleTime &lt;integer&gt;</h4>
<div>

The ApplicationSpawner server (explained in <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#spawning_methods_explained">Spawning methods explained</a>) has an idle timeout, just like the backend processes spawned by Phusion Passenger do. That is, it will automatically shutdown if it hasn’t done anything for a given period.

</div>
<div>

This option allows you to set the ApplicationSpawner server’s idle timeout, in seconds. A value of <em>0</em> means that it should never idle timeout.

</div>
<div>

Setting a higher value will mean that the ApplicationSpawner server is kept around longer, which may slightly increase memory usage. But as long as the ApplicationSpawner server is running, the time to spawn a Ruby on Rails backend process only takes about 10% of the time that is normally needed, assuming that you’re using the <em>smart</em> or <em>smart-lv2</em> <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">spawning method</a>. So if your system has enough memory, is it recommended that you set this option to a high value or to <em>0</em>.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>600</em> (10 minutes).

</div>
</div>
</div>
<div>
<h3 id="_rack_specific_options">5.16. Rack-specific options</h3>
<div>
<h4 id="_rackautodetect_lt_on_off_gt">5.16.1. RackAutoDetect &lt;on|off&gt;</h4>
<div>

Whether Phusion Passenger should automatically detect whether a virtual host’s document root is a Rack application. The default is <em>on</em>.

</div>
<div>

This option may occur in the global server configuration or in a virtual host configuration block.

</div>
<div>

For example, consider the following configuration:

</div>
<div>
<div>
<pre>RackAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.rackapp.com
    DocumentRoot /webapps/my_rack_app/public
&lt;/VirtualHost&gt;</pre>
</div>
</div>
<div>

If one goes to <em>http://www.rackapp.com/</em>, the visitor will see the contents of the <em>/webapps/my_rack_app/public</em> folder, instead of the output of the Rack application.

</div>
<div>

It is possible to explicitly specify that the host is a Rack application by using the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RackBaseURI">RackBaseURI</a> configuration option:

</div>
<div>
<div>
<pre>RackAutoDetect off
&lt;VirtualHost *:80&gt;
    ServerName www.rackapp.com
    DocumentRoot /webapps/my_rack_app/public
    RackBaseURI /       # This line was added
&lt;/VirtualHost&gt;</pre>
</div>
</div>
</div>
<div>
<h4 id="RackBaseURI">5.16.2. RackBaseURI &lt;uri&gt;</h4>
<div>

Used to specify that the given URI is a Rack application. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#deploying_rack_to_sub_uri">Deploying Rack to a sub URI</a> for an example.

</div>
<div>

It is allowed to specify this option multiple times. Do this to deploy multiple Rack applications in different sub-URIs under the same virtual host.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
</div>
<div>
<h4 id="rack_env">5.16.3. RackEnv &lt;string&gt;</h4>
<div>

The given value will be accessible in Rack applications in the RACK_ENV environment variable. This allows one to define the environment in which Rack applications are run, very similar to RAILS_ENV.

</div>
<div>

This option may occur in the following places:

</div>
<div>
<ul>
    <li>In the global server configuration.</li>
    <li>In a virtual host configuration block.</li>
    <li>In a &lt;Directory&gt; or &lt;Location&gt; block.</li>
    <li>In <em>.htaccess</em>, if AllowOverride Options is on.</li>
</ul>
</div>
<div>

In each place, it may be specified at most once. The default value is <em>production</em>.

</div>
</div>
</div>
<div>
<h3 id="_deprecated_options">5.17. Deprecated options</h3>
<div>

The following options have been deprecated, but are still supported for backwards compatibility reasons.

</div>
<div>
<h4 id="_railsruby">5.17.1. RailsRuby</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerRuby">PassengerRuby</a>.

</div>
</div>
<div>
<h4 id="_railsuserswitching">5.17.2. RailsUserSwitching</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUserSwitching">PassengerUserSwitching</a>.

</div>
</div>
<div>
<h4 id="_railsdefaultuser">5.17.3. RailsDefaultUser</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultUser">PassengerDefaultUser</a>.

</div>
</div>
<div>
<h4 id="_railsallowmodrewrite">5.17.4. RailsAllowModRewrite</h4>
<div>

This option doesn’t do anything anymore in recent versions of Phusion Passenger.

</div>
</div>
<div>
<h4 id="_railsspawnmethod">5.17.5. RailsSpawnMethod</h4>
<div>

Deprecated in favor of <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">PassengerSpawnMethod</a>.

</div>
</div>
</div>
</div>
</div>


<div>
<h2 id="_troubleshooting">6. Troubleshooting</h2>
<div>
<div>
<h3 id="_operating_system_specific_problems">6.1. Operating system-specific problems</h3>
<div>
<h4 id="_macos_x_the_installer_cannot_locate_mamp_8217_s_apache">6.1.1. MacOS X: The installer cannot locate MAMP’s Apache</h4>
<div>
<div>
<div>Symptoms</div>
<div>

The installer finds Apache 2 development headers at /Applications/MAMP/Library/bin/apxs. However, Apache cannot be found. The installer also outputs the following error:

</div>
<div>
<div>
<pre>cannot open /Applications/MAMP/Library/build/config_vars.mk:
No such file or directory at /Applications/MAMP/Library/bin/apxs line 218.</pre>
</div>
</div>
</div>
</div>
<div>

Your MAMP installation seems to be broken. In particular, <em>config_vars.mk</em> is missing. Please read <a href="http://forum.mamp.info/viewtopic.php?t=1866">this forum topic</a> to learn how to fix this problem.

</div>
<div>

See also <a href="http://code.google.com/p/phusion-passenger/issues/detail?id=12">this bug report</a>.

</div>
</div>
</div>
<div>
<h3 id="_problems_during_installation">6.2. Problems during installation</h3>
<div>
<h4 id="installing_ruby_dev">6.2.1. Ruby development headers aren’t installed</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Installing Phusion Passenger fails because of one of the following errors:

</div>
<div>
<ul>
    <li>The Phusion Passenger installer tells you that the Ruby development headers aren’t installed.</li>
    <li>The error message “'no such file to load — mkmf”' occurs.</li>
    <li>The error message “'ruby.h: No such file or directory”' occurs.</li>
</ul>
</div>
</div>
</div>
<div>

Phusion Passenger makes use of a native extension, so the Ruby development headers must be installed. On most Linux systems, Ruby and the Ruby development headers are contained in separate packages, so having Ruby installed does not automatically imply having the development headers installed.

</div>
<div>

Here’s how you can install the development headers:

</div>
<div><dl><dt>Ubuntu/Debian</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install ruby1.8-dev</pre>
</div>
</div>
</dd><dt>Fedora/CentOS/RHEL</dt><dd>Please type:
<div>
<div>
<pre>su -c 'yum install ruby-devel'</pre>
</div>
</div>
</dd><dt>FreeBSD</dt><dd>Please install Ruby from <em>ports</em> or with pkg_add. If that fails, please install Ruby from source.

</dd><dt>MacOS X</dt><dd>Please install Ruby from source.

</dd><dt>Other operating systems</dt><dd>Please consult your operating system’s native package database. There should be a package containing the Ruby development headers. If that fails, please install Ruby from source.

</dd></dl></div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>If you’ve installed a new Ruby version (i.e. your system now contains multiple Ruby installations), then you will need to tell Phusion Passenger which Ruby installation you want to use. Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_ruby_installation">Specifying the correct Ruby installation</a>.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h4 id="_apache_development_headers_aren_8217_t_installed">6.2.2. Apache development headers aren’t installed</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Installing Phusion Passenger fails because of one of the following errors:

</div>
<div>
<ul>
    <li>The installer says that the Apache development headers aren’t installed.</li>
    <li>The error message “'httpd.h: No such file or directory”' occurs.
<div>

(Instead of <em>httpd.h</em>, the message might also be <em>http_config.h</em> or something else similar to <em>http_*.h</em>.)

</div></li>
</ul>
</div>
</div>
</div>
<div><dl><dt>Ubuntu</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install apache2-prefork-dev</pre>
</div>
</div>
</dd><dt>Debian</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install apache2-dev</pre>
</div>
</div>
</dd><dt>Fedora/CentOS/RHEL</dt><dd>Please type:
<div>
<div>
<pre>su -c 'yum install httpd-devel'</pre>
</div>
</div>
</dd><dt>FreeBSD</dt><dd>Please install Apache from <em>ports</em> or with pkg_add. If that fails, please install Apache from source.

</dd><dt>MacOS X</dt><dd>Please install Apache from source.

</dd><dt>Other operating systems</dt><dd>Please consult your operating system’s native package database. There should be a package containing the Apache development headers. If that fails, please install Apache from source.

</dd></dl></div>
</div>
<div>
<h4 id="_apr_development_headers_aren_8217_t_installed">6.2.3. APR development headers aren’t installed</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Installing Phusion Passenger fails because one of the following errors:

</div>
<div>
<ul>
    <li>The installer tells you that APR development headers aren’t installed.</li>
    <li>The error message “'apr_pools.h: No such file or directory”' occurs.</li>
    <li>The error message “'apr_strings.h: No such file or directory”' occurs.</li>
</ul>
</div>
</div>
</div>
<div><dl><dt>Ubuntu</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install libapr1-dev</pre>
</div>
</div>
</dd><dt>Debian</dt><dd>Please type:
<div>
<div>
<pre>sudo apt-get install libapr1-dev</pre>
</div>
</div>
</dd><dt>Fedora/CentOS/RHEL</dt><dd>Please type:
<div>
<div>
<pre>su -c 'yum install apr-devel'</pre>
</div>
</div>
</dd><dt>Other Linux distributions</dt><dd>Please consult your distribution’s package database. There should be a package which provides APR development headers.

</dd><dt>Other operating systems</dt><dd>The APR development are bundled with Apache. If the APR headers aren’t, then it probably means that they have been removed after Apache’s been installed. Please reinstall Apache to get back the APR headers.

</dd></dl></div>
</div>
<div>
<h4 id="_phusion_passenger_is_using_the_wrong_apache_during_installation">6.2.4. Phusion Passenger is using the wrong Apache during installation</h4>
<div>

Please <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_correct_apache_install">Specifying the correct Apache installation</a>, and re-run the Phusion Passenger installer.

</div>
</div>
<div>
<h4 id="_phusion_passenger_is_using_the_wrong_ruby_during_installation">6.2.5. Phusion Passenger is using the wrong Ruby during installation</h4>
<div>

Please <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_ruby_installation">Specifying the correct Ruby installation</a>, and re-run the Phusion Passenger installer.

</div>
</div>
</div>
<div>
<h3 id="_problems_after_installation">6.3. Problems after installation</h3>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/tip.png" alt="Tip" /></td>
<td>
<div>The golden tip: read your Apache error logs!</div>
<div>

<em>mod_passenger</em> will write all errors to the Apache error log. So if you’re experiencing post-installation problems, please look inside the Apache error logs. It will tell you what exactly went wrong.

</div></td>
</tr>
</tbody>
</table>
</div>
<div>
<h4 id="_my_rails_application_works_on_mongrel_but_not_on_phusion_passenger">6.3.1. My Rails application works on Mongrel, but not on Phusion Passenger</h4>
<div>

Please try setting <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerSpawnMethod">PassengerSpawnMethod</a> to <em>conservative</em>.

</div>
</div>
<div>
<h4 id="_phusion_passenger_has_been_compiled_against_the_wrong_apache_installation">6.3.2. Phusion Passenger has been compiled against the wrong Apache installation</h4>
<div>
<div>
<div>Symptoms</div>
<div>

Apache crashes during startup (after being daemonized). The Apache error log says “'seg fault or similar nasty error detected in the parent process”'.

</div>
</div>
</div>
<div>

This problem is most likely to occur on MacOS X. Most OS X users have multiple Apache installations on their system.

</div>
<div>

To solve this problem, please <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#specifying_correct_apache_install">specify the correct Apache installation</a>, and <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#install_passenger">reinstall Phusion Passenger</a>.

</div>
</div>
<div>
<h4 id="_i_get_a_403_forbidden_error">6.3.3. I get a "403 Forbidden" error</h4>
<div>

See next subsection.

</div>
</div>
<div>
<h4 id="_static_assets_such_as_images_and_stylesheets_aren_8217_t_being_displayed">6.3.4. Static assets such as images and stylesheets aren’t being displayed</h4>
<div>

Static assets are accelerated, i.e. they are served directly by Apache and do not go through the Rails stack. There are two reasons why Apache doesn’t serve static assets correctly:

</div>
<div>
<ol>
    <li>Your Apache configuration is too strict, and does not allow HTTP clients to access static assets. This can be achieved with an Allow from all directive in the correct place. For example:
<div>
<div>
<pre>&lt;Directory "/webapps/mycook/public"&gt;
   Options FollowSymLinks
   AllowOverride None
   Order allow,deny
   Allow from all
&lt;/Directory&gt;</pre>
</div>
</div>
<div>

See also <a href="http://groups.google.com/group/phusion-passenger/browse_thread/thread/9699a639a87f85f4/b9d71a03bf2670a5">this discussion</a>.

</div></li>
    <li>The Apache process doesn’t have permission to access your Rails application’s folder. Please make sure that the Rails application’s folder, as well as all of its parent folders, have the correct permissions and/or ownerships.</li>
</ol>
</div>
</div>
<div>
<h4 id="_the_apache_error_log_says_that_the_spawn_manager_script_does_not_exist_or_that_it_does_not_have_permission_to_execute_it">6.3.5. The Apache error log says that the spawn manager script does not exist, or that it does not have permission to execute it</h4>
<div>

If you are sure that the <em>PassengerRoot</em> configuration option is set correctly, then this problem is most likely caused by the fact that you’re running Apache with SELinux. On Fedora, CentOS and RedHat Enterprise Linux, Apache is locked down by SELinux policies.

</div>
<div>

To solve this problem, you must set some permissions on the Phusion Passenger files and folders, so that Apache can access them.

</div>
<div>
<ul>
    <li>If you’ve installed Phusion Passenger via a gem, then run this command to determine Phusion Passenger’s root folder:
<div>
<div>
<pre>passenger-config --root</pre>
</div>
</div>
<div>

Next, run the following command:

</div>
<div>
<div>
<pre>chcon -R -h -t httpd_sys_content_t /path-to-passenger-root</pre>
</div>
</div>
<div>

where <em>/path-to-passenger-root</em> should be replaced with whatever passenger-config --root printed.

</div></li>
    <li>If you’ve installed Phusion Passenger via the source tarball, then run the following command:
<div>
<div>
<pre>chcon -R -h -t httpd_sys_content_t /path/to/passenger/folder</pre>
</div>
</div></li>
</ul>
</div>
<div>

Once the permissions are fixed, restart Apache.

</div>
</div>
<div>
<h4 id="_the_rails_application_reports_that_it_8217_s_unable_to_start_because_of_a_permission_error">6.3.6. The Rails application reports that it’s unable to start because of a permission error</h4>
<div>

Please check whether your Rails application’s folder has the correct permissions. By default, Rails applications are started as the owner of the file <em>config/environment.rb</em>, except if the file is owned by root. If the file is owned by root, then the Rails application will be started as <em>nobody</em> (or as the user specify by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsDefaultUser">RailsDefaultUser</a>, if that’s specified).

</div>
<div>

Please read <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#user_switching">User switching (security)</a> for details.

</div>
</div>
<div>
<h4 id="_my_rails_application_8217_s_log_file_is_not_being_written_to">6.3.7. My Rails application’s log file is not being written to</h4>
<div>

There are a couple things that you should be aware of:

</div>
<div>
<ul>
    <li>By default, Phusion Passenger runs Rails applications in <em>production</em> mode, so please be sure to check <em>production.log</em> instead of <em>development.log</em>. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#RailsEnv">RailsEnv</a> for configuration.</li>
    <li>By default, Phusion Passenger runs Rails applications as the owner of <em>environment.rb</em>. So the log file can only be written to if that user has write permission to the log file. Please <em>chmod</em> or <em>chown</em> your log file accordingly.
<div>

See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#User_switching">User switching (security)</a> for details.

</div></li>
</ul>
</div>
<div>

If you’re using a RedHat-derived Linux distribution (such as Fedora or CentOS) then it is <a href="http://code.google.com/p/phusion-passenger/issues/detail?id=4">possible that SELinux is interfering</a>. RedHat’s SELinux policy only allows Apache to read/write directories that have the <em>httpd_sys_content_t</em> security context. Please run the following command to give your Rails application folder that context:

</div>
<div>
<div>
<pre>chcon -R -h -t httpd_sys_content_t /path/to/your/rails/app</pre>
</div>
</div>
</div>
<div>
<h4 id="_i_8217_ve_deployed_my_app_on_ssl_but_the_app_thinks_its_not_on_ssl">6.3.8. I’ve deployed my app on SSL, but the app thinks its not on SSL</h4>
<div>

Rails and many other frameworks infers whether it’s running on SSL through the CGI environment variable HTTPS. Apache always sets this variable when on SSL, except when SSL is incorrectly configured.

</div>
<div>

Most Apache installations already configure SSL by default on port 443 (conf/extra/httpd-ssl.conf). Some people think they can save some typing in subsequent SSL vhost blocks, and omit important options like <em>SSLEngine on</em>, like this:

</div>
<div>
<div>
<pre># httpd-ssl.conf contains something like:
# &lt;VirtualHost _default_:443&gt;
#     SSLEngine on
#     ...
# &lt;/VirtualHost&gt;
Include conf/extra/httpd-ssl.conf

&lt;VirtualHost *:443&gt;
    ServerName www.example.com
    DocumentRoot /webapps/example/public
&lt;/Virtualhost&gt;</pre>
</div>
</div>
<div>

<strong>This is wrong!</strong> In each SSL vhost block you must re-specify all the SSL options. Otherwise Apache won’t properly detect the vhost as an SSL vhost block. Here’s the corrected example:

</div>
<div>
<div>
<pre>Include conf/extra/httpd-ssl.conf

&lt;VirtualHost *:443&gt;
    ServerName www.example.com
    DocumentRoot /webapps/example/public
    SSLEngine on
    ...more SSL options here...
&lt;/Virtualhost&gt;</pre>
</div>
</div>
</div>
</div>
<div>
<h3 id="conflicting_apache_modules">6.4. Conflicting Apache modules</h3>
<div>
<h4 id="_mod_userdir">6.4.1. mod_userdir</h4>
<div>

<em>mod_userdir</em> is not compatible with Phusion Passenger at the moment.

</div>
</div>
<div>
<h4 id="_multiviews_mod_negotiation">6.4.2. MultiViews (mod_negotiation)</h4>
<div>

MultiViews is not compatible with Phusion Passenger. You should disable MultiViews for all Phusion Passenger hosts.

</div>
</div>
<div>
<h4 id="_virtualdocumentroot">6.4.3. VirtualDocumentRoot</h4>
<div>

VirtualDocumentRoot is not compatible with Phusion Passenger at the moment.

</div>
</div>
</div>
</div>
</div>


<div>
<h2 id="_analysis_and_system_maintenance">7. Analysis and system maintenance</h2>
<div>
<div>

Phusion Passenger provides a set of tools, which are useful for system analysis, maintenance and troubleshooting.

</div>
<div>
<h3 id="_inspecting_memory_usage">7.1. Inspecting memory usage</h3>
<div>

Process inspection tools such as ps and top are useful, but they <a href="http://groups.google.com/group/phusion-passenger/msg/1fd1c233456d3180">rarely show the correct memory usage</a>. The real memory usage is usually lower than what ps and top report.

</div>
<div>

There are many technical reasons why this is so, but an explanation is beyond the scope of this Users Guide. We kindly refer the interested reader to operating systems literature about <em>virtual memory</em> and <em>copy-on-write</em>.

</div>
<div>

The tool passenger-memory-stats allows one to easily analyze Phusion Passenger’s and Apache’s real memory usage. For example:

</div>
<div>
<div>
<pre>[bash@localhost root]# passenger-memory-stats
------------- Apache processes --------------.
PID    PPID  Threads  VMSize   Private  Name
---------------------------------------------.
5947   1     9        90.6 MB  0.5 MB   /usr/sbin/apache2 -k start
5948   5947  1        18.9 MB  0.7 MB   /usr/sbin/fcgi-pm -k start
6029   5947  1        42.7 MB  0.5 MB   /usr/sbin/apache2 -k start
6030   5947  1        42.7 MB  0.5 MB   /usr/sbin/apache2 -k start
6031   5947  1        42.5 MB  0.3 MB   /usr/sbin/apache2 -k start
6033   5947  1        42.5 MB  0.4 MB   /usr/sbin/apache2 -k start
6034   5947  1        50.5 MB  0.4 MB   /usr/sbin/apache2 -k start
23482  5947  1        82.6 MB  0.4 MB   /usr/sbin/apache2 -k start
### Processes: 8
### Total private dirty RSS: 3.50 MB

--------- Passenger processes ---------.
PID    Threads  VMSize   Private  Name
---------------------------------------.
6026   1        10.9 MB  4.7 MB   Passenger spawn server
23481  1        26.7 MB  3.0 MB   Passenger FrameworkSpawner: 2.0.2
23791  1        26.8 MB  2.9 MB   Passenger ApplicationSpawner: /var/www/projects/app1-foobar
23793  1        26.9 MB  17.1 MB  Rails: /var/www/projects/app1-foobar
### Processes: 4
### Total private dirty RSS: 27.76 M</pre>
</div>
</div>
<div>

The <em>Private</em> or <em>private dirty RSS</em> field shows the <strong>real</strong> memory usage of processes. Here, we see that all the Apache worker processes only take less than 1 MB memory each. This is a lot less than the 50 MB-ish memory usage as shown in the <em>VMSize</em> column (which is what a lot of people think is the real memory usage, but is actually not).

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>Private dirty RSS reporting only works on Linux. Unfortunately other operating systems don’t provide facilities for determining processes' private dirty RSS. On non-Linux systems, the Resident Set Size is reported instead.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_inspecting_phusion_passenger_8217_s_internal_status">7.2. Inspecting Phusion Passenger’s internal status</h3>
<div>

One can inspect Phusion Passenger’s internal status with the tool passenger-status. This tool must typically be run as root. For example:

</div>
<div>
<div>
<pre>[bash@localhost root]# passenger-status
----------- General information -----------
max      = 6
count    = 1
active   = 0
inactive = 1

----------- Domains -----------
/var/www/projects/app1-foobar:
  PID: 9617      Sessions: 0    Processed: 7       Uptime: 2m 23s</pre>
</div>
</div>
<div>

The <em>general information</em> section shows the following information:

</div>
<div><dl><dt>max</dt><dd>The maximum number of application instances that Phusion Passenger will spawn. This equals the value given for <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">PassengerMaxPoolSize</a> (Apache) or <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxPoolSize">passenger_max_pool_size</a> (Nginx).

</dd><dt>count</dt><dd>The number of application instances that are currently alive. This value is always less than or equal to <em>max</em>.

</dd><dt>active</dt><dd>The number of application instances that are currently processing requests. This value is always less than or equal to <em>count</em>.

</dd><dt>inactive</dt><dd>The number of application instances that are currently <strong>not</strong> processing requests, i.e. are idle. Idle application instances will be shutdown after a while, as can be specified with <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">PassengerPoolIdleTime (Apache)</a>/<a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerPoolIdleTime">passenger_pool_idle_time (Nginx)</a> (unless this value is set to 0, in which case application instances are never shut down via idle time). The value of <em>inactive</em> equals count - active.

</dd></dl></div>
<div>

The <em>domains</em> section shows, for each application directory, information about running application instances:

</div>
<div><dl><dt>Sessions</dt><dd>Shows how many HTTP client are currently in the queue of that application Instance, waiting to be processed.

</dd><dt>Processed</dt><dd>Indicates how many requests the instance has served until now. <strong>Tip:</strong> it’s possible to limit this number with the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerMaxRequests">PassengerMaxRequests</a> configuration directive.

</dd><dt>Uptime</dt><dd>Shows for how long the application instance has been running.

</dd></dl></div>
<div>

Since Phusion Passenger uses fair load balancing by default, the number of sessions for the application instances should be fairly close to each other. For example, this is fairly normal:

</div>
<div>
<div>
<pre>  PID: 4281      Sessions: 2      Processed: 7      Uptime: 5m 11s
  PID: 4268      Sessions: 0      Processed: 5      Uptime: 4m 52s
  PID: 4265      Sessions: 1      Processed: 6      Uptime: 5m 38s
  PID: 4275      Sessions: 1      Processed: 7      Uptime: 3m 14s</pre>
</div>
</div>
<div>

But if you see a "spike", i.e. an application instance has an unusually high number of sessions compared to the others, then there might be a problem:

</div>
<div>
<div>
<pre>  PID: 4281      Sessions: 2      Processed: 7      Uptime: 5m 11s
  PID: 17468     Sessions: 8 &lt;-+  Processed: 2      Uptime: 4m 47s
  PID: 4265      Sessions: 1   |  Processed: 6      Uptime: 5m 38s
  PID: 4275      Sessions: 1   |  Processed: 7      Uptime: 3m 14s
                               |
                               +---- "spike"</pre>
</div>
</div>
<div>

Possible reasons why spikes can occur:

</div>
<div>
<ol>
    <li>Your application is busy processing a request that takes a very long time. If this is the case, then you might want to turn <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUseGlobalQueue">global queuing</a> on.</li>
    <li>Your application is frozen, i.e. has stopped responding. See <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#debugging_frozen">Debugging frozen applications</a> for tips.</li>
</ol>
</div>
</div>
<div>
<h3 id="debugging_frozen">7.3. Debugging frozen applications</h3>
<div>

If one of your application instances is frozen (stopped responding), then you can figure out where it is frozen by killing it with <em>SIGABRT</em>. This will cause the application to raise an exception, with a backtrace.

</div>
<div>

The exception (with full backtrace information) is normally logged into the Apache error log. But if your application or if its web framework has its own exception logging routines, then exceptions might be logged into the application’s log files instead. This is the case with Ruby on Rails. So if you kill a Ruby on Rails application with <em>SIGABRT</em>, please check the application’s <em>production.log</em> first (assuming that you’re running it in a <em>production</em> environment). If you don’t see a backtrace there, check the Apache error log.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>It is safe to kill application instances, even in live environments. Phusion Passenger will restart killed application instances, as if nothing bad happened.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="_accessing_individual_application_processes">7.4. Accessing individual application processes</h3>
<div>

When a request is sent to the web server, Phusion Passenger will automatically forward the request to the most suitable application process, but sometimes it is desirable to be able to directly access the individual application processes. Use cases include, but are not limited to:

</div>
<div>
<ul>
    <li>One wants to debug a memory leak or memory bloat problem that only seems to appear on certain URIs. One can send a request to a specific process to see whether that request causes the process’s memory usage to rise.</li>
    <li>The application caches data in local memory, and one wants to tell a specific application process to clear that local data.</li>
    <li>Other debugging use cases.</li>
</ul>
</div>
<div>

All individual application processes are accessible via HTTP, so you can use standard HTTP tools like <em>curl</em>. The exact addresses can be obtained with the command passenger-status --verbose. These sockets are all bound to 127.0.0.1, but the port number is dynamically assigned. As a security measure, the sockets are also protected with a process-specific random password, which you can see in the passenger-status --verbose output. This password must be sent through the “X-Passenger-Connect-Password” HTTP header.

</div>
<div>

Example:

</div>
<div>
<div>
<pre>bash# passenger-status --verbose
----------- General information -----------
max      = 6
count    = 2
active   = 0
inactive = 2
Waiting on global queue: 0

----------- Application groups -----------
/Users/hongli/Sites/rack.test:
  App root: /Users/hongli/Sites/rack.test
  * PID: 24235   Sessions: 0    Processed: 7       Uptime: 17s
      URL     : http://127.0.0.1:58122
      Password: nFfVOX1F8LjZ90HJh28Sd_htJOsgRsNne2QXKf8NIXw
  * PID: 24250   Sessions: 0    Processed: 4       Uptime: 1s
      URL     : http://127.0.0.1:57933
      Password: _RGXlQ9EGDGJKLevQ_qflUtF1KmxEo2UiRzMwIE1sBY</pre>
</div>
</div>
<div>

Here we see that the web application <em>rack.test</em> has two processes. Process 24235 is accessible via <a href="http://127.0.0.1:58122/">http://127.0.0.1:58122</a>, and process 24250 is accessible via <a href="http://127.0.0.1:57933/">http://127.0.0.1:57933</a>.

</div>
<div>

To access 24235 we must send its password, <em>nFfVOX1F8LjZ90HJh28Sd_htJOsgRsNne2QXKf8NIXw</em>, through the <em>X-Passenger-Connect-Password</em> HTTP header, like this:

</div>
<div>
<div>
<pre>bash# curl -H "X-Passenger-Connect-Password: nFfVOX1F8LjZ90HJh28Sd_htJOsgRsNne2QXKf8NIXw" http://127.0.0.1:58122/</pre>
</div>
</div>
</div>
</div>
</div>


<div>
<h2 id="_tips">8. Tips</h2>
<div>
<div>
<h3 id="user_switching">8.1. User switching (security)</h3>
<div>

There is a problem that plagues most PHP web hosts, namely the fact that all PHP applications are run in the same user context as the web server. So for example, Joe’s PHP application will be able to read Jane’s PHP application’s passwords. This is obviously undesirable on many servers.

</div>
<div>

Phusion Passenger solves this problem by implementing <em>user switching</em>. A Rails application is started as the owner of the file <em>config/environment.rb</em>, and a Rack application is started as the owner of the file <em>config.ru</em>. So if <em>/home/webapps/foo/config/environment.rb</em> is owned by <em>joe</em>, then Phusion Passenger will launch the corresponding Rails application as <em>joe</em> as well.

</div>
<div>

This behavior is the default, and you don’t need to configure anything. But there are things that you should keep in mind:

</div>
<div>
<ul>
    <li>The owner of <em>environment.rb</em>/<em>config.ru</em> must have read access to the application’s root directory, and read/write access to the application’s <em>logs</em> directory.</li>
    <li>This feature is only available if Apache is started by <em>root</em>. This is the case on most Apache installations.</li>
    <li>Under no circumstances will applications be run as <em>root</em>. If <em>environment.rb</em>/<em>config.ru</em> is owned as root or by an unknown user, then the Rails/Rack application will run as the user specified by <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultUser">PassengerDefaultUser</a> and <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerDefaultGroup">PassengerDefaultGroup</a>.</li>
</ul>
</div>
<div>

User switching can be disabled with the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerUserSwitching">PassengerUserSwitching</a> option.

</div>
</div>
<div>
<h3 id="reducing_memory_usage">8.2. Reducing memory consumption of Ruby on Rails applications by 33%</h3>
<div>

Is it possible to reduce memory consumption of your Rails applications by 33% on average, by using <a href="http://www.rubyenterpriseedition.com/">Ruby Enterprise Edition</a>. Please visit the website for details.

</div>
<div>

Note that this feature does not apply to Rack applications.

</div>
</div>
<div>
<h3 id="capistrano">8.3. Capistrano recipe</h3>
<div>

Phusion Passenger can be combined with <a href="http://capify.org/">Capistrano</a>. The following Capistrano recipe demonstrates Phusion Passenger support. It assumes that you’re using Git as version control system.

</div>
<div>
<div>
<pre>set :application, "myapp"
set :domain,      "example.com"
set :repository,  "ssh://#{domain}/path-to-your-git-repo/#{application}.git"
set :use_sudo,    false
set :deploy_to,   "/path-to-your-web-app-directory/#{application}"
set :scm,         "git"

role :app, domain
role :web, domain
role :db,  domain, :primary =&gt; true

namespace :deploy do
  task :start, :roles =&gt; :app do
    run "touch #{current_release}/tmp/restart.txt"
  end

  task :stop, :roles =&gt; :app do
    # Do nothing.
  end

  desc "Restart Application"
  task :restart, :roles =&gt; :app do
    run "touch #{current_release}/tmp/restart.txt"
  end
end</pre>
</div>
</div>
</div>
<div>
<h3 id="bundler_support">8.4. Bundler support</h3>
<div>

Phusion Passenger has automatic support for <a href="http://gembundler.com/git.html">Bundler</a>. It works as follows:

</div>
<div>
<ul>
    <li>If you have a <em>.bundle/environment.rb</em> in your application root, then Phusion Passenger will require that file before loading your application.</li>
    <li>Otherwise, if you have a <em>Gemfile</em>, then Phusion Passenger will automatically call Bundler.setup() before loading your application.</li>
</ul>
</div>
<div>

It’s possible that your application also calls Bundler.setup during loading, e.g. in <em>config.ru</em> or in <em>config/boot.rb</em>. This is the case with Rails 3, and is also the case if you modified your <em>config/boot.rb</em> according to the <a href="http://gembundler.com/rails23.html">Bundler Rails 2.3 instructions</a>. This leads to Bundler.setup being called twice, once before the application startup file is required and once during application startup. However this is harmless and doesn’t have any negative effects.

</div>
<div>

Phusion Passenger assumes that you’re using Bundler &gt;= 0.9.5. If you don’t want Phusion Passenger to run its Bundler support code, e.g. because you need to use an older version of Bundler with an incompatible API or because you use a system other than Bundler, then you can override Phusion Passenger’s Bundler support code by creating a file <em>config/setup_load_paths.rb</em>. If this file exists then it will be required before loading the application startup file. In this file you can do whatever you need to setup Bundler or a similar system.

</div>
</div>
<div>
<h3 id="moving_phusion_passenger">8.5. Moving Phusion Passenger to a different directory</h3>
<div>

It is possible to relocate the Phusion Passenger files to a different directory. It involves two steps:

</div>
<div>
<ol>
    <li>Moving the directory.</li>
    <li>Updating the “PassengerRoot” configuration option in Apache.</li>
</ol>
</div>
<div>

For example, if Phusion Passenger is located in <em>/opt/passenger/</em>, and you’d like to move it to <em>/usr/local/passenger/</em>, then do this:

</div>
<div>
<ol>
    <li>Run the following command:
<div>
<div>
<pre>mv /opt/passenger /usr/local/passenger</pre>
</div>
</div></li>
    <li>Edit your Apache configuration file, and set:
<div>
<div>
<pre>PassengerRoot /usr/local/passenger</pre>
</div>
</div></li>
</ol>
</div>
</div>
<div>
<h3 id="_installing_multiple_ruby_on_rails_versions">8.6. Installing multiple Ruby on Rails versions</h3>
<div>

Each Ruby on Rails applications that are going to be deployed may require a specific Ruby on Rails version. You can install a specific version with this command:

</div>
<div>
<div>
<pre>gem install rails -v X.X.X</pre>
</div>
</div>
<div>

where <em>X.X.X</em> is the version number of Ruby on Rails.

</div>
<div>

All of these versions will exist in parallel, and will not conflict with each other. Phusion Passenger will automatically make use of the correct version.

</div>
</div>
<div>
<h3 id="_making_the_application_restart_after_each_request">8.7. Making the application restart after each request</h3>
<div>

In some situations it might be desirable to restart the web application after each request, for example when developing a non-Rails application that doesn’t support code reloading, or when developing a web framework.

</div>
<div>

To achieve this, simply create the file <em>tmp/always_restart.txt</em> in your application’s root folder. Unlike <em>restart.txt</em>, Phusion Passenger does not check for this file’s timestamp: Phusion Passenger will always restart the application, as long as <em>always_restart.txt</em> exists.

</div>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>If you’re just developing a Rails application then you probably don’t need this feature. If you set <em>RailsEnv development</em> in your Apache configuration, then Rails will automatically reload your application code after each request. <em>always_restart.txt</em> is only useful if you’re working on Ruby on Rails itself, or when you’re not developing a Rails application and your web framework does not support code reloading.</td>
</tr>
</tbody>
</table>
</div>
</div>
<div>
<h3 id="sub_uri_deployment_uri_fix">8.8. How to fix broken images/CSS/JavaScript URIs in sub-URI deployments</h3>
<div>

Some people experience broken images and other broken static assets when they deploy their application to a sub-URI (i.e. <em>http://mysite.com/railsapp/</em>). The reason for this usually is that you used a static URI for your image in the views. This means your <em>img</em> source probably refers to something like <em>/images/foo.jpg</em>. The leading slash means that it’s an absolute URI: you’re telling the browser to always load <em>http://mysite.com/images/foo.jpg</em> no matter what. The problem is that the image is actually at <em>http://mysite.com/railsapp/images/foo.jpg</em>. There are two ways to fix this.

</div>
<div>

The first way (not recommended) is to change your view templates to refer to <em>images/foo.jpg</em>. This is a relative URI: note the lack of a leading slash). What this does is making the path relative to the current URI. The problem is that if you use restful URIs, then your images will probably break again when you add a level to the URI. For example, when you’re at <em>http://mysite.com/railsapp</em> the browser will look for <em>http://mysite.com/railsapp/images/foo.jpg</em>. But when you’re at <em>http://mysite.com/railsapp/controller</em>. the browser will look for <em>http://mysite.com/railsapp/controller/images/foo.jpg</em>. So relative URIs usually don’t work well with layout templates.

</div>
<div>

The second and highly recommended way is to always use Rails helper methods to output tags for static assets. These helper methods automatically take care of prepending the base URI that you’ve deployed the application to. For images there is image_tag, for JavaScript there is javascript_include_tag and for CSS there is stylesheet_link_tag. In the above example you would simply remove the <em>&lt;img&gt;</em> HTML tag and replace it with inline Ruby like this:

</div>
<div>
<div>
<pre>&lt;%= image_tag("foo.jpg") %&gt;</pre>
</div>
</div>
<div>

This will generate the proper image tag to $RAILS_ROOT/public/images/foo.jpg so that your images will always work no matter what sub-URI you’ve deployed to.

</div>
<div>

These helper methods are more valuable than you may think. For example they also append a timestamp to the URI to better facilitate HTTP caching. For more information, please refer to <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/AssetTagHelper.html">the Rails API docs</a>.

</div>
</div>
<div>
<h3 id="_x_sendfile_support">8.9. X-Sendfile support</h3>
<div>

Phusion Passenger does not provide X-Sendfile support by itself. Please install <a href="http://tn123.ath.cx/mod_xsendfile/">mod_xsendfile</a> for X-Sendfile support.

</div>
</div>
<div>
<h3 id="_upload_progress">8.10. Upload progress</h3>
<div>

Phusion Passenger does not provide upload progress support by itself. Please try drogus’s <a href="http://github.com/drogus/apache-upload-progress-module/tree/master"> Apache upload progress module</a> instead.

</div>
</div>
</div>
</div>


<div>
<h2 id="_under_the_hood">9. Under the hood</h2>
<div>
<div>

Phusion Passenger hides a lot of complexity for the end user (i.e. the web server system administrator), but sometimes it is desirable to know what is going on. This section describes a few things that Phusion Passenger does under the hood.

</div>
<div>
<h3 id="_static_assets_serving">9.1. Static assets serving</h3>
<div>

Phusion Passenger accelerates serving of static files. This means that, if an URI maps to a file that exists, then Phusion Passenger will let Apache serve that file directly, without hitting the web application.

</div>
<div>

Phusion Passenger does all this without the need for any mod_rewrite rules. People who are switching from an old Mongrel-based setup might have mod_rewrite rules such as these:

</div>
<div>
<div>
<pre># Check whether this request has a corresponding file; if that
# exists, let Apache serve it, otherwise forward the request to
# Mongrel.
RewriteCond %{DOCUMENT_ROOT}/%{REQUEST_FILENAME} !-f
RewriteRule ^(.*)$ balancer://mongrel%{REQUEST_URI} [P,QSA,L]</pre>
</div>
</div>
<div>

These kind of mod_rewrite rules are no longer required, and you can safely remove them.

</div>
</div>
<div>
<h3 id="_page_caching_support">9.2. Page caching support</h3>
<div>

For each HTTP request, Phusion Passenger will automatically look for a corresponding page cache file, and serve that if it exists. It does this by appending ".html" to the filename that the URI normally maps to, and checking whether that file exists. This check occurs after checking whether the original mapped filename exists (as part of static asset serving). All this is done without the need for special mod_rewrite rules.

</div>
<div>

For example, suppose that the browser requests <em>/foo/bar</em>.

</div>
<div>
<ol>
    <li>Phusion Passenger will first check whether this URI maps to a static file, i.e. whether the file <em>foo/bar</em> exists in the web application’s <em>public</em> directory. If it does then Phusion Passenger will serve this file through Apache immediately.</li>
    <li>If that doesn’t exist, then Phusion Passenger will check whether the file <em>foo/bar.html</em> exists. If it does then Phusion Passenger will serve this file through Apache immediately.</li>
    <li>If <em>foo/bar.html</em> doesn’t exist either, then Phusion Passenger will forward the request to the underlying web application.</li>
</ol>
</div>
<div>

Note that Phusion Passenger’s page caching support doesn’t work if your web application uses a non-standard page cache directory, i.e. if it doesn’t cache to the <em>public</em> directory. In that case you’ll need to use mod_rewrite to serve such page cache files.

</div>
</div>
<div>
<h3 id="application_detection">9.3. How Phusion Passenger detects whether a virtual host is a web application</h3>
<div>

After you’ve read the deployment instructions you might wonder how Phusion Passenger knows that the DocumentRoot points to a web application that Phusion Passenger is able to serve, and how it knows what kind of web application it is (e.g. Rails or Rack).

</div>
<div>

Phusion Passenger checks whether the virtual host is a Rails application by checking whether the following file exists:

</div>
<div>
<div>
<pre>dirname(DocumentRoot) + "/config/environment.rb"</pre>
</div>
</div>
<div>

If you’re not a programmer and don’t understand the above pseudo-code snippet, it means that Phusion Passenger will:

</div>
<div>
<ol>
    <li>Extract the parent directory filename from the value of the DocumentRoot directory.</li>
    <li>Append the text "/config/environment.rb" to the result, and check whether the resulting filename exists.</li>
</ol>
</div>
<div>

So suppose that your document root is <em>/webapps/foo/public</em>. Phusion Passenger will check whether the file <em>/webapps/foo/config/environment.rb</em> exists.

</div>
<div>

Note that Phusion Passenger does <strong>not</strong> resolve any symlinks in the document root path by default since version 2.2.0 — in contrast to versions earlier than 2.2.0, which do resolve symlinks. So for example, suppose that your DocumentRoot points to <em>/home/www/example.com</em>, which in turn is a symlink to <em>/webapps/example.com/public</em>. In versions earlier than 2.2.0, Phusion Passenger will check whether <em>/webapps/example.com/config/environment.rb</em> exists because it resolves all symlinks. Phusion Passenger 2.2.0 and later however will check for <em>/home/www/config/environment.rb</em>. This file of course doesn’t exist, and as a result Phusion Passenger will not activate itself for this virtual host, and you’ll most likely see an Apache mod_dirindex directory listing.

</div>
<div>

If you need the old symlink-resolving behavior for whatever reason, then you can turn on <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerResolveSymlinksInDocumentRoot">PassengerResolveSymlinksInDocumentRoot</a>.

</div>
<div>

Another way to solve this situation is to explicitly tell Phusion Passenger what the correct application root is through the <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#PassengerAppRoot">PassengerAppRoot</a> configuration directive.

</div>
<div>

Autodetection of Rack applications happens through the same mechanism, exception that Phusion Passenger will look for <em>config.ru</em> instead of <em>config/environment.rb</em>.

</div>
</div>
</div>
</div>


<div>
<h2 id="_appendix_a_about_this_document">10. Appendix A: About this document</h2>
<div>
<div>

The text of this document is licensed under the <a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-Share Alike 3.0 Unported License</a>.

</div>
<div>

<a href="http://creativecommons.org/licenses/by-sa/3.0/"> <img src="http://www.modrails.com/documentation/images/by_sa.png" alt="images/by_sa.png" /> </a>

</div>
<div>

Phusion Passenger is brought to you by <a href="http://www.phusion.nl/">Phusion</a>.

</div>
<div>

<a href="http://www.phusion.nl/"> <img src="http://www.modrails.com/documentation/images/phusion_banner.png" alt="images/phusion_banner.png" /> </a>

</div>
<div>

Phusion Passenger is a trademark of Hongli Lai &amp; Ninh Bui.

</div>
</div>
</div>


<div>
<h2 id="_appendix_b_terminology">11. Appendix B: Terminology</h2>
<div>
<div>
<h3 id="application_root">11.1. Application root</h3>
<div>

The root directory of an application that’s served by Phusion Passenger.

</div>
<div>

In case of Ruby on Rails applications, this is the directory that contains <em>Rakefile</em>, <em>app/</em>, <em>config/</em>, <em>public/</em>, etc. In other words, the directory pointed to by RAILS_ROOT. For example, take the following directory structure:

</div>
<div>
<div>
<pre>/apps/foo/       &lt;------ This is the Rails application's application root!
   |
   +- app/
   |   |
   |   +- controllers/
   |   |
   |   +- models/
   |   |
   |   +- views/
   |
   +- config/
   |   |
   |   +- environment.rb
   |   |
   |   +- ...
   |
   +- public/
   |   |
   |   +- ...
   |
   +- ...</pre>
</div>
</div>
<div>

In case of Rack applications, this is the directory that contains <em>config.ru</em>. For example, take the following directory structure:

</div>
<div>
<div>
<pre>/apps/bar/      &lt;----- This is the Rack application's application root!
   |
   +- public/
   |    |
   |    +- ...
   |
   +- config.ru
   |
   +- ...</pre>
</div>
</div>
<div>

In case of Python (WSGI) applications, this is the directory that contains <em>passenger_wsgi.py</em>. For example, take the following directory structure:

</div>
<div>
<div>
<pre>/apps/baz/      &lt;----- This is the WSGI application's application root!
   |
   +- public/
   |    |
   |    +- ...
   |
   +- passenger_wsgi.py
   |
   +- ...</pre>
</div>
</div>
</div>
</div>
</div>


<div>
<h2 id="spawning_methods_explained">12. Appendix C: Spawning methods explained</h2>
<div>
<div>

At its core, Phusion Passenger is an HTTP proxy and process manager. It spawns Ruby on Rails/Rack/WSGI worker processes (which may also be referred to as <em>backend processes</em>), and forwards incoming HTTP request to one of the worker processes.

</div>
<div>

While this may sound simple, there’s not just one way to spawn worker processes. Let’s go over the different spawning methods. For simplicity’s sake, let’s assume that we’re only talking about Ruby on Rails applications.

</div>
<div>
<h3 id="_the_most_straightforward_and_traditional_way_conservative_spawning">12.1. The most straightforward and traditional way: conservative spawning</h3>
<div>

Phusion Passenger could create a new Ruby process, which will then load the Rails application along with the entire Rails framework. This process will then enter an request handling main loop.

</div>
<div>

This is the most straightforward way to spawn worker processes. If you’re familiar with the Mongrel application server, then this approach is exactly what mongrel_cluster performs: it creates N worker processes, each which loads a full copy of the Rails application and the Rails framework in memory. The Thin application server employs pretty much the same approach.

</div>
<div>

Note that Phusion Passenger’s version of conservative spawning differs slightly from mongrel_cluster. Mongrel_cluster creates entirely new Ruby processes. In programmers jargon, mongrel_cluster creates new Ruby processes by forking the current process and exec()-ing a new Ruby interpreter. Phusion Passenger on the other hand creates processes that reuse the already loaded Ruby interpreter. In programmers jargon, Phusion Passenger calls fork(), but not exec().

</div>
</div>
<div>
<h3 id="_the_smart_spawning_method">12.2. The smart spawning method</h3>
<div>
<table>
<tbody>
<tr>
<td><img src="http://www.modrails.com/documentation/images/icons/note.png" alt="Note" /></td>
<td>Smart spawning is supported for all Ruby applications but not for WSGI applications.</td>
</tr>
</tbody>
</table>
</div>
<div>

While conservative spawning works well, it’s not as efficient as it could be because each worker process has its own private copy of the Rails application as well as the Rails framework. This wastes memory as well as startup time.

</div>
<div>

<img src="http://www.modrails.com/documentation/images/conservative_spawning.png" alt="Worker processes and conservative spawning" />
<em>Figure: Worker processes and conservative spawning. Each worker process has its own private copy of the application code and Rails framework code.</em>

</div>
<div>

It is possible to make the different worker processes share the memory occupied by application and Rails framework code, by utilizing so-called copy-on-write semantics of the virtual memory system on modern operating systems. As a side effect, the startup time is also reduced. This is technique is exploited by Phusion Passenger’s <em>smart</em> and <em>smart-lv2</em> spawn methods.

</div>
<div>
<h4 id="_how_it_works">12.2.1. How it works</h4>
<div>

When the <em>smart-lv2</em> spawn method is being used, Phusion Passenger will first create a so-called <em>ApplicationSpawner server</em> process. This process loads the entire Rails application along with the Rails framework, by loading <em>environment.rb</em>. Then, whenever Phusion Passenger needs a new worker process, it will instruct the ApplicationSpawner server to do so. The ApplicationSpawner server will create a worker new process that reuses the already loaded Rails application/framework. Creating a worker process through an already running ApplicationSpawner server is very fast, about 10 times faster than loading the Rails application/framework from scratch. If the Ruby interpreter is copy-on-write friendly (that is, if you’re running <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">Ruby Enterprise Edition</a>) then all created worker processes will share as much common memory as possible. That is, they will all share the same application and Rails framework code.

</div>
<div>

<img src="http://www.modrails.com/documentation/images/smart-lv2.png" alt="images/smart-lv2.png" />
<em>Figure: Worker processes and the smart-lv2 spawn method. All worker processes, as well as the ApplicationSpawner, share the same application code and Rails framework code.</em>

</div>
<div>

The <em>smart</em> spawn method goes even further, by caching the Rails framework in another process called the <em>FrameworkSpawner server</em>. This process only loads the Rails framework, not the application. When a FrameworkSpawner server is instructed to create a new worker process, it will create a new ApplicationSpawner to which the instruction will be delegated. All those ApplicationSpawner servers, as well as all worker processes created by those ApplicationSpawner servers, will share the same Rails framework code.

</div>
<div>

The <em>smart-lv2</em> method allows different worker processes that belong to the same application to share memory. The <em>smart</em> method allows different worker processes - that happen to use the same Rails version - to share memory, even if they don’t belong to the same application.

</div>
<div>

Notes:

</div>
<div>
<ul>
    <li>Vendored Rails frameworks cannot be shared by different applications, even if both vendored Rails frameworks are the same version. So for efficiency reasons we don’t recommend vendoring Rails.</li>
    <li>ApplicationSpawner and FrameworkSpawner servers have an idle timeout just like worker processes. If an ApplicationSpawner/FrameworkSpawner server hasn’t been instructed to do anything for a while, it will be shutdown in order to conserve memory. This idle timeout is configurable.</li>
</ul>
</div>
</div>
<div>
<h4 id="_summary_of_benefits">12.2.2. Summary of benefits</h4>
<div>

Suppose that Phusion Passenger needs a new worker process for an application that uses Rails 2.2.1.

</div>
<div>
<ul>
    <li>If the <em>smart-lv2</em> spawning method is used, and an ApplicationSpawner server for this application is already running, then worker process creation time is about 10 times faster than conservative spawning. This worker process will also share application and Rails framework code memory with the ApplicationSpawner server and the worker processes that had been spawned by this ApplicationSpawner server.</li>
    <li>If the <em>smart</em> spawning method is used, and a FrameworkSpawner server for Rails 2.2.1 is already running, but no ApplicationSpawner server for this application is running, then worker process creation time is about 2 times faster than conservative spawning. If there is an ApplicationSpawner server for this application running, then worker process creation time is about 10 times faster. This worker process will also share application and Rails framework code memory with the ApplicationSpawner and FrameworkSpawner servers.</li>
</ul>
</div>
<div>

You could compare ApplicationSpawner and FrameworkSpawner servers with stem cells, that have the ability to quickly change into more specific cells (worker process).

</div>
<div>

In practice, the smart spawning methods could mean a memory saving of about 33%, assuming that your Ruby interpreter is <a href="http://www.modrails.com/documentation/Users%20guide%20Apache.html#reducing_memory_usage">copy-on-write friendly</a>.

</div>
<div>

Of course, smart spawning is not without gotchas. But if you understand the gotchas you can easily reap the benefits of smart spawning.

</div>
</div>
</div>
<div>
<h3 id="_smart_spawning_gotcha_1_unintential_file_descriptor_sharing">12.3. Smart spawning gotcha #1: unintential file descriptor sharing</h3>
<div>

Because worker processes are created by forking from an ApplicationSpawner server, it will share all file descriptors that are opened by the ApplicationSpawner server. (This is part of the semantics of the Unix <em>fork()</em> system call. You might want to Google it if you’re not familiar with it.) A file descriptor is a handle which can be an opened file, an opened socket connection, a pipe, etc. If different worker processes write to such a file descriptor at the same time, then their write calls will be interleaved, which may potentially cause problems.

</div>
<div>

The problem commonly involves socket connections that are unintentially being shared. You can fix it by closing and reestablishing the connection when Phusion Passenger is creating a new worker process. Phusion Passenger provides the API call PhusionPassenger.on_event(:starting_worker_process) to do so. So you could insert the following code in your <em>environment.rb</em>:

</div>
<div>
<div>
<pre><tt>if defined?(PhusionPassenger)
  PhusionPassenger.on_event(:starting_worker_process) do |forked|
    if forked # We're in smart spawning mode. ...
      code to reestablish socket connections here ...
    else # We're in conservative spawning mode. We don't need to do anything.
    end
  end
end</tt></pre>
</div>
</div>
<div>

Note that Phusion Passenger automatically reestablishes the connection to the database upon creating a new worker process, which is why you normally do not encounter any database issues when using smart spawning mode.

</div>
<div>
<h4 id="_example_1_memcached_connection_sharing_harmful">12.3.1. Example 1: Memcached connection sharing (harmful)</h4>
<div>

Suppose we have a Rails application that connects to a Memcached server in <em>environment.rb</em>. This causes the ApplicationSpawner to have a socket connection (file descriptor) to the Memcached server, as shown in the following figure:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |-----------[Memcached server]
+--------------------+</pre>
</div>
</div>
<div>

Phusion Passenger then proceeds with creating a new Rails worker process, which is to process incoming HTTP requests. The result will look like this:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |------+----[Memcached server]
+--------------------+      |
                            |
+--------------------+      |
| Worker process 1   |-----/
+--------------------+</pre>
</div>
</div>
<div>

Since a <em>fork()</em> makes a (virtual) complete copy of a process, all its file descriptors will be copied as well. What we see here is that ApplicationSpawner and Worker process 1 both share the same connection to Memcached.

</div>
<div>

Now supposed that your site gets Slashdotted and Phusion Passenger needs to spawn another worker process. It does so by forking ApplicationSpawner. The result is now as follows:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |------+----[Memcached server]
+--------------------+      |
                            |
+--------------------+      |
| Worker process 1   |-----/|
+--------------------+      |
                            |
+--------------------+      |
| Worker process 2   |-----/
+--------------------+</pre>
</div>
</div>
<div>

As you can see, Worker process 1 and Worker process 2 have the same Memcache connection.

</div>
<div>

Suppose that users Joe and Jane visit your website at the same time. Joe’s request is handled by Worker process 1, and Jane’s request is handled by Worker process 2. Both worker processes want to fetch something from Memcached. Suppose that in order to do that, both handlers need to send a "FETCH" command to Memcached.

</div>
<div>

But suppose that, after worker process 1 having only sent "FE", a context switch occurs, and worker process 2 starts sending a "FETCH" command to Memcached as well. If worker process 2 succeeds in sending only one bye, <em>F</em>, then Memcached will receive a command which begins with "FEF", a command that it does not recognize. In other words: the data from both handlers get interleaved. And thus Memcached is forced to handle this as an error.

</div>
<div>

This problem can be solved by reestablishing the connection to Memcached after forking:

</div>
<div>
<div>
<pre>+--------------------+
| ApplicationSpawner |------+----[Memcached server]
+--------------------+      |                   |
                            |                   |
+--------------------+      |                   |
| Worker process 1   |-----/|                   |
+--------------------+      |                   |  &lt;--- created this
                            X                   |       new
                                                |       connection
                            X &lt;-- closed this   |
+--------------------+      |     old           |
| Worker process 2   |-----/      connection    |
+--------------------+                          |
          |                                     |
          +-------------------------------------+</pre>
</div>
</div>
<div>

Worker process 2 now has its own, separate communication channel with Memcached. The code in <em>environment.rb</em> looks like this:

</div>
<div>
<div>
<pre><tt>if defined?(PhusionPassenger)
  PhusionPassenger.on_event(:starting_worker_process) do |forked|
    if forked # We're in smart spawning mode.
      reestablish_connection_to_memcached
    else # We're in conservative spawning mode. We don't need to do anything.
    end
  end
end</tt></pre>
</div>
</div>
</div>
<div>
<h4 id="_example_2_log_file_sharing_not_harmful">12.3.2. Example 2: Log file sharing (not harmful)</h4>
<div>

There are also cases in which unintential file descriptor sharing is not harmful. One such case is log file file descriptor sharing. Even if two processes write to the log file at the same time, the worst thing that can happen is that the data in the log file is interleaved.

</div>
<div>

To guarantee that the data written to the log file is never interleaved, you must synchronize write access via an inter-process synchronization mechanism, such as file locks. Reopening the log file, like you would have done in the Memcached example, doesn’t help.

</div>
</div>
</div>
<div>
<h3 id="_smart_spawning_gotcha_2_the_need_to_revive_threads">12.4. Smart spawning gotcha #2: the need to revive threads</h3>
<div>

Another part of the <em>fork()</em> system call’s semantics is the fact that threads disappear after a fork call. So if you’ve created any threads in environment.rb, then those threads will no longer be running in newly created worker process. You need to revive them when a new worker process is created. Use the :starting_worker_process event that Phusion Passenger provides, like this:

</div>
<div>
<div>
<pre><tt>if defined?(PhusionPassenger)
  PhusionPassenger.on_event(:starting_worker_process) do |forked|
    if forked # We're in smart spawning mode. ...
      code to revive threads here ...
    else # We're in conservative spawning mode. We don't need to do anything.
    end
  end
end</tt></pre>
</div>
</div>
</div>
<div>
<h3 id="_smart_spawning_gotcha_3_code_load_order">12.5. Smart spawning gotcha #3: code load order</h3>
<div>

This gotcha is only applicable to the <em>smart</em> spawn method, not the <em>smart-lv2</em> spawn method.

</div>
<div>

If your application expects the Rails framework to be not loaded during the beginning of <em>environment.rb</em>, then it can cause problems when an ApplicationSpawner is created from a FrameworkSpawner, which already has the Rails framework loaded. The most common case is when applications try to patch Rails by dropping a modified file that has the same name as Rails’s own file, in a path that comes earlier in the Ruby search path.

</div>
<div>

For example, suppose that we have an application which has a patched version of <em>active_record/base.rb</em> located in <em>RAILS_ROOT/lib/patches</em>, and <em>RAILS_ROOT/lib/patches</em> comes first in the Ruby load path. When conservative spawning is used, the patched version of <em>base.rb</em> is properly loaded. When <em>smart</em> (not <em>smart-lv2</em>) spawning is used, the original <em>base.rb</em> is used because it was already loaded, so a subsequent require "active_record/base" has no effect.

</div>
</div>
</div>
</div>


<div id="footer">
<div id="footer-text">Last updated 2011-11-24 19:06:50 CET</div>
<div>标签： <a href="http://jhjguxin.hwcrazy.com/tag/apache/">apache</a> <a href="http://jhjguxin.hwcrazy.com/tag/passenger/">passenger</a> <a href="http://jhjguxin.hwcrazy.com/tag/phusion/">phusion</a> <a href="http://jhjguxin.hwcrazy.com/tag/rails/">rails</a> <a href="http://jhjguxin.hwcrazy.com/tag/ruby/">ruby</a> <a href="http://jhjguxin.hwcrazy.com/tag/web/">web</a></div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx缓存cache的5种方案]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/11/30/nginxhuan-cun-cachede-5chong-fang-an/"/>
    <updated>2011-11-30T17:54:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/11/30/nginxhuan-cun-cachede-5chong-fang-an</id>
    <content type="html"><![CDATA[<h2>nginx缓存cache的5种方案</h2>

<div>

1. 客户端浏览器上的缓存(非Cookie, Cookie中的内容为: 键和值均为string类型的键值对)

我们可以通过在Http回应中增加特定的头部说明来指定浏览器的缓存策略; 添加头部说明的手段既可以通过页面指令声明设置, 也可以通过编程方式设置.

&nbsp;

对于图片、Javascript脚本、CSS等资源, 可以在IIS管理器中, 右击图片等资源, 选择”属性” --&gt; HttpHeaders后, 勾选Enable Content Expiration并设置时间即可. 一种值得推荐的手段是, 将需要缓存的资源分类, 如: image/dynamic/、image/static/, 这样我们可以再文件夹上, 选择属性中的HttpHeaders进行设置. 否则, 针对每一个静态资源设置HttpHeaders将是件非常痛苦的事情. 此外, 还可以采用一款名为CacheRight的工具可以提供缓存资源的统一配置.

&nbsp;

<strong>查看或设置浏览器缓存位置:</strong>  IE --&gt; Internet选项 --&gt; 常规 --&gt; 临时Internet文件 --&gt; 设置

<strong> </strong>

<strong>Html</strong><strong>文件的Head</strong><strong>中的缓存设置:</strong>

&lt;meta http-equiv="pragma" content="no-cache" /&gt;

&lt;meta http-equiv="Cache-Control" content="no-cache" /&gt;

&lt;meta http-equiv="expires" content="Wed, 26 Feb 1997 08:21:57 GMT" /&gt;

<strong>浏览器中关于Cache</strong><strong>的3</strong><strong>属性:</strong>

Cache-Control:

设置相对过期时间, max-age指明以秒为单位的缓存时间. 若对静态资源只缓存一次, 可以设置max-age的值为315360000000 (一万年).

<strong>Http</strong><strong>协议的cache-control</strong><strong>的常见取值及其组合释义:</strong>

no-cache: 数据内容不能被缓存, 每次请求都重新访问服务器, 若有max-age, 则缓存期间不访问服务器.

no-store: 不仅不能缓存, 连暂存也不可以(即: 临时文件夹中不能暂存该资源)

private(默认): 只能在浏览器中缓存, 只有在第一次请求的时候才访问服务器, 若有max-age, 则缓存期间不访问服务器.

public: 可以被任何缓存区缓存, 如: 浏览器、服务器、代理服务器等

max-age: 相对过期时间, 即以秒为单位的缓存时间.

no-cache, private: 打开新窗口时候重新访问服务器, 若设置max-age, 则缓存期间不访问服务器.

private, 正数的max-age: 后退时候不会访问服务器

no-cache, 正数的max-age: 后退时会访问服务器

点击刷新: 无论如何都会访问服务器.

Expires:

设置以分钟为单位的绝对过期时间, 优先级比Cache-Control低, 同时设置Expires和Cache-Control则后者生效.

Last-Modified:

该资源的最后修改时间, 在浏览器下一次请求资源时, 浏览器将先发送一个请求到服务器上, 并附上If-Unmodified-Since头来说明浏览器所缓存资源的最后修改时间, 如果服务器发现没有修改, 则直接返回304(Not Modified)回应信息给浏览器(内容很少), 如果服务器对比时间发现修改了, 则照常返回所请求的资源.

&nbsp;

注意:

Last-Modified属性通常和Expires或Cache-Control属性配合使用, 因为即使浏览器设置缓存, 当用户点击”刷新”按钮时, 浏览器会忽略缓存继续向服务器发送请求, 这时Last-Modified将能够很好的减小回应开销.

&nbsp;

ETag将返回给浏览器一个资源ID, 如果有了新版本则正常发送并附上新ID, 否则返回304， 但是在服务器集群情况下, 每个服务器将返回不同的ID, 因此不建议使用ETag.

&nbsp;

以上描述的客户端浏览器缓存是指存储位置在客户端浏览器, 但是对客户端浏览器缓存的实际设置工作是在服务器上的资源中完成的. 虽然刚才我们介绍了有关于客户端浏览器缓存的属性, 但是实际上对这些属性的设置工作都需要在服务器的资源中做设置. 我们有两种操作手段对浏览器缓存进行设置, 一个是通过页面指令声明来设置, 另外一个是通过编程方式来设置.

&nbsp;

浏览器缓存的设置手段:

第一: 通过页面指令声明来设置HTTP的缓存

页面指令&lt;%@ OutputCache Location=”Any” Duration=”10” VaryByParam=”ProductId” VaryByHeader=”Accept-Language”%&gt;中的Location用来设置缓存的位置, 该属性常见的值为:

Any(默认): 输出缓存可以位于任何地点, 对应于HttpCacheability.Public. 如: 客户端浏览器、代理服务器或服务器本身.

Client: 只能位于发出请求的客户端浏览器, 对应于HttpCacheability.Private.

Downstream: 输出缓存可以位于除服务器本身的其他任何地方, 如: 客户端浏览器、代理服务器.

Server: 输出缓存位于Web服务器本身, 对应于HttpCacheability.Server

ServerAndClient: 输出缓存只能位于服务器本身或客户端浏览器, 对应于HttpCacheability.Private和HttpCacheability.Server

None: 禁用输出缓存, 对应于HttpCacheability.NoCache.

VaryByParam属性: 根据请求参数的不同而缓存不同的版本. 多个值用分号(;)分隔, *号表示为任意参数或参数组合缓存不同版本, “none”表示只缓存一个版本.

VaryByHeader属性: 根据请求头来缓存不同的版本, 如同一页面的不同语言版本.

VaryByCustom属性: 根据自定义参数来缓存不同的版本, 如: VaryByCunstom=”browser”是系统已实现的, 根据浏览器名称和版本号缓存不同的版本. 也可以, 根据自定义参数来缓存, 如: VaryByCustom=”happy”, 此时系统不知道如何解释happy, 因此需要在Global.asax或IHttpModule实现类中重写GetVaryByCustomString()方法, 来完成处理逻辑.

VaryByControl属性: 根据用户控件中的服务器控件ID来缓存不同版本.

更高级的方式, 是通过配置文件来设置HTTP的缓存.

页面指令为&lt;%@ OutputCache CacheProfile=”cacheconfig”%&gt;, 其中cacheconfig是配置文件中的缓存配置节中CacheProfile的名称.
<div>View Code
<div id="cnblogs_code_open_c6451953-d048-4c1a-aa1d-39b4e297c264">
<div>&lt;system.web&gt;
&lt;caching&gt;
&lt;outputCacheSettings&gt;
&lt;outputCacheProfiles&gt;
&lt;add name="cacheconfig" duration="10" varyByParam="none"/&gt;
&lt;/outputCacheProfiles&gt;
&lt;/outputCacheSettings&gt;
&lt;/caching&gt;
&lt;/system.web&gt;</div>
<div>
<h1>nginx缓存cache的5种方案</h1>
1、传统缓存之一（404）

这个办法是把nginx的404错误定向到后端，然后用proxy_store把后端返回的页面保存。

配置：

location / {
root /home/html/;#主目录
expires 1d;#网页的过期时间
error_page 404 =200 /fetch$request_uri;#404定向到/fetch目录下
}

location /fetch/ {#404定向到这里
internal;#指明这个目录不能在外部直接访问到
expires 1d;#网页的过期时间
alias /home/html/;#虚拟目录文件系统地址要和locaion /一致，proxy_store会将文件保存到这目录下
proxy_pass ;#后端upstream地址，/fetch同时是一个代理
proxy_set_header Accept-Encoding '';#让后端不要返回压缩（gzip或deflate）的内容，保存压缩后的内容会引发乱子。
proxy_store on;#指定nginx将代理返回的文件保存
proxy_temp_path /home/tmp;#临时目录，这个目录要和/home/html在同一个硬盘分区内
}

使用的时候还有要注意是nginx要有权限往/home/tmp和/home/html下有写入文件的权限，在linux下nginx一般会配置成nobody用户运行，这样这两个目录就要chown nobody，设成nobody用户专用，当然也可以chmod 777，不过所有有经验的系统管理员都会建议不要随便使用777。

2、传统缓存之二（!-e）

原理和404跳转基本一致，但更简洁一些：

location / {
root /home/html/;
proxy_store on;
proxy_set_header Accept-Encoding '';
proxy_temp_path /home/tmp;
if ( !-f $request_filename )
{
        proxy_pass ;
}
}

可以看到这个配置比404节约了不少代码，它是用!-f来判断请求的文件在文件系统上存不存在，不存在就proxy_pass到后端，返回同样是用proxy_store保存。

两种传统缓存都有着基本一样的优点和缺点：

缺点1：不支持带参数的动态链接，比如read.php?id=1，因为nginx只保存文件名，所以这个链接只在文件系统下保存为read.php，这样用户访问read.php?id=2时会返回不正确的结果。同时不支持这种形式的首页和二级目录，因为nginx非常老实，会将这样的请求照链接写入文件系统，而这个链接显然是一个目录，所以保存失败。这些情况都需要写rewrite才能正确保存。
缺点2：nginx内部没有缓存过期和清理的任何机制，这些缓存的文件会永久性地保存在机器上，如果要缓存的东西非常多，那就会撑暴整个硬盘空间。为此可以使用一个shell脚本定期清理，同时可以撰写php等动态程序来做实时更新。
缺点3：只能缓存200状态码，因此后端返回301/302/404等状态码都不会缓存，假如恰好有一个访问量很大的伪静态链接被删除，那就会不停穿透导致后端承载不小压力。
缺点4：nginx不会自动选择内存或硬盘作为存储介质，一切由配置决定，当然在当前的操作系统里都会有操作系统级的文件缓存机制，所以存在硬盘上也不需要过分担心大并发读取造成的io性能问题。

nginx传统缓存的缺点也是它和squid等缓存软件的不同之特色，所以也可看作其优点。在生产应用中它常常用作和squid的搭档，squid对于带?的链接往往无法阻挡，而nginx能将其访问拦住，例如：?和在squid上会被当做两个链接，所以会造成两次穿透；而nginx只会保存一次，无论链接变成还是，均不能透过nginx缓存，从而有效地保护了后端主机。

nginx会非常老实地将链接形式保存到文件系统中，这样对于一个链接，可以很方便地查阅它在缓存机器上的缓存状态和内容，也可以很方便地和别的文件管理器如rsync等配合使用，它完完全全就是一个文件系统结构。

这两种传统缓存都可以在linux下将文件保存到/dev/shm里，一般我也是这么做的，这样可以利用系统内存来做缓存，利用内存的话，清理过期内容速度就会快得多。使用/dev/shm/时除了要把tmp目录也指向到/dev/shm这个分区外，如果有大量小文件和目录，还要修改一下这个内存分区的inode数量和最大容量：

mount -o size=2500M -o nr_inodes=480000 -o noatime,nodiratime -o remount /dev/shm

上面的命令在一台有3G内存的机器上使用，因为/dev/shm默认最大内存是系统内存的一半就是1500M，这条命令将其调大成2500M，同时shm系统inode数量默认情况下可能是不够用的，但有趣的是它可以随意调节，这里调节为480000保守了点，但也基本够用了。

3、基于memcached的缓存

nginx对memcached有所支持，但是功能并不是特别之强，性能上还是非常之优秀。

location /mem/ {
    if ( $uri ~ "^/mem/([0-9A-Za-z_]*)$" )
    {
     set $memcached_key "$1";
     memcached_pass     192.168.1.2:11211;
    }
    expires 70;
}

这个配置会将指明到memcached的abc这个key去取数据。

nginx目前没有写入memcached的任何机制，所以要往memcached里写入数据得用后台的动态语言完成，可以利用404定向到后端去写入数据。

4、基于第三方插件ncache

ncache是新浪兄弟开发的一个不错的项目，它利用nginx和memcached实现了一部分类似squid缓存的功能，我并没有使用这个插件的经验，可以参考：

&nbsp;

5、nginx新开发的proxy_cache功能

从nginx-0.7.44版开始，nginx支持了类似squid较为正规的cache功能，目前还处于开发阶段，支持相当有限，这个缓存是把链接用md5编码hash后保存，所以它可以支持任意链接，同时也支持404/301/302这样的非200状态。

配置：

首先配置一个cache空间：

proxy_cache_path /path/to/cache levels=1:2 keys_zone=NAME:10m inactive=5m max_size=2m clean_time=1m;

#注意这个配置是在server标签外，levels指定该缓存空间有两层hash目录，第一层目录是1个字母，第二层为2个字母，保存的文件名就会类似/path/to/cache/c/29/b7f54b2df7773722d382f4809d65029c；keys_zone为这个空间起个名字，10m指空间大小为10MB；inactive的5m指缓存默认时长5分钟；max_size的2m是指单个文件超过2m的就不缓存；clean_time指定一分钟清理一次缓存。

location / {
    proxy_pass ;

    proxy_cache NAME;#使用NAME这个keys_zone

    proxy_cache_valid 200 302 1h;#200和302状态码保存1小时
    proxy_cache_valid 301 1d;#301状态码保存一天
    proxy_cache_valid any 1m;#其它的保存一分钟
}

ps：支持cache的0.7.44到0.7.51这几个版本的稳定性均有问题，访问有些链接会出现错误，所以这几个版本最好不要在生产环境中使用。nginx-0.7下目前所知较为稳定的版本是0.7.39。稳定版0.6.36版也是近期更新，如果在配置里没有使用到0.7的一些新标签新功能，也可以使用0.6.36版。

</div>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Rails-(EN-CN)]]></title>
    <link href="http://jhjguxin.github.io/blog/2011/11/10/getting-started-with-rails-en-cn/"/>
    <updated>2011-11-10T03:05:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2011/11/10/getting-started-with-rails-en-cn</id>
    <content type="html"><![CDATA[<h2>Getting Started with Rails-(EN-CN)</h2>

<h2>Getting Started with Rails</h2>


<p>This guide covers getting up and running with Ruby on Rails. After reading it, you should be familiar with:<span style="font-family: DejaVu Sans;">本指导手册覆盖了入门和运行</span>ruby on rails<span style="font-family: DejaVu Sans;">，通过阅读本指导，你会了解到：</span></p>

<ul>
    <li>Installing Rails, creating a new Rails application, and connecting your application to a database</li>
    <li>The general layout#<span style="font-family: DejaVu Sans;">布局</span>of a Rails application <span style="font-family: DejaVu Sans;">应用程序的一般布局</span></li>
    <li>The basic principles of MVC (Model, View Controller) and RESTful design MVC<span style="font-family: DejaVu Sans;">的基本原则和</span>RESTful<span style="font-family: DejaVu Sans;">设计（理念）</span></li>
    <li>How to quickly generate the starting pieces of a Rails application <span style="font-family: DejaVu Sans;">如何快捷的开始一个</span>Rails<span style="font-family: DejaVu Sans;">应用</span></li>
</ul>


<p><span style="color: #800000;"><em>This</em></span><span style="color: #800000;"><em>Guide</em></span><span style="color: #800000;"><em>is</em></span><span style="color: #800000;"><em>based</em></span><span style="color: #800000;"><em>on</em></span><span style="color: #800000;"><em>Rails</em></span><span style="color: #800000;"><em>3.1.</em></span><span style="color: #800000;"><em>Some</em></span><span style="color: #800000;"><em>of</em></span><span style="color: #800000;"><em>the</em></span><span style="color: #800000;"><em>code</em></span><span style="color: #800000;"><em>shown</em></span><span style="color: #800000;"><em>here</em></span><span style="color: #800000;"><em>will</em></span><span style="color: #800000;"><em>not</em></span><span style="color: #800000;"><em>work</em></span><span style="color: #800000;"><em>in</em></span><span style="color: #800000;"><em>earlier</em></span><span style="color: #800000;"><em>versions</em></span><span style="color: #800000;"><em>of</em></span><span style="color: #800000;"><em>Rails.</em><span style="font-family: DejaVu Sans;"><em>这个指导手册适用与</em></span></span><span style="color: #800000;"><em>Rails3.1</em><span style="font-family: DejaVu Sans;"><em>，有些代码在</em></span></span><span style="color: #800000;"><em>Rails</em><span style="font-family: DejaVu Sans;"><em>早期版本可能会不工作。</em></span></span></p>

<h3><a name="guide-assumptions"></a>1 Guide Assumptions<span style="font-family: WenQuanYi Micro Hei;">假设</span></h3>


<h3><a name="guide-assumptions1"></a>1 Guide Assumptions</h3>


<p>This guide is designed for beginners who want to get started with a Rails application from scratch#<span style="font-family: DejaVu Sans;">刻痕</span>. It does not assume#<span style="font-family: DejaVu Sans;">假设</span>that you have any prior#<span style="font-family: DejaVu Sans;">预先</span>experience with Rails. However, to get the most out of it, you need to have some prerequisites installed:<span style="font-family: DejaVu Sans;">本指导设计给那些想大概的了解</span>Rails<span style="font-family: DejaVu Sans;">应用创建的初学者。这里假设你对</span>Rails<span style="font-family: DejaVu Sans;">没有任何预先的了解。不管怎样要得到（本手册的）知识，你需要预先安装：</span></p>

<ul>
    <li>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.ruby-lang.org/en/downloads">Ruby</a></span></span> language version 1.8.7 or higher</li>
</ul>


<p><em><strong>Note</strong></em><em> </em><em>that</em><em> </em><em>Ruby</em><em> </em><em>1.8.7</em><em> </em><em>p248</em><em> </em><em>and</em><em> </em><em>p249</em><em> </em><em>have</em><em> </em><em>marshaling#</em><span style="font-family: DejaVu Sans;"><em>封送处理</em></span><em>bugs</em><em> </em><em>that</em><em> </em><em>crash#</em><span style="font-family: DejaVu Sans;"><em>意外崩溃</em><em>紧急</em></span><em>Rails</em><em> </em><em>3.0.</em><em> </em><em>Ruby</em><em> </em><em>Enterprise</em><em> </em><em>Edition</em><em> </em><em>have</em><em> </em><em>these</em><em> </em><em>fixed</em><em> </em><em>since</em><em> </em><em>release</em><em> </em><em>1.8.7-2010.02</em><em> </em><em>though.</em><em> </em><em>Ruby</em><em> </em><em>1.8.7</em><em> </em><em>p248</em><em> </em><em>and</em><em> </em><em>p249</em><span style="font-family: DejaVu Sans;"><em>在</em><em>发行版</em></span><em>1.8.7-2010.02</em><em> </em><span style="font-family: DejaVu Sans;"><em>已经得到解决。</em></span><em>On</em><em> </em><em>the</em><em> </em><em>1.9</em><em> </em><em>front,</em><em> </em><em>Ruby</em><em> </em><em>1.9.1</em><em> </em><em>is</em><em> </em><em>not</em><em> </em><em>usable</em><em> </em><em>because</em><em> </em><em>it</em><em> </em><em>outright</em><em> </em><em>segfaults</em><em> </em><em>on</em><em> </em><em>Rails</em><em> </em><em>3.0,</em><em> </em><em>so</em><em> </em><em>if</em><em> </em><em>you</em><em> </em><em>want</em><em> </em><em>to</em><em> </em><em>use</em><em> </em><em>Rails</em><em> </em><em>3</em><em> </em><em>with</em><em> </em><em>1.9.x</em><em> </em><em>jump</em><em> </em><em>on</em><em> </em><em>1.9.2</em><em> </em><em>for</em><em> </em><em>smooth</em><em> </em><em>sailing.</em></p>

<ul>
    <li>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://rubyforge.org/frs/?group_id=126">RubyGems</a></span></span>packaging system
<ul>
    <li>If you want to learn more about RubyGems, please read the <a href="http://docs.rubygems.org/read/book/1"><span style="color: #000080;"><span style="text-decoration: underline;">RubyGems</span></span><span style="color: #000080;"><span style="text-decoration: underline;">User</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a> <span style="font-family: DejaVu Sans;">如果你想了解更多关于</span>RubyGems<span style="font-family: DejaVu Sans;">，请阅读</span><a href="http://docs.rubygems.org/read/book/1"><span style="color: #000080;"><span style="text-decoration: underline;">RubyGems</span></span><span style="color: #000080;"><span style="text-decoration: underline;">User</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span></a></li>
</ul>
</li>
    <li>A working installation of the <a href="http://www.sqlite.org/"><span style="color: #000080;"><span style="text-decoration: underline;">SQLite3</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Database</span></span></a></li>
</ul>


<p>Rails is a web application framework running on the Ruby programming language. If you have no prior experience with Ruby, you will find a very steep#<span style="font-family: DejaVu Sans;">陡</span>learning curve diving straight into Rails. There are some good free resources on the internet for learning Ruby, including: Rails<span style="font-family: DejaVu Sans;">是一个基于</span>Ruby<span style="font-family: DejaVu Sans;">程序语言的</span>web<span style="font-family: DejaVu Sans;">程序框架。如果你没有预先的学习</span>ruby<span style="font-family: DejaVu Sans;">，你会发现直接的入门</span>Rails<span style="font-family: DejaVu Sans;">学习很有跨度。这里有一些学习</span>ruby<span style="font-family: DejaVu Sans;">的免费互联网资源。</span></p>

<ul>
    <li><a href="http://www.humblelittlerubybook.com/"><span style="color: #000080;"><span style="text-decoration: underline;">Mr.</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Neighborly</span></span><span style="color: #000080;"><span style="text-decoration: underline;">’</span></span><span style="color: #000080;"><span style="text-decoration: underline;">s</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Humble</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Little</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Book</span></span></a></li>
    <li><a href="http://www.ruby-doc.org/docs/ProgrammingRuby/"><span style="color: #000080;"><span style="text-decoration: underline;">Programming</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span></a></li>
    <li><a href="http://mislav.uniqpath.com/poignant-guide/"><span style="color: #000080;"><span style="text-decoration: underline;">Why</span></span><span style="color: #000080;"><span style="text-decoration: underline;">’</span></span><span style="color: #000080;"><span style="text-decoration: underline;">s</span></span><span style="color: #000080;"><span style="text-decoration: underline;">(Poignant)</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Guide</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span></a></li>
</ul>


<h3><a name="what-is-rails"></a>2 What is Rails?<span style="font-family: WenQuanYi Micro Hei;">什么</span>Rails</h3>


<p>Rails is a web application development framework written in the Ruby language. It is <strong>designed</strong><strong> </strong><strong>to</strong> make programming web applications easier by making assumptions#<span style="font-family: DejaVu Sans;">完成</span>about what every developer needs to get started. It allows you to write less code while accomplishing more than many other languages and frameworks. Experienced#<span style="font-family: DejaVu Sans;">经验丰富的</span>Rails developers also report that it makes web application development more fun.Rails<span style="font-family: DejaVu Sans;">是一个使用</span>Ruby<span style="font-family: DejaVu Sans;">语言编写的的</span>web<span style="font-family: DejaVu Sans;">框架应用程序。其设计目的是为了让每个着手开始编写</span>web<span style="font-family: DejaVu Sans;">应用程序的开发人员更加容易的完成工作。它允许你写最少的代码完成超过其他任何语言和框架所完成的工作。经验丰富的</span>Rails<span style="font-family: DejaVu Sans;">开发人员还告诉我们通过</span>Rails<span style="font-family: DejaVu Sans;">使设计</span>web<span style="font-family: DejaVu Sans;">应用程序更快乐。</span></p>

<p>Rails is opinionated#<span style="font-family: DejaVu Sans;">自以为是</span>software. It makes the assumption that there is a “best” way to do things, and it’s designed to encourage#<span style="font-family: DejaVu Sans;">鼓励</span>that way – and in some cases to discourage alternatives<span style="font-family: DejaVu Sans;">替代品</span>. If you learn “The Rails Way” you’ll probably discover a tremendous increase in productivity. If you persist in bringing old habits#<span style="font-family: DejaVu Sans;">习惯</span>from other languages to your Rails development, and trying to use patterns<span style="font-family: DejaVu Sans;">模式</span>you learned elsewhere, you may have a less happy experience.Rails<span style="font-family: DejaVu Sans;">是一个自以为是的软件。它使得我们以最好的方式去做事情，它还鼓励<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></span>and in some cases to discourage alternatives<span style="font-family: DejaVu Sans;">，如果你学习<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Rails<span style="font-family: DejaVu Sans;">方式<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span>你将会适时的发现生产力的巨大增长。如果你固守在来自其他语言的旧的习惯去进行你的</span>Rails<span style="font-family: DejaVu Sans;">开发，以以它地方学来的模式尝试</span>Rails<span style="font-family: DejaVu Sans;">，那么你将会得到很少的快乐的经历。</span></p>

<p><strong>The</strong><strong> </strong><strong>Rails</strong><strong> </strong><strong>philosophy</strong><span style="font-family: DejaVu Sans;"><strong>理念</strong></span><strong>includes</strong><strong> </strong><strong>several</strong><strong> </strong><strong>guiding</strong><strong> </strong><strong>principles:Rails</strong><span style="font-family: DejaVu Sans;"><strong>理念包含几个指导原则</strong></span></p>

<ul>
    <li><strong>DRY</strong><strong> – “</strong><strong>Don</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>Repeat</strong><strong> </strong><strong>Yourself</strong><strong>”</strong> – suggests that writing the same code over and over again is a bad thing. <span style="font-family: DejaVu Sans;">不要自己重复<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>建议一次又一次编写同样的代码是一件坏事请。</span></li>
    <li>Convention#<span style="font-family: DejaVu Sans;">约定</span>Over Configuration(<span style="font-family: DejaVu Sans;">约定优于配置</span>) – means that Rails makes assumptions about what you want to do and how you’re going to do it<span style="font-family: DejaVu Sans;">想做怎么做</span>, rather than requiring you to specify every little thing through endless configuration files. <span style="font-family: DejaVu Sans;">约定优于配置<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>意思是</span>Rails<span style="font-family: DejaVu Sans;">对于你想做什么以及你想怎么做，你刻意的做很少的事情比编写无尽的配置文件更好</span></li>
    <li>REST is the best pattern<span style="font-family: DejaVu Sans;">模式</span>for web applications – organizing your application around resources#<span style="font-family: DejaVu Sans;">资源</span>and standard HTTP verbs#<span style="font-family: DejaVu Sans;">动词</span>is the fastest way to go. REST<span style="font-family: DejaVu Sans;">是开发</span>web<span style="font-family: DejaVu Sans;">应用程序的最好模式<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>环绕</span>resources<span style="font-family: DejaVu Sans;">和标准的</span>HTTP<span style="font-family: DejaVu Sans;">动作组织你的应用程序</span></li>
</ul>


<h4><a name="the-mvc-architecture"></a>2.1 The MVC Architecture#MVC<span style="font-family: WenQuanYi Micro Hei;">架构</span></h4>


<p>At the core of Rails is the Model, View, Controller architecture, usually just called MVC. MVC benefits include:Model<span style="font-family: DejaVu Sans;">，</span>View<span style="font-family: DejaVu Sans;">，</span>Controller<span style="font-family: DejaVu Sans;">架构是</span>Rails<span style="font-family: DejaVu Sans;">的核心，通常称之为</span>MVC<span style="font-family: DejaVu Sans;">。</span></p>

<ul>
    <li>Isolation<span style="font-family: DejaVu Sans;">分离</span>of business logic<span style="font-family: DejaVu Sans;">逻辑</span>from the user interface <span style="font-family: DejaVu Sans;">界面</span>#<span style="font-family: DejaVu Sans;">从用户界面的业务逻辑的分离</span></li>
    <li>Ease of keeping code DRY# <strong>“</strong><strong>Don</strong><strong>’</strong><strong>t</strong><strong> </strong><strong>Repeat</strong><strong> </strong><strong>Yourself</strong><strong>”</strong></li>
    <li>Making it clear where different types of code belong for easier maintenance #<span style="font-family: DejaVu Sans;">维护明确代码的不同之处使之跟容易维护</span></li>
</ul>


<h5><a name="models"></a>2.1.1 Models</h5>


<p>A model represents<span style="font-family: DejaVu Sans;">代表</span>the information (data) of the application and the rules to manipulate that data.<span style="font-family: DejaVu Sans;">模型代表了应用程序的信息（数据）和操纵这些数据的规则。</span>In the case of Rails, models are primarily used for managing the rules of interaction with a corresponding#<span style="font-family: DejaVu Sans;">相应的</span>database table. In most cases, each table in your database will correspond to one model in your application. The bulk of your application’s business logic will be concentrated in the models.<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">中，</span>models<span style="font-family: DejaVu Sans;">主要用于管理数据表和相应的规则的互动。在大多数情况，在你数据库中的每个表都会和你的应用程序互动。你应用程序的逻辑业务将会集中放置在</span>models<span style="font-family: DejaVu Sans;">中。</span></p>

<h5><a name="views"></a>2.1.2 Views</h5>


<p>Views represent the user interface of your application. In Rails, views are often HTML files with embedded Ruby code that perform<span style="font-family: DejaVu Sans;">执行</span>tasks related solely to the presentation#<span style="font-family: DejaVu Sans;">演示</span>of the data. Views handle the job of providing data to the web browser or other tool that is used to make requests from your application.View<span style="font-family: DejaVu Sans;">代表了应用程序的用户界面。在</span>Rails<span style="font-family: DejaVu Sans;">中，</span>Views<span style="font-family: DejaVu Sans;">通常是嵌入了执行演示数据任务的</span>Ruby<span style="font-family: DejaVu Sans;">代码的</span>HTML<span style="font-family: DejaVu Sans;">文件。</span>Views<span style="font-family: DejaVu Sans;">完成了给</span>web<span style="font-family: DejaVu Sans;">浏览器或者其他工具用于提出来自你的程序的请求提供数据。</span></p>

<h5><a name="controllers"></a>2.1.3 Controllers</h5>


<p>Controllers provide the “glue” between models and views. In Rails, controllers are responsible for processing the incoming requests from the web browser, interrogating the models for data, and passing that data on to the views for presentation.Controllers<span style="font-family: DejaVu Sans;">提供了</span>models<span style="font-family: DejaVu Sans;">和视图间的粘合。在</span>Rails<span style="font-family: DejaVu Sans;">中，</span>controllers<span style="font-family: DejaVu Sans;">相应来自</span>web<span style="font-family: DejaVu Sans;">浏览器请求的进程，向</span>models<span style="font-family: DejaVu Sans;">询问数据以及传递数据给</span>views<span style="font-family: DejaVu Sans;">用于演示。</span></p>

<h4><a name="the-components-of-rails"></a>2.2 The Components of Rails Rials<span style="font-family: WenQuanYi Micro Hei;">的组件</span></h4>


<p>Rails ships as many individual components.Rails<span style="font-family: DejaVu Sans;">关联着许多独立的组件。</span>Each of these components are briefly explained below. <span style="font-family: DejaVu Sans;">对这些组建在下面给出简要的解释。</span>If you are new to Rails, as you read this section, don’t get hung up on the details of each component, as they will be explained in further detail later. <span style="font-family: DejaVu Sans;">如果你是</span>Rails<span style="font-family: DejaVu Sans;">的新人，当你阅读到这个部分，不要抛弃任何一个组件的描述，而且他们还会做进一步解释。</span>For instance, we will bring up Rack applications, but you don’t need to know anything about them to continue with this guide.<span style="font-family: DejaVu Sans;">例如，我们将会构造应用骨架，但是在这里，你不需要知道关于他们的更进一步的任何知识。</span></p>

<ul>
    <li>Action Pack<span style="font-family: DejaVu Sans;">动作行为组</span>
<ul>
    <li>Action Controller <span style="font-family: DejaVu Sans;">行为控制</span></li>
    <li>Action Dispatch <span style="font-family: DejaVu Sans;">行为传输</span></li>
    <li>Action View <span style="font-family: DejaVu Sans;">行为视图</span></li>
</ul>
</li>
    <li>Action Mailer <span style="font-family: DejaVu Sans;">行为信封</span></li>
    <li>Active Model</li>
    <li>Active Record</li>
    <li>Active Resource</li>
    <li>Active Support</li>
    <li>Railties</li>
</ul>


<h5><a name="action-pack"></a>2.2.1 Action Pack</h5>


<p>Action Pack is a single gem that contains Action Controller, Action View and Action Dispatch. The “VC” part of “MVC”.Action Pack<span style="font-family: DejaVu Sans;">是一个单独的包它包含了</span>Action Controller, Action View and Action Dispatch<span style="font-family: DejaVu Sans;">传输调度。是</span>MVC<span style="font-family: DejaVu Sans;">的</span>VC<span style="font-family: DejaVu Sans;">部分</span></p>

<h6><a name="action-controller"></a>2.2.1.1 Action Controller</h6>


<p>Action Controller is the component that manages the controllers in a Rails application.The Action Controller framework processes incoming requests to a Rails application, extracts parameters, and dispatches them to the intended action. Services provided by Action Controller include session management, template rendering, and redirect management. Action Controller<span style="font-family: DejaVu Sans;">是在</span>Rails<span style="font-family: DejaVu Sans;">中管理控制的组件。</span>The Action Controller<span style="font-family: DejaVu Sans;">框架进程收到</span>Rails<span style="font-family: DejaVu Sans;">应用程序的请求，提取参数，以及调度他们到具有相应义务的动作。这些服务是由</span>Action Controller<span style="font-family: DejaVu Sans;">包含了会话管理部分，模板渲染（翻译），重定向部分。</span></p>

<h6><a name="action-view"></a>2.2.1.2 Action View</h6>


<p>Action View manages the views of your Rails application. It can create both HTML and XML output by default. Action View manages rendering templates, including nested and partial templates, and includes built-in AJAX support. View templates are covered in more detail in another guide called <a href="http://guides.rubyonrails.org/layouts_and_rendering.html"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span></a>.Action View<span style="font-family: DejaVu Sans;">管理你的</span>Rails<span style="font-family: DejaVu Sans;">应用程序的视图。它可以以创建</span>HTML<span style="font-family: DejaVu Sans;">和</span>XML<span style="font-family: DejaVu Sans;">作为默认输出。</span>Action View<span style="font-family: DejaVu Sans;">管理模板渲染，包含嵌套和组装模板，还包含了内置的</span>AJAX<span style="font-family: DejaVu Sans;">支持。</span></p>

<h6><a name="action-dispatch"></a>2.2.1.3 Action Dispatch</h6>


<p>Action Dispatch handles routing of web requests and dispatches them as you want, either to your application or any other Rack application. Rack applications are a more advanced topic and are covered in a separate guide called <a href="http://guides.rubyonrails.org/rails_on_rack.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rack</span></span></a>.<span style="font-family: DejaVu Sans;">行为调度处理了你的和其他部分的应用程序的路由<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>这些</span>web<span style="font-family: DejaVu Sans;">请求以及一些你所想要的调度，</span></p>

<h5><a name="action-mailer"></a>2.2.2 Action Mailer</h5>


<p>Action Mailer is a framework for building e-mail services. You can use Action Mailer to receive and process incoming email and send simple plain text or complex multipart emails based on flexible templates.Action Mailer<span style="font-family: DejaVu Sans;">是一个营造</span>E-mail<span style="font-family: DejaVu Sans;">服务的框架。你可以使用</span>Action Mailer<span style="font-family: DejaVu Sans;">去发送、接收</span>emial<span style="font-family: DejaVu Sans;">以及发送一些简单的计划文本或者基于灵活模板的复杂的多重的电子邮件。</span></p>

<h5><a name="active-model"></a>2.2.3 Active Model</h5>


<p>Active Model provides a defined interface between the Action Pack gem services and Object Relationship Mapping gems such as Active Record. Active Model allows Rails to utilize other ORM frameworks in place of Active Record if your application needs this.Active Model<span style="font-family: DejaVu Sans;">提供了</span>Action Pack gem<span style="font-family: DejaVu Sans;">服务和</span>Object Relationship Mapping gems<span style="font-family: DejaVu Sans;">之间的接口定义，比如</span>Active<span style="font-family: DejaVu Sans;">记录。</span>Active Model<span style="font-family: DejaVu Sans;">允许</span>Rails<span style="font-family: DejaVu Sans;">在</span>Active Record<span style="font-family: DejaVu Sans;">部分去采用其他</span>ORM<span style="font-family: DejaVu Sans;">框架如果你的应用程序需要。</span></p>

<h5><a name="active-record"></a>2.2.4 Active Record</h5>


<p>Active Record is the base for the models in a Rails application. It provides database independence, basic CRUD functionality, advanced finding capabilities, and the ability to relate models to one another, among other services.Active Record<span style="font-family: DejaVu Sans;">是一个</span>Rails<span style="font-family: DejaVu Sans;">应用程序的</span>models<span style="font-family: DejaVu Sans;">根本。它提供独立的数据库，基于</span>CRUD<span style="font-family: DejaVu Sans;">功能，先进（高级）的查找能力，和与另一个</span>models<span style="font-family: DejaVu Sans;">关联的能力，几乎所有其他服务。</span></p>

<h5><a name="active-resource"></a>2.2.5 Active Resource</h5>


<p>Active Resource provides a framework for managing the connection between business objects and RESTful web services. It implements a way to map web-based resources to local objects with CRUD semantics.Active Resource<span style="font-family: DejaVu Sans;">提供一个管理目标业务和</span>RESTful web<span style="font-family: DejaVu Sans;">服务之间连接的框架。它实现了使用</span>CRUD<span style="font-family: DejaVu Sans;">语义测绘</span>web-base <span style="font-family: DejaVu Sans;">资源到本地目标。</span></p>

<h5><a name="active-support"></a>2.2.6 Active Support</h5>


<p>Active Support is an extensive collection of utility classes and standard Ruby library extensions that are used in Rails, both by the core code and by your applications.Active Support<span style="font-family: DejaVu Sans;">是一个广泛收集实用工具类和标准的</span>Ruby<span style="font-family: DejaVu Sans;">库的扩展，它们由的核心代码和您的应用程序（决定）。</span></p>

<h5><a name="railties"></a>2.2.7 Railties</h5>


<p>Railties is the core Rails code that builds new Rails applications and glues the various frameworks and plugins together in any Rails application.Railties<span style="font-family: DejaVu Sans;">是在</span>Rails<span style="font-family: DejaVu Sans;">代码中创建新</span>Rails<span style="font-family: DejaVu Sans;">应用和在任何</span>Rails<span style="font-family: DejaVu Sans;">应用中粘和各种插件在一起的核心。</span></p>

<h4><a name="rest"></a>2.3 REST</h4>


<p>Rest stands for Representational State Transfer and is the foundation of the RESTful architecture.Rest<span style="font-family: DejaVu Sans;">作为具有代表性的状态传输是</span>RESTful<span style="font-family: DejaVu Sans;">架构的基础。</span>This is generally considered to be Roy Fielding’s doctoral thesis<span style="font-family: DejaVu Sans;">博士论文</span>, <a href="http://www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm"><span style="color: #000080;"><span style="text-decoration: underline;">Architectural</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Styles</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Design</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Network-based</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Software</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Architectures</span></span></a>. While you can read through the thesis, REST in terms of Rails boils down to two main principles:<span style="font-family: DejaVu Sans;">当你阅读这篇论文</span>REST<span style="font-family: DejaVu Sans;">在</span>Rails<span style="font-family: DejaVu Sans;">归纳为主要亮点原则：</span></p>

<ul>
    <li>Using resource identifiers such as URLs to represent resources.<span style="font-family: DejaVu Sans;">使用资源标识符比如</span>URLs<span style="font-family: DejaVu Sans;">去表现资源</span></li>
    <li>Transferring representations of the state of that resource between system components.<span style="font-family: DejaVu Sans;">转移（传送）在系统组件之间代表资源的状态</span></li>
</ul>


<p>For example, the following HTTP request:</p>

<p><tt>DELETE</tt><tt> </tt><tt>/photos/17</tt></p>

<p>would be understood to refer to a photo resource with the ID of 17, and to indicate a desired action – deleting that resource. <span style="font-family: DejaVu Sans;">（系统）将会明白参照</span>ID<span style="font-family: DejaVu Sans;">为</span>14<span style="font-family: DejaVu Sans;">的</span>phone<span style="font-family: DejaVu Sans;">资源，注明删除该资源。</span>REST is a natural style for the architecture of web applications, and Rails hooks into this shielding<span style="font-family: DejaVu Sans;">屏蔽</span>you from many of the RESTful complexities and browser quirks.REST<span style="font-family: DejaVu Sans;">自然风格去架构</span>web<span style="font-family: DejaVu Sans;">应用程序，通过组件这样的钩子，使你避免了许多复杂的</span>RESTful<span style="font-family: DejaVu Sans;">和浏览器之间的差异。</span></p>

<p>If you’d like more details on REST as an architectural#<span style="font-family: DejaVu Sans;">架构风格</span>style, these resources are more approachable<span style="font-family: DejaVu Sans;">平易近人</span>than Fielding’s thesis:</p>

<ul>
    <li><a href="http://www.infoq.com/articles/rest-introduction"><span style="color: #000080;"><span style="text-decoration: underline;">A</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Brief</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Introduction</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">REST</span></span></a> by Stefan Tilkov</li>
    <li><a href="http://bitworking.org/news/373/An-Introduction-to-REST"><span style="color: #000080;"><span style="text-decoration: underline;">An</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Introduction</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">REST</span></span></a> (video tutorial) by Joe Gregorio</li>
    <li><a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"><span style="color: #000080;"><span style="text-decoration: underline;">Representational</span></span><span style="color: #000080;"><span style="text-decoration: underline;">State</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Transfer</span></span></a> article in Wikipedia</li>
    <li><a href="http://www.infoq.com/articles/webber-rest-workflow"><span style="color: #000080;"><span style="text-decoration: underline;">How</span></span><span style="color: #000080;"><span style="text-decoration: underline;">to</span></span><span style="color: #000080;"><span style="text-decoration: underline;">GET</span></span><span style="color: #000080;"><span style="text-decoration: underline;">a</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Cup</span></span><span style="color: #000080;"><span style="text-decoration: underline;">of</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Coffee</span></span></a> by Jim Webber, Savas Parastatidis &amp; Ian Robinson</li>
</ul>


<h3><a name="creating-a-new-rails-project"></a>3 Creating a New Rails Project</h3>


<p>If you follow this guide, you’ll create a Rails project called <tt>blog</tt>, a (very) simple weblog.<span style="font-family: DejaVu Sans;">如果你跟随这个指导，你将会创建一个叫做</span>blog<span style="font-family: DejaVu Sans;">的</span>Rails<span style="font-family: DejaVu Sans;">项目<span style="font-family: Liberation Serif,Times New Roman,serif;">——</span>一个非常简单的网络博客。</span>Before you can start building the application, you need to make sure that you have Rails itself installed.<span style="font-family: DejaVu Sans;">当你准备开始构建这个项目之前你需要确保</span>Rails<span style="font-family: DejaVu Sans;">已经完全安装。</span></p>

<h4><a name="installing-rails"></a>3.1 Installing Rails<span style="font-family: WenQuanYi Micro Hei;">安装</span>Rails</h4>


<p>In most cases, the easiest way to install Rails is to take advantage of RubyGems:<span style="font-family: DejaVu Sans;">在大多数情况下，最安装</span>Rails<span style="font-family: DejaVu Sans;">简单的方式是通过方便的</span>RubyGems</p>

<p><code>Usually</code><code> </code><code>run</code><code> </code><code>this</code><code> </code><code>as</code><code> </code><code>the</code><code> </code><code>root</code><code> </code><code>user:</code></p>

<p><code>#</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>rails#</code><span style="font-family: DejaVu Sans;"><code>一般这样安装的</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>都是最新的</code></span><code>release</code><span style="font-family: DejaVu Sans;"><code>版本</code></span></p>

<p><code>If</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>working</code><code> </code><code>on</code><code> </code><code>Windows,</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>quickly</code><code> </code><code>install</code><code> </code><code>Ruby</code><code> </code><code>and</code><code> </code><code>Rails</code><code> </code><code>with</code><code> </code><a href="http://railsinstaller.org/"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Installer</span></span></a><code>.</code><span style="font-family: DejaVu Sans;"><code>如果你的工作环境是</code></span><code>Windows</code><span style="font-family: DejaVu Sans;"><code>，你可以通过</code></span><code>Rails</code><code> </code><code>Installer</code><span style="font-family: DejaVu Sans;"><code>快速的安装</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>。</code></span></p>

<p><code>/////////////////////////////</code></p>

<p><code>###gem</code><code> </code><code>help</code><code> </code><code>commands</code></p>

<p><code>➜ </code><code>~</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>rails&amp;&amp;sudo</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>rails</code></p>

<p><code>ERROR:</code><code> </code><code>Could</code><code> </code><code>not</code><code> </code><code>find</code><code> </code><code>a</code><code> </code><code>valid</code><code> </code><code>gem</code><code> </code><code>&lsquo;rails&rsquo;</code><code> </code><code>(&gt;=</code><code> </code><code>0)</code><code> </code><code>in</code><code> </code><code>any</code><code> </code><code>repository</code></p>

<p><code>ERROR:</code><code> </code><code>While</code><code> </code><code>executing</code><code> </code><code>gem</code><code> </code><code>&hellip;</code><code> </code><code>(Gem::RemoteFetcher::FetchError)</code></p>

<p><code>Errno::ETIMEDOUT:</code><code> </code><code>Connection</code><code> </code><code>timed</code><code> </code><code>out</code><code> </code><code>&ndash;</code><code> </code><code>connect(2)</code><code> </code><code>(</code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://rubygems.org/latest_specs.4.8.gz"><a href="http://rubygems.org/latest_specs.4.8.gz">http://rubygems.org/latest_specs.4.8.gz</a></a></span></span><code>)</code></p>

<p><span style="font-family: DejaVu Sans;"><code>经检查和</code></span><code>GFW</code><span style="font-family: DejaVu Sans;"><code>无关，是</code></span><code>rubygems</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code>DNS</code><code> </code><span style="font-family: DejaVu Sans;"><code>调整问题</code></span></p>

<p>&nbsp;</p>

<p><span style="font-family: DejaVu Sans;"><code>问题解决的最好方法方法</code></span></p>

<p><code>jhjguxin@jhjguxin-virtual-machine:~/blog$</code><code> </code><code>gem</code><code> </code><code>update</code><code> </code><code>&mdash;system</code><code> </code></p>

<p>&nbsp;</p>

<p><code>ERROR:</code><code> </code><code>gem</code><code> </code><code>update</code><code> </code><code>&mdash;system</code><code> </code><code>is</code><code> </code><code>disabled</code><code> </code><code>on</code><code> </code><code>Debian,</code><code> </code><code>because</code><code> </code><code>it</code><code> </code><code>will</code><code> </code><code>overwrite</code><code> </code><code>the</code><code> </code><code>content</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>rubygems</code><code> </code><code>Debian</code><code> </code><code>package,</code><code> </code><code>and</code><code> </code><code>might</code><code> </code><code>break</code><code> </code><code>your</code><code> </code><code>Debian</code><code> </code><code>system</code><code> </code><code>in</code><code> </code><code>subtle</code><code> </code><code>ways.</code><code> </code><code>The</code><code> </code><code>Debian-supported</code><code> </code><code>way</code><code> </code><code>to</code><code> </code><code>update</code><code> </code><code>rubygems</code><code> </code><code>is</code><code> </code><code>through</code><code> </code><code>apt-get,</code><code> </code><code>using</code><code> </code><code>Debian</code><code> </code><code>official</code><code> </code><code>repositories.</code></p>

<p>&nbsp;</p>

<p><code>If</code><code> </code><code>you</code><code> </code><code>really</code><code> </code><code>know</code><code> </code><code>what</code><code> </code><code>you</code><code> </code><code>are</code><code> </code><code>doing,</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>still</code><code> </code><code>update</code><code> </code><code>rubygems</code><code> </code><code>by</code><code> </code><code>setting</code><code> </code><code>the</code><code> </code><code>REALLY_GEM_UPDATE_SYSTEM</code><code> </code><code>environment</code><code> </code><code>variable,</code><code> </code><code>but</code><code> </code><code>please</code><code> </code><code>remember</code><code> </code><code>that</code><code> </code><code>this</code><code> </code><code>is</code><code> </code><code>completely</code><code> </code><code>unsupported</code><code> </code><code>by</code><code> </code><code>Debian.</code></p>

<p><code>jhjguxin@jhjguxin-virtual-machine:~/blog$</code><code> </code><code>export</code><code> </code><code>REALLY_GEM_UPDATE_SYSTEM=1</code></p>

<p>&nbsp;</p>

<p><code>jhjguxin@jhjguxin-virtual-machine:~/blog$</code><code> </code><code>gem</code><code> </code><code>update</code><code> –</code><code>system</code></p>

<p>&nbsp;</p>

<p><code>###</code><span style="font-family: DejaVu Sans;"><code>正是</code></span><code>gem</code><span style="font-family: DejaVu Sans;"><code>出问题了</code><code></code><code>结果直接用</code></span><code>sudo</code><code> </code><code>apt-get</code><code> </code><code>install</code><code> </code><code>rails,</code><span style="font-family: DejaVu Sans;"><code>悲剧了</code></span><code>ubuntu</code><span style="font-family: DejaVu Sans;"><code>现在还是用的</code></span><code>rails2.3</code><span style="font-family: DejaVu Sans;"><code>的包然后导致，后面有些命令无法执行</code></span></p>

<h4><a name="creating-the-blog-application"></a><code>3.2</code><code> </code><code>Creating</code><code> </code><code>the</code><code> </code><code>Blog</code><code> </code><code>Application</code></h4>


<p>The best way to use this guide is to follow each step as it happens, no code or step needed to make this example application has been left out, so you can literally follow along step by step.<span style="font-family: DejaVu Sans;">学习（使用）本指导的最好方式是跟随这里描述的每一步，不写代码或者没有例子所需的步骤会使得这个例子被冷落，你可以根据文字描述的步骤一步接着一步的操作。</span>If you need to see the completed code, you can download it from <a href="https://github.com/mikel/getting-started-code"><span style="color: #000080;"><span style="text-decoration: underline;">Getting</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Started</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Code</span></span></a>.<span style="font-family: DejaVu Sans;">如果你需要完整的代码你可以从这里下载</span><a href="https://github.com/mikel/getting-started-code"><span style="color: #000080;"><span style="text-decoration: underline;">Getting</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Started</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Code</span></span></a><span style="font-family: DejaVu Sans;">。</span></p>

<p>To begin, open a terminal, navigate to a folder where you have rights to create files, and type:<span style="font-family: DejaVu Sans;">开始，打开一个</span>terminal,<span style="font-family: DejaVu Sans;">导航至一个你有权限创建文件的文件夹，并输入：</span></p>

<p><code>rails</code><code> </code><code>new</code><code> </code><code>blog#&mdash;skip-bundle]</code><code> </code><code>#</code><code> </code><code>Don&rsquo;t</code><code> </code><code>run</code><code> </code><code>bundle</code><code> </code><code>install</code><span style="font-family: DejaVu Sans;"><code>这样在国内就不会由于连不上</code></span><code>gem</code><span style="font-family: DejaVu Sans;"><code>即便上能够上也会很慢半天没反映</code></span></p>

<p><code>#</code><span style="font-family: DejaVu Sans;"><code>请确保你的</code></span><code>rials</code><code> </code><span style="font-family: DejaVu Sans;"><code>版本是</code></span><code>3.1</code><code> </code><span style="font-family: DejaVu Sans;"><code>不然的话这只能用下面的了</code></span></p>

<p><code><span style="color: #800000;">The</span></code><code></code><code><span style="color: #800000;">guides</span></code><code></code><code><span style="color: #800000;">for</span></code><code></code><code><span style="color: #800000;">Rails</span></code><code></code><code><span style="color: #800000;">2.3</span></code><code></code><code><span style="color: #800000;">are</span></code><code></code><code><span style="color: #800000;">still</span></code><code></code><code><span style="color: #800000;">available</span></code><code></code><code><span style="color: #800000;">at</span></code><code></code><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://guides.rubyonrails.org/v2.3.11/"><a href="http://guides.rubyonrails.org/v2.3.11/">http://guides.rubyonrails.org/v2.3.11/</a></a></span></span><code><span style="color: #800000;">.</span></code><code> </code></p>

<p><code><em>jhjguxin@jhjguxin-virtual-machine:~$</em></code><code><em> </em></code><code><em>rails</em></code><code><em> </em></code><code><em>new</em></code><code><em> </em></code><code><em>blog#</em></code><span style="font-family: DejaVu Sans;"><code><em>这里建立的文件夹名称为</em></code></span><code><em>new</em></code><span style="font-family: DejaVu Sans;"><code><em>额估计是新版本发生了或者有些地方没弄通（</em></code></span><code><em>ubuntu</em></code><code><em> </em></code><code><em>11.10</em></code><code><em> </em></code><code><em>Rails</em></code><code><em> </em></code><code><em>2.3.14</em></code><code><em> </em></code><code><em>ruby</em></code><code><em> </em></code><code><em>1.8.7</em></code><code><em> </em></code><code><em>(2011-06-30</em></code><code><em> </em></code><code><em>patchlevel</em></code><code><em> </em></code><code><em>352)</em></code><code><em> </em></code><code><em>[i686-linux]</em></code><code><em> </em></code><span style="font-family: DejaVu Sans;"><code><em>）</em></code></span></p>

<p><code><em>jhjguxin@jhjguxin-virtual-machine:~$</em></code><code><em> </em></code><code><em>rails</em></code><code><em> </em></code><code><em>blog</em></code></p>

<p><code><em>jhjguxin@jhjguxin-Aspire-4750:~$</em></code><code><em> </em></code><code><em>sudo</em></code><code><em> </em></code><code><em>gem</em></code><code><em> </em></code><code><em>install</em></code><code><em> </em></code><code><em>json</em></code><code><em> </em></code><code><em>-v</em></code><code><em> </em></code><code><em>1.6.1</em></code></p>

<p><code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/tilt-1.3.3.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>&ldquo;2011-08-25</em></code><code><em> </em></code><code><em>00:00:00.000000000Z&rdquo;</em></code></p>

<p><code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/json-1.6.1.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>&ldquo;2011-09-18</em></code><code><em> </em></code><code><em>00:00:00.000000000Z&rdquo;</em></code></p>

<p><code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/tilt-1.3.3.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>&ldquo;2011-08-25</em></code><code><em> </em></code><code><em>00:00:00.000000000Z&rdquo;</em></code></p>

<p><code><em>Invalid</em></code><code><em> </em></code><code><em>gemspec</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>[/var/lib/gems/1.8/specifications/json-1.6.1.gemspec]:</em></code><code><em> </em></code><code><em>invalid</em></code><code><em> </em></code><code><em>date</em></code><code><em> </em></code><code><em>format</em></code><code><em> </em></code><code><em>in</em></code><code><em> </em></code><code><em>specification:</em></code><code><em> </em></code><code><em>&ldquo;2011-09-18</em></code><code><em> </em></code><code><em>00:00:00.000000000Z&rdquo;</em></code></p>

<p><span style="font-family: DejaVu Sans;"><code><em>出现这个问题的时候我</em></code><code><em>是改</em></code><code><span style="color: #000000;"><span style="font-size: small;"><em>成</em></span></span></code><code></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>s.date</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>=</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>%</em></span></span></code><code><span style="color: #000000;"><span style="font-size: small;"><em>q{2011-09-18}</em></span></span></code></p>

<p><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>在</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>rails</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>3.1</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>中由于要创建</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>bundler</em></span></span></code><code></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>信息（</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>Gemfile</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>文件）会提示你安装</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>等数据库信息，估计也就是你应用程序所用到的一些必须的</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>modules</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>。</em></span></span></code></span></p>

<p><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>这里用的是</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>做数据库，提示的是安装的是</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3.</em></span></span></code></p>

<p><code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>apt-get</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3-doc</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libsqlite3-ruby</em></span></span></code></p>

<p><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>还是</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>ERROR:</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>Failed</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>to</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>build</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>native</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>extension.</em></span></span></code><code></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>的话</em></span></span></code></span></p>

<p><code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>apt-get</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt1-dev</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxml2-dev</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt-ruby</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt1.1</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxsltc-java-gcj</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt-ruby</em></span></span></code></p>

<p><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt1-dbg</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxsltc-java</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>ibxslthl-java</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libxslt-ruby1.8</em></span></span></code></p>

<p><code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>apt-get</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libsqlite3-ruby</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>libsqlite3-dev</em></span></span></code></p>

<p><code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>therubyracer</em></span></span></code></p>

<p><code><span style="color: #000000;"><span style="font-size: small;"><em>####</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>对于本地安装的</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>rails</em></span></span></code><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>（就是爬不出去墙的）</em></span></span></code></span><code><span style="color: #000000;"><span style="font-size: small;"><em>sudo</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>install</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>sqlite3-1.3.4.gem</em></span></span></code></p>

<p><span style="font-family: DejaVu Sans;"><code><span style="color: #000000;"><span style="font-size: small;"><em>成功了！</em></span></span></code></span></p>

<p><code><span style="color: #000000;"><span style="font-size: small;"><em>Your</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>bundle</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>is</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>complete!</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>Use</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><code>bundle&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;span style="color: #000000;"&gt;&lt;span style="font-size: small;"&gt;&lt;em&gt;show&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;&lt;span style="color: #000000;"&gt;&lt;span style="font-size: small;"&gt;&lt;em&gt;[gemname]</code></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>to</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>see</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>where</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>a</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>bundled</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>gem</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>is</em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em>installed.</em></span></span></code></p>

<p><code>This</code><code> </code><code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>Rails</code><code> </code><code>application</code><code> </code><code>called</code><code> </code><code>Blog</code><code> </code><code>in</code><code> </code><code>a</code><code> </code><code>directory</code><code> </code><code>called</code><code> </code><code>blog.</code><span style="font-family: DejaVu Sans;"><code>这里将创建一个名叫</code></span><code>Blog</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>应用程序在名称为</code></span><code>blog</code><span style="font-family: DejaVu Sans;"><code>的目录中。</code></span></p>

<p><code>You</code><code> </code><code>can</code><code> </code><code>see</code><code> </code><code>all</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>switches</code><code> </code><code>that</code><code> </code><code>the</code><code> </code><code>Rails</code><code> </code><code>application</code><code> </code><code>builder</code><code> </code><code>accepts</code><code> </code><code>by</code><code> </code><code>running</code><code> </code><tt>rails</tt><tt> </tt><tt>new</tt><tt> </tt><tt>-h</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>你可以通过运行</code></span><code>rails</code><code> </code><code>new</code><code> </code><code>-h</code><span style="font-family: DejaVu Sans;"><code>，查看</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>应用程序创建器的所有命令（开关）。</code></span></p>

<p><code>After</code><code> </code><code>you</code><code> </code><code>create</code><code> </code><code>the</code><code> </code><code>blog</code><code> </code><code>application,</code><code> </code><code>switch</code><code> </code><code>to</code><code> </code><code>its</code><code> </code><code>folder</code><code> </code><code>to</code><code> </code><code>continue</code><code> </code><code>work</code><code> </code><code>directly</code><code> </code><code>in</code><code> </code><code>that</code><code> </code><code>application:</code><span style="font-family: DejaVu Sans;"><code>当你创建了这个</code></span><code>blog</code><span style="font-family: DejaVu Sans;"><code>程序，跳转到它所在的文件夹中（直接对这个程序编辑）</code></span><code>.</code></p>

<p><code>$cd</code><code> </code><code>blog</code></p>

<p><code>In</code><code> </code><code>any</code><code> </code><code>case,</code><code> </code><code>Rails</code><code> </code><code>will</code><code> </code><code>create</code><code> </code><code>a</code><code> </code><code>folder</code><code> </code><code>in</code><code> </code><code>your</code><code> </code><code>working</code><code> </code><code>directory</code><code> </code><code>called</code><code> </code><tt>blog</tt><code>.</code><code> </code><span style="font-family: DejaVu Sans;"><code>在任何情况下，</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>将会创建一个名为</code></span><code>blog</code><span style="font-family: DejaVu Sans;"><code>的文件夹在你的工作目录中。</code></span><code>Open</code><code> </code><code>up</code><code> </code><code>that</code><code> </code><code>folder</code><code> </code><code>and</code><code> </code><code>explore</code><code> </code><code>its</code><code> </code><code>contents.</code><span style="font-family: DejaVu Sans;"><code>打开这个文件夹浏览其中的内容。</code><code></code></span><code>Most</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>work</code><code> </code><code>in</code><code> </code><code>this</code><code> </code><code>tutorial</code><code> </code><code>will</code><code> </code><code>happen</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><tt>app/</tt><code> </code><code>folder,</code><code> </code><code>but</code><code> </code><code>here</code><code>’</code><code>s</code><code> </code><code>a</code><code> </code><code>basic</code><code> </code><code>rundown#</code><span style="font-family: DejaVu Sans;"><code>概述</code><code></code></span><code>on</code><code> </code><code>the</code><code> </code><code>function</code><code> </code><code>of</code><code> </code><code>each</code><code> </code><code>folder</code><code> </code><code>that</code><code> </code><code>Rails</code><code> </code><code>creates</code><code> </code><code>in</code><code> </code><code>a</code><code> </code><code>new</code><code> </code><code>application</code><code> </code><code>by</code><code> </code><code>default:</code><span style="font-family: DejaVu Sans;"><code>在这个体验中的大多数的工作都是在</code></span><code>app/</code><span style="font-family: DejaVu Sans;"><code>这个文件夹中完成的，这里对</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>创建的新应用中的每一个文件夹的功能做出了一个概述：</code></span></p>

<table width="665" cellspacing="0" cellpadding="2"><colgroup> <col width="74" /> <col width="583" /> </colgroup>
<tbody>
<tr>
<th width="74">File/Folder</th>
<th width="583">Purpose#<span style="font-family: DejaVu Sans;">目的</span></th>
</tr>
<tr>
<td width="74">Gemfile</td>
<td width="583">This file allows you to specify what gem dependencies are needed for your Rails application. See section on Bundler, below.<span style="font-family: DejaVu Sans;">这个文件让你可以（添加）你的</span>Rails<span style="font-family: DejaVu Sans;">所需要的特殊的</span>gem<span style="font-family: DejaVu Sans;">依赖关系。</span></td>
</tr>
<tr>
<td width="74">README</td>
<td width="583">This is a brief instruction manual#<span style="font-family: DejaVu Sans;">手册</span>for your application. You should edit this file to tell others what your application does, how to set it up, and so on.<span style="font-family: DejaVu Sans;">这是一个简单的说明手册。你需要编辑这个文件告诉其他人你的应用程序可以做什么，怎么安装等等。</span></td>
</tr>
<tr>
<td width="74">Rakefile</td>
<td width="583">This file locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than changing Rakefile, you should add your own tasks by adding files to the lib/tasks directory of your application.<span style="font-family: DejaVu Sans;">这个文件定位和载入能够在命令行中运行的任务。这个应该是域吧（任务定义）贯穿整个</span>Rials<span style="font-family: DejaVu Sans;">的组件定义。除了修改</span>Rakefile<span style="font-family: DejaVu Sans;">，你还需要添加你自己的任务的文件到你的应用程序的</span>lib/tasks<span style="font-family: DejaVu Sans;">目录。</span></td>
</tr>
<tr>
<td width="74">app/</td>
<td width="583">Contains the controllers, models, views and assets for your application. You’ll focus on this folder for the remainder of this guide.<span style="font-family: DejaVu Sans;">包含</span>controllers, models, views<span style="font-family: DejaVu Sans;">和你应用程序的</span>assets<span style="font-family: DejaVu Sans;">（资源），再接下面的手册中你主要的注意力应该放在这里。</span></td>
</tr>
<tr>
<td width="74">config/</td>
<td width="583">Configure your application’s runtime rules, routes, database, and more.<span style="font-family: DejaVu Sans;">配置你的应用程序的运行的规则，（</span>url<span style="font-family: DejaVu Sans;">）路由，数据库和其他。</span></td>
</tr>
<tr>
<td width="74">config.ru</td>
<td width="583">Rack configuration for Rack based servers used to start the application.<span style="font-family: DejaVu Sans;">基于</span>Rack<span style="font-family: DejaVu Sans;">服务器使用这个应用程序的</span>Rack<span style="font-family: DejaVu Sans;">配置</span></td>
</tr>
<tr>
<td width="74">db/</td>
<td width="583">Shows your current database schema, as well as the database migrations. You’ll learn about migrations shortly.<span style="font-family: DejaVu Sans;">显示你当前的数据表，同样也显示数据迁移。你将会简单的了解关于（数据）迁移。</span></td>
</tr>
<tr>
<td width="74">doc/</td>
<td width="583">In-depth documentation for your application.<span style="font-family: DejaVu Sans;">应用程序的（深入）全面的文档。</span></td>
</tr>
<tr>
<td width="74">lib/</td>
<td width="583">Extended modules for your application (not covered in this guide).<span style="font-family: DejaVu Sans;">应用程序用到的扩展库（本手册没有涉及）</span></td>
</tr>
<tr>
<td width="74">log/</td>
<td width="583">Application log files.<span style="font-family: DejaVu Sans;">应用程序的日志文件</span></td>
</tr>
<tr>
<td width="74">public/</td>
<td width="583">The only folder seen to the world as-is. Contains the static files and compiled assets.<span style="font-family: DejaVu Sans;">这是外部可见的唯一文件夹。包含静态文件和编译资源。</span></td>
</tr>
<tr>
<td width="74">script/</td>
<td width="583">Contains the rails script that starts your app and can contain other scripts you use to deploy#<span style="font-family: DejaVu Sans;">部署配置</span>or run your application.<span style="font-family: DejaVu Sans;">包含运行你的</span>app<span style="font-family: DejaVu Sans;">的</span>rails<span style="font-family: DejaVu Sans;">脚本，或者其他用来配置或运行你的应用程序的</span>scripts<span style="font-family: DejaVu Sans;">。</span></td>
</tr>
<tr>
<td width="74">test/</td>
<td width="583">Unit tests, fixtures, and other test apparatus. These are covered in <a href="http://guides.rubyonrails.org/testing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Testing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Applications</span></span></a><span style="font-family: DejaVu Sans;">单元测试，</span>fixtures<span style="font-family: DejaVu Sans;">，或者其他</span>test<span style="font-family: DejaVu Sans;">工具。他们在</span><a href="http://guides.rubyonrails.org/testing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Testing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Applications</span></span></a><span style="font-family: DejaVu Sans;">里面有完整的讲述。</span></td>
</tr>
<tr>
<td width="74">tmp/</td>
<td width="583">Temporary files<span style="font-family: DejaVu Sans;">模板文件</span></td>
</tr>
<tr>
<td width="74">vendor/</td>
<td width="583">A place for all third-party code. In a typical Rails application, this includes Ruby Gems, the Rails source code (if you install it into your project) and plugins containing additional prepackaged functionality.<span style="font-family: DejaVu Sans;">放置第三方代码的地方。在一个典型的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中，这里包含</span>Ruby Gems<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">源代码（如果你把</span>Rails<span style="font-family: DejaVu Sans;">安装到你的项目中）还包含一些预先包装好的额外的插件</span></td>
</tr>
</tbody>
</table>


<h4><a name="configuring-a-database"></a><code>3.3</code><code> </code><code>Configuring</code><code> </code><code>a</code><code> </code><code>Database</code><span style="font-family: WenQuanYi Micro Hei;"><code>配置数据库</code></span></h4>


<p>Just about every Rails application will interact with a database.<span style="font-family: DejaVu Sans;">基本上每个</span>Rails<span style="font-family: DejaVu Sans;">应用程序都会和一个数据库互动。</span>The database to use is specified in a configuration file, <tt>config/database.yml</tt>.<span style="font-family: DejaVu Sans;">使用的数据库在</span>config/database.yml<span style="font-family: DejaVu Sans;">的配置文件中指定的。</span>If you open this file in a new Rails application, you’ll see a default database configuration using SQLite3. The file contains sections for three different environments in which Rails can run by default:<span style="font-family: DejaVu Sans;">如果你在一个新的</span>Rails<span style="font-family: DejaVu Sans;">应用程序中打开这个文件，你将会看到一个默认的数据库配置使用的是</span>SQLite3.<span style="font-family: DejaVu Sans;">这个文件包含</span>Rails<span style="font-family: DejaVu Sans;">可以默认运行的三个不同的环境会话。</span></p>

<ul>
    <li>The <tt>development</tt> environment is used on your development computer as you interact manually with the application. <span style="font-family: DejaVu Sans;">开发环境使用在开发计算机上，让你和你的应用程序手动交互</span></li>
    <li>The <tt>test</tt> environment is used to run automated tests. <span style="font-family: DejaVu Sans;">测试环境用于运行自动测试</span></li>
    <li>The <tt>production</tt> environment is used when you deploy your application for the world to use.<span style="font-family: DejaVu Sans;">产品环境在你向外发布过后使用</span></li>
</ul>


<h5><a name="configuring-an-sqlite3-database"></a>3.3.1 Configuring an SQLite3 Database</h5>


<p>Rails comes with built-in support for <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://www.sqlite.org/">SQLite3</a></span></span>, which is a lightweight serverless database application.Rails<span style="font-family: DejaVu Sans;">内置并支持</span>SQLite3<span style="font-family: DejaVu Sans;">，</span>SQLite3<span style="font-family: DejaVu Sans;">是一个轻量级的数据库服务器。</span>While a busy production environment may overload SQLite, it works well for development and testing.<span style="font-family: DejaVu Sans;">但是一个繁忙的产品环境可能会导致</span>SQLite<span style="font-family: DejaVu Sans;">超载，</span>SQLite3<span style="font-family: DejaVu Sans;">更适合在开发或测试中使用。</span>Rails defaults to using an SQLite database when creating a new project, but you can always change it later.Rails<span style="font-family: DejaVu Sans;">在创建一个新项目的时候默认使用一个</span>SQLite<span style="font-family: DejaVu Sans;">数据库，但是你可以在之后随时更改。</span></p>

<p>Here’s the section of the default configuration file (<tt>config/database.yml</tt>) with connection information for the development environment:<span style="font-family: DejaVu Sans;">这是在开发环境中配置连接信息的默认配置文件的节选：</span></p>

<p><code>development:</code></p>

<p><code> </code><code>adapter:</code><code> </code><code>sqlite3</code></p>

<p><code> </code><code>database:</code><code> </code><code>db/development.sqlite3</code></p>

<p><code> </code><code>pool:</code><code> </code><code>5</code></p>

<p><code> </code><code>timeout:</code><code> </code><code>5000</code></p>

<p>In this guide we are using an SQLite3 database for data storage, because it is a zero configuration database that just works. <span style="font-family: DejaVu Sans;">在这个手册中使用一个</span>SQLite3<span style="font-family: DejaVu Sans;">数据库存存储数据，因为它不需要我们再去配置就能工作。</span>Rails also supports MySQL and PostgreSQL “out of the box”, and has plugins for many database systems.Rails<span style="font-family: DejaVu Sans;">同样支持</span>MySQL<span style="font-family: DejaVu Sans;">和</span>PostgreSQL <span style="font-family: DejaVu Sans;">，它还有许多支持其他数据库系统的插件</span>If you are using a database in a production environment Rails most likely has an adapter for it.<span style="font-family: DejaVu Sans;">如果你在产品环境中使用数据库对</span>Rails<span style="font-family: DejaVu Sans;">来说仅仅是添加一个适配器而已。</span></p>

<h5><a name="configuring-a-mysql-database"></a>3.3.2 Configuring a MySQL Database<span style="font-family: WenQuanYi Micro Hei;">配置一个</span>MySQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>


<p>If you choose to use MySQL instead of the shipped SQLite3 database, your <tt>config/database.yml</tt> will look a little different.<span style="font-family: DejaVu Sans;">如果你选择</span>MySQL<span style="font-family: DejaVu Sans;">代替</span>SQLite3<span style="font-family: DejaVu Sans;">数据库，你的配置文件会有一点不同。</span>Here’s the development section:<span style="font-family: DejaVu Sans;">这是开发环境下（的配置）：</span></p>

<p><code>development:</code></p>

<p><code> </code><code>adapter:</code><code> </code><code>mysql2</code></p>

<p><code> </code><code>encoding:</code><code> </code><code>utf8</code></p>

<p><code> </code><code>database:</code><code> </code><code>blog_development</code></p>

<p><code> </code><code>pool:</code><code> </code><code>5</code></p>

<p><code> </code><code>username:</code><code> </code><code>root</code></p>

<p><code> </code><code>password:</code></p>

<p><code> </code><code>socket:</code><code> </code><code>/tmp/mysql.sock</code></p>

<p>If your development computer’s MySQL installation includes a root user with an empty password, this configuration should work for you. <span style="font-family: DejaVu Sans;">如果你的开发计算机中安装的</span>MySQL<span style="font-family: DejaVu Sans;">包含一个</span>root<span style="font-family: DejaVu Sans;">用户和空的密码，这个配置文件就可以工作。</span>Otherwise, change the username and password in the <tt>development</tt> section as appropriate.<span style="font-family: DejaVu Sans;">否则，修改合适的开发环境中使用的用户名和密码。</span></p>

<h5><a name="configuring-a-postgresql-database"></a>3.3.3 Configuring a PostgreSQL Database<span style="font-family: WenQuanYi Micro Hei;">配置一个</span>PostgreSQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>


<p>If you choose to use PostgreSQL, your <tt>config/database.yml</tt> will be customized to use PostgreSQL databases:</p>

<p><code>development:</code></p>

<p><code> </code><code>adapter:</code><code> </code><code>postgresql</code></p>

<p><code> </code><code>encoding:</code><code> </code><code>unicode</code></p>

<p><code> </code><code>database:</code><code> </code><code>blog_development</code></p>

<p><code> </code><code>pool:</code><code> </code><code>5</code></p>

<p><code> </code><code>username:</code><code> </code><code>blog</code></p>

<p><code> </code><code>password:</code></p>

<h5><a name="configuring-an-sqlite3-database-for-jrub"></a> 3.3.4 Configuring an SQLite3 Database for JRuby Platform<span style="font-family: WenQuanYi Micro Hei;">配置在</span>JRuby<span style="font-family: WenQuanYi Micro Hei;">平台中使用的</span>SQLite3<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>


<p>If you choose to use SQLite3 and using JRuby, your <tt>config/database.yml</tt> will look a little different. Here’s the development section:</p>

<p><code>development:</code></p>

<p><code> </code><code>adapter:</code><code> </code><code>jdbcsqlite3</code></p>

<p><code> </code><code>database:</code><code> </code><code>db/development.sqlite3</code></p>

<h5><a name="configuring-a-mysql-database-for-jruby-p"></a> 3.3.5 Configuring a MySQL Database for JRuby Platform<span style="font-family: WenQuanYi Micro Hei;">配置在</span>JRuby<span style="font-family: WenQuanYi Micro Hei;">平台中使用的</span>MySQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>


<p>If you choose to use MySQL and using JRuby, your <tt>config/database.yml</tt> will look a little different. Here’s the development section:</p>

<p><code>development:</code></p>

<p><code> </code><code>adapter:</code><code> </code><code>jdbcmysql</code></p>

<p><code> </code><code>database:</code><code> </code><code>blog_development</code></p>

<p><code> </code><code>username:</code><code> </code><code>root</code></p>

<p><code> </code><code>password:</code></p>

<h5><a name="configuring-a-postgresql-database-for-jr"></a> 3.3.6 Configuring a PostgreSQL Database for JRuby Platform<span style="font-family: WenQuanYi Micro Hei;">配置在</span>JRuby<span style="font-family: WenQuanYi Micro Hei;">平台中使用的</span>PostgreSQL<span style="font-family: WenQuanYi Micro Hei;">数据库</span></h5>


<p>Finally if you choose to use PostgreSQL and using JRuby, your <tt>config/database.yml</tt> will look a little different. Here’s the development section:</p>

<p><code>development:</code></p>

<p><code> </code><code>adapter:</code><code> </code><code>jdbcpostgresql</code></p>

<p><code> </code><code>encoding:</code><code> </code><code>unicode</code></p>

<p><code> </code><code>database:</code><code> </code><code>blog_development</code></p>

<p><code> </code><code>username:</code><code> </code><code>blog</code></p>

<p><code> </code><code>password:</code></p>

<p>Change the username and password in the <tt>development</tt> section as appropriate.<span style="font-family: DejaVu Sans;">修改在开发会话中使用的合适的用户名和密码</span></p>

<p>You don’t have to update the database configurations manually. <span style="font-family: DejaVu Sans;">你不是必须手动的配置数据库</span>If you look at the options of the application generator, you will see that one of the options is named <tt>—</tt><tt>database</tt>. <span style="font-family: DejaVu Sans;">如果你查看应用程序产生器，你将会发现一个选项（</span>-d, &mdash;database=name Preconfigure for selected database (options: mysql/oracle/postgresql/sqlite2/sqlite3/frontbase/ibm_db).<span style="font-family: DejaVu Sans;">）</span></p>

<p>This option allows you to choose an adapter from a list of the most used relational databases. You can even run the generator repeatedly: <tt>cd</tt><tt> </tt><tt>..</tt><tt> </tt><tt>&amp;&amp;</tt><tt> </tt><tt>rails</tt><tt> </tt><tt>blog</tt><tt> </tt><tt>&mdash;database=mysql</tt>When you confirm<span style="font-family: DejaVu Sans;">确认</span>the overwriting of the <tt>config/database.yml</tt> file, your application will be configured for MySQL instead of SQLite.</p>

<h4><a name="creating-the-database"></a>3.4 Creating the Database<span style="font-family: WenQuanYi Micro Hei;">创建数据库</span></h4>


<p>Now that you have your database configured,it’s time to have Rails create an empty database for you. <span style="font-family: DejaVu Sans;">现在你已经有了你的数据库配置文件了，是时候创建一个空的数据库了。</span>You can do this by running a rake command:</p>

<p><code>$</code><code> </code><code>rake</code><code> </code><code>db:create</code><code> #</code><span style="font-family: DejaVu Sans;"><code><span style="font-family: Liberation Serif,Times New Roman,serif;">确保你的系统中已经有一个</span></code></span><code>JavaScript runtime.</code><code>#</code><span style="font-family: DejaVu Sans;"><code>可能还需要执行</code></span><code>sudo</code><code> </code><code><span style="font-family: monospace;">gem</span></code><code></code><code><span style="font-family: monospace;">install</span></code><code></code><code><span style="font-family: monospace;">therubyracer</span></code><code></code><code><span style="font-family: monospace;">&amp;&amp;</span></code><code>sudo</code><code> </code><code>gem</code><code> </code><code>install</code><code> </code><code>execjs</code></p>

<p>jhjguxin@jhjguxin-virtual-machine:~/blog$ rake db:create</p>

<p>rake aborted!</p>

<p>Could not find a JavaScript runtime. See <a href="https://github.com/sstephenson/execjs">https://github.com/sstephenson/execjs</a> for a list of available runtimes.</p>

<p><code>one</code><code> </code><code>way:</code></p>

<p><span style="font-family: DejaVu Sans;"><code>并且</code></span><code>In</code><code> </code><code>your</code><code> </code><code>Gemfile</code></p>

<pre>write this

gem 'execjs'

gem 'therubyracer'

and then run

bundle install</pre>


<p><code> #</code><span style="font-family: DejaVu Sans;"><code>在</code></span><code>ubuntu</code><span style="font-family: DejaVu Sans;"><code>环境中安装</code></span><code>sqlite3</code><span style="font-family: DejaVu Sans;"><code>库</code></span><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>sudo</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>apt-get</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>install</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>libsqlite3-ruby</strong></span></em></span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;"><em><span style="text-decoration: underline;"><strong>libsqlite3-dev</strong></span></em></span></span></code><code> </code><span style="font-family: DejaVu Sans;"><code>也尝试过使用</code></span><code>gem</code><code> </code><code>install</code><code> </code><code>sqlite3-ruby</code><span style="font-family: DejaVu Sans;"><code>但是网上说是</code></span><code>gem</code><code> </code><code>nds</code><span style="font-family: DejaVu Sans;"><code>有问题</code><code></code><code>安装</code></span><code>ruby</code><span style="font-family: DejaVu Sans;"><code>的</code></span><code> mysql</code><span style="font-family: DejaVu Sans;"><code>库</code></span><code><span style="text-decoration: underline;"><strong>sudo</strong></span></code><code></code><code><span style="text-decoration: underline;"><strong>apt-get</strong></span></code><code></code><code><span style="text-decoration: underline;"><strong>install</strong></span></code><code></code><code><span style="text-decoration: underline;"><strong>libmysql-ruby</strong></span></code></p>

<p>another way:</p>

<p><span style="font-family: DejaVu Sans;"><span style="color: #800000;">参照上面的网址：我找了一个</span></span><span style="color: #800000;">ubuntu<span style="font-family: DejaVu Sans;">里面有的</span></span><span style="color: #800000;">Node.js</span><span style="font-family: DejaVu Sans;"><span style="color: #800000;">就可以不用那个</span></span><span style="color: #800000;">therubyracer<span style="font-family: DejaVu Sans;">了</span></span></p>

<p>jhjguxin@jhjguxin-virtual-machine:~/blog$ rake db:create</p>

<p>This will create your development and test SQLite3 databases inside the <tt>db/</tt> folder.<span style="font-family: DejaVu Sans;">将会在</span>db/<span style="font-family: DejaVu Sans;">文件夹中创建你的开发环境的数据库文件</span>development.sqlite3</p>

<p>Rake is a general-purpose command-runner that Rails uses for many things. You can see the list of available rake commands in your application by running <tt>rake</tt><tt> </tt><tt>-T</tt>.Rake<span style="font-family: DejaVu Sans;">是一个通用的命令行可以帮助</span>Rails<span style="font-family: DejaVu Sans;">用户完成很多事情。你可以通过运行</span><tt>rake</tt><tt> </tt><tt>-T</tt><tt> </tt><span style="font-family: DejaVu Sans;">查看可用的</span>rake<span style="font-family: DejaVu Sans;">命令</span></p>

<p>ruby script/server#<span style="font-family: DejaVu Sans;">或者</span>script/server</p>

<h3><a name="hello-rails"></a>4 Hello, Rails!</h3>


<p>One of the traditional places to start with a new language is by getting some text up on screen quickly. To do this, you need to get your Rails application server running.<span style="font-family: DejaVu Sans;">传统的方式之一，开始使用一种新的（命令）语法并得到快速掠过的文字。要得到这样的结果你需要使你的</span>Rails<span style="font-family: DejaVu Sans;">程序运行。</span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>server</code><code> </code><code>#&mdash;&mdash;-rails2.3.1</code><code> </code>$ ruby script/server#</p>

<p>This will fire up an instance of the WEBrick web server by default (Rails can also use several other web servers). <span style="font-family: DejaVu Sans;">这里默认将开启一个</span>WEBrick<span style="font-family: DejaVu Sans;">服务器的的实例（</span>Rails<span style="font-family: DejaVu Sans;">也可能使用一些其他的</span>web<span style="font-family: DejaVu Sans;">服务器）。</span>To see your application in action, open a browser window and navigate to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/"><a href="http://localhost:3000">http://localhost:3000</a></a></span></span>. You should see Rails’ default information page:<span style="font-family: DejaVu Sans;">查看你的应用程序的行为，打开一个浏览器并且导航到</span>127.0.0.0<span style="font-family: DejaVu Sans;">：</span>3000<span style="font-family: DejaVu Sans;">你将会看到一个</span>Rails<span style="font-family: DejaVu Sans;">默认的信息页面。</span></p>

<p>To stop the web server, hit Ctrl+C in the terminal window where it’s running. In development mode, Rails does not generally require you to stop the server; changes you make in files will be automatically picked up by the server.<span style="font-family: DejaVu Sans;">要终止</span>web<span style="font-family: DejaVu Sans;">服务，在命令运行的终端中按下</span>Ctrl+C<span style="font-family: DejaVu Sans;">。在开发环境模式中，</span>Rails<span style="font-family: DejaVu Sans;">一般不需要你停止服务；你所做的更改将自动的编译进需要的文件中并且重启服务。</span></p>

<p>The “Welcome Aboard#<span style="font-family: DejaVu Sans;">船<span style="font-family: Liberation Serif,Times New Roman,serif;">” </span></span>page is the <em>smoke</em><em> </em><em>test</em> for a new Rails application: it makes sure that you have your software configured correctly enough to serve a page.<span style="font-family: DejaVu Sans;">这个欢迎界面体现了一个新的</span>Rails<span style="font-family: DejaVu Sans;">应用程序创建成功（通过了</span>Rails<span style="font-family: DejaVu Sans;">的自检）。</span>You can also click on the <em>About</em><em> </em><em>your</em><em> </em><em>application</em><em>’</em><em>s</em><em> </em><em>environment</em> link to see a summary of your application’s environment.<span style="font-family: DejaVu Sans;">你可以点击<span style="font-family: Liberation Serif,Times New Roman,serif;">‘ </span></span><em>About</em><em> </em><em>your</em><em> </em><em>application</em><em>’</em><em>s</em><em> </em><em>environment</em>’<span style="font-family: DejaVu Sans;">查看你的应用程序运行环境摘要信息。</span></p>

<h4><a name="say-hello-rails"></a>4.2 Say “Hello”, Rails</h4>


<p>To get Rails saying “Hello”, you need to create at minimum a controller and a view.<span style="font-family: DejaVu Sans;">要使</span>Rails<span style="font-family: DejaVu Sans;">说出（显示）<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span>你好<span style="font-family: Liberation Serif,Times New Roman,serif;">”</span>，你还需要创建一个最小的</span>a controller and a view<span style="font-family: DejaVu Sans;">。</span>Fortunately, you can do that in a single command. Enter this command in your terminal:<span style="font-family: DejaVu Sans;">幸运的是，你可以完成这些通过一行命令。在终端中输入：</span>
<code>rails</code><code> </code><code>generate</code><code> </code><code>controller</code><code> </code><code>home</code><code> </code><code>index</code><code> </code>##rails2.3.1 <code><span style="color: #000000;"><span style="font-size: small;">script/generate</span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;">controller</span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;">home</span></span></code><code></code><code><span style="color: #000000;"><span style="font-size: small;">index##</span></span></code></p>

<p>If you get a command not found error when running this command, you need to explicitly pass Rails <tt>rails</tt> commands to Ruby: <tt><em>ruby</em></tt><tt><em> </em></tt><tt><em>\path\to\your\application\script\rails</em></tt><tt><em> </em></tt><tt><em>generate</em></tt><tt><em> </em></tt><tt><em>controller</em></tt><tt><em> </em></tt><tt><em>home</em></tt><tt><em> </em></tt><tt><em>index</em></tt><em>.</em><span style="font-family: DejaVu Sans;"><em>如果你在输入这个命令的时候出现没有这个命令错误，你需要明确的使用</em></span><em>ruby</em><span style="font-family: DejaVu Sans;"><em>来执行</em></span><em>Rails</em><span style="font-family: DejaVu Sans;"><em>命令。</em><span style="color: #800000;"><em>这里就没有</em></span></span><span style="color: #800000;"><em>rails</em><span style="font-family: DejaVu Sans;"><em>这个文件</em></span><span style="color: #800000;"><em>应该是</em></span></span><span style="color: #800000;"><em>ruby</em></span><span style="color: #800000;"><em>script/generate</em></span><span style="color: #800000;"><em>controller</em></span><span style="color: #800000;"><em>home</em></span><span style="color: #800000;"><em>index</em></span></p>

<p>Rails will create several files for you, including <tt>app/views/home/index.html.erb</tt>. Rails<span style="font-family: DejaVu Sans;">将会为你创建一些文件，包含<span style="font-family: Liberation Serif,Times New Roman,serif;">‘</span></span><tt>app/views/home/index.html.erb</tt>’<span style="font-family: DejaVu Sans;">。</span>This is the template that will be used to display the results of the <tt>index</tt> action (method) in the <tt>home</tt> controller.<span style="font-family: DejaVu Sans;">这个模板会用来显示在</span><tt>home</tt> controller<span style="font-family: DejaVu Sans;">中的</span><tt>index</tt> action (method)<span style="font-family: DejaVu Sans;">的结果。</span>Open this file in your text editor and edit it to contain a single line of code:<span style="font-family: DejaVu Sans;">在文本编辑器中打开这个文件并输入：</span></p>

<p><code>&lt;h1&gt;Hello,</code><code> </code><code>Rails!&lt;/h1&gt;</code><code> </code></p>

<h4><a name="setting-the-application-home-page"></a>4.3 Setting the Application Home Page</h4>


<p>Now that we have made the controller and view, we need to tell Rails when we want “Hello Rails” to show up. <span style="font-family: DejaVu Sans;">现在我们已经创建了</span>controller <span style="font-family: DejaVu Sans;">和</span>view<span style="font-family: DejaVu Sans;">，我们还需要告诉</span>Rails<span style="font-family: DejaVu Sans;">我们想在什么时候显示出来。</span>In our case, we want it to show up when we navigate to the root URL of our site, <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/"><a href="http://localhost:3000">http://localhost:3000</a></a></span></span>, instead of the “Welcome Aboard” smoke test.<span style="font-family: DejaVu Sans;">在本例中，我们想让它在我们导航至站点</span>url<span style="font-family: DejaVu Sans;">根目录的时候替代<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Welcome Aboard”<span style="font-family: DejaVu Sans;">显示。</span></p>

<p>The first step to doing this is to delete the default page from your application:<span style="font-family: DejaVu Sans;">首先移除应用程序中的默认页面。</span></p>

<p><code>rm</code><code> </code><code>public/index.html</code></p>

<p>We need to do this as Rails will deliver#<span style="font-family: DejaVu Sans;">提供，传输</span>any static file in the <tt>public</tt> directory in preference#<span style="font-family: DejaVu Sans;">偏好优先</span>to any dynamic#<span style="font-family: DejaVu Sans;">动态</span>content we generate from the controllers.<span style="font-family: DejaVu Sans;">我们必须这样做因为，</span>Rails<span style="font-family: DejaVu Sans;">将会传送任何在</span>public<span style="font-family: DejaVu Sans;">的静态文件优先于我们在</span>controllers<span style="font-family: DejaVu Sans;">生成的动态（显示）内容。</span></p>

<p>Now, you have to tell Rails where your actual home page is located.Open the file <tt>config/routes.rb</tt> in your editor. This is your application’s <em>routing</em><em> </em><em>file</em> which holds entries in a special DSL (domain-specific language) that tells Rails how to connect incoming requests to controllers and actions. This file contains many sample routes on commented lines, and one of them actually shows you how to connect the root of your site to a specific controller and action. Find the line beginning with <tt>root</tt><tt> </tt><tt>:to</tt>, uncomment it and change it like the following:<span style="font-family: DejaVu Sans;">现在你还必须告诉</span>Rails <span style="font-family: DejaVu Sans;">你实际上的主页在哪里。在文本编辑器中打开</span><tt>config/routes.rb</tt> <span style="font-family: DejaVu Sans;">。这是你应用程序的路由文件，它采用</span>DSL<span style="font-family: DejaVu Sans;">语言囊括了告诉</span>Rails<span style="font-family: DejaVu Sans;">怎样连接请求信息到</span>controllers and actions.<span style="font-family: DejaVu Sans;">的所有条目。</span></p>

<p><span style="font-family: DejaVu Sans;">这个文件包含许多简单的路由命令，其中一条实际上是用于告诉我们怎样连接你站点根目录到一个指定的</span>controller and acti<span style="font-family: DejaVu Sans;">。找到以</span>root :to<span style="font-family: DejaVu Sans;">开头的那一行，注释掉它改成如下内容：</span></p>

<p><code>Blog::Application.routes.draw</code><code> </code><code>do</code></p>

<p>&nbsp;</p>

<p><code> </code><code>get</code><code> </code><code>&ldquo;home/index&rdquo;</code></p>

<p>&nbsp;</p>

<p><code> </code><code>root</code><code> </code><code>:to</code><code> </code><code>=&gt;</code><code> </code><code>&ldquo;home#index&rdquo;</code></p>

<p><code>//////////////////this</code><code> </code><code>depend</code><code> </code><code>on</code><code> </code><code>rails</code><code> </code><code>2.3.1/////////</code></p>

<p><code>Blog::Application.routes.draw</code><code> </code><code>do</code></p>

<p>&nbsp;</p>

<p><code> </code><code>#&hellip;</code></p>

<p><code> </code><code>#</code><code> </code><code>You</code><code> </code><code>can</code><code> </code><code>have</code><code> </code><code>the</code><code> </code><code>root</code><code> </code><code>of</code><code> </code><code>your</code><code> </code><code>site</code><code> </code><code>routed</code><code> </code><code>with</code><code> </code><code>&ldquo;root&rdquo;</code></p>

<p><code> </code><code>#</code><code> </code><code>just</code><code> </code><code>remember</code><code> </code><code>to</code><code> </code><code>delete</code><code> </code><code>public/index.html.</code></p>

<p><code> </code><code>map.root</code><code> </code><code>:controller</code><code> </code><code>=&gt;</code><code> </code><code>&ldquo;home&rdquo;</code><code> </code></p>

<p><code>or</code></p>

<p><code> </code><code>map.root</code><code> </code><code>:controller</code><code> </code><code>=&gt;</code><code> </code><code>&ldquo;home&rdquo;,:action</code><code> </code><code>=&gt;</code><code> </code><code>&lsquo;index&rsquo;</code></p>

<p><code> </code><code>##root</code><code> </code><code>:to</code> <code>=&gt;</code><code> </code><code>&ldquo;home#index&rdquo;</code></p>

<p>The <tt>root</tt><tt> </tt><tt>:to</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;home#index&rdquo;</tt> tells Rails to map the root action to the home controller’s index action.</p>

<p><span style="color: #800000;">ps</span><span style="color: #800000;">-ef|grep</span><span style="color: #800000;">webrick</span></p>

<p><span style="color: #800000;">kill</span><span style="color: #800000;">-9</span><span style="font-family: DejaVu Sans;"><span style="color: #800000;">上面得到的</span></span><span style="color: #800000;">id</span><span style="font-family: DejaVu Sans;"><span style="color: #800000;">强制结束</span></span><span style="color: #800000;">WEBrick<span style="font-family: DejaVu Sans;">服务</span></span></p>

<p>Now if you navigate to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/"><a href="http://localhost:3000">http://localhost:3000</a></a></span></span> in your browser, you’ll see <tt>Hello,</tt><tt> </tt><tt>Rails!</tt>.<span style="font-family: DejaVu Sans;">现在你在浏览器中导航至</span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/"><a href="http://localhost:3000">http://localhost:3000</a></a></span></span> <span style="font-family: DejaVu Sans;">，你将会看到<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span><tt>Hello,</tt><tt> </tt><tt>Rails!</tt>”.</p>

<p>For more information about routing, refer to <a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a>.<span style="font-family: DejaVu Sans;">更多的信息请参见</span><a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a><span style="font-family: DejaVu Sans;">。</span></p>

<h3><a name="getting-up-and-running-quickly-with-scaf"></a> 5 Getting Up and Running Quickly with Scaffolding<span style="font-family: WenQuanYi Micro Hei;">使用</span>Scaffolding<span style="font-family: WenQuanYi Micro Hei;">快速创建并运行</span></h3>


<p>Rails <em>scaffolding</em> is a quick way to generate some of the major pieces of an application. Rails <em>scaffolding<span style="font-family: DejaVu Sans;">是一个快速的方法产生应用程序的一些主要的部分。</span></em>If you want to create the models, views, and controllers for a new resource in a single operation, scaffolding is the tool for the job.<span style="font-family: DejaVu Sans;">如果你想使用一种简单的操作为新资源创建</span>models,views<span style="font-family: DejaVu Sans;">和</span>controllers<span style="font-family: DejaVu Sans;">，</span>Scaffolding<span style="font-family: DejaVu Sans;">是一个不错的工具。</span></p>

<h3><a name="creating-a-resource"></a>6 Creating a Resource<span style="font-family: WenQuanYi Micro Hei;">创建一个资源</span></h3>


<p>In the case of the blog application, you can start by generating a scaffolded Post resource: this will represent#<span style="font-family: DejaVu Sans;">代表，表现表示</span>a single blog posting. To do this, enter this command in your terminal:<span style="font-family: DejaVu Sans;">在本示例中的</span>blog<span style="font-family: DejaVu Sans;">应用程序，你可以使用</span>scaffolded<span style="font-family: DejaVu Sans;">产生</span>post<span style="font-family: DejaVu Sans;">资源：它表现为一个简单的</span>blog posting<span style="font-family: DejaVu Sans;">。要完成这些，在终端输入如下命令：</span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>scaffold</code><code> </code><code>Post</code><code> </code><code>name:string</code><code> </code><code>title:string</code><code> </code><code>content:text</code></p>

<h2>rails 2.3.1 script/generate scaffold Post name:string title:string content:text</h2>

<p>The scaffold generator will build several files in your application, along with some folders, and edit <tt>config/routes.rb</tt>. Here’s a quick overview of what it creates:scaffold<span style="font-family: DejaVu Sans;">创建器将会在应用程序中的一些文件夹中生成一些文件，并且还会编辑</span><tt>config/routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>。下面这些产生的文件的大概说明：</tt></span></p>

<table width="665" cellspacing="0" cellpadding="2"><colgroup> <col width="231" /> <col width="426" /> </colgroup>
<tbody>
<tr>
<th width="231">File</th>
<th width="426">Purpose</th>
</tr>
<tr>
<td width="231">db/migrate/20100207214725_create_posts.rb</td>
<td width="426">Migration to create the posts table in your database (your name will include a different timestamp)<span style="font-family: DejaVu Sans;">将创建的</span>posts<span style="font-family: DejaVu Sans;">表单迁移到你的数据库（会在你的命名前面加上时间）</span></td>
</tr>
<tr>
<td width="231">app/models/post.rb</td>
<td width="426">The Post model Post<span style="font-family: DejaVu Sans;">模型</span></td>
</tr>
<tr>
<td width="231">test/fixtures/posts.yml</td>
<td width="426">Dummy posts for use in testing <span style="font-family: DejaVu Sans;">模拟测试</span>post</td>
</tr>
<tr>
<td width="231">app/controllers/posts_controller.rb</td>
<td width="426">The Posts controller</td>
</tr>
<tr>
<td width="231">app/views/posts/index.html.erb</td>
<td width="426">A view to display an index of all posts <span style="font-family: DejaVu Sans;">显示所有</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/edit.html.erb</td>
<td width="426">A view to edit an existing post<span style="font-family: DejaVu Sans;">编辑</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/show.html.erb</td>
<td width="426">A view to display a single post<span style="font-family: DejaVu Sans;">显示一条</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/new.html.erb</td>
<td width="426">A view to create a new post<span style="font-family: DejaVu Sans;">创建</span>post</td>
</tr>
<tr>
<td width="231">app/views/posts/_form.html.erb</td>
<td width="426">A partial to control the overall look and feel of the form used in edit and new views<span style="font-family: DejaVu Sans;">一个用于控制编辑和创建新视图的整体视效表</span></td>
</tr>
<tr>
<td width="231">app/helpers/posts_helper.rb</td>
<td width="426">Helper functions to be used from the post views<span style="font-family: DejaVu Sans;">使用</span>post<span style="font-family: DejaVu Sans;">的帮助功能</span>views</td>
</tr>
<tr>
<td width="231">app/assets/stylesheets/scaffolds.css.scss</td>
<td width="426">Cascading style sheet#<span style="font-family: DejaVu Sans;">层叠样式</span>to make the scaffolded views look better #css<span style="font-family: DejaVu Sans;">使</span>scaffolded<span style="font-family: DejaVu Sans;">视图具有更好的效果</span></td>
</tr>
<tr>
<td width="231">app/assets/stylesheets/posts.css.scss</td>
<td width="426">Cascading style sheet for the posts controller#post controller<span style="font-family: DejaVu Sans;">的</span>css<span style="font-family: DejaVu Sans;">效果</span></td>
</tr>
<tr>
<td width="231">app/assets/javascripts/posts.js.coffee</td>
<td width="426">CoffeeScript for the posts controller</td>
</tr>
<tr>
<td width="231">test/unit/post_test.rb</td>
<td width="426">Unit testing harness#<span style="font-family: DejaVu Sans;">利用</span>for the posts model post models<span style="font-family: DejaVu Sans;">的</span>Unit<span style="font-family: DejaVu Sans;">测试</span></td>
</tr>
<tr>
<td width="231">test/functional/posts_controller_test.rb</td>
<td width="426">Functional testing harness for the posts controller post controller<span style="font-family: DejaVu Sans;">的功能测试</span></td>
</tr>
<tr>
<td width="231">test/unit/helpers/posts_helper_test.rb</td>
<td width="426">Unit testing harness for the posts helper post helper<span style="font-family: DejaVu Sans;">的</span>Uint <span style="font-family: DejaVu Sans;">测试</span></td>
</tr>
<tr>
<td width="231">config/routes.rb</td>
<td width="426">Edited to include routing information for posts <span style="font-family: DejaVu Sans;">加入</span>posts <span style="font-family: DejaVu Sans;">路由信息</span></td>
</tr>
</tbody>
</table>


<p><tt>While</tt><tt> </tt><tt>scaffolding</tt><tt> </tt><tt>will</tt><tt> </tt><tt>get</tt><tt> </tt><tt>you</tt><tt> </tt><tt>up</tt><tt> </tt><tt>and</tt><tt> </tt><tt>running</tt><tt> </tt><tt>quickly,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>code</tt><tt> </tt><tt>it</tt><tt> </tt><tt>generates</tt><tt> </tt><tt>is</tt><tt> </tt><tt>unlikely</tt><tt> </tt><tt>to</tt><tt> </tt><tt>be</tt><tt> </tt><tt>a</tt><tt> </tt><tt>perfect</tt><tt> </tt><tt>fit</tt><tt> </tt><tt>for</tt><tt> </tt><tt>your</tt><tt> </tt><tt>application.</tt><span style="font-family: DejaVu Sans;"><tt>即便是</tt></span><tt>scaffolding</tt><span style="font-family: DejaVu Sans;"><tt>使你创建和运行非常快捷，但是产生的代码不可能完美的适合你的应用程序。</tt><tt></tt></span><tt>You</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>most</tt><tt> </tt><tt>probably</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>customize</tt><tt> </tt><tt>the</tt><tt> </tt><tt>generated</tt><tt> </tt><tt>code.</tt><span style="font-family: DejaVu Sans;"><tt>你大多数都需要定制产生的代码。</tt><tt></tt></span><tt>Many</tt><tt> </tt><tt>experienced</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>developers</tt><tt> </tt><tt>avoid</tt><tt> </tt><tt>scaffolding</tt><tt> </tt><tt>entirely,</tt><tt> </tt><tt>preferring</tt><tt> </tt><tt>to</tt><tt> </tt><tt>write</tt><tt> </tt><tt>all</tt><tt> </tt><tt>or</tt><tt> </tt><tt>most</tt><tt> </tt><tt>of</tt><tt> </tt><tt>their</tt><tt> </tt><tt>source</tt><tt> </tt><tt>code</tt><tt> </tt><tt>from</tt><tt> </tt><tt>scratch.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>很多有经验的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>开发人员完全不使用</tt></span><tt>scaffolding</tt><span style="font-family: DejaVu Sans;"><tt>，宁愿从头编写全部的代码。</tt></span><tt>Rails,</tt><tt> </tt><tt>however,</tt><tt> </tt><tt>makes</tt><tt> </tt><tt>it</tt><tt> </tt><tt>really</tt><tt> </tt><tt>simple</tt><tt> </tt><tt>to</tt><tt> </tt><tt>customize</tt><tt> </tt><tt>templates</tt><tt> </tt><tt>for</tt><tt> </tt><tt>generated</tt><tt> </tt><tt>models,</tt><tt> </tt><tt>controllers,</tt><tt> </tt><tt>views</tt><tt> </tt><tt>and</tt><tt> </tt><tt>other</tt><tt> </tt><tt>source</tt><tt> </tt><tt>files.Rails</tt><span style="font-family: DejaVu Sans;"><tt>，无论如何，使得为生成的</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>controllers</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>views</tt><span style="font-family: DejaVu Sans;"><tt>或者其他代码编定制模板非常简单。</tt><tt></tt></span><tt>You</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>find</tt><tt> </tt><tt>more</tt><tt> </tt><tt>information</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><a href="http://guides.rubyonrails.org/generators.html"><span style="color: #000080;"><span style="text-decoration: underline;">Creating</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Customizing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Generators</span></span><span style="color: #000080;"><span style="text-decoration: underline;">&amp;</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Templates</span></span></a><tt> </tt><tt>guide.</tt><span style="font-family: DejaVu Sans;"><tt>你可以在</tt><tt></tt></span><a href="http://guides.rubyonrails.org/generators.html"><span style="color: #000080;"><span style="text-decoration: underline;">Creating</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Customizing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Generators</span></span><span style="color: #000080;"><span style="text-decoration: underline;">&amp;</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Templates</span></span></a><span style="font-family: DejaVu Sans;"><tt>看到更多信息。</tt></span></p>

<h4><a name="running-a-migration"></a><tt>6.1</tt><tt> </tt><tt>Running</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Migration</tt></h4>


<p>One of the products of the <tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt> command is a <em>database</em><em> </em><em>migration</em>. Migrations are Ruby classes that are designed to make it simple to create and modify database tables. Rails uses rake commands to run migrations, and it’s possible to undo a migration after it’s been applied to your database. Migration filenames include a timestamp to ensure that they’re processed#<span style="font-family: DejaVu Sans;">处理</span>in the order that they were created.script/generate scaffold<span style="font-family: DejaVu Sans;">的一个产品就是数据迁移。</span>Migrations<span style="font-family: DejaVu Sans;">是一个</span>ruby<span style="font-family: DejaVu Sans;">类被设计用来使数据库表单的创建和修改变得简单。</span>Rails<span style="font-family: DejaVu Sans;">使用</span>rake<span style="font-family: DejaVu Sans;">命令来执行迁移，它还可以撤销已经应用的修改。</span>Migration filenames include a timestamp<span style="font-family: DejaVu Sans;">确保了迁移能够完成。</span></p>

<p>If you look in the <tt>db/migrate/20100207214725_create_posts.rb</tt> file (remember, yours will have a slightly different name<span style="font-family: DejaVu Sans;">记住，你得到的可能会有略微不同</span>), here’s what you’ll find:</p>

<p><code>class</code><tt> </tt><code>CreatePosts</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Migration</code></p>

<p><code> </code><code>def</code> <code>change</code></p>

<p><code> </code><code>create_table</code><code> </code><code>:posts</code> <code>do</code> <code>|t|</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:name</code></p>

<p><code> </code><code>t.string</code><code> </code><code>:title</code></p>

<p><code> </code><code>t.text</code><code> </code><code>:content</code></p>

<p>&nbsp;</p>

<p><code> </code><code>t.timestamps</code></p>

<p><code> </code><code>end</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><tt>The</tt><tt> </tt><tt>above</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>a</tt><tt> </tt><tt>method</tt><tt> </tt><tt>name</tt><tt> </tt><tt>change</tt><tt> </tt><tt>which</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>called</tt><tt> </tt><tt>when</tt><tt> </tt><tt>you</tt><tt> </tt><tt>run</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration.</tt><span style="font-family: DejaVu Sans;"><tt>整个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>创建了一个名叫</tt></span><tt>change</tt><span style="font-family: DejaVu Sans;"><tt>的方法，该方法在你运行这个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的时候被调用。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>action</tt><tt> </tt><tt>defined</tt><tt> </tt><tt>in</tt><tt> </tt><tt>that</tt><tt> </tt><tt>method</tt><tt> </tt><tt>is</tt><tt> </tt><tt>also</tt><tt> </tt><tt>reversible#</tt><span style="font-family: DejaVu Sans;"><tt>可逆</tt></span><tt>,</tt><tt> </tt><tt>which</tt><tt> </tt><tt>means</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>knows</tt><tt> </tt><tt>how</tt><tt> </tt><tt>to</tt><tt> </tt><tt>reverse</tt><tt> </tt><tt>the</tt><tt> </tt><tt>change</tt><tt> </tt><tt>made</tt><tt> </tt><tt>by</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration,</tt><tt> </tt><tt>in</tt><tt> </tt><tt>case</tt><tt> </tt><tt>you</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>reverse</tt><tt> </tt><tt>it</tt><tt> </tt><tt>at</tt><tt> </tt><tt>later</tt><tt> </tt><tt>date.</tt><span style="font-family: DejaVu Sans;"><tt>这个方法中定义的行为也是可逆的，那就是说</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>知道怎样逆向改变这个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>，如果你需要恢复到上一次数据。</tt><tt></tt></span><tt>By</tt><tt> </tt><tt>default,</tt><tt> </tt><tt>when</tt><tt> </tt><tt>you</tt><tt> </tt><tt>run</tt><tt> </tt><tt>this</tt><tt> </tt><tt>migration</tt><tt> </tt><tt>it</tt><tt> </tt><tt>will</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>a</tt><tt> </tt><tt>posts</tt><tt> </tt><tt>table</tt><tt> </tt><tt>with</tt><tt> </tt><tt>two</tt><tt> </tt><tt>string</tt><tt> </tt><tt>columns</tt><tt> </tt><tt>and</tt><tt> </tt><tt>a</tt><tt> </tt><tt>text</tt><tt> </tt><tt>column.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>默认情况下，当你运行这个</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>，他将会创建一个包含两个字符串列和一个</tt></span><tt>text</tt><span style="font-family: DejaVu Sans;"><tt>列的表单。</tt></span><tt>It</tt><tt> </tt><tt>also</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>two</tt><tt> </tt><tt>timestamp</tt><tt> </tt><tt>fields</tt><tt> </tt><tt>to</tt><tt> </tt><tt>track</tt><tt> </tt><tt>record</tt><tt> </tt><tt>creation</tt><tt> </tt><tt>and</tt><tt> </tt><tt>updating.</tt><tt> </tt><tt>More</tt><tt> </tt><tt>information</tt><tt> </tt><tt>about</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>migrations</tt><tt> </tt><tt>can</tt><tt> </tt><tt>be</tt><tt> </tt><tt>found</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><a href="http://guides.rubyonrails.org/migrations.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Database</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Migrations</span></span></a><tt> </tt><tt>guide.</tt><span style="font-family: DejaVu Sans;"><tt>关于</tt></span><tt>Rails</tt><tt> </tt><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>的更多信息请阅读</tt><tt></tt></span><a href="http://guides.rubyonrails.org/migrations.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Database</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Migrations</span></span></a><span style="font-family: DejaVu Sans;"><tt>手册。</tt></span></p>

<p><tt>At</tt><tt> </tt><tt>this</tt><tt> </tt><tt>point,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>use</tt><tt> </tt><tt>a</tt><tt> </tt><tt>rake</tt><tt> </tt><tt>command</tt><tt> </tt><tt>to</tt><tt> </tt><tt>run</tt><tt> </tt><tt>the</tt><tt> </tt><tt>migration:</tt><span style="font-family: DejaVu Sans;"><tt>这个时候，你可以使用</tt></span><tt>rake</tt><span style="font-family: DejaVu Sans;"><tt>命令运行</tt></span><tt>migration</tt><span style="font-family: DejaVu Sans;"><tt>了：</tt></span></p>

<p><code>rake</code><code> </code><code>db:migrate</code></p>

<p><code>Rails</code><code> </code><code>will</code><code> </code><code>execute</code><code> </code><code>this</code><code> </code><code>migration</code><code> </code><code>command</code><code> </code><code>and</code><code> </code><code>tell</code><code> </code><code>you</code><code> </code><code>it</code><code> </code><code>created</code><code> </code><code>the</code><code> </code><code>Posts</code><code> </code><code>table.Rails</code><span style="font-family: DejaVu Sans;"><code>将会执行这个</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>命令并且通知你它创建了</code></span><code>Post</code><span style="font-family: DejaVu Sans;"><code>表单。</code></span></p>

<p><code>==</code><code> </code><code>CreatePosts:</code><code> </code><code>migrating</code><code> </code><code>====================================================</code></p>

<p><code>&mdash;</code><code> </code><code>create_table(:posts)</code></p>

<p><code> </code><code>&ndash;&gt;</code><code> </code><code>0.0030s</code></p>

<p><code>==</code><code> </code><code>CreatePosts:</code><code> </code><code>migrated</code><code> </code><code>(0.0032s)</code><code> </code><code>===========================================</code></p>

<p><code>Because</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>working</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><code>development</code><code> </code><code>environment</code><code> </code><code>by</code><code> </code><code>default,</code><code> </code><code>this</code><code> </code><code>command</code><code> </code><code>will</code><code> </code><code>apply</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><code>database</code><code> </code><code>defined</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><tt>development</tt><code> </code><code>section</code><code> </code><code>of</code><code> </code><code>your</code><code> </code><tt>config/database.yml</tt><code> </code><code>file.</code><code> </code><code>If</code><code> </code><code>you</code><code> </code><code>would</code><code> </code><code>like</code><code> </code><code>to</code><code> </code><code>execute</code><code> </code><code>migrations</code><code> </code><code>in</code><code> </code><code>other</code><code> </code><code>environment,</code><code> </code><code>for</code><code> </code><code>instance</code><code> </code><code>in</code><code> </code><code>production,</code><code> </code><code>you</code><code> </code><code>must</code><code> </code><code>explicitly</code><code> </code><code>pass</code><code> </code><code>it</code><code> </code><code>when</code><code> </code><code>invoking</code><code> </code><code>the</code><code> </code><code>command:</code><code> </code><tt>rake</tt><tt> </tt><tt>db:migrate</tt><tt> </tt><tt>RAILS_ENV=production</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>由于你默认工作在开发环境中，这个命令将会应用于开发环境会话的数据库位于你的</code></span><tt>config/database.yml</tt><tt> </tt><span style="font-family: DejaVu Sans;"><code>中。如果你想执行</code></span><code>migration</code><span style="font-family: DejaVu Sans;"><code>在其他环境中，比如以产品（环境）为实例，你必须明确调用的通过命令行中执行：</code></span><code>rake</code><code> </code><code>db:migrate</code><code> </code><code>RAILS_ENV=production</code><span style="font-family: DejaVu Sans;"><code>。</code></span></p>

<h4><a name="adding-a-link"></a><code>6.2</code><code> </code><code>Adding</code><code> </code><code>a</code><code> </code><code>Link</code><span style="font-family: WenQuanYi Micro Hei;"><code>添加要给</code></span><code>link</code><span style="font-family: WenQuanYi Micro Hei;"><code>（到</code></span><code>blog</code><span style="font-family: WenQuanYi Micro Hei;"><code>）</code></span></h4>


<p>To hook the posts up to the home page you’ve already created, you can add a link to the home page.<span style="font-family: DejaVu Sans;">把你已经创建好的</span>post<span style="font-family: DejaVu Sans;">挂到主页上，你可以通过添加一个</span>link<span style="font-family: DejaVu Sans;">到主页。</span>Open <tt>app/views/home/index.html.erb</tt> and modify it as follows:<span style="font-family: DejaVu Sans;">打开</span><tt>app/views/home/index.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>并且按照下面所示更改：</tt></span></p>

<p><code>&lt;h1&gt;Hello,</code><code> </code><code>Rails!&lt;/h1&gt;</code></p>

<p><code>&lt;%=</code><code> </code><code>link_to</code><code> </code><code>&ldquo;My</code><code> </code><code>Blog&rdquo;,</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code></p>

<p><tt>The</tt><tt> </tt><tt>link_to</tt><tt> </tt><tt>method</tt><tt> </tt><tt>is</tt><tt> </tt><tt>one</tt><tt> </tt><tt>of</tt><tt> </tt><tt>Rails</tt><tt>’ </tt><tt>built-in</tt><tt> </tt><tt>view</tt><tt> </tt><tt>helpers.</tt><span style="font-family: DejaVu Sans;"><tt>这个链接方法是</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>在</tt><tt></tt></span><tt>view</tt><tt> </tt><tt>helpers</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>的内建方法之一</tt><tt></tt><tt>。</tt></span><tt>It</tt><tt> </tt><tt>creates</tt><tt> </tt><tt>a</tt><tt> </tt><tt>hyperlink</tt><tt> </tt><tt>based</tt><tt> </tt><tt>on</tt><tt> </tt><tt>text</tt><tt> </tt><tt>to</tt><tt> </tt><tt>display</tt><tt> </tt><tt>and</tt><tt> </tt><tt>where</tt><tt> </tt><tt>to</tt><tt> </tt><tt>go</tt><tt> – </tt><tt>in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>path</tt><tt> </tt><tt>for</tt><tt> </tt><tt>posts.</tt><span style="font-family: DejaVu Sans;"><tt>它创建一个基于文字的超级链接并显示到哪里，在这个实例中（跳转）到</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<h4><a name="working-with-posts-in-the-browser"></a><tt>6.3</tt><tt> </tt><tt>Working</tt><tt> </tt><tt>with</tt><tt> </tt><tt>Posts</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Browser</tt></h4>


<p>Now you’re ready to start working with posts. To do that, navigate to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/"><a href="http://localhost:3000">http://localhost:3000</a></a></span></span> and then click the “My Blog” link:<span style="font-family: DejaVu Sans;">现在你已经准备好在</span>posts<span style="font-family: DejaVu Sans;">中工作了。导航至</span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/"><a href="http://localhost:3000">http://localhost:3000</a></a></span></span><span style="font-family: DejaVu Sans;">，并且点击<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>My Blog”<span style="font-family: DejaVu Sans;">链接。</span></p>

<p><code>This</code><code> </code><code>is</code><code> </code><code>the</code><code> </code><code>result</code><code> </code><code>of</code><code> </code><code>Rails</code><code> </code><code>rendering</code><code> </code><code>the</code><code> </code><tt>index</tt><code> </code><code>view</code><code> </code><code>of</code><code> </code><code>your</code><code> </code><code>posts.</code><span style="font-family: DejaVu Sans;"><code>这就是</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>渲染你的</code></span><code>posts</code><span style="font-family: DejaVu Sans;"><code>视图的结果。</code><code></code></span><code>There</code><code> </code><code>aren</code><code>’</code><code>t</code><code> </code><code>currently</code><code> </code><code>any</code><code> </code><code>posts</code><code> </code><code>in</code><code> </code><code>the</code><code> </code><code>database,</code><code> </code><code>but</code><code> </code><code>if</code><code> </code><code>you</code><code> </code><code>click</code><code> </code><code>the</code><code> </code><tt>New</tt><tt> </tt><tt>Post</tt><code> </code><code>link</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>create</code><code> </code><code>one.</code><span style="font-family: DejaVu Sans;"><code>在你点击</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></code></span><code>New</code><code> </code><code>Post</code><code>”</code><span style="font-family: DejaVu Sans;"><code>链接并创建一个新的</code></span><code>post</code><span style="font-family: DejaVu Sans;"><code>之前，数据库里面是没有任何</code></span><code>post</code><span style="font-family: DejaVu Sans;"><code>的。</code><code></code></span><code>After</code><code> </code><code>that,</code><code> </code><code>you</code><code>’</code><code>ll</code><code> </code><code>find</code><code> </code><code>that</code><code> </code><code>you</code><code> </code><code>can</code><code> </code><code>edit</code><code> </code><code>posts,</code><code> </code><code>look</code><code> </code><code>at</code><code> </code><code>their</code><code> </code><code>details,</code><code> </code><code>or</code><code> </code><code>destroy</code><code> </code><code>them.</code><code> </code><span style="font-family: DejaVu Sans;"><code>随后你可以编辑，查看详细内容，或者删除他们。</code></span><code>All</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>logic</code><code> </code><code>and</code><code> </code><code>HTML</code><code> </code><code>to</code><code> </code><code>handle</code><code> </code><code>this</code><code> </code><code>was</code><code> </code><code>built</code><code> </code><code>by</code><code> </code><code>the</code><code> </code><code>single</code><code> </code><tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt><code> </code><code>command.post</code><span style="font-family: DejaVu Sans;"><code>的所有的</code></span><code>logic</code><span style="font-family: DejaVu Sans;"><code>和</code></span><code>HTML</code><span style="font-family: DejaVu Sans;"><code>都是通过</code></span><tt><em>rails</em></tt><tt><em> </em></tt><tt><em>generate</em></tt><tt><em> </em></tt><tt><em>scaffold</em></tt><tt><em> </em></tt><span style="font-family: DejaVu Sans;"><code>生成的。</code></span></p>

<p><code>In</code><code> </code><code>development</code><code> </code><code>mode</code><code> </code><code>(which</code><code> </code><code>is</code><code> </code><code>what</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>working</code><code> </code><code>in</code><code> </code><code>by</code><code> </code><code>default),</code><code> </code><code>Rails</code><code> </code><code>reloads</code><code> </code><code>your</code><code> </code><code>application</code><code> </code><code>with</code><code> </code><code>every</code><code> </code><code>browser</code><code> </code><code>request,</code><code> </code><code>so</code><code> </code><code>there</code><code>’</code><code>s</code><code> </code><code>no</code><code> </code><code>need</code><code> </code><code>to</code><code> </code><code>stop</code><code> </code><code>and</code><code> </code><code>restart</code><code> </code><code>the</code><code> </code><code>web</code><code> </code><code>server.</code><span style="font-family: DejaVu Sans;"><code>在开发模式中（你的默认工作模式），</code></span><code>Rails</code><span style="font-family: DejaVu Sans;"><code>会在每个浏览器请求的时候重新载入你的应用程序，因此你不需要停止或者重启</code></span><code>web</code><span style="font-family: DejaVu Sans;"><code>服务。</code></span></p>

<p><code>Congratulations,</code><code> </code><code>you</code><code>’</code><code>re</code><code> </code><code>riding</code><code> </code><code>the</code><code> </code><code>rails!</code><code> </code><code>Now</code><code> </code><code>it</code><code>’</code><code>s</code><code> </code><code>time</code><code> </code><code>to</code><code> </code><code>see</code><code> </code><code>how</code><code> </code><code>it</code><code> </code><code>all</code><code> </code><code>works.</code><span style="font-family: DejaVu Sans;"><code>恭喜，你已经驯服了</code></span><code>rails</code><span style="font-family: DejaVu Sans;"><code>！现在是时候去看看它的所有工作了。</code></span></p>

<h4><a name="the-model"></a><code>6.4</code><code> </code><code>The</code><code> </code><code>Model</code></h4>


<p>The model file, <tt>app/models/post.rb</tt> is about as simple as it can get:</p>

<p><code>class</code><code> </code><code>Post</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code>end</code></p>

<p><code>There</code><code> </code><code>isn</code><code>’</code><code>t</code><code> </code><code>much</code><code> </code><code>to</code><code> </code><code>this</code><code> </code><code>file</code><code> – </code><code>but</code><code> </code><code>note</code><code> </code><code>that</code><code> </code><code>the</code><code> </code><tt>Post</tt><code> </code><code>class</code><code> </code><code>inherits</code><code> </code><code>from</code><code> </code><tt>ActiveRecord::Base</tt><code>.</code><span style="font-family: DejaVu Sans;"><code>这里有可能不一致</code><code><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></code><code>但是切记</code></span><code>Post</code><span style="font-family: DejaVu Sans;"><code>类继承于</code><code></code></span><tt>ActiveRecord::Base</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><code></code></span><code>Active</code><code> </code><code>Record</code><code> </code><code>supplies</code><code> </code><code>a</code><code> </code><code>great</code><code> </code><code>deal</code><code> </code><code>of</code><code> </code><code>functionality</code><code> </code><code>to</code><code> </code><code>your</code><code> </code><code>Rails</code><code> </code><code>models</code><code> </code><code>for</code><code> </code><code>free,</code><code> </code><code>including</code><code> </code><code>basic</code><code> </code><code>database</code><code> </code><code>CRUD</code><code> </code><code>(Create,</code><code> </code><code>Read,</code><code> </code><code>Update,</code><code> </code><code>Destroy)</code><code> </code><code>operations,</code><code> </code><code>data</code><code> </code><code>validation,</code><code> </code><code>as</code><code> </code><code>well</code><code> </code><code>as</code><code> </code><code>sophisticated#</code><span style="font-family: DejaVu Sans;"><code>复杂</code><code></code></span><code>search</code><code> </code><code>support</code><code> </code><code>and</code><code> </code><code>the</code><code> </code><code>ability</code><code> </code><code>to</code><code> </code><code>relate</code><code> </code><code>multiple</code><code> </code><code>models</code><code> </code><code>to</code><code> </code><code>one</code><code> </code><code>another.</code><code> </code><code>Active</code><code> </code><code>Record</code><span style="font-family: DejaVu Sans;"><code>免费为你的</code></span><code>models</code><span style="font-family: DejaVu Sans;"><code>提供了强大的功能，包括基本数据库的</code></span><code>CRUD</code><span style="font-family: DejaVu Sans;"><code>（创建，读取，更新，删除）操作，数据验证，以及复杂的的查询与其它数据表单多关联的字段的支持能力。</code></span></p>

<h4><a name="adding-some-validation"></a><code>6.5</code><code> </code><code>Adding</code><code> </code><code>Some</code><code> </code><code>Validation</code><span style="font-family: WenQuanYi Micro Hei;"><code>添加一些验证</code></span></h4>


<p>Rails includes methods to help you validate the data that you send to models. Rails<span style="font-family: DejaVu Sans;">包含一些帮助你验证发送到</span>models<span style="font-family: DejaVu Sans;">的数据的方法。</span>Open the <tt>app/models/post.rb</tt> file and edit it:<span style="font-family: DejaVu Sans;">打开</span><tt>app/models/post.rb</tt><span style="font-family: DejaVu Sans;"><tt>并编辑：</tt></span></p>

<p>class Post &lt; ActiveRecord::Base</p>

<p>validates :name, :presence =&gt; true</p>

<p>validates :title, :presence =&gt; true,</p>

<p>:length =&gt; { :minimum =&gt; 5 }</p>

<p>end</p>

<p>These changes will ensure that all posts have a name and a title, and that the title is at least five characters long. <span style="font-family: DejaVu Sans;">这些更改会确保所有的</span>post<span style="font-family: DejaVu Sans;">都有一个</span>name<span style="font-family: DejaVu Sans;">和</span>titile<span style="font-family: DejaVu Sans;">并且</span>title<span style="font-family: DejaVu Sans;">长度至少五个字符。</span>Rails can validate a variety of<span style="font-family: DejaVu Sans;">各种，很多</span>conditions#<span style="font-family: DejaVu Sans;">名词（字段）</span>in a model, including the presence or uniqueness<span style="font-family: DejaVu Sans;">独特</span>of columns, their format, and the existence of associated<span style="font-family: DejaVu Sans;">相关</span>objects. Rails<span style="font-family: DejaVu Sans;">可以验证很多种字段，比如字段能否为空和独特性，字段的格式，以及字段的关联。</span></p>

<h4><a name="using-the-console"></a>6.6 Using the Console</h4>


<p>To see your validations in action, you can use the console.<span style="font-family: DejaVu Sans;">要想在</span>action<span style="font-family: DejaVu Sans;">里面查看你的验证你可以使用</span>console<span style="font-family: DejaVu Sans;">。</span>The console is a command-line tool that lets you execute#<span style="font-family: DejaVu Sans;">执行运行</span>Ruby code in the context of your application:console<span style="font-family: DejaVu Sans;">是一个可以让你在你的应用程序的上下文中执行</span>Ruby<span style="font-family: DejaVu Sans;">代码的命令行工具：</span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>console</code></p>

<p><code>The</code><code> </code><code>default</code><code> </code><code>console</code><code> </code><code>will</code><code> </code><code>make</code><code> </code><code>changes</code><code> </code><code>to</code><code> </code><code>your</code><code> </code><code>database.</code><span style="font-family: DejaVu Sans;"><code>默认的</code></span><code>console</code><span style="font-family: DejaVu Sans;"><code>将会改变你的数据库。</code><code></code></span><code>You</code><code> </code><code>can</code><code> </code><code>instead</code><code> </code><code>open</code><code> </code><code>a</code><code> </code><code>console</code><code> </code><code>that</code><code> </code><code>will</code><code> </code><code>roll</code><code> </code><code>back</code><code> </code><code>any</code><code> </code><code>changes</code><code> </code><code>you</code><code> </code><code>make</code><code> </code><code>by</code><code> </code><code>using</code><code> </code>rails console &mdash;sandbox<code>.</code><span style="font-family: DejaVu Sans;"><code>你可以通过运行</code></span><code>rails</code><code> </code><code>console</code><code> –</code><code>sandbox</code><code> </code><code>or</code><code> </code><code>rails</code><code> </code><code>console</code><code> </code><code>-s,</code><span style="font-family: DejaVu Sans;"><code>这样你可以回滚你的任何操作。</code></span></p>

<p>jhjguxin@jhjguxin-Aspire-4750:~/blog$ rails console -s</p>

<p>Loading development environment in sandbox (Rails 3.1.1)</p>

<p>Any modifications you make will be rolled back on exit</p>

<p>irb(main):001:0&gt; p=Post.new(:content=&gt;&ldquo;A new post to test console&rdquo;)</p>

<p>=&gt; #&lt;Post id: nil, name: nil, title: nil, content: &ldquo;A new post to test console&rdquo;, created_at: nil, updated_at: nil&gt;</p>

<p>irb(main):002:0&gt; p.save</p>

<p>(0.2ms) SAVEPOINT active_record_1</p>

<p>(0.1ms) ROLLBACK TO SAVEPOINT active_record_1</p>

<p>=&gt; false</p>

<p>irb(main):003:0&gt; p.errors</p>

<p>=&gt; #&lt;ActiveModel::Errors:0xb6765d48 @base=#&lt;Post id: nil, name: nil, title: nil, content: &ldquo;A new post to test console&rdquo;, created_at: nil, updated_at: nil&gt;, @messages=#&lt;OrderedHash {:title=&gt;[&ldquo;is too short (minimum is 5 characters)&rdquo;, &ldquo;can&rsquo;t be blank&rdquo;], :name=&gt;[&ldquo;can&rsquo;t be blank&rdquo;]}&gt;&gt;</p>

<p>This code shows creating a new <tt>Post</tt> instance, attempting to save it and getting <tt>false</tt> for a return value (indicating that the save failed), and inspecting the <tt>errors</tt> of the post.<span style="font-family: DejaVu Sans;">这段代码演示了创建一个</span>Post<span style="font-family: DejaVu Sans;">实例，并企图保存到数据库并得到一个失败的返回值（说明保存失败的原因），检查</span>post<span style="font-family: DejaVu Sans;">的错误信息。</span></p>

<p>When you’re finished, type <tt>exit</tt> and hit <tt>return</tt> to exit the console.<span style="font-family: DejaVu Sans;">当你操作完成，输入</span>exit<span style="font-family: DejaVu Sans;">并回车退出</span>console<span style="font-family: DejaVu Sans;">。</span></p>

<p>Unlike the development web server, the console does not automatically load your code afresh for each line.<span style="font-family: DejaVu Sans;">不像开发环境的</span>web<span style="font-family: DejaVu Sans;">服务器</span>console<span style="font-family: DejaVu Sans;">不会自动导入你每行输入的新的代码。</span>If you make changes to your models while the console is open, type <tt>reload!</tt> at the console prompt to load them.<span style="font-family: DejaVu Sans;">如果你改变了你的</span>moels<span style="font-family: DejaVu Sans;">并且</span>console<span style="font-family: DejaVu Sans;">是打开的，输入</span>reload!<span style="font-family: DejaVu Sans;">那么</span>console<span style="font-family: DejaVu Sans;">会立即导入他们。</span></p>

<p>jhjguxin@jhjguxin-Aspire-4750:~/blog$ rails console</p>

<p>Loading development environment (Rails 3.1.1)</p>

<p>irb(main):001:0&gt; p=Post.new(:title=&gt;&ldquo;test console&rdquo;,:name=&gt;&ldquo;jhjguxin&rdquo;,:content=&gt;&ldquo;A new post to test console&rdquo;)</p>

<p>=&gt; #&lt;Post id: nil, name: &ldquo;jhjguxin&rdquo;, title: &ldquo;test console&rdquo;, content: &ldquo;A new post to test console&rdquo;, created_at: nil, updated_at: nil&gt;</p>

<p>irb(main):002:0&gt; p.save</p>

<p>SQL (13.4ms) INSERT INTO &ldquo;posts&rdquo; (&ldquo;content&rdquo;, &ldquo;created_at&rdquo;, &ldquo;name&rdquo;, &ldquo;title&rdquo;, &ldquo;updated_at&rdquo;) VALUES (?, ?, ?, ?, ?) [[&ldquo;content&rdquo;, &ldquo;A new post to test console&rdquo;], [&ldquo;created_at&rdquo;, Sat, 05 Nov 2011 15:55:17 UTC +00:00], [&ldquo;name&rdquo;, &ldquo;jhjguxin&rdquo;], [&ldquo;title&rdquo;, &ldquo;test console&rdquo;], [&ldquo;updated_at&rdquo;, Sat, 05 Nov 2011 15:55:17 UTC +00:00]]</p>

<p>=&gt; true</p>

<p>irb(main):003:0&gt; reload!</p>

<p>Reloading&hellip;</p>

<p>=&gt; true</p>

<h6>###<span style="font-family: DejaVu Sans;">如果是</span>rails console &mdash;sandbox could not reload! Successfully.</h6>

<h4><a name="listing-all-posts"></a>6.7 Listing All Posts</h4>


<p>The easiest place to start looking at functionality is with the code that lists all posts. <span style="font-family: DejaVu Sans;">寻找所有功能的地方是使用代码列出所有的</span>post<span style="font-family: DejaVu Sans;">。</span>Open the file <tt>app/controllers/posts_controller.rb</tt> and look at the <tt>index</tt> action:<span style="font-family: DejaVu Sans;">打开文件</span><tt>app/controllers/posts_controller.rb</tt><span style="font-family: DejaVu Sans;"><tt>，并且查看</tt></span><tt>index</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><code>def</code> <code>index</code></p>

<p><code> </code><code>@posts</code> <code>=</code><code> </code><code>Post.all</code></p>

<p>&nbsp;</p>

<p><code> </code><code>respond_to</code><code> </code><code>do</code> <code>|format|</code></p>

<p><code> </code><code>format.html</code><code> </code><code>#</code><code> </code><code>index.html.erb</code></p>

<p><code> </code><code>format.json</code><code> </code><code>{</code><code> </code><code>render</code><code> </code><code>:json</code> <code>=&gt;</code><code> </code><code>@posts</code> <code>}</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p><tt>Post.all</tt> calls the <tt>Post</tt> model to return all of the posts currently in the database. Post.all<span style="font-family: DejaVu Sans;">调用</span>Post model<span style="font-family: DejaVu Sans;">并返回当前在数据库中的所有</span>post<span style="font-family: DejaVu Sans;">。</span>The result of this call is an array of posts that we store in an instance variable called <tt>@posts</tt>.<span style="font-family: DejaVu Sans;">本次调用的结果是一个</span>post<span style="font-family: DejaVu Sans;">的数组，并且我们将这个数组存储在一个叫做</span>@posts<span style="font-family: DejaVu Sans;">的实例变量中。</span></p>

<p>For more information on finding records with Active Record, see <a href="http://guides.rubyonrails.org/active_record_querying.html"><span style="color: #000080;"><span style="text-decoration: underline;">Active</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Record</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Query</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Interface</span></span></a>.<span style="font-family: DejaVu Sans;">查找有关</span>Active Record<span style="font-family: DejaVu Sans;">更多的信息，可以查看</span><a href="http://guides.rubyonrails.org/active_record_querying.html"><span style="color: #000080;"><span style="text-decoration: underline;">Active</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Record</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Query</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Interface</span></span></a><span style="font-family: DejaVu Sans;">相关记录。</span></p>

<p>The <tt>respond_to</tt> block handles both HTML and JSON calls to this action.<span style="font-family: DejaVu Sans;">这个</span>respond_to<span style="font-family: DejaVu Sans;">块处理了这个动作的</span>HTML<span style="font-family: DejaVu Sans;">和</span>JSON<span style="font-family: DejaVu Sans;">请求。</span>If you browse to <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts.json"><a href="http://localhost:3000/posts.json">http://localhost:3000/posts.json</a></a></span></span>, you’ll see a JSON containing all of the posts.<span style="font-family: DejaVu Sans;">如果你浏览</span><span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts.json"><a href="http://localhost:3000/posts.json">http://localhost:3000/posts.json</a></a></span></span><span style="font-family: DejaVu Sans;">，你将会看到一个</span>JSON<span style="font-family: DejaVu Sans;">包含着所有的</span>post<span style="font-family: DejaVu Sans;">。</span>The HTML format looks for a view in <tt>app/views/posts/</tt> with a name that corresponds to the action name. <span style="font-family: DejaVu Sans;">这个</span>HTML<span style="font-family: DejaVu Sans;">格式在</span><tt>app/views/posts/</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span>view<span style="font-family: DejaVu Sans;">中查找相对应的动作名称。</span>Rails makes all of the instance variables from the action available to the view.Rails<span style="font-family: DejaVu Sans;">使来自</span>action<span style="font-family: DejaVu Sans;">的所有的实例变量对应到（可用）</span>view<span style="font-family: DejaVu Sans;">。</span>Here’s <tt>app/views/posts/index.html.erb</tt>:</p>

<p><code>&lt;h1&gt;Listing</code><code> </code><code>posts&lt;/h1&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;table&gt;</code></p>

<p><code> </code><code>&lt;tr&gt;</code></p>

<p><code> </code><code>&lt;th&gt;Name&lt;/th&gt;</code></p>

<p><code> </code><code>&lt;th&gt;Title&lt;/th&gt;</code></p>

<p><code> </code><code>&lt;th&gt;Content&lt;/th&gt;</code></p>

<p><code> </code><code>&lt;th&gt;&lt;/th&gt;</code></p>

<p><code> </code><code>&lt;th&gt;&lt;/th&gt;</code></p>

<p><code> </code><code>&lt;th&gt;&lt;/th&gt;</code></p>

<p><code> </code><code>&lt;/tr&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%</code> <code>@posts.each</code> <code>do</code> <code>|post|</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;tr&gt;</code></p>

<p><code> </code><code>&lt;td&gt;&lt;%=</code> <code>post.name</code><code> </code><code>%&gt;&lt;/td&gt;</code></p>

<p><code> </code><code>&lt;td&gt;&lt;%=</code> <code>post.title</code><code> </code><code>%&gt;&lt;/td&gt;</code></p>

<p><code> </code><code>&lt;td&gt;&lt;%=</code> <code>post.content</code><code> </code><code>%&gt;&lt;/td&gt;</code></p>

<p><code> </code><code>&lt;td&gt;&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Show&rsquo;,</code><code> </code><code>post</code><code> </code><code>%&gt;&lt;/td&gt;</code></p>

<p><code> </code><code>&lt;td&gt;&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Edit&rsquo;,</code><code> </code><code>edit_post_path(post)</code><code> </code><code>%&gt;&lt;/td&gt;</code></p>

<p><code> </code><code>&lt;td&gt;&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Destroy&rsquo;,</code><code> </code><code>post,</code><code> </code><code>:confirm</code> <code>=&gt;</code><code> </code><code>&lsquo;Are</code><code> </code><code>you</code><code> </code><code>sure?&rsquo;,</code><code> </code><code>:method</code> <code>=&gt;</code><code> </code><code>:delete</code> <code>%&gt;&lt;/td&gt;</code></p>

<p><code> </code><code>&lt;/tr&gt;</code></p>

<p><code>&lt;%</code> <code>end</code> <code>%&gt;</code></p>

<p><code>&lt;/table&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;br</code> <code>/&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;New</code><code> </code><code>post&rsquo;,</code><code> </code><code>new_post_path</code><code> </code><code>%&gt;</code></p>

<p>This view iterates#<span style="font-family: DejaVu Sans;">迭代</span>over the contents of the <tt>@posts</tt> array to display content and links.<span style="font-family: DejaVu Sans;">这个</span>view<span style="font-family: DejaVu Sans;">迭代</span>@posts<span style="font-family: DejaVu Sans;">数组所有的内容并显示相关的内容和链接。</span>A few things to note in the view:<span style="font-family: DejaVu Sans;">关于视图</span>note<span style="font-family: DejaVu Sans;">一些信息：</span></p>

<ul>
    <li><tt>link_to</tt> builds a hyperlink to a particular destination link_to<span style="font-family: DejaVu Sans;">创建一个超链接到一个地方</span></li>
    <li><tt>edit_post_path</tt> and <tt>new_post_path</tt> are helpers that Rails provides as part of RESTful routing.<tt>edit_post_path</tt> and <tt>new_post_path</tt><span style="font-family: DejaVu Sans;"><tt>是</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>提供的</tt></span>RESTful<span style="font-family: DejaVu Sans;">路由向导。</span>You’ll see a variety of these helpers for the different actions that the controller includes. <span style="font-family: DejaVu Sans;">不同的具有</span>controller<span style="font-family: DejaVu Sans;">的</span>actions<span style="font-family: DejaVu Sans;">中你将会看到一系列的这样的向导。</span></li>
</ul>


<p>In previous versions of Rails, you had to use <tt>&lt;%=h</tt><tt> </tt><tt>post.name</tt><tt> </tt><tt>%&gt;</tt> so that any HTML would be escaped before being inserted into the page.<span style="font-family: DejaVu Sans;">在以前的版本的</span>Rails<span style="font-family: DejaVu Sans;">中，你必须使用</span>&lt;%=h post.name %&gt; <span style="font-family: DejaVu Sans;">以避免一些</span>HTML<span style="font-family: DejaVu Sans;">可能会转义在插入到页面之前。</span>In Rails 3.0, this is now the default.<span style="font-family: DejaVu Sans;">在</span>Rails 3.0<span style="font-family: DejaVu Sans;">，作为默认。</span>To get unescaped HTML, you now use &lt;%= raw post.name %&gt;.<span style="font-family: DejaVu Sans;">得到一个非转义的</span>HTML<span style="font-family: DejaVu Sans;">，你现在使用</span>&lt;%=raw post.name%&gt;.</p>

<p>For more details on the rendering process, see <a href="http://guides.rubyonrails.org/layouts_and_rendering.html"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a>.<span style="font-family: DejaVu Sans;">了解更过关于渲染处理流程，阅读</span><a href="http://guides.rubyonrails.org/layouts_and_rendering.html"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a>.</p>

<h4><a name="customizing-the-layout"></a>6.8 Customizing the Layout<span style="font-family: WenQuanYi Micro Hei;">定制布局</span></h4>


<p>The view is only part of the story of how HTML is displayed in your web browser.view<span style="font-family: DejaVu Sans;">仅仅告诉</span>HTML<span style="font-family: DejaVu Sans;">要显示什么（内容）在你的</span>web<span style="font-family: DejaVu Sans;">浏览器里面。</span>Rails also has the concept of <tt>layouts</tt>, which are containers for views.Rails<span style="font-family: DejaVu Sans;">也有关于布局的概念（定义），那就是（布局）是对</span>viewi<span style="font-family: DejaVu Sans;">的包装。</span>When Rails renders a view to the browser, it does so by putting the view’s HTML into a layout’s HTML.<span style="font-family: DejaVu Sans;">当</span>Rails<span style="font-family: DejaVu Sans;">渲染一个</span>view<span style="font-family: DejaVu Sans;">到浏览器，它通常是（这样做）把</span>view<span style="font-family: DejaVu Sans;">的</span>HTML<span style="font-family: DejaVu Sans;">放进布局的</span>HTML<span style="font-family: DejaVu Sans;">中。</span>In previous versions of Rails, the <tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt> command would automatically create a controller specific layout, like <tt>app/views/layouts/posts.html.erb</tt>, for the posts controller. <span style="font-family: DejaVu Sans;">在以前的版本中，</span><tt>rails</tt><tt> </tt><tt>generate</tt><tt> </tt><tt>scaffold</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>命令将会自动创建</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>对应指定的布局。</tt></span>However this has been changed in Rails 3.0. An application specific <tt>layout</tt> is used for all the controllers and can be found in <tt>app/views/layouts/application.html.erb</tt>. <span style="font-family: DejaVu Sans;">然而在</span>rails3.0<span style="font-family: DejaVu Sans;">中有所不同了。一个应用程序指定的布局适用于所有的</span>controllers<span style="font-family: DejaVu Sans;">，可以在</span><tt>app/views/layouts/application.html.erb</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>中找到</tt></span><tt>(</tt><span style="font-family: DejaVu Sans;"><tt>这就好像是</tt></span><tt>django</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>base.html)</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>Open this layout in your editor and modify the <tt>body</tt> tag:<span style="font-family: DejaVu Sans;">打开这个</span>layout<span style="font-family: DejaVu Sans;">在你的编辑器中并且修改</span>body<span style="font-family: DejaVu Sans;">标签：</span></p>

<p>&lt;!DOCTYPE html&gt;</p>

<p>&lt;html&gt;</p>

<p>&lt;head&gt;</p>

<p>&lt;title&gt;Blog&lt;/title&gt;</p>

<p>&lt;%= stylesheet_link_tag &ldquo;application&rdquo; %&gt;</p>

<p>&lt;%= javascript_include_tag &ldquo;application&rdquo; %&gt;</p>

<p>&lt;%= csrf_meta_tags %&gt;</p>

<p>&lt;/head&gt;</p>

<p>&lt;body style=&ldquo;background: #EEEEEE;&rdquo;&gt;</p>

<p>&nbsp;</p>

<p>&lt;%= yield %&gt;</p>

<p>&nbsp;</p>

<p>&lt;/body&gt;</p>

<p>&lt;/html&gt;</p>

<p>Now when you refresh the <tt>/posts</tt> page, you’ll see a gray background to the page. This same gray background will be used throughout all the views for posts.<span style="font-family: DejaVu Sans;">现在你刷新</span><tt>/posts</tt><span style="font-family: DejaVu Sans;"><tt>页面，你将会看到一个灰色的页面背景。并且相同的灰色背景将会使用在</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>的所有视图中。</tt></span></p>

<h4><a name="creating-new-posts"></a><tt>6.9</tt><tt> </tt><tt>Creating</tt><tt> </tt><tt>New</tt><tt> </tt><tt>Posts</tt></h4>


<p>Creating a new post involves two actions. The first is the <tt>new</tt> action, which instantiates an empty <tt>Post</tt> object:<span style="font-family: DejaVu Sans;">创建一个</span>new post <span style="font-family: DejaVu Sans;">包含两个</span>actions<span style="font-family: DejaVu Sans;">。首先是</span>new action<span style="font-family: DejaVu Sans;">，它会实例化一个空的</span>Post<span style="font-family: DejaVu Sans;">对象：</span></p>

<p><code>def</code> <code>new</code></p>

<p><code> </code><code>@post</code> <code>=</code><code> </code><code>Post.new</code></p>

<p>&nbsp;</p>

<p><code> </code><code>respond_to</code><code> </code><code>do</code> <code>|format|</code></p>

<p><code> </code><code>format.html</code><code> </code><code>#</code><code> </code><code>new.html.erb</code></p>

<p><code> </code><code>format.json</code><code> </code><code>{</code><code> </code><code>render</code><code> </code><code>:json</code> <code>=&gt;</code><code> </code><code>@post</code> <code>}</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>The <tt>new.html.erb</tt> view displays this empty Post to the user: <span style="font-family: DejaVu Sans;">这个</span>new.html.erb<span style="font-family: DejaVu Sans;">视图显示这个空的</span>post<span style="font-family: DejaVu Sans;">给用户：</span></p>

<p><code>&lt;h1&gt;New</code><code> </code><code>post&lt;/h1&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>&lsquo;form&rsquo;</code> <code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Back&rsquo;,</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code></p>

<p>The <tt>&lt;%=</tt><tt> </tt><tt>render</tt><tt> </tt><tt>&lsquo;form&rsquo;</tt><tt> </tt><tt>%&gt;</tt> line is our first introduction to <em>partials</em> in Rails.<tt>&lt;%=</tt><tt> </tt><tt>render</tt><tt> </tt><tt>&lsquo;form&rsquo;</tt><tt> </tt><tt>%&gt;</tt><span style="font-family: DejaVu Sans;"><tt>是我们第一个介绍的</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>partials</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span>A partial is a snippet of HTML and Ruby code that can be reused in multiple locations.<span style="font-family: DejaVu Sans;">一个</span>partial<span style="font-family: DejaVu Sans;">是一个</span>HTML<span style="font-family: DejaVu Sans;">代码片段和</span>Ruby<span style="font-family: DejaVu Sans;">代码的组合可以在多目标对象中重用。（类似于</span>django<span style="font-family: DejaVu Sans;">的</span>include &lsquo;other.html&rsquo;<span style="font-family: DejaVu Sans;">）</span>In this case, the form used to make a new post, is basically identical to a form used to edit a post, both have text fields for the name and title and a text area for the content with a button to make a new post or update the existing post.<span style="font-family: DejaVu Sans;">在本例中，</span>form<span style="font-family: DejaVu Sans;">用于创建</span>new post<span style="font-family: DejaVu Sans;">，它相当于一个用于编辑一个</span>post<span style="font-family: DejaVu Sans;">的表单，这个表单有一个</span>name text fields <span style="font-family: DejaVu Sans;">和</span>title text fields <span style="font-family: DejaVu Sans;">以及一个</span>content<span style="font-family: DejaVu Sans;">的</span>text area<span style="font-family: DejaVu Sans;">还有一个用于添加一个新的</span>post<span style="font-family: DejaVu Sans;">或者更新已经存在的</span>post<span style="font-family: DejaVu Sans;">的按钮。</span></p>

<p>If you take a look at <tt>views/posts/<em>form.html.erb</tt> file, you will see the following:<span style="font-family: DejaVu Sans;">如果你看一下</span><tt>views/posts/</em>form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>这个文件，你将会发现下面的内容：</tt></span></p>

<p>&lt;%= form_for(@post) do |f| %&gt;</p>

<p>&lt;% if @post.errors.any? %&gt;</p>

<p>&lt;div id=&ldquo;error_explanation&rdquo;&gt;</p>

<p>&lt;h2&gt;&lt;%= pluralize(@post.errors.count, &ldquo;error&rdquo;) %&gt; prohibited this post from being saved:&lt;/h2&gt;</p>

<p>&lt;ul&gt;</p>

<p>&lt;% @post.errors.full_messages.each do |msg| %&gt;</p>

<p>&lt;li&gt;&lt;%= msg %&gt;&lt;/li&gt;</p>

<p>&lt;% end %&gt;</p>

<p>&lt;/ul&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;% end %&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.label :name %&gt;&lt;br /&gt;</p>

<p>&lt;%= f.text_field :name %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.label :title %&gt;&lt;br /&gt;</p>

<p>&lt;%= f.text_field :title %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.label :content %&gt;&lt;br /&gt;</p>

<p>&lt;%= f.text_area :content %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.submit %&gt;</p>

<p>&lt;/div</p>

<p>&lt;% end %&gt;</p>

<p><tt>This</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>receives</tt><tt> </tt><tt>all</tt><tt> </tt><tt>the</tt><tt> </tt><tt>instance</tt><tt> </tt><tt>variables</tt><tt> </tt><tt>defined</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>calling</tt><tt> </tt><tt>view</tt><tt> </tt><tt>file,</tt><tt> </tt><tt>so</tt><tt> </tt><tt>in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>controller</tt><tt> </tt><tt>assigned</tt><tt> </tt><tt>the</tt><tt> </tt><tt>new</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>object</tt><tt> </tt><tt>to</tt><tt> </tt><tt>@post</tt><tt> </tt><tt>and</tt><tt> </tt><tt>so,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>available</tt><tt> </tt><tt>in</tt><tt> </tt><tt>both</tt><tt> </tt><tt>the</tt><tt> </tt><tt>view</tt><tt> </tt><tt>and</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>as</tt><tt> </tt><tt>@post.</tt><span style="font-family: DejaVu Sans;"><tt>这个</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>接收在</tt></span><tt>view</tt><span style="font-family: DejaVu Sans;"><tt>文件中定义的所有的实例变量，因此在本例中，</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>申请新的</tt></span><tt>Post</tt><span style="font-family: DejaVu Sans;"><tt>对象给</tt></span><tt>@post</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>@post</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>viewi</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>都是可用的。</tt></span></p>

<p><tt>For</tt><tt> </tt><tt>more</tt><tt> </tt><tt>information</tt><tt> </tt><tt>on</tt><tt> </tt><tt>partials,</tt><tt> </tt><tt>refer</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a><tt> </tt><tt>guide.</tt><span style="font-family: DejaVu Sans;"><tt>有关</tt></span><tt>partials</tt><span style="font-family: DejaVu Sans;"><tt>的更多信息，参考</tt><tt></tt></span><a href="http://guides.rubyonrails.org/layouts_and_rendering.html#using-partials"><span style="color: #000080;"><span style="text-decoration: underline;">Layouts</span></span><span style="color: #000080;"><span style="text-decoration: underline;">and</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rendering</span></span><span style="color: #000080;"><span style="text-decoration: underline;">in</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span></a><span style="font-family: DejaVu Sans;"><tt>指导。</tt></span></p>

<p><tt>The</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>block</tt><tt> </tt><tt>is</tt><tt> </tt><tt>used</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>an</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>form.form_for</tt><span style="font-family: DejaVu Sans;"><tt>代码块用于创建一个</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>表单。</tt><tt></tt></span><tt>Within</tt><tt> </tt><tt>this</tt><tt> </tt><tt>block,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>have</tt><tt> </tt><tt>access</tt><tt> </tt><tt>to</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>to</tt><tt> </tt><tt>build</tt><tt> </tt><tt>various</tt><tt> </tt><tt>controls</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>在这个代码块中你可以在访问方法的基础上在表单上创建各种控制。</tt></span><tt>For</tt><tt> </tt><tt>example,</tt><tt> </tt><tt>f.text_field</tt><tt> </tt><tt>:name</tt><tt> </tt><tt>tells</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>text</tt><tt> </tt><tt>input</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>to</tt><tt> </tt><tt>hook</tt><tt> </tt><tt>it</tt><tt> </tt><tt>up</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>name</tt><tt> </tt><tt>attribute</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>instance</tt><tt> </tt><tt>being</tt><tt> </tt><tt>displayed.</tt><span style="font-family: DejaVu Sans;"><tt>比如，</tt></span><tt>f.test_field</tt><tt> </tt><tt>:name</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>告诉</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>在表单中创建一个</tt></span><tt>text</tt><tt> </tt><tt>input</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>You</tt><tt> </tt><tt>can</tt><tt> </tt><tt>only</tt><tt> </tt><tt>use</tt><tt> </tt><tt>these</tt><tt> </tt><tt>methods</tt><tt> </tt><tt>with</tt><tt> </tt><tt>attributes</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>model</tt><tt> </tt><tt>that</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>is</tt><tt> </tt><tt>based</tt><tt> </tt><tt>on</tt><tt> </tt><tt>(in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case</tt><tt> </tt><tt>name,</tt><tt> </tt><tt>title,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>content).form</tt><span style="font-family: DejaVu Sans;"><tt>使用的方法基于</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>的相对应的字段属性（类型如</tt></span><tt>text_field</tt><tt> </tt><tt>or</tt><tt> </tt><tt>text_area</tt><span style="font-family: DejaVu Sans;"><tt>）（例如本例中的</tt></span><tt>name,title,content</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt><tt></tt></span><tt>Rails</tt><tt> </tt><tt>uses</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>in</tt><tt> </tt><tt>preference</tt><span style="font-family: DejaVu Sans;"><tt>偏好优先</tt><tt></tt></span><tt>to</tt><tt> </tt><tt>having</tt><tt> </tt><tt>you</tt><tt> </tt><tt>write</tt><tt> </tt><tt>raw</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>because</tt><tt> </tt><tt>the</tt><tt> </tt><tt>code</tt><tt> </tt><tt>is</tt><tt> </tt><tt>more</tt><tt> </tt><tt>succinct#</tt><span style="font-family: DejaVu Sans;"><tt>简洁</tt></span><tt>,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>because</tt><tt> </tt><tt>it</tt><tt> </tt><tt>explicitly</tt><span style="font-family: DejaVu Sans;"><tt>明确</tt><tt></tt></span><tt>ties</tt><span style="font-family: DejaVu Sans;"><tt>关系</tt><tt></tt></span><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>particular</tt><tt> </tt><tt>model</tt><tt> </tt><tt>instance.Rails</tt><span style="font-family: DejaVu Sans;"><tt>使用（偏向于使用）</tt></span><tt>form_for</tt><span style="font-family: DejaVu Sans;"><tt>列出你要输入的</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>行因为这样代码更加简洁，并却这样使得</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>particular</tt><tt> </tt><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>实例关系更加明显。</tt></span></p>

<p><tt>The</tt><tt> </tt><tt>form_for</tt><tt> </tt><tt>block</tt><tt> </tt><tt>is</tt><tt> </tt><tt>also</tt><tt> </tt><tt>smart</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>to</tt><tt> </tt><tt>work</tt><tt> </tt><tt>out</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>are</tt><tt> </tt><tt>doing</tt><tt> </tt><tt>a</tt><tt> </tt><em>New</em><em> </em><em>Post</em><tt> </tt><tt>or</tt><tt> </tt><tt>an</tt><tt> </tt><em>Edit</em><em> </em><em>Post</em><tt> </tt><tt>action,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>will</tt><tt> </tt><tt>set</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>action</tt><tt> </tt><tt>tags</tt><tt> </tt><tt>and</tt><tt> </tt><tt>submit</tt><tt> </tt><tt>button</tt><tt> </tt><tt>names</tt><tt> </tt><tt>appropriately</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>output.form_for</tt><span style="font-family: DejaVu Sans;"><tt>代码块同样也足够你定制你的</tt></span><tt>New</tt><tt> </tt><tt>Post</tt><span style="font-family: DejaVu Sans;"><tt>和</tt></span><tt>Edit</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>action,</tt><span style="font-family: DejaVu Sans;"><tt>并且将会设置</tt></span><tt>form</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>标签和在</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>输出中显示的提交按钮名称。</tt></span></p>

<p><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>need</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>an</tt><tt> </tt><tt>HTML</tt><tt> </tt><tt>form</tt><tt> </tt><tt>that</tt><tt> </tt><tt>displays</tt><tt> </tt><tt>arbitrary#</tt><span style="font-family: DejaVu Sans;"><tt>任意</tt><tt></tt></span><tt>fields,</tt><tt> </tt><tt>not</tt><tt> </tt><tt>tied</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>model,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>should</tt><tt> </tt><tt>use</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form_tag</tt><tt> </tt><tt>method,</tt><tt> </tt><tt>which</tt><tt> </tt><tt>provides</tt><tt> </tt><tt>shortcuts</tt><tt> </tt><tt>for</tt><tt> </tt><tt>building</tt><tt> </tt><tt>forms</tt><tt> </tt><tt>that</tt><tt> </tt><tt>are</tt><tt> </tt><tt>not</tt><tt> </tt><tt>necessarily</tt><tt> </tt><tt>tied</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>model</tt><tt> </tt><tt>instance.</tt><span style="font-family: DejaVu Sans;"><tt>如果你需要创建一个</tt></span><tt>HTML</tt><span style="font-family: DejaVu Sans;"><tt>表单显示任意的域，而不绑定到</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>字段中，你应该使用</tt></span><tt>form_tag</tt><span style="font-family: DejaVu Sans;"><tt>方法，它快捷的保证了建立</tt></span><tt>forms</tt><span style="font-family: DejaVu Sans;"><tt>不必在绑定到一个</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>实例。</tt></span></p>

<p><tt>When</tt><tt> </tt><tt>the</tt><tt> </tt><tt>user</tt><tt> </tt><tt>clicks</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Create</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>button</tt><tt> </tt><tt>on</tt><tt> </tt><tt>this</tt><tt> </tt><tt>form,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>browser</tt><tt> </tt><tt>will</tt><tt> </tt><tt>send</tt><tt> </tt><tt>information</tt><tt> </tt><tt>back</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>create</tt><tt> </tt><tt>method</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>controller</tt><tt> </tt><tt>(Rails</tt><tt> </tt><tt>knows</tt><tt> </tt><tt>to</tt><tt> </tt><tt>call</tt><tt> </tt><tt>the</tt><tt> </tt><tt>create</tt><tt> </tt><tt>method</tt><tt> </tt><tt>because</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>is</tt><tt> </tt><tt>sent</tt><tt> </tt><tt>with</tt><tt> </tt><tt>an</tt><tt> </tt><tt>HTTP</tt><tt> </tt><tt>POST</tt><tt> </tt><tt>request;</tt><tt> </tt><tt>that</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>one</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>conventions</tt><tt> </tt><tt>that</tt><tt> </tt><tt>I</tt><tt> </tt><tt>mentioned</tt><tt> </tt><tt>earlier):</tt><span style="font-family: DejaVu Sans;"><tt>当用户点击这张表单上面的创建</tt></span><tt>Post</tt><span style="font-family: DejaVu Sans;"><tt>按钮，浏览器将会发送信息</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">——</span></tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>的方法回服务器（</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>知道调用</tt></span><tt>create</tt><span style="font-family: DejaVu Sans;"><tt>方法，因为</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>是以</tt></span><tt>HTTP</tt><tt> </tt><tt>POST</tt><span style="font-family: DejaVu Sans;"><tt>请求发送，这是我随后提到的一种协议之一）</tt></span></p>

<p><tt> </tt><tt>def</tt><tt> </tt><tt>create</tt></p>

<p><tt> </tt><tt>@post</tt><tt> </tt><tt>=</tt><tt> </tt><tt>Post.new(params[:post])</tt></p>

<p><tt> </tt><tt>respond_to</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|format|</tt></p>

<p><tt> </tt><tt>if</tt><tt> </tt><tt>@post.save</tt></p>

<p><tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>redirect_to</tt><tt> </tt><tt>@post,</tt><tt> </tt><tt>:notice</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&lsquo;Post</tt><tt> </tt><tt>was</tt><tt> </tt><tt>successfully</tt><tt> </tt><tt>created.&rsquo;</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:json</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post,</tt><tt> </tt><tt>:status</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:created,</tt><tt> </tt><tt>:location</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>else</tt></p>

<p><tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;new&rdquo;</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:json</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post.errors,</tt><tt> </tt><tt>:status</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:unprocessable_entity</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p>The <tt>create</tt> action instantiates a new Post object from the data supplied by the user on the form, which Rails makes available in the <tt>params</tt> hash.create action<span style="font-family: DejaVu Sans;">实例化一个新的</span>Post<span style="font-family: DejaVu Sans;">对象，这个对象给</span>form<span style="font-family: DejaVu Sans;">提供数据支持。</span>After successfully saving the new post, <tt>create</tt> returns the appropriate format that the user has requested (HTML in our case).<span style="font-family: DejaVu Sans;">当成功的保存了新</span>post<span style="font-family: DejaVu Sans;">，</span>create<span style="font-family: DejaVu Sans;">返回用户请求的适当的格式（在本例中是</span>HTML<span style="font-family: DejaVu Sans;">）。</span>It then redirects the user to the resulting post <tt>show</tt> action and sets a notice to the user that the Post was successfully created.<span style="font-family: DejaVu Sans;">然后重定向用户页面到结果显示的</span>post show action<span style="font-family: DejaVu Sans;">页面并且给出提示</span>Post<span style="font-family: DejaVu Sans;">成功的创建了。</span></p>

<p>If the post was not successfully saved, due to a validation error, then the controller returns the user back to the <tt>new</tt> action with any error messages so that the user has the chance to fix the error and try again.<span style="font-family: DejaVu Sans;">如果</span>post<span style="font-family: DejaVu Sans;">没有保存成功，是因为（数据）验证错误，然后</span>controller<span style="font-family: DejaVu Sans;">控制用户页面回到</span>new action<span style="font-family: DejaVu Sans;">（包含验证错误新息）给用户。</span></p>

<p>The “Post was successfully created.” message is stored inside of the Rails <tt>flash</tt> hash, (usually just called <em>the</em><em> </em><em>flash</em>) so that messages can be carried#<span style="font-family: DejaVu Sans;">载</span>over to another action, providing the user with useful information on the status of their request. “Post was successfully created.” <span style="font-family: DejaVu Sans;">这条消息被存储在</span>Rails<span style="font-family: DejaVu Sans;">的</span>flash<span style="font-family: DejaVu Sans;">的</span>hash<span style="font-family: DejaVu Sans;">表中，（通常之叫它</span>flash<span style="font-family: DejaVu Sans;">）因此消息可以转载到另一个</span>action<span style="font-family: DejaVu Sans;">，在请求状态中提供有用的信息给用户。</span>In the case of <tt>create</tt>, the user never actually sees any page rendered during the Post creation process, because it immediately redirects to the new Post as soon Rails saves the record.<span style="font-family: DejaVu Sans;">在这个新建例子（数据验证失败）中，用户实际上从来不看任何在页面创建进程中的渲染页面，因为它立刻重定向页面到</span>new Post<span style="font-family: DejaVu Sans;">当</span>Rails<span style="font-family: DejaVu Sans;">保存了这个记录。</span>The Flash carries over a message to the next action, so that when the user is redirected back to the <tt>show</tt> action, they are presented with a message saying “Post was successfully created.”Flash<span style="font-family: DejaVu Sans;">装载消息到接下来的</span>action<span style="font-family: DejaVu Sans;">，因此当用户被重定向到了</span>show action<span style="font-family: DejaVu Sans;">，他们立刻收到了一条消息<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Post was successfully created.”<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="showing-an-individual-post"></a>6.10 Showing an Individual Post<span style="font-family: WenQuanYi Micro Hei;">显示一条单个的</span>Post</h4>


<p>When you click the <tt>show</tt> link for a post on the index page, it will bring you to a URL like <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts/1"><a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a></a></span></span>. <span style="font-family: DejaVu Sans;">当你在</span>posts <span style="font-family: DejaVu Sans;">的主页面点击一个</span>post<span style="font-family: DejaVu Sans;">的</span>show<span style="font-family: DejaVu Sans;">这个超链接，他将会产生一个</span>url <span style="color: #000080;"><span style="text-decoration: underline;"><a href="http://localhost:3000/posts/1"><a href="http://localhost:3000/posts/1">http://localhost:3000/posts/1</a></a></span></span><span style="font-family: DejaVu Sans;"><tt>。</tt></span>Rails interprets<span style="font-family: DejaVu Sans;">解释</span>this as a call to the <tt>show</tt> action for the resource, and passes in <tt>1</tt> as the <tt>:id</tt> parameter.Rails<span style="font-family: DejaVu Sans;">解释这是一个到</span>show action<span style="font-family: DejaVu Sans;">的</span>resource <span style="font-family: DejaVu Sans;">调用。</span>Here’s the <tt>show</tt> action:<span style="font-family: DejaVu Sans;">这里是</span>show action<span style="font-family: DejaVu Sans;">：</span></p>

<p>def show</p>

<p>@post = Post.find(params[:id])</p>

<p>respond_to do |format|</p>

<p>format.html # show.html.erb</p>

<p>format.json { render :json =&gt; @post }</p>

<p>end</p>

<p>end</p>

<p>The <tt>show</tt> action uses <tt>Post.find</tt> to search for a single record in the database by its id value.<span style="font-family: DejaVu Sans;">这里的</span>show action<span style="font-family: DejaVu Sans;">使用</span>Post.find<span style="font-family: DejaVu Sans;">通过对应记录的</span>id<span style="font-family: DejaVu Sans;">来查找单个记录。</span>After finding the record, Rails displays it by using <tt>show.html.erb</tt>:<span style="font-family: DejaVu Sans;">当找到记录，</span>Rails<span style="font-family: DejaVu Sans;">使用</span>show.html.erb<span style="font-family: DejaVu Sans;">来显示它：</span></p>

<p>&lt;p id=&ldquo;notice&rdquo;&gt;&lt;%= notice %&gt;&lt;/p&gt;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Name:&lt;/b&gt;</p>

<p>&lt;%= @post.name %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Title:&lt;/b&gt;</p>

<p>&lt;%= @post.title %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Content:&lt;/b&gt;</p>

<p>&lt;%= @post.content %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&lt;%= link_to &lsquo;Edit&rsquo;, edit_post_path(@post) %&gt; |</p>

<p>&lt;%= link_to &lsquo;Back&rsquo;, posts_path %&gt;</p>

<h4><a name="editing-posts"></a>6.11 Editing Posts<span style="font-family: WenQuanYi Micro Hei;">编辑</span>Posts</h4>


<p>Like creating a new post, editing a post is a two-part process.<span style="font-family: DejaVu Sans;">类似创建一个新的</span>post<span style="font-family: DejaVu Sans;">，编辑一个</span>post<span style="font-family: DejaVu Sans;">也（分为）两部分。</span>The first step is a request to <tt>edit_post_path(@post)</tt> with a particular post. This calls the <tt>edit</tt> action in the controller:<span style="font-family: DejaVu Sans;">首先是到</span><tt>edit_post_path(@post)</tt><span style="font-family: DejaVu Sans;"><tt>请求一个特定的</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>。这里是调用的在</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span><tt>edit</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><code>def</code><tt> </tt><code>edit</code></p>

<p><code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:id])</code></p>

<p><code>end</code></p>

<p>After finding the requested post, Rails uses the <tt>edit.html.erb</tt> view to display it:<span style="font-family: DejaVu Sans;">在找到了请求的</span>post<span style="font-family: DejaVu Sans;">，</span>Rails<span style="font-family: DejaVu Sans;">使用</span><tt>edit.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>试图来显示它：</tt></span></p>

<p><code>&lt;h1&gt;Editing</code><code> </code><code>post&lt;/h1&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>&lsquo;form&rsquo;</code> <code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Show&rsquo;,</code><code> </code><code>@post</code> <code>%&gt;</code> <code>|</code></p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Back&rsquo;,</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code></p>

<p><tt>Again,</tt><tt> </tt><tt>as</tt><tt> </tt><tt>with</tt><tt> </tt><tt>the</tt><tt> </tt><tt>new</tt><tt> </tt><tt>action,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>action</tt><tt> </tt><tt>is</tt><tt> </tt><tt>using</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>partial,</tt><tt> </tt><tt>this</tt><tt> </tt><tt>time</tt><tt> </tt><tt>however,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>will</tt><tt> </tt><tt>do</tt><tt> </tt><tt>a</tt><tt> </tt><tt>PUT</tt><tt> </tt><tt>action</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>PostsController</tt><tt> </tt><tt>and</tt><tt> </tt><tt>the</tt><tt> </tt><tt>submit</tt><tt> </tt><tt>button</tt><tt> </tt><tt>will</tt><tt> </tt><tt>display</tt><tt> “</tt><tt>Update</tt><tt> </tt><tt>Post</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>再一次的，就像</tt></span><tt>new</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>edit</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>也使用</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>部分，这次有所不同，</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>将会提交一个</tt></span><tt>PUT</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>到</tt></span><tt>PostsController</tt><span style="font-family: DejaVu Sans;"><tt>并且提交按钮将会显示</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>Update</tt><tt> </tt><tt>Post</tt><tt>”</tt></p>

<p><tt>Submitting</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>created</tt><tt> </tt><tt>by</tt><tt> </tt><tt>this</tt><tt> </tt><tt>view</tt><tt> </tt><tt>will</tt><tt> </tt><tt>invoke</tt><span style="font-family: DejaVu Sans;"><tt>调用</tt><tt></tt></span><tt>the</tt><tt> </tt><tt>update</tt><tt> </tt><tt>action</tt><tt> </tt><tt>within</tt><tt> </tt><tt>the</tt><tt> </tt><tt>controller:</tt><span style="font-family: DejaVu Sans;"><tt>提交的</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>由上面这个视图创建的并且还会调用</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span><tt>update</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><tt> </tt><tt>def</tt><tt> </tt><tt>update</tt></p>

<p><tt> </tt><tt>@post</tt><tt> </tt><tt>=</tt><tt> </tt><tt>Post.find(params[:id])</tt></p>

<p><tt> </tt><tt>respond_to</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|format|</tt></p>

<p><tt> </tt><tt>if</tt><tt> </tt><tt>@post.update_attributes(params[:post])</tt></p>

<p><tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>redirect_to</tt><tt> </tt><tt>@post,</tt><tt> </tt><tt>:notice</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&lsquo;Post</tt><tt> </tt><tt>was</tt><tt> </tt><tt>successfully</tt><tt> </tt><tt>updated.&rsquo;</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>head</tt><tt> </tt><tt>:ok</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>else</tt></p>

<p><tt> </tt><tt>format.html</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:action</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&ldquo;edit&rdquo;</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>format.json</tt><tt> </tt><tt>{</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:json</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>@post.errors,</tt><tt> </tt><tt>:status</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>:unprocessable_entity</tt><tt> </tt><tt>}</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p><tt> </tt><tt>end</tt></p>

<p><tt>In</tt><tt> </tt><tt>the</tt><tt> </tt><tt>update</tt><tt> </tt><tt>action,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>first</tt><tt> </tt><tt>uses</tt><tt> </tt><tt>the</tt><tt> </tt><tt>:id</tt><tt> </tt><tt>parameter</tt><tt> </tt><tt>passed</tt><tt> </tt><tt>back</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>view</tt><tt> </tt><tt>to</tt><tt> </tt><tt>locate</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt> </tt><tt>record</tt><tt> </tt><tt>that</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>being</tt><tt> </tt><tt>edited.</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>update</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>中，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>首先使用</tt></span><tt>:id</tt><span style="font-family: DejaVu Sans;"><tt>参数从</tt></span><tt>edit</tt><tt> </tt><tt>view</tt><span style="font-family: DejaVu Sans;"><tt>（传值到）数据库记录下刚才编辑的内容。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>update_attributes#</tt><span style="font-family: DejaVu Sans;"><tt>更新</tt></span><tt>model</tt><span style="font-family: DejaVu Sans;"><tt>的属性</tt><tt></tt></span><tt>call</tt><tt> </tt><tt>then</tt><tt> </tt><tt>takes</tt><tt> </tt><tt>the</tt><tt> </tt><tt>rest</tt><tt> </tt><tt>of</tt><tt> </tt><tt>the</tt><tt> </tt><tt>parameters</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>request</tt><tt> </tt><tt>and</tt><tt> </tt><tt>applies</tt><tt> </tt><tt>them</tt><tt> </tt><tt>to</tt><tt> </tt><tt>this</tt><tt> </tt><tt>record.</tt><tt> </tt><tt>update_attributes</tt><span style="font-family: DejaVu Sans;"><tt>在应用一些（更多）参数的来自</tt></span><tt>request</tt><span style="font-family: DejaVu Sans;"><tt>的数据到</tt></span><tt>recode</tt><span style="font-family: DejaVu Sans;"><tt>时被调用。</tt><tt></tt></span><tt>If</tt><tt> </tt><tt>all</tt><tt> </tt><tt>goes</tt><tt> </tt><tt>well,</tt><tt> </tt><tt>the</tt><tt> </tt><tt>user</tt><tt> </tt><tt>is</tt><tt> </tt><tt>redirected</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>post</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>show</tt><tt> </tt><tt>view.</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>如果一切成功，用户会被重定向到</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><span style="font-family: DejaVu Sans;"><tt>视图。</tt></span><tt>If</tt><tt> </tt><tt>there</tt><tt> </tt><tt>are</tt><tt> </tt><tt>any</tt><tt> </tt><tt>problems,</tt><tt> </tt><tt>it</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>back</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>view</tt><tt> </tt><tt>to</tt><tt> </tt><tt>correct</tt><tt> </tt><tt>them.</tt><span style="font-family: DejaVu Sans;"><tt>如果期间发生了任何错误，它将回到</tt></span><tt>edit</tt><span style="font-family: DejaVu Sans;"><tt>视图并（要求）改正他们。</tt></span></p>

<h4><a name="destroying-a-post1"></a><tt>6.12</tt><tt> </tt><tt>Destroying</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Post</tt><tt> </tt><span style="font-family: WenQuanYi Micro Hei;"><tt>摧毁一个</tt></span><tt>post</tt></h4>


<p>Finally, clicking one of the <tt>destroy</tt> links sends the associated id to the <tt>destroy</tt> action:<span style="font-family: DejaVu Sans;">最后，点击一个</span>destroy<span style="font-family: DejaVu Sans;">链接发送相关的</span>id<span style="font-family: DejaVu Sans;">到</span>destroy<span style="font-family: DejaVu Sans;">动作：</span></p>

<p><code>def</code> <code>destroy</code></p>

<p><code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:id])</code></p>

<p><code> </code><code>@post.destroy</code></p>

<p>&nbsp;</p>

<p><code> </code><code>respond_to</code><code> </code><code>do</code> <code>|format|</code></p>

<p><code> </code><code>format.html</code><code> </code><code>{</code><code> </code><code>redirect_to</code><code> </code><code>posts_url</code><code> </code><code>}</code></p>

<p><code> </code><code>format.json</code><code> </code><code>{</code><code> </code><code>head</code><code> </code><code>:ok</code> <code>}</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>The <tt>destroy</tt> method of an Active Record model instance removes the corresponding record from the database.<span style="font-family: DejaVu Sans;">这个</span>destroy<span style="font-family: DejaVu Sans;">是</span>Active Recordmodel<span style="font-family: DejaVu Sans;">的实例（功能是）从数据库中移除相应的记录。</span>After that’s done, there isn’t any record to display, so Rails redirects the user’s browser to the index view for the model.<span style="font-family: DejaVu Sans;">当这个（操作）完成，这里没有任何记录显示，因此</span>Rails<span style="font-family: DejaVu Sans;">重定向用户的浏览器到</span>model<span style="font-family: DejaVu Sans;">的主页视图。</span></p>

<h3><a name="adding-a-second-model"></a>7 Adding a Second Model<span style="font-family: WenQuanYi Micro Hei;">添加第二个</span>Model<span style="font-family: WenQuanYi Micro Hei;">（</span>comment<span style="font-family: WenQuanYi Micro Hei;">）</span></h3>


<p>Now that you’ve seen how a model built with scaffolding looks like, it’s time to add a second model to the application.<span style="font-family: DejaVu Sans;">你已经知道了通过</span>scaffolding<span style="font-family: DejaVu Sans;">生成的</span>model<span style="font-family: DejaVu Sans;">看起来是怎样的。</span>The second model will handle comments on blog posts.<span style="font-family: DejaVu Sans;">第二个</span>model<span style="font-family: DejaVu Sans;">用来处理</span>blog post<span style="font-family: DejaVu Sans;">的评论。</span></p>

<h4><a name="generating-a-model"></a>7.1 Generating a Model<span style="font-family: WenQuanYi Micro Hei;">构造一个</span>model</h4>


<p>Models in Rails use a singular name, and their corresponding database tables use a plural name. Rails <span style="font-family: DejaVu Sans;">中的</span>Models<span style="font-family: DejaVu Sans;">使用一个单数名称，同时它们相关的数据库表使用一个复数名称。</span>For the model to hold comments, the convention is to use the name Comment.<span style="font-family: DejaVu Sans;">对于评论在</span>models<span style="font-family: DejaVu Sans;">中的代名词，习惯上使用的的是</span>Comment<span style="font-family: DejaVu Sans;">。</span>Even if you don’t want to use the entire apparatus set up by scaffolding, most Rails developers still use generators to make things like models and controllers.<span style="font-family: DejaVu Sans;">即使你不想完完全全的使用</span>scaffolding<span style="font-family: DejaVu Sans;">，大多数的</span>Rails<span style="font-family: DejaVu Sans;">仍然使用生成器来做这些事情比如</span>models<span style="font-family: DejaVu Sans;">和</span>controllers<span style="font-family: DejaVu Sans;">。</span>To create the new model, run this command in your terminal:<span style="font-family: DejaVu Sans;">要创建一个新的</span>model<span style="font-family: DejaVu Sans;">，在终端中运行下面这条命令：</span></p>

<p><code>rails</code><code> </code><code>generate</code><code> </code><code>model</code><code> </code><code>Comment</code><code> </code><code>commenter:string</code><code> </code><code>body:text</code><code> </code><code>post:references</code><code> </code><code>#references</code><span style="font-family: DejaVu Sans;"><code>引用</code></span></p>

<p>This command will generate four files:<span style="font-family: DejaVu Sans;">这条命令将会生成四个文件：</span></p>

<ul>
    <li><tt>app/models/comment.rb</tt> – The model <span style="font-family: DejaVu Sans;">模型</span></li>
    <li><tt>db/migrate/20111108080402_create_comments.rb</tt> – The migration <span style="font-family: DejaVu Sans;">数据迁移</span></li>
    <li><tt>test/unit/comment_test.rb</tt> <span style="color: #800000;">and</span><tt>test/fixtures/comments.yml</tt> – The test harness. <span style="font-family: DejaVu Sans;">测试工具</span></li>
</ul>


<p>First, take a look at <tt>comment.rb</tt>:<span style="font-family: DejaVu Sans;">首先，看一看</span>comment.rb:</p>

<p><code>class</code> <code>Comment</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code> </code><code>belongs_to</code><code> </code><code>:post</code></p>

<p><code>end</code></p>

<p>This is very similar to the <tt>post.rb</tt> model that you saw earlier.<span style="font-family: DejaVu Sans;">这和你刚刚看到</span>post.rb<span style="font-family: DejaVu Sans;">很近似。</span>The difference is the line <tt>belongs_to</tt><tt> </tt><tt>:post</tt>, which sets up an Active Record <em>association</em>. <span style="font-family: DejaVu Sans;">不同的是这行</span><tt>belongs_to</tt><tt> </tt><tt>:post</tt><span style="font-family: DejaVu Sans;"><tt>，他会安装一个</tt><tt></tt></span><tt>Active</tt><tt> </tt><tt>Record</tt><tt> </tt><em>association<span style="font-family: DejaVu Sans;">。</span></em>You’ll learn a little about associations in the next section of this guide.<span style="font-family: DejaVu Sans;">你将会在接下来的</span>guide<span style="font-family: DejaVu Sans;">学习一点有关</span>associations<span style="font-family: DejaVu Sans;">的内容。</span></p>

<p>In addition to the model, Rails has also made a migration to create the corresponding database table:<span style="font-family: DejaVu Sans;">除了模型，</span>Rails<span style="font-family: DejaVu Sans;">同样也产生了一个</span>migration<span style="font-family: DejaVu Sans;">来创建相应的数据库表单：</span></p>

<p>class CreateComments &lt; ActiveRecord::Migration</p>

<p>def change</p>

<p>create_table :comments do |t|</p>

<p>t.string :commenter</p>

<p>t.text :body</p>

<p>t.references :post</p>

<p>t.timestamps</p>

<p>end</p>

<p>add_index :comments, :post_id</p>

<p>end</p>

<p>end</p>

<p>The <tt>t.references</tt> line sets up a foreign key column for the association between the two models.<span style="font-family: DejaVu Sans;">对于</span><tt>t.references</tt><span style="font-family: DejaVu Sans;"><tt>这行，会在两个</tt></span><tt>models</tt><span style="font-family: DejaVu Sans;"><tt>之间生成一个外键列从而形成一个关系（组合）。</tt></span>And the <tt>add_index</tt> line sets up an index for this association column. Go ahead and run the migration:<span style="font-family: DejaVu Sans;">而且<tt></tt></span><tt>add_index</tt> line<span style="font-family: DejaVu Sans;">生成一个首页关联到这个关系行：</span></p>

<p><code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate</code></p>

<p>Rails is smart enough to only execute the migrations that have not already been run against the current database, so in this case you will just see:Rails<span style="font-family: DejaVu Sans;">能够智能的只针对对没有被运行过的表单，执行</span>migrations<span style="font-family: DejaVu Sans;">生成当前的数据库，因此这里你只会看到：</span></p>

<h4><a name="associating-models"></a>7.2 Associating Models<span style="font-family: WenQuanYi Micro Hei;">关联</span>models</h4>


<p>Active Record associations let you easily declare the relationship between two models. In the case of comments and posts, you could write out the relationships this way:Active Record associations<span style="font-family: DejaVu Sans;">让你很容易的申明两个</span>models<span style="font-family: DejaVu Sans;">之间的关系。在本例中的</span>comments<span style="font-family: DejaVu Sans;">和</span>posts<span style="font-family: DejaVu Sans;">，你可以写出这样描述关系：</span></p>

<ul>
    <li>Each comment belongs to one post <span style="font-family: DejaVu Sans;">一条</span>comment<span style="font-family: DejaVu Sans;">对应于一个</span>post</li>
    <li>One post can have many comments <span style="font-family: DejaVu Sans;">一个</span>post<span style="font-family: DejaVu Sans;">可以对应于多个</span>comments</li>
</ul>


<p>In fact, this is very close to the syntax that Rails uses to declare this association.<span style="font-family: DejaVu Sans;">实际上，这也很接近</span>Rails<span style="font-family: DejaVu Sans;">申明的</span>association <span style="font-family: DejaVu Sans;">的语法。</span>You’ve already seen the line of code inside the Comment model that makes each comment belong to a Post:<span style="font-family: DejaVu Sans;">你已经看到了在</span>Comment model<span style="font-family: DejaVu Sans;">中的使每个</span>comment<span style="font-family: DejaVu Sans;">对应于一个</span>post<span style="font-family: DejaVu Sans;">的代码。</span></p>

<p>You’ll need to edit the <tt>post.rb</tt> file to add the other side of the association:<span style="font-family: DejaVu Sans;">你将会需要编辑</span>post.rb<span style="font-family: DejaVu Sans;">文件来添加其他</span>association <span style="font-family: DejaVu Sans;">盟友。</span></p>

<p><code>class</code> <code>Post</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code></p>

<p><code> </code><code>validates</code><code> </code><code>:title,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true,</code></p>

<p><code> </code><code>:length</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:minimum</code> <code>=&gt;</code><code> </code><code>5</code> <code>}</code></p>

<p>&nbsp;</p>

<p><code> </code><code>has_many</code><code> </code><code>:comments</code></p>

<p><code>end</code></p>

<p>These two declarations enable a good bit of automatic behavior. For example, if you have an instance variable <tt>@post</tt> containing a post, you can retrieve all the comments belonging to that post <strong>as</strong><strong> </strong><strong>the</strong><strong> </strong><strong>array</strong> <tt>@post.comments</tt>.</p>

<p>For more information on Active Record associations, see the <a href="http://guides.rubyonrails.org/association_basics.html"><span style="color: #000080;"><span style="text-decoration: underline;">Active</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Record</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Associations</span></span></a> guide.</p>

<h4><a name="adding-a-route-for-comments"></a>7.3 Adding a Route for Comments<span style="font-family: WenQuanYi Micro Hei;">给</span>Comments<span style="font-family: WenQuanYi Micro Hei;">添加路由</span></h4>


<p>As with the <tt>home</tt> controller, we will need to add a route so that Rails knows where we would like to navigate to see <tt>comments</tt>.<span style="font-family: DejaVu Sans;">作为</span>home controller<span style="font-family: DejaVu Sans;">，我们将还需要添加一个路由让</span>Rails<span style="font-family: DejaVu Sans;">知道我们导航到哪里可以看到评论。</span>Open up the <tt>config/routes.rb</tt> file again, you will see an entry that was added automatically for <tt>posts</tt> near the top by the scaffold generator, resources :posts, edit it as follows:<span style="font-family: DejaVu Sans;">再次打开</span><tt>config/routes.rb</tt><span style="font-family: DejaVu Sans;"><tt>文件，你将会看到</tt></span><tt>scaffold</tt><span style="font-family: DejaVu Sans;"><tt>创建器在顶部为</tt></span><tt>posts</tt><span style="font-family: DejaVu Sans;"><tt>自动添加的入口，</tt><tt></tt></span>resources :posts<span style="font-family: DejaVu Sans;">，把它改成如下：</span></p>

<p>resources :posts do</p>

<p>resources :comments</p>

<p>end</p>

<p>This creates <tt>comments</tt> as a <em>nested</em><em> </em><em>resource</em> within <tt>posts</tt>.<span style="font-family: DejaVu Sans;">这里把</span>comments<span style="font-family: DejaVu Sans;">作为一个嵌套资源放在</span>posts<span style="font-family: DejaVu Sans;">中。</span>This is another part of capturing the hierarchical relationship that exists between posts and comments.<span style="font-family: DejaVu Sans;">这是在存在的</span>posts<span style="font-family: DejaVu Sans;">和</span>comments<span style="font-family: DejaVu Sans;">的分层关系的表现。</span></p>

<p>For more information on routing, see the <a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a> guide.<span style="font-family: DejaVu Sans;">关于</span>routing<span style="font-family: DejaVu Sans;">的更多的信息，查看</span><a href="http://guides.rubyonrails.org/routing.html"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Routing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">from</span></span><span style="color: #000080;"><span style="text-decoration: underline;">the</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Outside</span></span><span style="color: #000080;"><span style="text-decoration: underline;">In</span></span></a> guide<span style="font-family: DejaVu Sans;">。</span></p>

<h4><a name="generating-a-controller"></a>7.4 Generating a Controller<span style="font-family: WenQuanYi Micro Hei;">构造一个</span>Controller</h4>


<p>With the model in hand, you can turn your attention to creating a matching controller.model<span style="font-family: DejaVu Sans;">已经到手了，你可以把你的注意力放到创建一个匹配的</span>controller<span style="font-family: DejaVu Sans;">上了。</span>Again, there’s a generator for this:<span style="font-family: DejaVu Sans;">类似的，像这样构造：</span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>controller</code><code> </code><code>Comments</code></p>

<p>This creates six files and one empty directory:<span style="font-family: DejaVu Sans;">这里新建了</span>6<span style="font-family: DejaVu Sans;">个文件和一个空目录。</span></p>

<ul>
    <li><tt>app/controllers/comments_controller.rb</tt> – The controller</li>
    <li><tt>app/helpers/comments_helper.rb</tt> – A view helper file</li>
    <li><tt>test/functional/comments_controller_test.rb</tt> – The functional tests for the controller</li>
    <li><tt>test/unit/helpers/comments_helper_test.rb</tt> – The unit tests for the helper</li>
    <li><tt>app/views/comments/</tt> – Views of the controller are stored here</li>
    <li><tt>app/assets/stylesheets/comment.css.scss</tt> – Cascading style sheet for the controller</li>
    <li><tt>app/assets/javascripts/comment.js.coffee</tt> – CoffeeScript for the controller</li>
</ul>


<p>Like with any blog, our readers will create their comments directly after reading the post, and once they have added their comment, will be sent back to the post show page to see their comment now listed.<span style="font-family: DejaVu Sans;">就像大多数</span>blog<span style="font-family: DejaVu Sans;">，我们的读者将会直接发表他们的评论在他们阅读</span>post<span style="font-family: DejaVu Sans;">的时候，并且一旦他们添加评论成功，将会回到</span>postshow<span style="font-family: DejaVu Sans;">页面去查看他们刚刚列出的评论。</span>Due to this, our <tt>CommentsController</tt> is there to provide a method to create comments and delete SPAM comments when they arrive.<span style="font-family: DejaVu Sans;">正因为这样</span>(<span style="font-family: DejaVu Sans;">的考虑</span>)<span style="font-family: DejaVu Sans;">，我们的</span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>如下，它提供一个方法来创建</tt></span><tt>comments</tt><span style="font-family: DejaVu Sans;"><tt>和删除垃圾评论。</tt></span></p>

<p>&lt;p&gt;&lt;%= notice %&gt;&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Name:&lt;/b&gt;</p>

<p>&lt;%= @post.name %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Title:&lt;/b&gt;</p>

<p>&lt;%= @post.title %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Content:&lt;/b&gt;</p>

<p>&lt;%= @post.content %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;h2&gt;Add a comment:&lt;/h2&gt;</p>

<p>&lt;%= form_for([@post, @post.comments.build]) do |f| %&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.label :commenter %&gt;&lt;br /&gt;</p>

<p>&lt;%= f.text_field :commenter %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.label :body %&gt;&lt;br /&gt;</p>

<p>&lt;%= f.text_area :body %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.submit %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;% end %&gt;</p>

<p>&nbsp;</p>

<p>&lt;%= link_to &lsquo;Edit Post&rsquo;, edit_post_path(@post) %&gt; |</p>

<p>&lt;%= link_to &lsquo;Back to Posts&rsquo;, posts_path %&gt; |</p>

<p>This adds a form on the Post show page that creates a new comment, which will call the <tt>CommentsController</tt> <tt>create</tt> action, so let’s wire that up:<span style="font-family: DejaVu Sans;">这里添加一个</span>forms<span style="font-family: DejaVu Sans;">在</span>Post show<span style="font-family: DejaVu Sans;">页面用来创建一个新的评论，它将会调用</span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>creat</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>，因此让我们补充上下面的内容：</tt></span></p>

<p><code>class</code><tt> </tt><code>CommentsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code></p>

<p><code> </code><code>def</code> <code>create</code></p>

<p><code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code></p>

<p><code> </code><code>@comment</code> <code>=</code><code> </code><code>@post.comments.create(params[:comment])</code></p>

<p><code> </code><code>redirect_to</code><code> </code><code>post_path(@post)</code></p>

<p><code> </code><code>end</code></p>

<p><code>end</code></p>

<p>You’ll see a bit more complexity here than you did in the controller for posts.<span style="font-family: DejaVu Sans;">这里你看到的会比你在</span>controller<span style="font-family: DejaVu Sans;">中为</span>posts<span style="font-family: DejaVu Sans;">做的要复杂点。</span>That’s a side-effect of the nesting that you’ve set up; each request for a comment has to keep track#<span style="font-family: DejaVu Sans;">踪迹</span>of the post to which the comment is attached, thus the initial find action to the Post model to get the post in question.<span style="font-family: DejaVu Sans;">那就是你刚刚你刚补充的副作用的根源；每个面向</span>comment<span style="font-family: DejaVu Sans;">的请求都保持了它所依附的</span>post<span style="font-family: DejaVu Sans;">的踪迹，因此这样初始化</span>find action<span style="font-family: DejaVu Sans;">的时候匹配相应的</span>post model<span style="font-family: DejaVu Sans;">（时）得到了答案。</span></p>

<p>In addition, the code takes advantage of some of the methods available for an association.<span style="font-family: DejaVu Sans;">此外，上面的代码带来的好处就是使得一些对于</span>association<span style="font-family: DejaVu Sans;">的方法可用。</span>We use the <tt>create</tt> method on <tt>@post.comments</tt> to create and save the comment.<span style="font-family: DejaVu Sans;">我们使用</span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span>create<span style="font-family: DejaVu Sans;">方法来新建和保存</span>comment<span style="font-family: DejaVu Sans;">。</span>This will automatically link the comment so that it belongs to that particular post.<span style="font-family: DejaVu Sans;">这里将会自动连接到</span>link<span style="font-family: DejaVu Sans;">使得</span>comment<span style="font-family: DejaVu Sans;">依附于指定的</span>post<span style="font-family: DejaVu Sans;">。</span></p>

<p>Once we have made the new comment, we send the user back to the original post using the <tt>post_path(@post)</tt> helper.<span style="font-family: DejaVu Sans;">一旦我们评论过后，我们使用</span>post_path(@post)<span style="font-family: DejaVu Sans;">助手导引用户到先前的</span>post<span style="font-family: DejaVu Sans;">。</span>As we have already seen, this calls the <tt>show</tt> action of the <tt>PostsController</tt> which in turn renders the <tt>show.html.erb</tt> template. <span style="font-family: DejaVu Sans;">正如我们已经看到的，这里调用</span>PostsController<span style="font-family: DejaVu Sans;">的</span>show action<span style="font-family: DejaVu Sans;">它将反过来渲染</span><tt>show.html.erb</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>模板。</tt></span>This is where we want the comment to show, so let’s add that to the <tt>app/views/posts/show.html.erb</tt>.<span style="font-family: DejaVu Sans;">这里也是我们想让</span>comment<span style="font-family: DejaVu Sans;">显示的地方，因此让我们添加（那些代码）到</span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>&lt;p&gt;&lt;%= notice %&gt;&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Name:&lt;/b&gt;</p>

<p>&lt;%= @post.name %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Title:&lt;/b&gt;</p>

<p>&lt;%= @post.title %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Content:&lt;/b&gt;</p>

<p>&lt;%= @post.content %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;h2&gt;Comments&lt;/h2&gt;</p>

<p>&lt;% @post.comments.each do |comment| %&gt;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Commenter:&lt;/b&gt;</p>

<p>&lt;%= comment.commenter %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&nbsp;</p>

<p>&lt;p&gt;</p>

<p>&lt;b&gt;Comment:&lt;/b&gt;</p>

<p>&lt;%= comment.body %&gt;</p>

<p>&lt;/p&gt;</p>

<p>&lt;% end %&gt;</p>

<p>&nbsp;</p>

<p>&lt;h2&gt;Add a comment:&lt;/h2&gt;</p>

<p>&lt;%= form_for([@post, @post.comments.build]) do |f| %&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.label :commenter %&gt;&lt;br /&gt;</p>

<p>&lt;%= f.text_field :commenter %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.label :body %&gt;&lt;br /&gt;</p>

<p>&lt;%= f.text_area :body %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;div&gt;</p>

<p>&lt;%= f.submit %&gt;</p>

<p>&lt;/div&gt;</p>

<p>&lt;% end %&gt;</p>

<p>&nbsp;</p>

<p>&lt;br /&gt;</p>

<p>&nbsp;</p>

<p>&lt;%= link_to &lsquo;Edit Post&rsquo;, edit_post_path(@post) %&gt; |</p>

<p>&lt;%= link_to &lsquo;Back to Posts&rsquo;, posts_path %&gt; |</p>

<p>Now you can add posts and comments to your blog and have them show up in the right places.<span style="font-family: DejaVu Sans;">现在你可以添加</span>posts<span style="font-family: DejaVu Sans;">和</span>comments<span style="font-family: DejaVu Sans;">到你的</span>blog<span style="font-family: DejaVu Sans;">同时随后他们会在相应的地方显示出来。</span></p>

<h3><a name="refactoring"></a>8 Refactoring<span style="font-family: WenQuanYi Micro Hei;">重构</span></h3>


<p>Now that we have Posts and Comments working, if we take a look at the <tt>app/views/posts/show.html.erb</tt> template, it’s getting long and awkward. <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">现在我们已经有</span></span>Posts<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">和</span></span>Comments<span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">开始工作了，如果我们注意一下</span></span><tt>app/views/posts/show.html.erb</tt> <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">模板，发现它变得太长而且很别扭。</span></span>We can use partials to clean this up.<span style="font-family: DejaVu Sans;">我们可以使用</span>partials<span style="font-family: DejaVu Sans;">来整理它。</span></p>

<h4><a name="rendering-partial-collections"></a>8.1 Rendering Partial<span style="font-family: WenQuanYi Micro Hei;">（局部）</span>Collections</h4>


<p>First we will make a comment partial to extract showing all the comments for the post. <span style="font-family: DejaVu Sans;">首先我们会创建一个</span>comment partial<span style="font-family: DejaVu Sans;">来专门显示</span>post<span style="font-family: DejaVu Sans;">的所有的</span>comments<span style="font-family: DejaVu Sans;">。</span>Create the file <tt>app/views/comments/<em>comment.html.erb</tt> and put the following into it:<span style="font-family: DejaVu Sans;">创建</span><tt>app/views/comments/</em>comment.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>文件并输入下面的代码：</tt></span></p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Commenter:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>comment.commenter</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Comment:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>comment.body</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p><tt>Then</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>change</tt><tt> </tt><tt>it</tt><tt> </tt><tt>to</tt><tt> </tt><tt>look</tt><tt> </tt><tt>like</tt><tt> </tt><tt>the</tt><tt> </tt><tt>following:</tt><span style="font-family: DejaVu Sans;"><tt>然后在</tt><tt></tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>你可以相应的这样更改：</tt></span></p>

<p><code>&lt;p</code><tt> </tt><code>class=&ldquo;notice&rdquo;&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Comments&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>form_for([@post,</code><code> </code><code>@post.comments.build])</code><code> </code><code>do</code> <code>|f|</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;field&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:commenter</code> <code>%&gt;&lt;br</code> <code>/&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.text_field</code><code> </code><code>:commenter</code> <code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;field&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:body</code> <code>%&gt;&lt;br</code> <code>/&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.text_area</code><code> </code><code>:body</code> <code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;actions&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.submit</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code>&lt;%</code> <code>end</code> <code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;br</code> <code>/&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Edit</code><code> </code><code>Post&rsquo;,</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code></p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Back</code><code> </code><code>to</code><code> </code><code>Posts&rsquo;,</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code></p>

<p><tt>This</tt><tt> </tt><tt>will</tt><tt> </tt><tt>now</tt><tt> </tt><tt>render</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>in</tt><tt> </tt><tt>app/views/comments/<em>comment.html.erb</tt><tt> </tt><tt>once</tt><tt> </tt><tt>for</tt><tt> </tt><tt>each</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>that</tt><tt> </tt><tt>is</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>@post.comments</tt><tt> </tt><tt>collection.</tt><span style="font-family: DejaVu Sans;"><tt>这里会对</tt></span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>的每一个</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>渲染</tt><tt></tt></span><tt>app/views/comments/</em>comment.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>模板。</tt><tt></tt></span><tt>As</tt><tt> </tt><tt>the</tt><tt> </tt><tt>render</tt><tt> </tt><tt>method</tt><tt> </tt><tt>iterates</tt><tt> </tt><tt>over</tt><tt> </tt><tt>the</tt><tt> </tt><tt>@post.comments</tt><tt> </tt><tt>collection,</tt><tt> </tt><tt>it</tt><tt> </tt><tt>assigns</tt><tt> </tt><tt>each</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>to</tt><tt> </tt><tt>a</tt><tt> </tt><tt>local</tt><tt> </tt><tt>variable</tt><tt> </tt><tt>named</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>as</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial,</tt><tt> </tt><tt>in</tt><tt> </tt><tt>this</tt><tt> </tt><tt>case</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>which</tt><tt> </tt><tt>is</tt><tt> </tt><tt>then</tt><tt> </tt><tt>available</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>for</tt><tt> </tt><tt>us</tt><tt> </tt><tt>to</tt><tt> </tt><tt>show.</tt><span style="font-family: DejaVu Sans;"><tt>当渲染方法迭代</tt></span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>收集器的时候，它声明每个</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>为本地变量命名和</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>相同（这里为</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>），通过这样在</tt></span><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>中的</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>就可以显示给我们的用户了。</tt></span></p>

<h4><a name="rendering-a-partial-form"></a><tt>8.2</tt><tt> </tt><tt>Rendering</tt><tt> </tt><tt>a</tt><tt> </tt><tt>Partial</tt><tt> </tt><tt>Form</tt></h4>


<p><tt>Let</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>also</tt><tt> </tt><tt>move</tt><tt> </tt><tt>that</tt><tt> </tt><tt>new</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>section</tt><tt> </tt><tt>out</tt><tt> </tt><tt>to</tt><tt> </tt><tt>its</tt><tt> </tt><tt>own</tt><tt> </tt><tt>partial.</tt><span style="font-family: DejaVu Sans;"><tt>同样让我们移动</tt></span><tt>new</tt><tt> </tt><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>部分到它自己的地方吧。</tt><tt></tt></span><tt>Again,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>file</tt><tt> </tt><tt>app/views/comments/<em>form.html.erb</tt><tt> </tt><tt>and</tt><tt> </tt><tt>in</tt><tt> </tt><tt>it</tt><tt> </tt><tt>you</tt><tt> </tt><tt>put:</tt><span style="font-family: DejaVu Sans;"><tt>类似的，创建一个文件</tt><tt></tt></span><tt>app/views/comments/</em>form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>并且在里面放入下面代码：</tt></span></p>

<p><code>&lt;%=</code><tt> </tt><code>form_for([@post,</code><code> </code><code>@post.comments.build])</code><code> </code><code>do</code><tt> </tt><code>|f|</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;field&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:commenter</code> <code>%&gt;&lt;br</code> <code>/&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.text_field</code><code> </code><code>:commenter</code> <code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;field&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.label</code><code> </code><code>:body</code> <code>%&gt;&lt;br</code> <code>/&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.text_area</code><code> </code><code>:body</code> <code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;actions&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>f.submit</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code>&lt;%</code> <code>end</code> <code>%&gt;</code></p>

<p><tt>Then</tt><tt> </tt><tt>you</tt><tt> </tt><tt>make</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>look</tt><tt> </tt><tt>like</tt><tt> </tt><tt>the</tt><tt> </tt><tt>following:</tt><span style="font-family: DejaVu Sans;"><tt>接着你这样修改</tt><tt></tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>文件：</tt></span></p>

<p><code>&lt;p</code><tt> </tt><code>class=&ldquo;notice&rdquo;&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Comments&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>&ldquo;comments/form&rdquo;</code> <code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;br</code> <code>/&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Edit</code><code> </code><code>Post&rsquo;,</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code></p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Back</code><code> </code><code>to</code><code> </code><code>Posts&rsquo;,</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code></p>

<p><tt>The</tt><tt> </tt><tt>second</tt><tt> </tt><tt>render</tt><tt> </tt><tt>just</tt><tt> </tt><tt>defines</tt><tt> </tt><tt>the</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>template</tt><tt> </tt><tt>we</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>render,</tt><tt> </tt><tt>comments/form,</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>is</tt><tt> </tt><tt>smart</tt><tt> </tt><tt>enough</tt><tt> </tt><tt>to</tt><tt> </tt><tt>spot</tt><tt> </tt><tt>the</tt><tt> </tt><tt>forward</tt><tt> </tt><tt>slash</tt><tt> </tt><tt>in</tt><tt> </tt><tt>that</tt><tt> </tt><tt>string</tt><tt> </tt><tt>and</tt><tt> </tt><tt>realize</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt> </tt><tt>want</tt><tt> </tt><tt>to</tt><tt> </tt><tt>render</tt><tt> </tt><tt>the</tt><tt> </tt><tt><em>form.html.erb</tt><tt> </tt><tt>file</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/comments</tt><tt> </tt><tt>directory.</tt><span style="font-family: DejaVu Sans;"><tt>第二个</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>仅仅定义了一个我们想渲染的</tt></span><tt>partial</tt><tt> </tt><tt>template</tt><tt> </tt><tt>comments/form</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>可以智能的识别字符串代表的含义，并且知道你是想</tt></span><tt>render</tt><tt> </tt><tt></em>form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>模板。</tt></span></p>

<p>The <tt>@post</tt> object is available to any partials rendered in the view because we defined it as an instance variable.@post<span style="font-family: DejaVu Sans;">可以在任何的视图中</span>partials rendered<span style="font-family: DejaVu Sans;">，因为我们把它定义成的实例变量。</span></p>

<h3><a name="deleting-comments"></a><tt>9</tt><tt> </tt><tt>Deleting</tt><tt> </tt><tt>Comments</tt></h3>


<p>Another important feature on a blog is being able to delete SPAM comments.<span style="font-family: DejaVu Sans;">另一个重要的功能就是可以删除垃圾评论。</span>To do this, we need to implement a link of some sort in the view and a <tt>DELETE</tt> action in the <tt>CommentsController</tt>.<span style="font-family: DejaVu Sans;">要达到这样的效果，我们需要在</span>view<span style="font-family: DejaVu Sans;">中实现某种链接和在</span>CommentsController<span style="font-family: DejaVu Sans;">中的</span>DELETE<span style="font-family: DejaVu Sans;">动作。</span></p>

<p><tt>So</tt><tt> </tt><tt>first,</tt><tt> </tt><tt>let</tt><tt>’</tt><tt>s</tt><tt> </tt><tt>add</tt><tt> </tt><tt>the</tt><tt> </tt><tt>delete</tt><tt> </tt><tt>link</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/comments/<em>comment.html.erb</tt><tt> </tt><tt>partial:</tt><span style="font-family: DejaVu Sans;"><tt>首先，在</tt></span><tt>app/views/comments/</em>comment.html.erb</tt><tt> </tt><tt>partial</tt><span style="font-family: DejaVu Sans;"><tt>中添加</tt></span><tt>delete</tt><tt> </tt><tt>link</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Commenter:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>comment.commenter</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Comment:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>comment.body</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Destroy</code><code> </code><code>Comment&rsquo;,</code><code> </code><code>[comment.post,</code><code> </code><code>comment],</code></p>

<p><code> </code><code>:confirm</code> <code>=&gt;</code><code> </code><code>&lsquo;Are</code><code> </code><code>you</code><code> </code><code>sure?&rsquo;,</code></p>

<p><code> </code><code>:method</code> <code>=&gt;</code><code> </code><code>:delete</code> <code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>Clicking this new “Destroy Comment” link will fire off a <tt>DELETE</tt><tt> </tt><tt>/posts/:id/comments/:id</tt> to our <tt>CommentsController</tt>, which can then use this to find the comment we want to delete, so let’s add a destroy action to our controller:<span style="font-family: DejaVu Sans;">点击<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>Destroy Comment”<span style="font-family: DejaVu Sans;">，</span>link<span style="font-family: DejaVu Sans;">将会发送</span><tt>DELETE</tt><tt> </tt><tt>/posts/:id/comments/:id</tt><span style="font-family: DejaVu Sans;"><tt>到我们的</tt></span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>将会利用刚刚收到的（消息）找到我们想删除哪条评论，因此让我们接着添加一个</tt></span><tt>destroy</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>到我们的</tt></span><tt>controller</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><code>class</code><tt> </tt><code>CommentsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>create</code></p>

<p><code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code></p>

<p><code> </code><code>@comment</code> <code>=</code><code> </code><code>@post.comments.create(params[:comment])</code></p>

<p><code> </code><code>redirect_to</code><code> </code><code>post_path(@post)</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>destroy</code></p>

<p><code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code></p>

<p><code> </code><code>@comment</code> <code>=</code><code> </code><code>@post.comments.find(params[:id])</code></p>

<p><code> </code><code>@comment.destroy</code></p>

<p><code> </code><code>redirect_to</code><code> </code><code>post_path(@post)</code></p>

<p><code> </code><code>end</code></p>

<p>&nbsp;</p>

<p><code>end</code></p>

<p><tt>The</tt><tt> </tt><tt>destroy</tt><tt> </tt><tt>action</tt><tt> </tt><tt>will</tt><tt> </tt><tt>find</tt><tt> </tt><tt>the</tt><tt> </tt><tt>post</tt><tt> </tt><tt>we</tt><tt> </tt><tt>are</tt><tt> </tt><tt>looking</tt><tt> </tt><tt>at,</tt><tt> </tt><tt>locate</tt><tt> </tt><tt>the</tt><tt> </tt><tt>comment</tt><tt> </tt><tt>within</tt><tt> </tt><tt>the</tt><tt> </tt><tt>@post.comments</tt><tt> </tt><tt>collection,</tt><tt> </tt><tt>and</tt><tt> </tt><tt>then</tt><tt> </tt><tt>remove</tt><tt> </tt><tt>it</tt><tt> </tt><tt>from</tt><tt> </tt><tt>the</tt><tt> </tt><tt>database</tt><tt> </tt><tt>and</tt><tt> </tt><tt>send</tt><tt> </tt><tt>us</tt><tt> </tt><tt>back</tt><tt> </tt><tt>to</tt><tt> </tt><tt>the</tt><tt> </tt><tt>show</tt><tt> </tt><tt>action</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>post.destroy</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>将会找到那个我们正在阅读的</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>，并且定位</tt></span><tt>comment</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>@post.comments</tt><span style="font-family: DejaVu Sans;"><tt>收集器，然后从数据库</tt></span><tt>remove</tt><span style="font-family: DejaVu Sans;"><tt>它，最后传回到</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>的</tt></span><tt>show</tt><tt> </tt><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<h4><a name="deleting-associated-objects"></a><tt>9.1</tt><tt> </tt><tt>Deleting</tt><tt> </tt><tt>Associated</tt><tt> </tt><tt>Objects</tt><span style="font-family: WenQuanYi Micro Hei;"><tt>删除关联对象</tt></span></h4>


<p><a name="deleting-associated-objects1"></a>If you delete a post then its associated comments will also need to be deleted. <span style="font-family: DejaVu Sans;">如果你删除一个了</span>post<span style="font-family: DejaVu Sans;">，那么与之相关联的</span>comments<span style="font-family: DejaVu Sans;">也需要被删除。</span>Otherwise they would simply occupy space in the database.<span style="font-family: DejaVu Sans;">否则他们将会只是在数据库中占用空间（别无它用）。</span>Rails allows you to use the <tt>dependent</tt> option of an association to achieve this. Modify the Post model, <tt>app/models/post.rb</tt>, as follows:Rails<span style="font-family: DejaVu Sans;">允许你通过关系的依赖选项完成（上述功能）。修改</span>Post model<span style="font-family: DejaVu Sans;">。</span></p>

<p><code>class</code> <code>Post</code><code> </code><code>&lt;</code><code> </code><code>ActiveRecord::Base</code></p>

<p><code> </code><code>validates</code><code> </code><code>:name,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true</code></p>

<p><code> </code><code>validates</code><code> </code><code>:title,</code><code> </code><code>:presence</code> <code>=&gt;</code><code> </code><code>true,</code></p>

<p><code> </code><code>:length</code> <code>=&gt;</code><code> </code><code>{</code><code> </code><code>:minimum</code> <code>=&gt;</code><code> </code><code>5</code> <code>}</code></p>

<p><code> </code><code>has_many</code><code> </code><code>:comments,</code><code> </code><code>:dependent</code> <code>=&gt;</code><code> </code><code>:destroy</code></p>

<p><code>end</code></p>

<h3><a name="security"></a>10 Security</h3>


<p>If you were to publish your blog online, anybody would be able to add, edit and delete posts or delete comments.<span style="font-family: DejaVu Sans;">如果你就这样</span>publish<span style="font-family: DejaVu Sans;">你的</span>blog<span style="font-family: DejaVu Sans;">在互联网，任何人都可以添加，编辑和删除</span>post<span style="font-family: DejaVu Sans;">或者删除</span>comments<span style="font-family: DejaVu Sans;">。</span></p>

<p>Rails provides a very simple HTTP authentication system that will work nicely in this situation.Rails<span style="font-family: DejaVu Sans;">提供了一个非常简单的</span>HTTP<span style="font-family: DejaVu Sans;">认证系统在这样的情况下会非常适合。</span></p>

<p>In the <tt>PostsController</tt> we need to have a way to block access to the various actions if the person is not authenticated, here we can use the Rails <tt>http_basic_authenticate_with</tt> method, allowing access to the requested action if that method allows it.<span style="font-family: DejaVu Sans;">在</span><tt>PostsController</tt><span style="font-family: DejaVu Sans;"><tt>中我们需要一个方法来阻止没有通过认证的用户的操作，这里我们可以使用</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>的</tt><tt></tt></span><tt>http_basic_authenticate_with</tt><span style="font-family: DejaVu Sans;"><tt>这个方法，准许方法允许的请求的</tt></span><tt>action</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>To use the authentication system, we specify it at the top of our <tt>PostsController</tt>, in this case, we want the user to be authenticated on every action, except for <tt>index</tt> and <tt>show</tt>, so we write that:<span style="font-family: DejaVu Sans;">要是用这个认证系统，我们需要在</span><tt>PostsController</tt><tt> </tt><span style="font-family: DejaVu Sans;"><tt>的顶部</tt>在指定（即引用）它，这样我们希望用户在进行每个</span>action<span style="font-family: DejaVu Sans;">的时候都是通过授权的，除了</span>index<span style="font-family: DejaVu Sans;">和</span>show<span style="font-family: DejaVu Sans;">，因此我们这样写：</span></p>

<p><code>class</code> <code>PostsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code></p>

<p>&nbsp;</p>

<p><code> </code><code>http_basic_authenticate_with</code><code> </code><code>:name</code> <code>=&gt;</code><code> </code><code>&ldquo;dhh&rdquo;,</code><code> </code><code>:password</code> <code>=&gt;</code><code> </code><code>&ldquo;secret&rdquo;,</code><code> </code><code>:except</code> <code>=&gt;</code><code> </code><code>:index</code></p>

<p>&nbsp;</p>

<p><code> </code><code>#</code><code> </code><code>GET</code><code> </code><code>/posts</code></p>

<p><code> </code><code>#</code><code> </code><code>GET</code><code> </code><code>/posts.json</code></p>

<p><code> </code><code>def</code> <code>index</code></p>

<p><code> </code><code>@posts</code> <code>=</code><code> </code><code>Post.all</code></p>

<p>We also only want to allow authenticated users to delete comments, so in the <tt>CommentsController</tt> we write:<span style="font-family: DejaVu Sans;">我们同样希望只有授权用户能够删除评论，因此在</span><tt>CommentsController</tt><span style="font-family: DejaVu Sans;"><tt>这样写：</tt></span></p>

<p><code>class</code><tt> </tt><code>CommentsController</code><code> </code><code>&lt;</code><code> </code><code>ApplicationController</code></p>

<p>&nbsp;</p>

<p><code> </code><code>http_basic_authenticate_with</code><code> </code><code>:name</code> <code>=&gt;</code><code> </code><code>&ldquo;dhh&rdquo;,</code><code> </code><code>:password</code> <code>=&gt;</code><code> </code><code>&ldquo;secret&rdquo;,</code><code> </code><code>:only</code> <code>=&gt;</code><code> </code><code>:destroy</code></p>

<p>&nbsp;</p>

<p><code> </code><code>def</code> <code>create</code></p>

<p><code> </code><code>@post</code> <code>=</code><code> </code><code>Post.find(params[:post_id])</code></p>

<p><tt>Now</tt><tt> </tt><tt>if</tt><tt> </tt><tt>you</tt><tt> </tt><tt>try</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>post,</tt><tt> </tt><tt>you</tt><tt> </tt><tt>will</tt><tt> </tt><tt>be</tt><tt> </tt><tt>greeted</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>basic</tt><tt> </tt><tt>HTTP</tt><tt> </tt><tt>Authentication</tt><tt> </tt><tt>challenge.</tt><span style="font-family: DejaVu Sans;"><tt>现在如果你尝试创建一个新的</tt></span><tt>post</tt><span style="font-family: DejaVu Sans;"><tt>，你将会迎来一个基于</tt></span><tt>HTTP</tt><span style="font-family: DejaVu Sans;"><tt>认证的挑战。</tt></span></p>

<h3><a name="building-a-multi-model-form"></a>11 Building a Multi-Model Form<span style="font-family: WenQuanYi Micro Hei;">构建一个多模型表单</span></h3>


<p>Another feature of your average blog is the ability to tag posts. To implement this feature your application needs to interact with more than one model on a single form. Rails offers support for nested forms.<span style="font-family: DejaVu Sans;">另一个功能你的平衡的</span>blog<span style="font-family: DejaVu Sans;">是能够给</span>posts<span style="font-family: DejaVu Sans;">添加</span>tag<span style="font-family: DejaVu Sans;">。要想在你的程序中实现这个功能需要在一个</span>form<span style="font-family: DejaVu Sans;">中与超过一个</span>model<span style="font-family: DejaVu Sans;">互动。</span>Rails<span style="font-family: DejaVu Sans;">提供了嵌套</span>forms<span style="font-family: DejaVu Sans;">。</span></p>

<p>To demonstrate this, we will add support for giving each post multiple tags, right in the form where you create the post. First, create a new model to hold the tags:<span style="font-family: DejaVu Sans;">为了演示这个（功能），你将会在你创建</span>post<span style="font-family: DejaVu Sans;">的</span>form<span style="font-family: DejaVu Sans;">中添加</span>post<span style="font-family: DejaVu Sans;">的多</span>tag<span style="font-family: DejaVu Sans;">支持。首先创建一个</span>new model<span style="font-family: DejaVu Sans;">来存放</span>tags<span style="font-family: DejaVu Sans;">：</span></p>

<p><code>$</code><code> </code><code>rails</code><code> </code><code>generate</code><code> </code><code>model</code><code> </code><code>tag</code><code> </code><code>name:string</code><code> </code><code>post:references</code></p>

<p>Again, run the migration to create the database table:<span style="font-family: DejaVu Sans;">再次运行</span>migration<span style="font-family: DejaVu Sans;">来创建数据库表单：</span></p>

<p><code>$</code><code> </code><code>rake</code><code> </code><code>db:migrate</code></p>

<p>Next, edit the <tt>post.rb</tt> file to create the other side of the association, and to tell Rails (via the <tt>accepts_nested_attributes_for</tt> macro) that you intend to edit tags via posts:<span style="font-family: DejaVu Sans;">接下来：编辑</span>post.rb<span style="font-family: DejaVu Sans;">文件来创建来创建另一个成员，并且告诉</span>Rails<span style="font-family: DejaVu Sans;">（通过</span>the <tt>accepts_nested_attributes_for</tt> <span style="font-family: DejaVu Sans;">宏）你打算通过</span>posts form<span style="font-family: DejaVu Sans;">来编辑</span>tags<span style="font-family: DejaVu Sans;">。</span></p>

<p>class Post &lt; ActiveRecord::Base</p>

<p>validates :name, :presence =&gt; true</p>

<p>validates :title, :presence =&gt; true</p>

<p>validates :content,:presence =&gt; true,</p>

<p>:length =&gt; { :minimum =&gt; 5 }</p>

<p>&nbsp;</p>

<p>has_many :comments, :dependent =&gt; :destroy</p>

<p>has_many :tags</p>

<p>&nbsp;</p>

<p>accepts_nested_attributes_for :tags, :allow_destroy =&gt; :true,</p>

<p>:reject_if =&gt; proc { |attrs| attrs.all? { |k, v| v.blank? } }</p>

<p>end</p>

<p><tt>The</tt><tt> </tt><tt>:allow_destroy</tt><tt> </tt><tt>option</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>nested</tt><tt> </tt><tt>attribute</tt><tt> </tt><tt>declaration</tt><tt> </tt><tt>tells</tt><tt> </tt><tt>Rails</tt><tt> </tt><tt>to</tt><tt> </tt><tt>display</tt><tt> </tt><tt>a</tt><tt> “</tt><tt>remove</tt><tt>” </tt><tt>checkbox</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>view</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>build</tt><tt> </tt><tt>shortly.</tt><span style="font-family: DejaVu Sans;"><tt>对于</tt></span><tt>:allow_destroy</tt><span style="font-family: DejaVu Sans;"><tt>嵌套属性的声明是告诉</tt></span><tt>Rails</tt><span style="font-family: DejaVu Sans;"><tt>显示一个</tt><tt><span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></tt></span><tt>remove</tt><tt>”</tt><span style="font-family: DejaVu Sans;"><tt>复选框在视图中那样你可以快速创建（</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>）。</tt><tt></tt></span><tt>The</tt><tt> </tt><tt>:reject_if</tt><tt> </tt><tt>option</tt><tt> </tt><tt>prevents</tt><tt> </tt><tt>saving</tt><tt> </tt><tt>new</tt><tt> </tt><tt>tags</tt><tt> </tt><tt>that</tt><tt> </tt><tt>do</tt><tt> </tt><tt>not</tt><tt> </tt><tt>have</tt><tt> </tt><tt>any</tt><tt> </tt><tt>attributes</tt><tt> </tt><tt>filled</tt><tt> </tt><tt>in.</tt><span style="font-family: DejaVu Sans;"><tt>对于</tt></span><tt>:reject_if</tt><span style="font-family: DejaVu Sans;"><tt>保证不保存没有任何内容的</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>We</tt><tt> </tt><tt>will</tt><tt> </tt><tt>modify</tt><tt> </tt><tt>views/posts/<em>form.html.erb</tt><tt> </tt><tt>to</tt><tt> </tt><tt>render</tt><tt> </tt><tt>a</tt><tt> </tt><tt>partial</tt><tt> </tt><tt>to</tt><tt> </tt><tt>make</tt><tt> </tt><tt>a</tt><tt> </tt><tt>tag:</tt><span style="font-family: DejaVu Sans;"><tt>我们将要修改</tt><tt></tt></span><tt>views/posts/</em>form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>来</tt></span><tt>render</tt><span style="font-family: DejaVu Sans;"><tt>（</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>的）一部分来创建</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><tt>&lt;%</tt><tt> </tt><tt>@post.tags.build</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt>&lt;%=</tt><tt> </tt><tt>form_for(@post)</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|post_form|</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;%</tt><tt> </tt><tt>if</tt><tt> </tt><tt>@post.errors.any?</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;div</tt><tt> </tt><tt>id=&ldquo;errorExplanation&rdquo;&gt;</tt></p>

<p><tt> </tt><tt>&lt;h2&gt;&lt;%=</tt><tt> </tt><tt>pluralize(@post.errors.count,</tt><tt> </tt><tt>&ldquo;error&rdquo;)</tt><tt> </tt><tt>%&gt;</tt><tt> </tt><tt>prohibited</tt><tt> </tt><tt>this</tt><tt> </tt><tt>post</tt><tt> </tt><tt>from</tt><tt> </tt><tt>being</tt><tt> </tt><tt>saved:&lt;/h2&gt;</tt></p>

<p><tt> </tt><tt>&lt;ul&gt;</tt></p>

<p><tt> </tt><tt>&lt;%</tt><tt> </tt><tt>@post.errors.full_messages.each</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|msg|</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;li&gt;&lt;%=</tt><tt> </tt><tt>msg</tt><tt> </tt><tt>%&gt;&lt;/li&gt;</tt></p>

<p><tt> </tt><tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;/ul&gt;</tt></p>

<p><tt> </tt><tt>&lt;/div&gt;</tt></p>

<p><tt> </tt><tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt></p>

<p>&nbsp;</p>

<p><tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class=&ldquo;field&rdquo;&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.label</tt><tt> </tt><tt>:name</tt><tt> </tt><tt>%&gt;&lt;br</tt><tt> </tt><tt>/&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.text_field</tt><tt> </tt><tt>:name</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;/div&gt;</tt></p>

<p><tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class=&ldquo;field&rdquo;&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.label</tt><tt> </tt><tt>:title</tt><tt> </tt><tt>%&gt;&lt;br</tt><tt> </tt><tt>/&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.text_field</tt><tt> </tt><tt>:title</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;/div&gt;</tt></p>

<p><tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class=&ldquo;field&rdquo;&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.label</tt><tt> </tt><tt>:content</tt><tt> </tt><tt>%&gt;&lt;br</tt><tt> </tt><tt>/&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.text_area</tt><tt> </tt><tt>:content</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;/div&gt;</tt></p>

<p><tt> </tt><tt>&lt;h2&gt;Tags&lt;/h2&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>render</tt><tt> </tt><tt>:partial</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>&lsquo;tags/form&rsquo;,</tt></p>

<p><tt> </tt><tt>:locals</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>{:form</tt><tt> </tt><tt>=&gt;</tt><tt> </tt><tt>post_form}</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;div</tt><tt> </tt><tt>class=&ldquo;actions&rdquo;&gt;</tt></p>

<p><tt> </tt><tt>&lt;%=</tt><tt> </tt><tt>post_form.submit</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt> </tt><tt>&lt;/div&gt;</tt></p>

<p><tt>&lt;%</tt><tt> </tt><tt>end</tt><tt> </tt><tt>%&gt;</tt></p>

<p><tt>Note</tt><tt> </tt><tt>that</tt><tt> </tt><tt>we</tt><tt> </tt><tt>have</tt><tt> </tt><tt>changed</tt><tt> </tt><tt>the</tt><tt> </tt><tt>f</tt><tt> </tt><tt>in</tt><tt> </tt><tt>form_for(@post)</tt><tt> </tt><tt>do</tt><tt> </tt><tt>|f|</tt><tt> </tt><tt>to</tt><tt> </tt><tt>post_form</tt><tt> </tt><tt>to</tt><tt> </tt><tt>make</tt><tt> </tt><tt>it</tt><tt> </tt><tt>easier</tt><tt> </tt><tt>to</tt><tt> </tt><tt>understand</tt><tt> </tt><tt>what</tt><tt> </tt><tt>is</tt><tt> </tt><tt>going</tt><tt> </tt><tt>on.</tt><span style="font-family: DejaVu Sans;"><tt>注意：我们已经更改</tt></span><code>form_for(@post)</code><code> </code><code>do</code><code> </code><code>|f|</code><span style="font-family: DejaVu Sans;"><tt>为</tt></span><code>form_for(@post)</code><code> </code><code>do</code><tt> </tt><code>|post_form|</code><span style="font-family: DejaVu Sans;"><code>这样会更加容易明白是怎么回事。</code></span></p>

<p><code>This</code><code> </code><code>example</code><code> </code><code>shows</code><code> </code><code>another</code><code> </code><code>option</code><code> </code><code>of</code><code> </code><code>the</code><code> </code><code>render</code><code> </code><code>helper,</code><code> </code><code>being</code><code> </code><code>able</code><code> </code><code>to</code><code> </code><code>pass</code><code> </code><code>in</code><code> </code><code>local</code><code> </code><code>variables,</code><code> </code><code>in</code><code> </code><code>this</code><code> </code><code>case,</code><code> </code><code>we</code><code> </code><code>want</code><code> </code><code>the</code><code> </code><code>local</code><code> </code><code>variable</code><code> </code><tt>form</tt><code> </code><code>in</code><code> </code><code>the</code><code> </code><code>partial</code><code> </code><code>to</code><code> </code><code>refer</code><code> </code><code>to</code><code> </code><code>the</code><code> </code><tt>post_form</tt><code> </code><code>object.</code><span style="font-family: DejaVu Sans;"><code>这个例子在</code></span><code>render</code><code> </code><code>helper</code><span style="font-family: DejaVu Sans;"><code>中使用另个方式（使用</code></span><code>f</code><span style="font-family: DejaVu Sans;"><code>），是为了说明我们希望的是在</code></span><code>form</code><span style="font-family: DejaVu Sans;"><code>中使用局部变量指向的</code></span><code>post_form</code><span style="font-family: DejaVu Sans;"><code>对象。</code></span></p>

<p><tt>We</tt><tt> </tt><tt>also</tt><tt> </tt><tt>add</tt><tt> </tt><tt>a</tt><tt> </tt><tt>@post.tags.build</tt><tt> </tt><tt>at</tt><tt> </tt><tt>the</tt><tt> </tt><tt>top</tt><tt> </tt><tt>of</tt><tt> </tt><tt>this</tt><tt> </tt><tt>form.</tt><tt> </tt><tt>This</tt><tt> </tt><tt>is</tt><tt> </tt><tt>to</tt><tt> </tt><tt>make</tt><tt> </tt><tt>sure</tt><tt> </tt><tt>there</tt><tt> </tt><tt>is</tt><tt> </tt><tt>a</tt><tt> </tt><tt>new</tt><tt> </tt><tt>tag</tt><tt> </tt><tt>ready</tt><tt> </tt><tt>to</tt><tt> </tt><tt>have</tt><tt> </tt><tt>its</tt><tt> </tt><tt>name</tt><tt> </tt><tt>filled</tt><tt> </tt><tt>in</tt><tt> </tt><tt>by</tt><tt> </tt><tt>the</tt><tt> </tt><tt>user.</tt><tt> </tt><tt>If</tt><tt> </tt><tt>you</tt><tt> </tt><tt>do</tt><tt> </tt><tt>not</tt><tt> </tt><tt>build</tt><tt> </tt><tt>the</tt><tt> </tt><tt>new</tt><tt> </tt><tt>tag,</tt><tt> </tt><tt>then</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>will</tt><tt> </tt><tt>not</tt><tt> </tt><tt>appear</tt><tt> </tt><tt>as</tt><tt> </tt><tt>there</tt><tt> </tt><tt>is</tt><tt> </tt><tt>no</tt><tt> </tt><tt>new</tt><tt> </tt><tt>Tag</tt><tt> </tt><tt>object</tt><tt> </tt><tt>ready</tt><tt> </tt><tt>to</tt><tt> </tt><tt>create.</tt><span style="font-family: DejaVu Sans;"><tt>我们还在</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>的顶部添加</tt></span><tt>@post.tags.build</tt><span style="font-family: DejaVu Sans;"><tt>。这里是为了确保每个新的</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>都被用户填上了</tt></span><tt>name</tt><span style="font-family: DejaVu Sans;"><tt>。如果你不创建新</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>，</tt></span><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>将不会显示它。</tt></span></p>

<p><tt>Now</tt><tt> </tt><tt>create</tt><tt> </tt><tt>the</tt><tt> </tt><tt>folder</tt><tt> </tt><tt>app/views/tags</tt><tt> </tt><tt>and</tt><tt> </tt><tt>make</tt><tt> </tt><tt>a</tt><tt> </tt><tt>file</tt><tt> </tt><tt>in</tt><tt> </tt><tt>there</tt><tt> </tt><tt>called</tt><tt> </tt><tt><em>form.html.erb</tt><tt> </tt><tt>which</tt><tt> </tt><tt>contains</tt><tt> </tt><tt>the</tt><tt> </tt><tt>form</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>tag:</tt><span style="font-family: DejaVu Sans;"><tt>现在创建一个</tt><tt></tt></span><tt>app/views/tags</tt><span style="font-family: DejaVu Sans;"><tt>文件夹并且在里面新建一个</tt></span><tt></em>form.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>包含以下内容：</tt></span></p>

<p><code>&lt;%=</code><tt> </tt><code>form.fields_for</code><code> </code><code>:tags</code><tt> </tt><code>do</code><tt> </tt><code>|tag_form|</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;field&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>tag_form.label</code><code> </code><code>:name,</code><code> </code><code>&lsquo;Tag:&rsquo;</code> <code>%&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>tag_form.text_field</code><code> </code><code>:name</code> <code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code> </code><code>&lt;%</code> <code>unless</code> <code>tag_form.object.nil?</code><code> </code><code>||</code><code> </code><code>tag_form.object.new_record?</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;div</code> <code>class=&ldquo;field&rdquo;&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>tag_form.label</code><code> </code><code>:_destroy,</code><code> </code><code>&lsquo;Remove:&rsquo;</code> <code>%&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>tag_form.check_box</code><code> </code><code>:_destroy</code><code> </code><code>%&gt;</code></p>

<p><code> </code><code>&lt;/div&gt;</code></p>

<p><code> </code><code>&lt;%</code> <code>end</code> <code>%&gt;</code></p>

<p><code>&lt;%</code> <code>end</code> <code>%&gt;</code></p>

<p><tt>Finally,</tt><tt> </tt><tt>we</tt><tt> </tt><tt>will</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>the</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>template</tt><tt> </tt><tt>to</tt><tt> </tt><tt>show</tt><tt> </tt><tt>our</tt><tt> </tt><tt>tags.</tt><span style="font-family: DejaVu Sans;"><tt>最后编辑</tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>模板显示我们的</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>：</tt></span></p>

<p><code>&lt;p</code><tt> </tt><code>class=&ldquo;notice&rdquo;&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Tags:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.tags.map</code><code> </code><code>{</code><code> </code><code>|t|</code><code> </code><code>t.name</code><code> </code><code>}.join(&ldquo;,</code><code> </code><code>&rdquo;)</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Comments&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>&ldquo;comments/form&rdquo;</code> <code>%&gt;</code></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Edit</code><code> </code><code>Post&rsquo;,</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code></p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Back</code><code> </code><code>to</code><code> </code><code>Posts&rsquo;,</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code></p>

<p><tt>With</tt><tt> </tt><tt>these</tt><tt> </tt><tt>changes</tt><tt> </tt><tt>in</tt><tt> </tt><tt>place,</tt><tt> </tt><tt>you</tt><tt>’</tt><tt>ll</tt><tt> </tt><tt>find</tt><tt> </tt><tt>that</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>a</tt><tt> </tt><tt>post</tt><tt> </tt><tt>and</tt><tt> </tt><tt>its</tt><tt> </tt><tt>tags</tt><tt> </tt><tt>directly</tt><tt> </tt><tt>on</tt><tt> </tt><tt>the</tt><tt> </tt><tt>same</tt><tt> </tt><tt>view.</tt><span style="font-family: DejaVu Sans;"><tt>通过这写修改，你会发现你可以直接在</tt></span><tt>post</tt><tt> </tt><tt>form</tt><span style="font-family: DejaVu Sans;"><tt>中编辑</tt></span><tt>tags</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p>However, that method call <tt>@post.tags.map</tt><tt> </tt><tt>{</tt><tt> </tt><tt>|t|</tt><tt> </tt><tt>t.name</tt><tt> </tt><tt>}.join(&ldquo;,</tt><tt> </tt><tt>&rdquo;)</tt> is awkward, we could handle this by making a helper method.<span style="font-family: DejaVu Sans;">另外，</span><tt>@post.tags.map</tt><tt> </tt><tt>{</tt><tt> </tt><tt>|t|</tt><tt> </tt><tt>t.name</tt><tt> </tt><tt>}.join(&ldquo;,</tt><tt> </tt><tt>&rdquo;)</tt><span style="font-family: DejaVu Sans;"><tt>这个方法很别扭，我们可以通过编写一个</tt></span><tt>helper</tt><tt> </tt><tt>method</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></p>

<p><tt>###</tt><span style="font-family: DejaVu Sans;"><tt>上面都还只能一次创建一个</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>在</tt></span><tt>post</tt><tt> </tt><tt>form</tt></p>

<h3><a name="view-helpers"></a><tt>12</tt><tt> </tt><tt>View</tt><tt> </tt><tt>Helpers</tt></h3>


<p><tt>View</tt><tt> </tt><tt>Helpers</tt><tt> </tt><tt>live</tt><tt> </tt><tt>in</tt><tt> </tt><tt>app/helpers</tt><tt> </tt><tt>and</tt><tt> </tt><tt>provide</tt><tt> </tt><tt>small</tt><tt> </tt><tt>snippets</tt><tt> </tt><tt>of</tt><tt> </tt><tt>reusable</tt><tt> </tt><tt>code</tt><tt> </tt><tt>for</tt><tt> </tt><tt>views.View</tt><tt> </tt><tt>Helpers</tt><span style="font-family: DejaVu Sans;"><tt>放置在</tt></span><tt>app/helpers</tt><span style="font-family: DejaVu Sans;"><tt>，它提供了可重用的小代码片段给</tt></span><tt>view</tt><span style="font-family: DejaVu Sans;"><tt>。</tt><tt></tt></span><tt>In</tt><tt> </tt><tt>our</tt><tt> </tt><tt>case,</tt><tt> </tt><tt>we</tt><tt> </tt><tt>want</tt><tt> </tt><tt>a</tt><tt> </tt><tt>method</tt><tt> </tt><tt>that</tt><tt> </tt><tt>strings</tt><tt> </tt><tt>a</tt><tt> </tt><tt>bunch</tt><tt> </tt><tt>of</tt><tt> </tt><tt>objects</tt><tt> </tt><tt>together</tt><tt> </tt><tt>using</tt><tt> </tt><tt>their</tt><tt> </tt><tt>name</tt><tt> </tt><tt>attribute</tt><tt> </tt><tt>and</tt><tt> </tt><tt>joining</tt><tt> </tt><tt>them</tt><tt> </tt><tt>with</tt><tt> </tt><tt>a</tt><tt> </tt><tt>comma.</tt><span style="font-family: DejaVu Sans;"><tt>在本例，我们想要一个方法把（</tt></span><tt>tag</tt><span style="font-family: DejaVu Sans;"><tt>）放在一起（一个字符串中），并且使用逗号分割。</tt><tt></tt></span><tt>As</tt><tt> </tt><tt>this</tt><tt> </tt><tt>is</tt><tt> </tt><tt>for</tt><tt> </tt><tt>the</tt><tt> </tt><tt>Post</tt><tt> </tt><tt>show</tt><tt> </tt><tt>template,</tt><tt> </tt><tt>we</tt><tt> </tt><tt>put</tt><tt> </tt><tt>it</tt><tt> </tt><tt>in</tt><tt> </tt><tt>the</tt><tt> </tt><tt>PostsHelper.</tt><span style="font-family: DejaVu Sans;"><tt>要想这样在</tt></span><tt>Post</tt><tt> </tt><tt>show</tt><span style="font-family: DejaVu Sans;"><tt>模板，我们在</tt></span><tt>PostHelper</tt><span style="font-family: DejaVu Sans;"><tt>中写入：</tt></span></p>

<p><tt>Now</tt><tt> </tt><tt>you</tt><tt> </tt><tt>can</tt><tt> </tt><tt>edit</tt><tt> </tt><tt>the</tt><tt> </tt><tt>view</tt><tt> </tt><tt>in</tt><tt> </tt><tt>app/views/posts/show.html.erb</tt><tt> </tt><tt>to</tt><tt> </tt><tt>look</tt><tt> </tt><tt>like</tt><tt> </tt><tt>this:</tt><span style="font-family: DejaVu Sans;"><tt>现在你可以在</tt><tt></tt></span><tt>app/views/posts/show.html.erb</tt><span style="font-family: DejaVu Sans;"><tt>中更改：</tt></span></p>

<p><code>&lt;p</code><tt> </tt><code>class=&ldquo;notice&rdquo;&gt;&lt;%=</code><tt> </tt><code>notice</code><code> </code><code>%&gt;&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Name:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.name</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Title:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.title</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Content:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>@post.content</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;p&gt;</code></p>

<p><code> </code><code>&lt;b&gt;Tags:&lt;/b&gt;</code></p>

<p><code> </code><code>&lt;%=</code> <code>join_tags(@post)</code><code> </code><code>%&gt;</code></p>

<p><code>&lt;/p&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Comments&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>@post.comments</code><code> </code><code>%&gt;</code></p>

<p>&nbsp;</p>

<p><code>&lt;h2&gt;Add</code><code> </code><code>a</code><code> </code><code>comment:&lt;/h2&gt;</code></p>

<p><code>&lt;%=</code> <code>render</code><code> </code><code>&ldquo;comments/form&rdquo;</code> <code>%&gt;</code></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Edit</code><code> </code><code>Post&rsquo;,</code><code> </code><code>edit_post_path(@post)</code><code> </code><code>%&gt;</code> <code>|</code></p>

<p><code>&lt;%=</code> <code>link_to</code><code> </code><code>&lsquo;Back</code><code> </code><code>to</code><code> </code><code>Posts&rsquo;,</code><code> </code><code>posts_path</code><code> </code><code>%&gt;</code> <code>|</code></p>

<h3><a name="what-s-next"></a>13 What’s Next?<span style="font-family: WenQuanYi Micro Hei;">接下来做什么呢？</span></h3>


<p>Now that you’ve seen your first Rails application, you should feel free to update it and experiment on your own. But you don’t have to do everything without help.<span style="font-family: DejaVu Sans;">现在你已经看到了你的第一个</span>Rails<span style="font-family: DejaVu Sans;">应用程序，你应该可以很轻松的继续更新它或者试验一下你的想法。</span>As you need assistance getting up and running with Rails, feel free to consult these support resources:<span style="font-family: DejaVu Sans;">当你在更新和运行</span>Rails<span style="font-family: DejaVu Sans;">的时候需要援助，咨询下面推荐的资源会让你感到轻松：</span></p>

<ul>
    <li>The <a href="http://guides.rubyonrails.org/index.html"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">guides</span></span></a></li>
    <li>The <a href="http://railstutorial.org/book"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Tutorial</span></span></a></li>
    <li>The <a href="http://groups.google.com/group/rubyonrails-talk"><span style="color: #000080;"><span style="text-decoration: underline;">Ruby</span></span><span style="color: #000080;"><span style="text-decoration: underline;">on</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">mailing</span></span><span style="color: #000080;"><span style="text-decoration: underline;">list</span></span></a></li>
    <li>The <span style="color: #000080;"><span style="text-decoration: underline;"><a href="irc://irc.freenode.net/#rubyonrails">#rubyonrails</a></span></span> channel on irc.freenode.net</li>
    <li>The <a href="http://wiki.rubyonrails.org/"><span style="color: #000080;"><span style="text-decoration: underline;">Rails</span></span><span style="color: #000080;"><span style="text-decoration: underline;">Wiki</span></span></a></li>
</ul>


<p>Rails also comes with built-in help that you can generate using the rake command-line utility:Rails<span style="font-family: DejaVu Sans;">同样也带有内置的帮助你可以使用</span>rake<span style="font-family: DejaVu Sans;">命令实用工具在你的应用程序中创建帮助文档：</span></p>

<ul>
    <li>Running <tt><strong>rake</strong></tt><tt><strong> </strong></tt><tt><strong>doc:guides</strong></tt> will put a full copy of the Rails Guides in the <tt>doc/guides</tt> folder of your application. Open <tt>doc/guides/index.html</tt> in your web browser to explore the Guides. <span style="font-family: DejaVu Sans;">运行</span><tt><strong>rake</strong></tt><tt><strong> </strong></tt><tt><strong>doc:guides</strong></tt><span style="font-family: DejaVu Sans;"><tt>将会输出所有</tt></span><tt>Rails</tt><tt> </tt><tt>Guides</tt><span style="font-family: DejaVu Sans;"><tt>的文档到你的应用程序中的</tt></span><tt>doc/guides</tt><span style="font-family: DejaVu Sans;"><tt>中。在你的浏览器中打开</tt></span><tt>/guides/index.html</tt><span style="font-family: DejaVu Sans;"><tt>浏览</tt></span><tt>Guides</tt><span style="font-family: DejaVu Sans;"><tt>。</tt></span></li>
    <li>Running <tt>rake</tt><tt> </tt><tt>doc:rails</tt> will put a full copy of the API documentation for Rails in the <tt>doc/api</tt> folder of your application. Open <tt>doc/api/index.html</tt> in your web browser to explore the API documentation. <span style="font-family: DejaVu Sans;"><span style="font-family: Liberation Serif,Times New Roman,serif;">运行 </span></span><tt>rake</tt><tt> </tt><tt>doc:rails</tt><span style="font-family: DejaVu Sans;"><tt>将会</tt><tt>输出所有</tt></span><tt>Rails</tt><tt> API </tt><span style="font-family: DejaVu Sans;"><tt>的文档到你的应用程序中的</tt></span><tt>doc/api</tt><span style="font-family: DejaVu Sans;"><tt>中。</tt></span></li>
</ul>


<h1><span style="font-family: DejaVu Sans;">因为</span>redcloth<span style="font-family: DejaVu Sans;">的问题文档支持有点故障，虽然找到了一种解决方法但是不够完美以待官方或者来人修复。</span></h1>

<h3><a name="configuration-gotchas"></a><a name="result_box"></a> 14 Configuration Gotchas<span style="font-family: WenQuanYi Micro Hei;">配置陷阱</span></h3>


<p>The easiest way to work with Rails is to store all external data as UTF-8.Rails<span style="font-family: DejaVu Sans;">使用</span>Rails<span style="font-family: DejaVu Sans;">最简单的工作方式是存储所有的外部数据为</span>UTF-8<span style="font-family: DejaVu Sans;">编码。</span>If you don’t, Ruby libraries and Rails will often be able to convert your native data into UTF-8, but this doesn’t always work reliably, so you’re better off ensuring that all external data is UTF-8.<span style="font-family: DejaVu Sans;">如果不那样做，</span>Ruby libraries<span style="font-family: DejaVu Sans;">和</span>Rails<span style="font-family: DejaVu Sans;">通才会转换你的自然数据成</span>UTF-8<span style="font-family: DejaVu Sans;">编码，但是这样不是很可靠，因此你最好保证所有的外部数据是</span>UTF-8<span style="font-family: DejaVu Sans;">编码。</span></p>

<p>If you have made a mistake in this area, the most common symptom is a black diamond with a question mark inside appearing in the browser. <span style="font-family: DejaVu Sans;">如果你在这里犯了错误，一般的症状就是在浏览器中出现钻石符号（可能是</span>^<span style="font-family: DejaVu Sans;">）变成了问号。</span>Another common symptom is characters like “Ã¼” appearing instead of “ü”. <span style="font-family: DejaVu Sans;">另一个普遍症状是<span style="font-family: Liberation Serif,Times New Roman,serif;">“</span></span>ü”<span style="font-family: DejaVu Sans;">变成了<span style="font-family: Liberation Serif,Times New Roman,serif;"> “</span></span>Ã¼”<span style="font-family: DejaVu Sans;">。</span>Rails takes a number of internal<span style="font-family: DejaVu Sans;">内部</span>steps to mitigate<span style="font-family: DejaVu Sans;">减轻</span>common causes of these problems that can be automatically detected<span style="font-family: DejaVu Sans;">检测</span>and corrected. However, if you have external data that is not stored as UTF-8, it can occasionally<span style="font-family: DejaVu Sans;">偶尔</span>result in these kinds of issues that cannot be automatically detected by Rails and corrected<span style="font-family: DejaVu Sans;">更正</span>.</p>

<p>Two very common sources of data that are not UTF-8:<span style="font-family: DejaVu Sans;">两种非常普遍的不是</span>UTF-8 <span style="font-family: DejaVu Sans;">编码的源数据：</span></p>

<ul>
    <li>Your text editor: Most text editors (such as Textmate), default to saving files as UTF-8. If your text editor does not, this can result in special characters that you enter in your templates (such as é) to appear as a diamond with a question mark inside in the browser. This also applies to your I18N translation files. Most editors that do not already default to UTF-8 (such as some versions of Dreamweaver) offer a way to change the default to UTF-8. Do so.</li>
    <li>Your database. Rails defaults to converting data from your database into UTF-8 at the boundary. However, if your database is not using UTF-8 internally, it may not be able to store all characters that your users enter. For instance, if your database is using Latin-1 internally, and your user enters a Russian, Hebrew, or Japanese character, the data will be lost forever once it enters the database. If possible, use UTF-8 as the internal storage of your database.</li>
</ul>

]]></content>
  </entry>
  
</feed>
