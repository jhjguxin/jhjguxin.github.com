<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://jhjguxin.github.com/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.com/"/>
  <updated>2012-01-30T13:37:51+08:00</updated>
  <id>http://jhjguxin.github.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CN guide for push to github pages]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/01/30/cn-guide-for-push-to-github-pages/"/>
    <updated>2012-01-30T13:32:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/01/30/cn-guide-for-push-to-github-pages</id>
    <content type="html"><![CDATA[<h3>CN guide for push to github pages</h3>

<h4>發佈到 GitHub （免費）</h4>

<p>先建立 GitHub Repository ，並使用 username.github.com 命名（如果是組織則用 organization.github.com），例如你的 GitHub 帳號是 john2011 就將 Repository 命名為 john2011.github.com，完成後會得到一組 GitHub Pages URL http://yourname.github.com/ （注意不能用 https: 必須用 http: ）。</p>

<h4>設定 GitHub Pages</h4>

<p>rake setup_github_pages以上執行後會要求 read/write url for repository ：
git@github.com:yourname/yourname.github.com.git</p>

<h4>建立及發佈</h4>

<pre><code>rake generate
rake deploy#發佈到git等待幾分鐘時間，會收到一封信：「[sslab.github.com] Page build successful」，第一次發佈會等比較久，之後每次都會直接更新。 
</code></pre>

<h4>瀏覽 http://yourname.github.com/</h4>

<p>將 source 也加入 git</p>

<pre><code>git add .
git commit -m 'initial source commit'
git push origin source更新 Octopress
</code></pre>

<p>日後有 Octopress 新版本發佈，使用以下指令升級。</p>

<pre><code>git pull octopress master     # Get the latest Octopress
bundle install                # Keep gems updated
rake update_source            # update the template's source
rake update_style             # update the template's style常用指令
</code></pre>

<h4>建立新文章</h4>

<pre><code>rake new_post["how-to-install-octopress"] 常用語法
</code></pre>

<h4>程式碼區塊</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>println 1+2+3</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[posttest]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/01/29/posttest/"/>
    <updated>2012-01-29T23:49:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/01/29/posttest</id>
    <content type="html"><![CDATA[<h1>Liquid template engine</h1>

<h2>Introduction</h2>

<p>Liquid is a template engine which was written with very specific requirements:</p>

<ul>
<li>It has to have beautiful and simple markup. Template engines which don&#8217;t produce good looking markup are no fun to use.</li>
<li>It needs to be non evaling and secure. Liquid templates are made so that users can edit them. You don&#8217;t want to run code on your server which your users wrote.</li>
<li>It has to be stateless. Compile and render steps have to be seperate so that the expensive parsing and compiling can be done once and later on you can just render it passing in a hash with local variables and objects.</li>
</ul>


<h2>Why you should use Liquid</h2>

<ul>
<li>You want to allow your users to edit the appearance of your application but don&#8217;t want them to run <strong>insecure code on your server</strong>.</li>
<li>You want to render templates directly from the database</li>
<li>You like smarty (PHP) style template engines</li>
<li>You need a template engine which does HTML just as well as emails</li>
<li>You don&#8217;t like the markup of your current templating engine</li>
</ul>


<h2>What does it look like?</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;products&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Howto use Liquid</h2>

<p>Liquid supports a very simple API based around the Liquid::Template class.
For standard use you can just pass it the content of a file and call render with a parameters hash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@template</span> <span class="o">=</span> <span class="no">Liquid</span><span class="o">::</span><span class="no">Template</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s2">&quot;hi &quot;</span><span class="p">)</span> <span class="c1"># Parses and compiles the template</span>
</span><span class='line'><span class="vi">@template</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tobi&#39;</span><span class="p">)</span>                <span class="c1"># =&gt; &quot;hi tobi&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://travis-ci.org/Shopify/liquid"><img src="https://secure.travis-ci.org/Shopify/liquid.png" alt="Build Status" /></a></p>

<h1>Template Data</h1>

<p>Jekyll traverses your site looking for files to process. Any files with [[YAML Front Matter]] are subject to processing. For each of these files, Jekyll makes a variety of data available to the pages via the &#8221; templating system&#8221;:http://wiki.github.com/shopify//-for-designers. The following is a reference of the available data.</p>

<p>h2. Global</p>

<p>| <em>Variable</em> | <em>Description</em> |
| @site@ | Sitewide information + Configuration settings from @_config.yml@ |
| @page@ | This is just the [[YAML Front Matter]] with 2 additions: @url@ and @content@. |
| @content@ | In layout files, this contains the content of the subview(s). This is the variable used to insert the rendered content into the layout. This is not used in post files or page files. |
| @paginator@| When the @paginate@ configuration option is set, this variable becomes available for use. |</p>

<p>h2. Site</p>

<p>| <em>Variable</em> | <em>Description</em> |
| @site.time@ | The current Time (when you run the jekyll command). |
| @site.posts@ | A reverse chronological list of all Posts. |
| @site.related_posts@ |If the page being processed is a Post, this contains a list of up to ten related Posts. By default, these are low quality but fast to compute. For high quality but slow to compute results, run the jekyll command with the @&#8211;lsi@ (latent semantic indexing) option. |
| @site.categories.CATEGORY@ | The list of all Posts in category @CATEGORY@. |
| @site.tags.TAG@ | The list of all Posts with tag @TAG@. |
| @site.[CONFIGURATION_DATA]@ | As of <em>0.5.2</em>, all data inside of your @<em>config.yml@ is now available through the @site@ variable. So for example, if you have @url: http://mysite.com@ in your configuration file, then in your posts and pages it can be used like so: <code>http://jhjguxin.github.com</code>. Jekyll does not parse a changed @</em>config.yml@ in @auto@ mode, you have to restart jekyll. |</p>

<p>h2. Page</p>

<p>| <em>Variable</em> | <em>Description</em> |
| @page.url@ | The URL of the Page without the domain. e.g. @/es/index.html@ |
| @page.content@ | The un-rendered content of the Page. |</p>

<p>Note: Any custom front matter that you specify will be available under @page@. For example, if you specify @custom_css: true@ in a page&#8217;s front matter, that value will be available in templates as @page.custom_css@</p>

<p>h2. Post</p>

<p>| <em>Variable</em> | <em>Description</em> |
| @post.title@ | The title of the Post. |
| @post.url@ | The URL of the Post without the domain. e.g. @/2008/12/14/my-post.html@ |
| @post.date@ | The Date assigned to the Post. This can be overridden in a post&#8217;s front matter by specifying a new date/time in the format @YYYY-MM-DD HH:MM:SS@ |
| @post.id@ | An identifier unique to the Post (useful in RSS feeds). e.g. @/2008/12/14/my-post@ |
| @post.categories@ | The list of categories to which this post belongs. Categories are derived from the directory structure above the ==<em>posts== directory. For example, a post at @/work/code/</em>posts/2008-12-24-closures.textile@ would have this field set to @[&#8216;work&#8217;, &#8216;code&#8217;]@. These can also be specified in the [[YAML Front Matter]] |
| @post.tags@ | The list of tags to which this post belongs. These can be specified in the [[YAML Front Matter]] |
| @post.content@ | The rendered content of the Post. |</p>

<p>h2. Paginator</p>

<p><em>note: only available in index files, can be in subdirectory /blog/index.html</em></p>

<p>| <em>Variable</em> | <em>Description</em> |
| @paginator.per_page@ | Number of posts per page. |
| @paginator.posts@ | Posts available for that page. |
| @paginator.total_posts@ | Total number of posts. |
| @paginator.total_pages@ | Total number of pages. |
| @paginator.page@ | The number of the current page. |
| @paginator.previous_page@ | The number of the previous page. |
| @paginator.next_page@ | The number of the next page. |</p>
]]></content>
  </entry>
  
</feed>
