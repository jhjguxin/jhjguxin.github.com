<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.com/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.com/"/>
  <updated>2012-10-15T01:03:49+08:00</updated>
  <id>http://jhjguxin.github.com/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过mongodump和mongorestore实现Mongodb备份和恢复 --by chenzhou123520]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/10/08/tong-guo-mongodumphe-mongorestoreshi-xian-mongodbbei-fen-he-hui-fu-by-chenzhou123520/"/>
    <updated>2012-10-08T22:29:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/10/08/tong-guo-mongodumphe-mongorestoreshi-xian-mongodbbei-fen-he-hui-fu-by-chenzhou123520</id>
    <content type="html"><![CDATA[<h2>通过mongodump和mongorestore实现Mongodb备份和恢复 &#8211;by chenzhou123520</h2>

<p>from <a href="http://chenzhou123520.iteye.com/blog/1630993">http://chenzhou123520.iteye.com/blog/1630993</a></p>

<p>Mongodb自带了mongodump和mongorestore这两个工具来实现对数据的备份和恢复。</p>

<p>mongodump能够在Mongodb运行时进行备份，它的工作原理是对运行的Mongodb做查询，然后将所有查到的文档写入磁盘。但是存在的问题时使用mongodump产生的备份不一定是数据库的实时快照，如果我们在备份时对数据库进行了写入操作，则备份出来的文件可能不完全和Mongodb实时数据相等。另外在备份时可能会对其它客户端性能产生不利的影响。</p>

<p>mongodump用法如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongodump --help
Export MongoDB data to BSON files.

options:
  --help                   produce help message
  -v [ --verbose ]         be more verbose (include multiple times for more
                           verbosity e.g. -vvvvv)
  --version                print the program&#039;s version and exit
  -h [ --host ] arg        mongo host to connect to ( &lt;set name&gt;/s1,s2 for
                           sets)
  --port arg               server port. Can also use --host hostname:port
  --ipv6                   enable IPv6 support (disabled by default)
  -u [ --username ] arg    username
  -p [ --password ] arg    password
  --dbpath arg             directly access mongod database files in the given
                           path, instead of connecting to a mongod  server -
                           needs to lock the data directory, so cannot be used
                           if a mongod is currently accessing the same path
  --directoryperdb         if dbpath specified, each db is in a separate
                           directory
  --journal                enable journaling
  -d [ --db ] arg          database to use
  -c [ --collection ] arg  collection to use (some commands)
  -o [ --out ] arg (=dump) output directory or &quot;-&quot; for stdout
  -q [ --query ] arg       json query
  --oplog                  Use oplog for point-in-time snapshotting
  --repair                 try to recover a crashed database
  --forceTableScan         force a table scan (do not use $snapshot)</pre>


<p>参数说明：</p>

<p>-h:指明数据库宿主机的IP</p>

<p>-u:指明数据库的用户名</p>

<p>-p:指明数据库的密码</p>

<p>-d:指明数据库的名字</p>

<p>-c:指明collection的名字</p>

<p>-o:指明到要导出的文件名</p>

<p>-q:指明导出数据的过滤条件</p>

<p>具体使用示例如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongodump -d test -o data/backup
connected to: 127.0.0.1
DATABASE: test   to     data/backup/test
    test.system.indexes to data/backup/test/system.indexes.bson
         9 objects
    test.users to data/backup/test/users.bson
         3 objects
    test.games to data/backup/test/games.bson
         1 objects
    test.blog.post to data/backup/test/blog.post.bson
         1 objects
    test.lists to data/backup/test/lists.bson
         1 objects
    test.math to data/backup/test/math.bson
         1 objects
    test.map to data/backup/test/map.bson
         8 objects
    test.my_collection to data/backup/test/my_collection.bson
         0 objects
    test.foo to data/backup/test/foo.bson
         6 objects
    test.system.users to data/backup/test/system.users.bson
         1 objects</pre>


<p>mongorestore是Mongodb从备份中恢复数据的工具，它主要用来获取mongodump的输出结果，并将备份的数据插入到运行的Mongodb中。</p>

<p>mongorestore命令使用方法如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongorestore --help
usage: ./bin/mongorestore [options] [directory or filename to restore from]
options:
  --help                  produce help message
  -v [ --verbose ]        be more verbose (include multiple times for more
                          verbosity e.g. -vvvvv)
  --version               print the program&#039;s version and exit
  -h [ --host ] arg       mongo host to connect to ( &lt;set name&gt;/s1,s2 for sets)
  --port arg              server port. Can also use --host hostname:port
  --ipv6                  enable IPv6 support (disabled by default)
  -u [ --username ] arg   username
  -p [ --password ] arg   password
  --dbpath arg            directly access mongod database files in the given
                          path, instead of connecting to a mongod  server -
                          needs to lock the data directory, so cannot be used
                          if a mongod is currently accessing the same path
  --directoryperdb        if dbpath specified, each db is in a separate
                          directory
  --journal               enable journaling
  -d [ --db ] arg         database to use
  -c [ --collection ] arg collection to use (some commands)
  --objcheck              validate object before inserting
  --filter arg            filter to apply before inserting
  --drop                  drop each collection before import
  --oplogReplay           replay oplog for point-in-time restore
  --keepIndexVersion      don&#039;t upgrade indexes to newest version</pre>


<p>参数说明：</p>

<p>-h:指明数据库宿主机的IP</p>

<p>-u:指明数据库的用户名</p>

<p>-p:指明数据库的密码</p>

<p>-d:指明数据库的名字</p>

<p>-c:指明collection的名字</p>

<p>-o:指明到要备份的文件名</p>

<p>-q:指明备份数据的过滤条件</p>

<p>&nbsp;</p>

<p>具体使用示例如下：</p>

<pre>[root@localhost mongodb]# ./bin/mongorestore -d test --drop data/backup/test/
connected to: 127.0.0.1
Tue Aug 14 01:18:17 data/backup/test/games.bson
Tue Aug 14 01:18:17      going into namespace [test.games]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/foo.bson
Tue Aug 14 01:18:17      going into namespace [test.foo]
Tue Aug 14 01:18:17      dropping
6 objects found
Tue Aug 14 01:18:17 data/backup/test/blog.post.bson
Tue Aug 14 01:18:17      going into namespace [test.blog.post]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/lists.bson
Tue Aug 14 01:18:17      going into namespace [test.lists]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/map.bson
Tue Aug 14 01:18:17      going into namespace [test.map]
Tue Aug 14 01:18:17      dropping
8 objects found
Tue Aug 14 01:18:17 data/backup/test/math.bson
Tue Aug 14 01:18:17      going into namespace [test.math]
Tue Aug 14 01:18:17      dropping
1 objects found
Tue Aug 14 01:18:17 data/backup/test/system.users.bson
Tue Aug 14 01:18:17      going into namespace [test.system.users]
1 objects found
Tue Aug 14 01:18:17 data/backup/test/my_collection.bson
Tue Aug 14 01:18:17      going into namespace [test.my_collection]
Tue Aug 14 01:18:17      dropping
Tue Aug 14 01:18:17 file data/backup/test/my_collection.bson empty, skipping
Tue Aug 14 01:18:17 data/backup/test/users.bson
Tue Aug 14 01:18:17      going into namespace [test.users]
Tue Aug 14 01:18:17      dropping
3 objects found
Tue Aug 14 01:18:17 data/backup/test/system.indexes.bson
Tue Aug 14 01:18:17      going into namespace [test.system.indexes]
Tue Aug 14 01:18:17      dropping
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.users&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.games&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.blog.post&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.lists&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.math&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.map&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { gps: &quot;2d&quot; }, ns: &quot;test.map&quot;, name: &quot;gps_&quot;, min: -180.0, max: 181.0 }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.foo&quot;, name: &quot;_id_&quot; }
Tue Aug 14 01:18:17 { key: { _id: 1 }, ns: &quot;test.system.users&quot;, name: &quot;_id_&quot; }
9 objects found</pre>


<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby on Rails 4.0 Release Notes]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/10/06/ruby-on-rails-4-dot-0-release-notes/"/>
    <updated>2012-10-06T19:46:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/10/06/ruby-on-rails-4-dot-0-release-notes</id>
    <content type="html"><![CDATA[<h2>Ruby on Rails 4.0 Release Notes</h2>

<h1>sources:</h1>


<p><a href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md">https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md</a></p>

<p><a href="http://edgeguides.rubyonrails.org/4_0_release_notes.html">http://edgeguides.rubyonrails.org/4_0_release_notes.html</a></p>

<h1>Ruby on Rails 4.0 Release Notes</h1>


<p>Highlights in Rails 4.0: (WIP)</p>

<ul>
    <li>Ruby 1.9.3 only</li>
    <li>Strong Parameters</li>
    <li>Queue API</li>
    <li>Caching Improvements</li>
</ul>


<p>These release notes cover the major changes, but do not include each bug-fix and changes. If you want to see everything, check out the <a href="https://github.com/rails/rails/commits/master">list of commits</a> in the main Rails repository on GitHub.</p>

<hr />




<h2><a name="upgrading-to-rails-40" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#upgrading-to-rails-40"></a>Upgrading to Rails 4.0</h2>


<p>TODO. This is a WIP guide.</p>

<p>If you&#8217;re upgrading an existing application, it&#8217;s a great idea to have good test coverage before going in. You should also first upgrade to Rails 3.2 in case you haven&#8217;t and make sure your application still runs as expected before attempting an update to Rails 4.0. Then take heed of the following changes:</p>

<h3><a name="rails-40-requires-at-least-ruby-193" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#rails-40-requires-at-least-ruby-193"></a>Rails 4.0 requires at least Ruby 1.9.3</h3>


<p>Rails 4.0 requires Ruby 1.9.3 or higher. Support for all of the previous Ruby versions has been dropped officially and you should upgrade as early as possible.</p>

<h3><a name="what-to-update-in-your-apps" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#what-to-update-in-your-apps"></a>What to update in your apps</h3>


<ul>
    <li>Update your Gemfile to depend on
<ul>
    <li><code>rails = 4.0.0</code></li>
    <li><code>sass-rails ~&gt; 3.2.3</code></li>
    <li><code>coffee-rails ~&gt; 3.2.1</code></li>
    <li><code>uglifier &gt;= 1.0.3</code></li>
</ul>
</li>
</ul>


<p>TODO: Update the versions above.</p>

<ul>
    <li>Rails 4.0 removes <code>vendor/plugins</code> completely. You have to replace these plugins by extracting them as gems and adding them in your Gemfile. If you choose not to make them gems, you can move them into, say, <code>lib/my_plugin/*</code> and add an appropriate initializer in <code>config/initializers/my_plugin.rb</code>.</li>
</ul>


<p>TODO: Configuration changes in environment files</p>

<h2><a name="creating-a-rails-40-application" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#creating-a-rails-40-application"></a>Creating a Rails 4.0 application</h2>


<pre>&lt;code&gt; You should have the &#039;rails&#039; rubygem installed $ rails new myapp $ cd myapp &lt;/code&gt;</pre>


<h3><a name="vendoring-gems" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#vendoring-gems"></a>Vendoring Gems</h3>


<p>Rails now uses a <code>Gemfile</code> in the application root to determine the gems you require for your application to start. This <code>Gemfile</code> is processed by the <a href="https://github.com/carlhuda/bundler">Bundler</a> gem, which then installs all your dependencies. It can even install all the dependencies locally to your application so that it doesn&#8217;t depend on the system gems.</p>

<p>More information: <a href="http://gembundler.com/">Bundler homepage</a></p>

<h3><a name="living-on-the-edge" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#living-on-the-edge"></a>Living on the Edge</h3>


<p><code>Bundler</code> and <code>Gemfile</code> makes freezing your Rails application easy as pie with the new dedicated <code>bundle</code> command. If you want to bundle straight from the Git repository, you can pass the <code>--edge</code> flag:</p>

<pre>&lt;code&gt;$ rails new myapp --edge &lt;/code&gt;</pre>


<p>If you have a local checkout of the Rails repository and want to generate an application using that, you can pass the <code>--dev</code> flag:</p>

<pre>&lt;code&gt;$ ruby /path/to/rails/railties/bin/rails new myapp --dev &lt;/code&gt;</pre>


<h2><a name="major-features" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#major-features"></a>Major Features</h2>


<h2><a name="documentation" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#documentation"></a>Documentation</h2>


<ul>
    <li>Guides are rewritten in GitHub Flavored Markdown.</li>
</ul>


<h2><a name="railties" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#railties"></a>Railties</h2>


<ul>
    <li>Allow scaffold/model/migration generators to accept a <code>polymorphic</code> modifier for <code>references</code>/<code>belongs_to</code>, for instance
<pre>&lt;code&gt;rails g model Product supplier:references{polymorphic} &lt;/code&gt;</pre>
will generate the model with <code>belongs_to :supplier, polymorphic: true</code> association and appropriate migration.</li>
    <li>Set <code>config.active_record.migration_error</code> to <code>:page_load</code> for development.</li>
    <li>Add runner to <code>Rails::Railtie</code> as a hook called just after runner starts.</li>
    <li>Add <code>/rails/info/routes</code> path which displays the same information as <code>rake routes</code>.</li>
    <li>Improved <code>rake routes</code> output for redirects.</li>
    <li>Load all environments available in <code>config.paths["config/environments"]</code>.</li>
    <li>Add <code>config.queue_consumer</code> to allow the default consumer to be configurable.</li>
    <li>Add <code>Rails.queue</code> as an interface with a default implementation that consumes jobs in a separate thread.</li>
    <li>Remove <code>Rack::SSL</code> in favour of <code>ActionDispatch::SSL</code>.</li>
    <li>Allow to set class that will be used to run as a console, other than IRB, with <code>Rails.application.config.console=</code>. It&#8217;s best to add it to console block.
<div>
<pre># it can be added to config/application.rb
console do
  # this block is called only when running console,
  # so we can safely require pry here
  require &quot;pry&quot;
  config.console = Pry
end</pre>
</div></li>
    <li>Add a convenience method <code>hide!</code> to Rails generators to hide the current generator namespace from showing when running<code>rails generate</code>.</li>
    <li>Scaffold now uses <code>content_tag_for</code> in <code>index.html.erb</code>.</li>
    <li><code>Rails::Plugin</code> is removed. Instead of adding plugins to <code>vendor/plugins</code>, use gems or bundler with path or git dependencies.</li>
</ul>


<h3><a name="deprecations" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations"></a>Deprecations</h3>


<h2><a name="action-mailer" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-mailer"></a>Action Mailer</h2>


<ul>
    <li>Allow to set default Action Mailer options via <code>config.action_mailer.default_options=</code>.</li>
    <li>Raise an <code>ActionView::MissingTemplate</code> exception when no implicit template could be found.</li>
    <li>Asynchronously send messages via the Rails Queue.</li>
    <li>Delivery Options (such as SMTP Settings) can now be set dynamically per mailer action.Delivery options are set via <tt>:delivery_method_options</tt> key on mail.
<div>
<pre>def welcome_mailer(user,company)
  delivery_options = { user_name: company.smtp_user, password: company.smtp_password, address: company.smtp_host }
  mail(to: user.email, subject: &quot;Welcome!&quot;, delivery_method_options: delivery_options)
end</pre>
</div></li>
</ul>


<h2><a name="action-pack" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-pack"></a>Action Pack</h2>


<h3><a name="action-controller" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-controller"></a>Action Controller</h3>


<ul>
    <li>Add <code>ActionController::Flash.add_flash_types</code> method to allow people to register their own flash types. e.g.:
<div>
<pre>class ApplicationController
  add_flash_types :error, :warning
end</pre>
</div>
If you add the above code, you can use <code>&lt;%= error %&gt;</code> in an erb, and <code>redirect_to /foo, :error =&gt; 'message'</code> in a controller.</li>
    <li>Remove Active Model dependency from Action Pack.</li>
    <li>Support unicode characters in routes. Route will be automatically escaped, so instead of manually escaping:
<div>
<pre>get Rack::Utils.escape(&#039;こんにちは&#039;) =&gt; &#039;home#index&#039;</pre>
</div>
You just have to write the unicode route:
<div>
<pre>get &#039;こんにちは&#039; =&gt; &#039;home#index&#039;</pre>
</div></li>
    <li>Return proper format on exceptions.</li>
    <li>Extracted redirect logic from <code>ActionController::ForceSSL::ClassMethods.force_ssl</code> into<code>ActionController::ForceSSL#force_ssl_redirect</code>.</li>
    <li>URL path parameters with invalid encoding now raise <code>ActionController::BadRequest</code>.</li>
    <li>Malformed query and request parameter hashes now raise <code>ActionController::BadRequest</code>.</li>
    <li><code>respond_to</code> and <code>respond_with</code> now raise <code>ActionController::UnknownFormat</code> instead of directly returning head 406. The exception is rescued and converted to 406 in the exception handling middleware.</li>
    <li>JSONP now uses <code>application/javascript</code> instead of <code>application/json</code> as the MIME type.</li>
    <li>Session arguments passed to process calls in functional tests are now merged into the existing session, whereas previously they would replace the existing session. This change may break some existing tests if they are asserting the exact contents of the session but should not break existing tests that only assert individual keys.</li>
    <li>Forms of persisted records use always PATCH (via the <code>_method</code> hack).</li>
    <li>For resources, both PATCH and PUT are routed to the <code>update</code> action.</li>
    <li>Don&#8217;t ignore <code>force_ssl</code> in development. This is a change of behavior - use an <code>:if</code> condition to recreate the old behavior.
<div>
<pre>class AccountsController &lt; ApplicationController
  force_ssl :if =&gt; :ssl_configured?

  def ssl_configured?
    !Rails.env.development?
  end
end</pre>
</div></li>
</ul>


<h4><a name="deprecations-1" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-1"></a>Deprecations</h4>


<ul>
    <li>Deprecated <code>ActionController::Integration</code> in favour of <code>ActionDispatch::Integration</code>.</li>
    <li>Deprecated <code>ActionController::IntegrationTest</code> in favour of <code>ActionDispatch::IntegrationTest</code>.</li>
    <li>Deprecated <code>ActionController::PerformanceTest</code> in favour of <code>ActionDispatch::PerformanceTest</code>.</li>
    <li>Deprecated <code>ActionController::AbstractRequest</code> in favour of <code>ActionDispatch::Request</code>.</li>
    <li>Deprecated <code>ActionController::Request</code> in favour of <code>ActionDispatch::Request</code>.</li>
    <li>Deprecated <code>ActionController::AbstractResponse</code> in favour of <code>ActionDispatch::Response</code>.</li>
    <li>Deprecated <code>ActionController::Response</code> in favour of <code>ActionDispatch::Response</code>.</li>
    <li>Deprecated <code>ActionController::Routing</code> in favour of <code>ActionDispatch::Routing</code>.</li>
</ul>


<h3><a name="action-dispatch" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-dispatch"></a>Action Dispatch</h3>


<ul>
    <li>Add Routing Concerns to declare common routes that can be reused inside others resources and routes.Code before:
<div>
<pre>resources :messages do
  resources :comments
end

resources :posts do
  resources :comments
  resources :images, only: :index
end</pre>
</div>
Code after:
<div>
<pre>concern :commentable do
  resources :comments
end

concern :image_attachable do
  resources :images, only: :index
end

resources :messages, concerns: :commentable

resources :posts, concerns: [:commentable, :image_attachable]</pre>
</div></li>
    <li>Show routes in exception page while debugging a <code>RoutingError</code> in development.</li>
    <li>Include <code>mounted_helpers</code> (helpers for accessing mounted engines) in <code>ActionDispatch::IntegrationTest</code> by default.</li>
    <li>Added <code>ActionDispatch::SSL</code> middleware that when included force all the requests to be under HTTPS protocol.</li>
    <li>Copy literal route constraints to defaults so that url generation know about them. The copied constraints are <code>:protocol</code>,<code>:subdomain</code>, <code>:domain</code>, <code>:host</code> and <code>:port</code>.</li>
    <li>Allows <code>assert_redirected_to</code> to match against a regular expression.</li>
    <li>Adds a backtrace to the routing error page in development.</li>
    <li><code>assert_generates</code>, <code>assert_recognizes</code>, and <code>assert_routing</code> all raise <code>Assertion</code> instead of <code>RoutingError</code>.</li>
    <li>Allows the route helper root to take a string argument. For example, <code>root 'pages#main'</code> as a shortcut for<code>root to: 'pages#main'</code>.</li>
    <li>Adds support for the PATCH verb: Request objects respond to <code>patch?</code>. Routes now have a new <code>patch</code> method, and understand <code>:patch</code> in the existing places where a verb is configured, like <code>:via</code>. Functional tests have a new method <code>patch</code>and integration tests have a new method <code>patch_via_redirect</code>. If <code>:patch</code> is the default verb for updates, edits are tunneled as<code>PATCH</code> rather than as <code>PUT</code> and routing acts accordingly.</li>
    <li>Integration tests support the OPTIONS method.</li>
    <li><code>expires_in</code> accepts a <code>must_revalidate</code> flag. If true, &#8220;must-revalidate&#8221; is added to the <code>Cache-Control</code> header.</li>
    <li>Default responder will now always use your overridden block in <code>respond_with</code> to render your response.</li>
    <li>Turn off verbose mode of <code>rack-cache</code>, we still have <code>X-Rack-Cache</code> to check that info.</li>
</ul>


<h4><a name="deprecations-2" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-2"></a>Deprecations</h4>


<h3><a name="action-view" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#action-view"></a>Action View</h3>


<ul>
    <li>Remove Active Model dependency from Action Pack.</li>
    <li>Allow to use <code>mounted_helpers</code> (helpers for accessing mounted engines) in <code>ActionView::TestCase</code>.</li>
    <li>Make current object and counter (when it applies) variables accessible when rendering templates with <code>:object</code> or<code>:collection</code>.</li>
    <li>Allow to lazy load <code>default_form_builder</code> by passing a string instead of a constant.</li>
    <li>Add index method to <code>FormBuilder</code> class.</li>
    <li>Adds support for layouts when rendering a partial with a given collection.</li>
    <li>Remove <code>:disable_with</code> in favor of <code>data-disable-with</code> option from <code>submit_tag</code>, <code>button_tag</code> and <code>button_to</code> helpers.</li>
    <li>Remove <code>:mouseover</code> option from <code>image_tag</code> helper.</li>
    <li>Templates without a handler extension now raises a deprecation warning but still defaults to <code>ERb</code>. In future releases, it will simply return the template content.</li>
    <li>Add a <code>divider</code> option to <code>grouped_options_for_select</code> to generate a separator optgroup automatically, and deprecate prompt as third argument, in favor of using an options hash.</li>
    <li>Add <code>time_field</code> and <code>time_field_tag</code> helpers which render an <code>input[type="time"]</code> tag.</li>
    <li>Removed old <code>text_helper</code> apis for <code>highlight</code>, <code>excerpt</code> and <code>word_wrap</code>.</li>
    <li>Remove the leading \n added by textarea on <code>assert_select</code>.</li>
    <li>Changed default value for <code>config.action_view.embed_authenticity_token_in_remote_forms</code> to false. This change breaks remote forms that need to work also without JavaScript, so if you need such behavior, you can either set it to true or explicitly pass <code>:authenticity_token =&gt; true</code> in form options.</li>
    <li>Make possible to use a block in <code>button_to</code> helper if button text is hard to fit into the name parameter:
<div>
<pre>&lt;%= button_to [:make_happy, @user] do %&gt;
  Make happy &lt;strong&gt;&lt;%= @user.name %&gt;&lt;/strong&gt;
&lt;% end %&gt;
# =&gt; &quot;&lt;form method=&quot;post&quot; action=&quot;/users/1/make_happy&quot;n&quot; style=&quot;margin: 0px; padding: 0px; border: 0px; &quot;&gt;button_to&quot;&gt;
#      &lt;div&gt;
#        &lt;button type=&quot;submit&quot;&gt;
#          Make happy &lt;strong&gt;Name&lt;/strong&gt;
#        &lt;/button&gt;
#      &lt;/div&gt;
#    &lt;/form&gt;&quot;</pre>
</div></li>
    <li>Replace <code>include_seconds</code> boolean argument with <code>:include_seconds =&gt; true</code> option in <code>distance_of_time_in_words</code> and<code>time_ago_in_words</code> signature.</li>
    <li>Remove <code>button_to_function</code> and <code>link_to_function</code> helpers.</li>
    <li><code>truncate</code> now always returns an escaped HTML-safe string. The option <code>:escape</code> can be used as <code>false</code> to not escape the result.</li>
    <li><code>truncate</code> now accepts a block to show extra content when the text is truncated.</li>
    <li>Add <code>week_field</code>, <code>week_field_tag</code>, <code>month_field</code>, <code>month_field_tag</code>, <code>datetime_local_field</code>,<code>datetime_local_field_tag</code>, <code>datetime_field</code> and <code>datetime_field_tag</code> helpers.</li>
    <li>Add <code>color_field</code> and <code>color_field_tag</code> helpers.</li>
    <li>Add <code>include_hidden</code> option to select tag. With <code>:include_hidden =&gt; false</code> select with multiple attribute doesn&#8217;t generate hidden input with blank value.</li>
    <li>Removed default size option from the <code>text_field</code>, <code>search_field</code>, <code>telephone_field</code>, <code>url_field</code>, <code>email_field</code> helpers.</li>
    <li>Removed default cols and rows options from the <code>text_area</code> helper.</li>
    <li>Adds <code>image_url</code>, <code>javascript_url</code>, <code>stylesheet_url</code>, <code>audio_url</code>, <code>video_url</code>, and <code>font_url</code> to assets tag helper. These URL helpers will return the full path to your assets. This is useful when you are going to reference this asset from external host.</li>
    <li>Allow <code>value_method</code> and <code>text_method</code> arguments from <code>collection_select</code> and <code>options_from_collection_for_select</code> to receive an object that responds to <code>:call</code> such as a proc, to evaluate the option in the current element context. This works the same way with <code>collection_radio_buttons</code> and <code>collection_check_boxes</code>.</li>
    <li>Add <code>date_field</code> and <code>date_field_tag</code> helpers which render an <code>input[type="date"]</code> tag.</li>
    <li>Add <code>collection_check_boxes</code> form helper, similar to <code>collection_select</code>:
<div>
<pre>collection_check_boxes :post, :author_ids, Author.all, :id, :name
# Outputs something like:
&lt;input id=&quot;post_author_ids_1&quot; name=&quot;post[author_ids][]&quot; type=&quot;checkbox&quot; value=&quot;1&quot; /&gt;
&lt;label for=&quot;post_author_ids_1&quot;&gt;D. Heinemeier Hansson&lt;/label&gt;
&lt;input id=&quot;post_author_ids_2&quot; name=&quot;post[author_ids][]&quot; type=&quot;checkbox&quot; value=&quot;2&quot; /&gt;
&lt;label for=&quot;post_author_ids_2&quot;&gt;D. Thomas&lt;/label&gt;
&lt;input name=&quot;post[author_ids][]&quot; type=&quot;hidden&quot; value=&quot;&quot; /&gt;</pre>
</div>
The label/check_box pairs can be customized with a block.</li>
    <li>Add <code>collection_radio_buttons</code> form helper, similar to <code>collection_select</code>:
<div>
<pre>collection_radio_buttons :post, :author_id, Author.all, :id, :name
# Outputs something like:
&lt;input id=&quot;post_author_id_1&quot; name=&quot;post[author_id]&quot; type=&quot;radio&quot; value=&quot;1&quot; /&gt;
&lt;label for=&quot;post_author_id_1&quot;&gt;D. Heinemeier Hansson&lt;/label&gt;
&lt;input id=&quot;post_author_id_2&quot; name=&quot;post[author_id]&quot; type=&quot;radio&quot; value=&quot;2&quot; /&gt;
&lt;label for=&quot;post_author_id_2&quot;&gt;D. Thomas&lt;/label&gt;</pre>
</div>
The label/radio_button pairs can be customized with a block.</li>
    <li><code>check_box</code> with an HTML5 attribute <code>:form</code> will now replicate the <code>:form</code> attribute to the hidden field as well.</li>
    <li>label form helper accepts <code>:for =&gt; nil</code> to not generate the attribute.</li>
    <li>Add <code>:format</code> option to <code>number_to_percentage</code>.</li>
    <li>Add <code>config.action_view.logger</code> to configure logger for <code>Action View</code>.</li>
    <li><code>check_box</code> helper with <code>:disabled =&gt; true</code> will generate a <code>disabled</code> hidden field to conform with the HTML convention where disabled fields are not submitted with the form. This is a behavior change, previously the hidden tag had a value of the disabled checkbox.</li>
    <li><code>favicon_link_tag</code> helper will now use the favicon in <code>app/assets</code> by default.</li>
    <li><code>ActionView::Helpers::TextHelper#highlight</code> now defaults to the HTML5 <code>mark</code> element.</li>
</ul>


<h4><a name="deprecations-3" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-3"></a>Deprecations</h4>


<h3><a name="sprockets" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#sprockets"></a>Sprockets</h3>


<p>Moved into a separate gem <code>sprockets-rails</code>.</p>

<h2><a name="active-record" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-record"></a>Active Record</h2>


<ul>
    <li>Add <code>add_reference</code> and <code>remove_reference</code> schema statements. Aliases, <code>add_belongs_to</code> and <code>remove_belongs_to</code> are acceptable. References are reversible.
<div>
<pre># Create a user_id column
add_reference(:products, :user)

# Create a supplier_id, supplier_type columns and appropriate index
add_reference(:products, :supplier, polymorphic: true, index: true)

# Remove polymorphic reference
remove_reference(:products, :supplier, polymorphic: true)</pre>
</div></li>
    <li>Add <code>:default</code> and <code>:null</code> options to <code>column_exists?</code>.
<div>
<pre>column_exists?(:testings, :taggable_id, :integer, null: false)
column_exists?(:testings, :taggable_type, :string, default: &#039;Photo&#039;)</pre>
</div></li>
    <li><code>ActiveRecord::Relation#inspect</code> now makes it clear that you are dealing with a <code>Relation</code> object rather than an array:
<div>
<pre>User.where(:age =&gt; 30).inspect
# =&gt; &lt;ActiveRecord::Relation [#&lt;User ...&gt;, #&lt;User ...&gt;]&gt;

User.where(:age =&gt; 30).to_a.inspect
# =&gt; [#&lt;User ...&gt;, #&lt;User ...&gt;]</pre>
</div>
if more than 10 items are returned by the relation, inspect will only show the first 10 followed by ellipsis.</li>
    <li>Add <code>:collation</code> and <code>:ctype</code> support to PostgreSQL. These are available for PostgreSQL 8.4 or later.
<div>
<pre>development:
  adapter: postgresql
  host: localhost
  database: rails_development
  username: foo
  password: bar
  encoding: UTF8
  collation: ja_JP.UTF8
  ctype: ja_JP.UTF8</pre>
</div></li>
    <li><code>FinderMethods#exists?</code> now returns <code>false</code> with the <code>false</code> argument.</li>
    <li>Added support for specifying the precision of a timestamp in the postgresql adapter. So, instead of having to incorrectly specify the precision using the <code>:limit</code> option, you may use <code>:precision</code>, as intended. For example, in a migration:
<div>
<pre>def change
  create_table :foobars do |t|
    t.timestamps :precision =&gt; 0
  end
end</pre>
</div></li>
    <li>Allow <code>ActiveRecord::Relation#pluck</code> to accept multiple columns. Returns an array of arrays containing the typecasted values:
<div>
<pre>Person.pluck(:id, :name)
# SELECT people.id, people.name FROM people
# =&gt; [[1, &#039;David&#039;], [2, &#039;Jeremy&#039;], [3, &#039;Jose&#039;]]</pre>
</div></li>
    <li>Improve the derivation of HABTM join table name to take account of nesting. It now takes the table names of the two models, sorts them lexically and then joins them, stripping any common prefix from the second table name. Some examples:
<pre>&lt;code&gt;Top level models (Category &amp;lt;=&amp;gt; Product) Old: categories_products New: categories_products Top level models with a global table_name_prefix (Category &amp;lt;=&amp;gt; Product) Old: site_categories_products New: site_categories_products Nested models in a module without a table_name_prefix method (Admin::Category &amp;lt;=&amp;gt; Admin::Product) Old: categories_products New: categories_products Nested models in a module with a table_name_prefix method (Admin::Category &amp;lt;=&amp;gt; Admin::Product) Old: categories_products New: admin_categories_products Nested models in a parent model (Catalog::Category &amp;lt;=&amp;gt; Catalog::Product) Old: categories_products New: catalog_categories_products Nested models in different parent models (Catalog::Category &amp;lt;=&amp;gt; Content::Page) Old: categories_pages New: catalog_categories_content_pages &lt;/code&gt;</pre>
</li>
    <li>Move HABTM validity checks to <code>ActiveRecord::Reflection</code>. One side effect of this is to move when the exceptions are raised from the point of declaration to when the association is built. This is consistant with other association validity checks.</li>
    <li>Added <code>stored_attributes</code> hash which contains the attributes stored using <code>ActiveRecord::Store</code>. This allows you to retrieve the list of attributes you&#8217;ve defined.
<div>
<pre>class User &lt; ActiveRecord::Base
  store :settings, accessors: [:color, :homepage]
end

User.stored_attributes[:settings] # [:color, :homepage]</pre>
</div></li>
    <li>PostgreSQL default log level is now &#8216;warning&#8217;, to bypass the noisy notice messages. You can change the log level using the<code>min_messages</code> option available in your <code>config/database.yml</code>.</li>
    <li>Add uuid datatype support to PostgreSQL adapter.</li>
    <li>Added <code>ActiveRecord::Migration.check_pending!</code> that raises an error if migrations are pending.</li>
    <li>Added <code>#destroy!</code> which acts like <code>#destroy</code> but will raise an <code>ActiveRecord::RecordNotDestroyed</code> exception instead of returning <code>false</code>.</li>
    <li>Allow blocks for count with <code>ActiveRecord::Relation</code>, to work similar as <code>Array#count</code>:<code>Person.where("age &gt; 26").count { |person| person.gender == 'female' }</code></li>
    <li>Added support to <code>CollectionAssociation#delete</code> for passing fixnum or string values as record ids. This finds the records responding to the ids and deletes them.
<div>
<pre>class Person &lt; ActiveRecord::Base
  has_many :pets
end

person.pets.delete(&quot;1&quot;)  # =&gt; [#&lt;Pet id: 1&gt;]
person.pets.delete(2, 3) # =&gt; [#&lt;Pet id: 2&gt;, #&lt;Pet id: 3&gt;]</pre>
</div></li>
    <li>It&#8217;s not possible anymore to destroy a model marked as read only.</li>
    <li>Added ability to <code>ActiveRecord::Relation#from</code> to accept other <code>ActiveRecord::Relation</code> objects.</li>
    <li>Added custom coders support for <code>ActiveRecord::Store</code>. Now you can set your custom coder like this:
<div>
<pre>store :settings, accessors: [ :color, :homepage ], coder: JSON</pre>
</div></li>
    <li><code>mysql</code> and <code>mysql2</code> connections will set <code>SQL_MODE=STRICT_ALL_TABLES</code> by default to avoid silent data loss. This can be disabled by specifying <code>strict: false</code> in <code>config/database.yml</code>.</li>
    <li>Added default order to <code>ActiveRecord::Base#first</code> to assure consistent results among different database engines. Introduced<code>ActiveRecord::Base#take</code> as a replacement to the old behavior.</li>
    <li>Added an <code>:index</code> option to automatically create indexes for <code>references</code> and <code>belongs_to</code> statements in migrations. This can be either a boolean or a hash that is identical to options available to the <code>add_index</code> method:
<div>
<pre>create_table :messages do |t|
  t.references :person, :index =&gt; true
end</pre>
</div>
Is the same as:
<div>
<pre>create_table :messages do |t|
  t.references :person
end
add_index :messages, :person_id</pre>
</div>
Generators have also been updated to use the new syntax.</li>
    <li>Added bang methods for mutating <code>ActiveRecord::Relation</code> objects. For example, while <code>foo.where(:bar)</code> will return a new object leaving foo unchanged, <code>foo.where!(:bar)</code> will mutate the foo object.</li>
    <li>Added <code>#find_by</code> and <code>#find_by!</code> to mirror the functionality provided by dynamic finders in a way that allows dynamic input more easily:
<div>
<pre>Post.find_by name: &#039;Spartacus&#039;, rating: 4
Post.find_by &quot;published_at &lt; ?&quot;, 2.weeks.ago
Post.find_by! name: &#039;Spartacus&#039;</pre>
</div></li>
    <li>Added <code>ActiveRecord::Base#slice</code> to return a hash of the given methods with their names as keys and returned values as values.</li>
    <li>Remove IdentityMap - IdentityMap has never graduated to be an &#8220;enabled-by-default&#8221; feature, due to some inconsistencies with associations, as described in this <a href="https://github.com/rails/rails/commit/302c912bf6bcd0fa200d964ec2dc4a44abe328a6">commit</a>. Hence the removal from the codebase, until such issues are fixed.</li>
    <li>Added a feature to dump/load internal state of <code>SchemaCache</code> instance because we want to boot more quickly when we have many models.
<div>
<pre># execute rake task.
RAILS_ENV=production bundle exec rake db:schema:cache:dump
=&gt; generate db/schema_cache.dump

# add config.use_schema_cache_dump = true in config/production.rb. BTW, true is default.

# boot rails.
RAILS_ENV=production bundle exec rails server
=&gt; use db/schema_cache.dump

# If you remove clear dumped cache, execute rake task.
RAILS_ENV=production bundle exec rake db:schema:cache:clear
=&gt; remove db/schema_cache.dump</pre>
</div></li>
    <li>Added support for partial indices to <code>PostgreSQL</code> adapter.</li>
    <li>The <code>add_index</code> method now supports a <code>where</code> option that receives a string with the partial index criteria.</li>
    <li>Added the <code>ActiveRecord::NullRelation</code> class implementing the null object pattern for the Relation class.</li>
    <li>Implemented <code>ActiveRecord::Relation#none</code> method which returns a chainable relation with zero records (an instance of the<code>NullRelation</code> class). Any subsequent condition chained to the returned relation will continue generating an empty relation and will not fire any query to the database.</li>
    <li>Added <code>create_join_table</code> migration helper to create HABTM join tables.
<div>
<pre>create_join_table :products, :categories
# =&gt;
# create_table :categories_products, :id =&gt; false do |td|
#   td.integer :product_id, :null =&gt; false
#   td.integer :category_id, :null =&gt; false
# end</pre>
</div></li>
    <li>The primary key is always initialized in the <code>@attributes</code> hash to nil (unless another value has been specified).</li>
    <li>In previous releases, the following would generate a single query with an OUTER JOIN comments, rather than two separate queries:
<div>
<pre>Post.includes(:comments).where(&quot;comments.name = &#039;foo&#039;&quot;)</pre>
</div>
This behaviour relies on matching SQL string, which is an inherently flawed idea unless we write an SQL parser, which we do not wish to do. Therefore, it is now deprecated.

To avoid deprecation warnings and for future compatibility, you must explicitly state which tables you reference, when using SQL snippets:
<div>
<pre>Post.includes(:comments).where(&quot;comments.name = &#039;foo&#039;&quot;).references(:comments)</pre>
</div>
Note that you do not need to explicitly specify references in the following cases, as they can be automatically inferred:
<div>
<pre>Post.where(comments: { name: &#039;foo&#039; })
Post.where(&#039;comments.name&#039; =&gt; &#039;foo&#039;)
Post.order(&#039;comments.name&#039;)</pre>
</div>
You also do not need to worry about this unless you are doing eager loading. Basically, don&#8217;t worry unless you see a deprecation warning or (in future releases) an SQL error due to a missing JOIN.</li>
    <li>Support for the <code>schema_info</code> table has been dropped. Please switch to <code>schema_migrations</code>.</li>
    <li>Connections <em>must</em> be closed at the end of a thread. If not, your connection pool can fill and an exception will be raised.</li>
    <li>Added the <code>ActiveRecord::Model</code> module which can be included in a class as an alternative to inheriting from<code>ActiveRecord::Base</code>:
<div>
<pre>class Post
  include ActiveRecord::Model
end</pre>
</div></li>
    <li>PostgreSQL hstore records can be created.</li>
    <li>PostgreSQL hstore types are automatically deserialized from the database.</li>
    <li>Added <code>#update_columns</code> method which updates the attributes from the passed-in hash without calling save, hence skipping validations and callbacks. <code>ActiveRecordError</code> will be raised when called on new objects or when at least one of the attributes is marked as read only.
<div>
<pre>post.attributes # =&gt; {&quot;id&quot;=&gt;2, &quot;title&quot;=&gt;&quot;My title&quot;, &quot;body&quot;=&gt;&quot;My content&quot;, &quot;author&quot;=&gt;&quot;Peter&quot;}
post.update_columns({title: &#039;New title&#039;, author: &#039;Sebastian&#039;}) # =&gt; true
post.attributes # =&gt; {&quot;id&quot;=&gt;2, &quot;title&quot;=&gt;&quot;New title&quot;, &quot;body&quot;=&gt;&quot;My content&quot;, &quot;author&quot;=&gt;&quot;Sebastian&quot;}</pre>
</div></li>
</ul>


<h3><a name="deprecations-4" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-4"></a>Deprecations</h3>


<ul>
    <li>Deprecated most of the &#8216;dynamic finder&#8217; methods. All dynamic methods except for <code>find_by_...</code> and <code>find_by_...!</code> are deprecated. Here&#8217;s how you can rewrite the code:
<div>
<pre>find_all_by_... can be rewritten using where(...)
find_last_by_... can be rewritten using where(...).last
scoped_by_... can be rewritten using where(...)
find_or_initialize_by_... can be rewritten using where(...).first_or_initialize
find_or_create_by_... can be rewritten using where(...).first_or_create
find_or_create_by_...! can be rewritten using where(...).first_or_create!</pre>
</div>
The implementation of the deprecated dynamic finders has been moved to the <code>active_record_deprecated_finders</code> gem.</li>
    <li>Deprecated the old-style hash based finder API. This means that methods which previously accepted &#8220;finder options&#8221; no longer do. For example this:
<div>
<pre>Post.find(:all, :conditions =&gt; { :comments_count =&gt; 10 }, :limit =&gt; 5)</pre>
</div>
should be rewritten in the new style which has existed since Rails 3:
<div>
<pre>Post.where(comments_count: 10).limit(5)</pre>
</div>
Note that as an interim step, it is possible to rewrite the above as:
<div>
<pre>Post.scoped(:where =&gt; { :comments_count =&gt; 10 }, :limit =&gt; 5)</pre>
</div>
This could save you a lot of work if there is a lot of old-style finder usage in your application.

Calling <code>Post.scoped(options)</code> is a shortcut for <code>Post.scoped.merge(options)</code>. <code>Relation#merge</code> now accepts a hash of options, but they must be identical to the names of the equivalent finder method. These are mostly identical to the old-style finder option names, except in the following cases:
<pre>&lt;code&gt;:conditions becomes :where :include becomes :includes :extend becomes :extending &lt;/code&gt;</pre>
The code to implement the deprecated features has been moved out to the <code>active_record_deprecated_finders</code> gem. This gem is a dependency of Active Record in Rails 4.0. It will no longer be a dependency from Rails 4.1, but if your app relies on the deprecated features then you can add it to your own Gemfile. It will be maintained by the Rails core team until Rails 5.0 is released.</li>
    <li>Deprecate eager-evaluated scopes.Don&#8217;t use this:
<div>
<pre>scope :red, where(color: &#039;red&#039;)
default_scope where(color: &#039;red&#039;)</pre>
</div>
Use this:
<div>
<pre>scope :red, -&gt; { where(color: &#039;red&#039;) }
default_scope { where(color: &#039;red&#039;) }</pre>
</div>
The former has numerous issues. It is a common newbie gotcha to do the following:
<div>
<pre>scope :recent, where(published_at: Time.now - 2.weeks)</pre>
</div>
Or a more subtle variant:
<div>
<pre>scope :recent, -&gt; { where(published_at: Time.now - 2.weeks) }
scope :recent_red, recent.where(color: &#039;red&#039;)</pre>
</div>
Eager scopes are also very complex to implement within Active Record, and there are still bugs. For example, the following does not do what you expect:
<div>
<pre>scope :remove_conditions, except(:where)
where(...).remove_conditions # =&gt; still has conditions</pre>
</div></li>
    <li>Added deprecation for the <code>:dependent =&gt; :restrict</code> association option.</li>
    <li>Up until now <code>has_many</code> and <code>has_one, :dependent =&gt; :restrict</code> option raised a <code>DeleteRestrictionError</code> at the time of destroying the object. Instead, it will add an error on the model.</li>
    <li>To fix this warning, make sure your code isn&#8217;t relying on a <code>DeleteRestrictionError</code> and then add<code>config.active_record.dependent_restrict_raises = false</code> to your application config.</li>
    <li>New rails application would be generated with the <code>config.active_record.dependent_restrict_raises = false</code> in the application config.</li>
    <li>The migration generator now creates a join table with (commented) indexes every time the migration name contains the word &#8220;join_table&#8221;.</li>
    <li><code>ActiveRecord::SessionStore</code> is removed from Rails 4.0 and is now a separate <a href="https://github.com/rails/activerecord-session_store">gem</a>.</li>
</ul>


<h2><a name="active-model" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-model"></a>Active Model</h2>


<ul>
    <li>Changed <code>AM::Serializers::JSON.include_root_in_json</code> default value to false. Now, AM Serializers and AR objects have the same default behaviour.
<div>
<pre>class User &lt; ActiveRecord::Base; end

class Person
  include ActiveModel::Model
  include ActiveModel::AttributeMethods
  include ActiveModel::Serializers::JSON

  attr_accessor :name, :age

  def attributes
    instance_values
  end
end

user.as_json
=&gt; {&quot;id&quot;=&gt;1, &quot;name&quot;=&gt;&quot;Konata Izumi&quot;, &quot;age&quot;=&gt;16, &quot;awesome&quot;=&gt;true}
# root is not included

person.as_json
=&gt; {&quot;name&quot;=&gt;&quot;Francesco&quot;, &quot;age&quot;=&gt;22}
# root is not included</pre>
</div></li>
    <li>Passing false hash values to <code>validates</code> will no longer enable the corresponding validators.</li>
    <li><code>ConfirmationValidator</code> error messages will attach to <code>:#{attribute}_confirmation</code> instead of <code>attribute</code>.</li>
    <li>Added <code>ActiveModel::Model</code>, a mixin to make Ruby objects work with Action Pack out of the box.</li>
    <li><code>ActiveModel::Errors#to_json</code> supports a new parameter <code>:full_messages</code>.</li>
    <li>Trims down the API by removing <code>valid?</code> and <code>errors.full_messages</code>.</li>
</ul>


<h3><a name="deprecations-5" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-5"></a>Deprecations</h3>


<h2><a name="active-resource" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-resource"></a>Active Resource</h2>


<ul>
    <li>Active Resource is removed from Rails 4.0 and is now a separate <a href="https://github.com/rails/activeresource">gem</a>.</li>
</ul>


<h2><a name="active-support" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#active-support"></a>Active Support</h2>


<ul>
    <li>Add default values to all <code>ActiveSupport::NumberHelper</code> methods, to avoid errors with empty locales or missing values.</li>
    <li><code>Time#change</code> now works with time values with offsets other than UTC or the local time zone.</li>
    <li>Add <code>Time#prev_quarter</code> and <code>Time#next_quarter</code> short-hands for <code>months_ago(3)</code> and <code>months_since(3)</code>.</li>
    <li>Remove obsolete and unused <code>require_association</code> method from dependencies.</li>
    <li>Add <code>:instance_accessor</code> option for <code>config_accessor</code>.
<div>
<pre>class User
  include ActiveSupport::Configurable
  config_accessor :allowed_access, instance_accessor: false
end

User.new.allowed_access = true # =&gt; NoMethodError
User.new.allowed_access        # =&gt; NoMethodError</pre>
</div></li>
    <li><code>ActionView::Helpers::NumberHelper</code> methods have been moved to <code>ActiveSupport::NumberHelper</code> and are now available via<code>Numeric#to_s</code>.</li>
    <li><code>Numeric#to_s</code> now accepts the formatting options :phone, :currency, :percentage, :delimited, :rounded, :human, and :human_size.</li>
    <li>Add <code>Hash#transform_keys</code>, <code>Hash#transform_keys!</code>, <code>Hash#deep_transform_keys</code> and <code>Hash#deep_transform_keys!</code>.</li>
    <li>Changed xml type datetime to dateTime (with upper case letter T).</li>
    <li>Add <code>:instance_accessor</code> option for <code>class_attribute</code>.</li>
    <li><code>constantize</code> now looks in the ancestor chain.</li>
    <li>Add <code>Hash#deep_stringify_keys</code> and <code>Hash#deep_stringify_keys!</code> to convert all keys from a <code>Hash</code> instance into strings.</li>
    <li>Add <code>Hash#deep_symbolize_keys</code> and <code>Hash#deep_symbolize_keys!</code> to convert all keys from a <code>Hash</code> instance into symbols.</li>
    <li><code>Object#try</code> can&#8217;t call private methods.</li>
    <li>AS::Callbacks#run_callbacks remove key argument.</li>
    <li><code>deep_dup</code> works more expectedly now and duplicates also values in <code>Hash</code> instances and elements in <code>Array</code> instances.</li>
    <li>Inflector no longer applies ice -&gt; ouse to words like slice, police.</li>
    <li>Add <code>ActiveSupport::Deprecations.behavior = :silence</code> to completely ignore Rails runtime deprecations.</li>
    <li>Make <code>Module#delegate</code> stop using send - can no longer delegate to private methods.</li>
    <li>AS::Callbacks deprecate :rescuable option.</li>
    <li>Adds <code>Integer#ordinal</code> to get the ordinal suffix string of an integer.</li>
    <li>AS::Callbacks :per_key option is no longer supported.</li>
    <li>AS::Callbacks#define_callbacks add :skip_after_callbacks_if_terminated option.</li>
    <li>Add html_escape_once to ERB::Util, and delegate escape_once tag helper to it.</li>
    <li>Remove <code>ActiveSupport::TestCase#pending</code> method, use <code>skip</code> instead.</li>
    <li>Deletes the compatibility method <code>Module#method_names</code>, use <code>Module#methods</code> from now on (which returns symbols).</li>
    <li>Deletes the compatibility method <code>Module#instance_method_names</code>, use <code>Module#instance_methods</code> from now on (which returns symbols).</li>
    <li>Unicode database updated to 6.1.0.</li>
    <li>Adds <code>encode_big_decimal_as_string</code> option to force JSON serialization of BigDecimals as numeric instead of wrapping them in strings for safety.</li>
</ul>


<h3><a name="deprecations-6" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#deprecations-6"></a>Deprecations</h3>


<ul>
    <li><code>ActiveSupport::Callbacks</code>: deprecate usage of filter object with <code>#before</code> and <code>#after</code> methods as <code>around</code> callback.</li>
    <li><code>BufferedLogger</code> is deprecated. Use <code>ActiveSupport::Logger</code> or the <code>logger</code> from Ruby stdlib.</li>
    <li>Deprecates the compatibility method <code>Module#local_constant_names</code> and use <code>Module#local_constants</code> instead (which returns symbols).</li>
</ul>


<h2><a name="credits" href="https://github.com/rails/rails/blob/master/guides/source/4_0_release_notes.md#credits"></a>Credits</h2>


<p>See the <a href="http://contributors.rubyonrails.org/">full list of contributors to Rails</a> for the many people who spent many hours making Rails, the stable and robust framework it is. Kudos to all of them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Active Record Named Scopes]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/10/06/rails-active-record-named-scopes/"/>
    <updated>2012-10-06T18:56:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/10/06/rails-active-record-named-scopes</id>
    <content type="html"><![CDATA[<h2>Rails Active Record Named Scopes</h2>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping.html">Active Record Named Scopes</a></p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping/ClassMethods.html">Instance Public methods</a></p>

<p><code>with_scope(scope = {}, action = :merge, &amp;block)</code> <code>with_scope</code> lets you apply options to inner block incrementally. It takes a hash and the keys must be <code>:find</code> or <code>:create</code>. <code>:find</code> parameter is Relation while <code>:create</code> parameters are an attributes hash.</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.create_with_scope
    with_scope(:find =&gt; where(:blog_id =&gt; 1), :create =&gt; { :blog_id =&gt; 1 }) do
      find(1) # =&gt; SELECT * from articles WHERE blog_id = 1 AND id = 1
      a = create(1)
      a.blog_id # =&gt; 1
    end
  end
end</pre>
</div>


<p>In nested scopings, all previous parameters are overwritten by the innermost rule, with the exception of where, includes, and joins operations in Relation, which are merged.</p>

<p>joins operations are uniqued so multiple scopes can join in the same table without table aliasing problems. If you need to join multiple tables, but still want one of the tables to be uniqued, use the array of strings format for your joins.</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.find_with_scope
    with_scope(:find =&gt; where(:blog_id =&gt; 1).limit(1), :create =&gt; { :blog_id =&gt; 1 }) do
      with_scope(:find =&gt; limit(10)) do
        all # =&gt; SELECT * from articles WHERE blog_id = 1 LIMIT 10
      end
      with_scope(:find =&gt; where(:author_id =&gt; 3)) do
        all # =&gt; SELECT * from articles WHERE blog_id = 1 AND author_id = 3 LIMIT 1
      end
    end
  end
end</pre>
</div>


<p><strong>You can ignore any previous scopings</strong> by using the <code>with_exclusive_scope</code> method.</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.find_with_exclusive_scope
    with_scope(:find =&gt; where(:blog_id =&gt; 1).limit(1)) do
      with_exclusive_scope(:find =&gt; limit(10)) do
        all # =&gt; SELECT * from articles LIMIT 10
      end
    end
  end
end</pre>
</div>


<p><strong>Note:</strong> the <code>:find</code> scope also has effect on update and deletion methods, like update_all and delete_all.</p>

<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Default/ClassMethods.html">default_scope</a></p>

<p><code>default_scope(scope = {})</code> Use this macro in your model to set a default scope for all operations on the model.</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  default_scope where(:published =&gt; true)
end

Article.all # =&gt; SELECT * FROM articles WHERE published = true</pre>
</div>


<p>The <code>default_scope</code> is also applied while creating/building a record. It is not applied while updating a record.</p>

<div>
<pre>Article.new.published    # =&gt; true
Article.create.published # =&gt; true</pre>
</div>


<p>You can also use <code>default_scope</code> with a block, in order to have it lazily evaluated:</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  default_scope { where(:published_at =&gt; Time.now - 1.week) }
end</pre>
</div>


<p>(You can also pass any object which responds to call to the <code>default_scope</code> macro, and it will be called when building the default scope.)</p>

<p>If you use multiple <code>default_scope</code> declarations in your model then they will be merged together:</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  default_scope where(:published =&gt; true)
  default_scope where(:rating =&gt; &#039;G&#039;)
end

Article.all # =&gt; SELECT * FROM articles WHERE published = true AND rating = &#039;G&#039;</pre>
</div>


<p>This is also the case with inheritance and module includes where the parent or module defines a <code>default_scope</code> and the child or including class defines a second one.</p>

<p>If you need to do more complex things with a default scope, you can alternatively define it as a class method:</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  def self.default_scope
    # Should return a scope, you can call &#039;super&#039; here etc.
  end
end</pre>
</div>


<p><a href="http://api.rubyonrails.org/classes/ActiveRecord/Scoping/Named/ClassMethods.html">activerecord/lib/active_record/scoping/named.rb</a></p>

<p><code>scope(name, scope_options = {})</code> Adds a class method for retrieving and querying objects. A scope represents a narrowing of a database query, such as <code>where(:color =&gt; :red).select('shirts.*').includes(:washing_instructions)</code>.</p>

<div>
<pre>class Shirt &lt; ActiveRecord::Base
  scope :red, where(:color =&gt; &#039;red&#039;)
  scope :dry_clean_only, joins(:washing_instructions).where(&#039;washing_instructions.dry_clean_only = ?&#039;, true)
end</pre>
</div>


<p>The above calls to scope define class methods <code>Shirt.red</code> and <code>Shirt.dry_clean_only</code>. <code>Shirt.red</code>, in effect, represents the query <code>Shirt.where(:color =&gt; 'red')</code>.</p>

<p>Note that this is simply ‘syntactic sugar’ for defining an actual class method:</p>

<div>
<pre>class Shirt &lt; ActiveRecord::Base
  def self.red
    where(:color =&gt; &#039;red&#039;)
  end
end</pre>
</div>


<p>Unlike <code>Shirt.find(...)</code>, however, the object returned by <code>Shirt.red</code> is not an Array; it resembles the association object constructed by a has_many declaration. For instance, you can invoke <code>Shirt.red.first</code>, <code>Shirt.red.count</code>,<code>Shirt.red.where(:size =&gt; 'small')</code>. Also, just as with the association objects, named scopes act like an Array, implementing Enumerable; <code>Shirt.red.each(&amp;block)</code>, <code>Shirt.red.first</code>, and <code>Shirt.red.inject(memo, &amp;block)</code> all behave as if<code>Shirt.red</code> really was an Array.</p>

<p>These named scopes are composable. For instance, <code>Shirt.red.dry_clean_only</code> will produce all shirts that are both red and dry clean only. Nested finds and calculations also work with these compositions: <code>Shirt.red.dry_clean_only.count</code> returns the number of garments for which these criteria obtain. Similarly with <code>Shirt.red.dry_clean_only.average(:thread_count)</code>.</p>

<p>All scopes are available as class methods on the <code>ActiveRecord::Base</code> descendant upon which the scopes were defined. But they are also available to has_many associations. If,</p>

<div>
<pre>class Person &lt; ActiveRecord::Base
  has_many :shirts
end</pre>
</div>


<p>then <code>elton.shirts.red.dry_clean_only</code> will return all of Elton’s red, dry clean only shirts.</p>

<p>Named scopes can also be procedural:</p>

<div>
<pre>class Shirt &lt; ActiveRecord::Base
  scope :colored, lambda { |color| where(:color =&gt; color) }
end</pre>
</div>


<p>In this example, <code>Shirt.colored('puce')</code> finds all puce shirts.</p>

<p>On Ruby 1.9 you can use the ‘stabby lambda’ syntax:</p>

<div>
<pre>scope :colored, -&gt;(color) { where(:color =&gt; color) }</pre>
</div>


<p>Note that scopes defined with scope will be evaluated when they are defined, rather than when they are used. For example, the following would be incorrect:</p>

<div>
<pre>class Post &lt; ActiveRecord::Base
  scope :recent, where(&#039;published_at &gt;= ?&#039;, Time.current - 1.week)
end</pre>
</div>


<p><strong>The example above would be ‘frozen’ to the <code>Time.current</code> value when the Post class was defined</strong>, and so the resultant SQL query would always be the same. The correct way to do this would be via a lambda, which will re-evaluate the scope each time it is called:</p>

<div>
<pre>class Post &lt; ActiveRecord::Base
  scope :recent, lambda { where(&#039;published_at &gt;= ?&#039;, Time.current - 1.week) }
end</pre>
</div>


<p>Named scopes can also have extensions, just as with has_many declarations:</p>

<div>
<pre>class Shirt &lt; ActiveRecord::Base
  scope :red, where(:color =&gt; &#039;red&#039;) do
    def dom_id
      &#039;red_shirts&#039;
    end
  end
end</pre>
</div>


<p>Scopes can also be used while creating/building a record.</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  scope :published, where(:published =&gt; true)
end

Article.published.new.published    # =&gt; true
Article.published.create.published # =&gt; true</pre>
</div>


<p>Class methods on your model are automatically available on scopes. Assuming the following setup:</p>

<div>
<pre>class Article &lt; ActiveRecord::Base
  scope :published, where(:published =&gt; true)
  scope :featured, where(:featured =&gt; true)

  def self.latest_article
    order(&#039;published_at desc&#039;).first
  end

  def self.titles
    map(&amp;:title)
  end

end</pre>
</div>


<p>We are able to call the methods like this:</p>

<div>
<pre>Article.published.featured.latest_article
Article.featured.titles</pre>
</div>


<p><code>scoped(options = nil)</code> Returns an anonymous scope.</p>

<div>
<pre>posts = Post.scoped
posts.size # Fires &quot;select count(*) from  posts&quot; and returns the count
posts.each {|p| puts p.name } # Fires &quot;select * from posts&quot; and loads post objects

fruits = Fruit.scoped
fruits = fruits.where(:color =&gt; &#039;red&#039;) if options[:red_only]
fruits = fruits.limit(10) if limited?</pre>
</div>


<p>Anonymous scopes tend to be useful when procedurally generating complex queries, where passing intermediate values (scopes) around as first-class objects is convenient.</p>

<p><strong>You can define a scope that applies to all finders using <code>ActiveRecord::Base.default_scope</code></strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[晒晒我们的开源项目 ITEYE开源代码]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/27/shai-shai-wo-men-de-kai-yuan-xiang-mu-iteyekai-yuan-dai-ma/"/>
    <updated>2012-09-27T08:34:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/27/shai-shai-wo-men-de-kai-yuan-xiang-mu-iteyekai-yuan-dai-ma</id>
    <content type="html"><![CDATA[<h2>晒晒我们的开源项目 ITEYE开源代码</h2>

<p>我们的研发团队是一支mini型研发团队，目前共有研发人员13人。由于网站产品维护的历史原因，这13人的研发团队分为4支小组，分别是：Ruby研发小组5人；PHP研发小组4人；.net研发小组2人，Java搜索小组2人。</p>

<p>别看我们研发人员这么少，但是我们研发人员战斗力很强，我们维护和开发着十多条产品线。在我们开发自身产品的过程中，也积累了一些比较通用的组件，一些对大家来说有用的工具。因此从今年下半年开始，我们陆续将一些组件和工具开源出来，哪怕这些项目的质量并不是那么高，也希望能够给社区带来一点点自己的贡献。</p>

<p>以下简要介绍一下我们已经开源的项目，今后我们还会努力开源更多的东西和大家交流和分享：</p>

<p>1、Ansj中文分词 - 开源的高准确率Java中文分词器</p>

<p>项目Github地址：<a href="https://github.com/ansjsun/ansj_seg" target="_blank">https://github.com/ansjsun/ansj_seg</a>
这是基于大名鼎鼎中科院的Ictclas中文分词算法编写的Java实现版本，比常用的开源mmseg4j的分词准确率高。目前我们自己站内的搜索将逐渐从mmseg4j算法替换成Ansj中文分词算法。</p>

<p>2、ServiceFramework - 开源的羽量级Java Web服务框架</p>

<p>项目Github地址：<a href="https://github.com/allwefantasy/ServiceFramework" target="_blank">https://github.com/allwefantasy/ServiceFramework</a>
我们基于Java的开源搜索框架lucene编写了网站的分布式搜索和Tag文章分类服务。因为需要向前端的Web应用程序提供搜索和Tag服务接口API，所以我们编写了这个羽量级的Java框架软件。它的优点就是羽量级，自身集成了Jetty服务器，MVC，IoC和ORM，让你只需要编写非常少的代码，就可以快速将你的业务逻辑组件以Web API的方式提供服务。</p>

<p>3、ExportBlog - 开源的通用博客导出工具</p>

<p>项目Github地址：<a href="https://github.com/sqzhuyi/ExportBlog" target="_blank">https://github.com/sqzhuyi/ExportBlog</a>
这是一个基于.net Winforms编写的通用博客导出工具，支持导出网站包括：CSDN、ITEYE、博客园、新浪、搜狐、和讯、ChinaUnix、网易、51CTO、开源中国、百度空间、QQ空间等等。导出格式支持CHM、PDF、HTML、TXT和EPUB 5种格式文档。详细介绍：<a href="http://blog.csdn.net/sq_zhuyi/article/details/7924776" target="_blank">http://blog.csdn.net/sq_zhuyi/article/details/7924776</a></p>

<p>4、Secode_level_cache - 开源的Rails对象缓存插件</p>

<p>项目Github地址：<a href="https://github.com/csdn-dev/second_level_cache" target="_blank">https://github.com/csdn-dev/second_level_cache</a>
Rails的ActiveRecord自身没有带强大的对象缓存功能，这是AR的一个重大的遗憾。早在2008年开始，我们就借鉴了Java强大的ORM框架Hibernate的二级对象缓存编写了这个Rails的AR对象缓存插件，并且一直作为JavaEye网站缓存优化的秘密武器来使用，取得了非常理想的效果。
现在我们将这个插件从Rails2.x的版本升级到了3.x版本，并且抽取成了一个通用插件，开始应用于新的Rails3.2的项目之上。有志于AR对象缓存优化的ruby程序员不容错过。</p>

<p>5、limiter － 网站反爬虫和DOS攻击的利器</p>

<p>项目Github地址：<a href="https://github.com/csdn-dev/limiter" target="_blank">https://github.com/csdn-dev/limiter</a>
早年的JavaEye网站曾经深受DOS攻击和爬虫海量抓取造成的负载过高的困扰，我曾经和这个问题进行了为期几年不懈的斗争，并且在总结几年斗争经验后写了一篇总结性博客文章：<a href="http://robbin.iteye.com/blog/451014" target="_blank">互联网网站的反爬虫策略浅析</a> 。当时我基于这个反爬虫策略编写了JavaEye网站的智能防火墙插件，取得了良好的效果。
现在我们将这个插件从JavaEye的源代码中剥离出来，抽取成一个通用的rackware，便于应用于普通的Rails3.x的项目当中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single sign-on 单点登录 sso]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/26/single-sign-on-dan-dian-deng-lu-sso/"/>
    <updated>2012-09-26T08:35:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/26/single-sign-on-dan-dian-deng-lu-sso</id>
    <content type="html"><![CDATA[<h2>Single sign-on 单点登录 sso</h2>

<p>from wiki</p>

<p><strong>Single sign-on</strong> (<strong>SSO</strong>) is a property of <a title="Access control" href="http://en.wikipedia.org/wiki/Access_control">access control</a> of multiple related, but independent <a title="Software" href="http://en.wikipedia.org/wiki/Software">software</a> systems. With this property a user <a title="Login" href="http://en.wikipedia.org/wiki/Login">logs in</a> once and gains access to all systems without being prompted to log in again at each of them. Conversely, <strong>Single sign-off</strong> is the property whereby a single action of signing out terminates access to multiple software systems.</p>

<p>As different applications and resources support different <a title="Authentication" href="http://en.wikipedia.org/wiki/Authentication">authentication</a> mechanisms, single sign-on has to internally translate to and store different credentials compared to what is used for initial authentication.</p>

<p>from baike</p>

<p>单点登录（Single Sign On），简称为 SSO，是目前比较流行的企业业务整合的解决方案之一。SSO的定义是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</p>

<div></div>


<p>企业应用集成（EAI, Enterprise Application Integration）。企业应用集成可以在不同层面上进行：例如在数据存储层面上的“数据大集中”，在传输层面上的“通用数据交换平台”，在应用层面上的“业务流程整合”，和用户界面上的“通用企业门户”等等。事实上，还有一个层面上的集成变得越来越重要，那就是“身份认证”的整合，也就是“单点登录”。</p>

<p>现在普遍使用 oauth 来实现 多个系统的授权 认证</p>

<p><a href="https://github.com/songkick/oauth2-provider">https://github.com/songkick/oauth2-provider</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing A Devise User Session Across Subdomains With Rails 3]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/15/sharing-a-devise-user-session-across-subdomains-with-rails-3/"/>
    <updated>2012-09-15T16:21:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/15/sharing-a-devise-user-session-across-subdomains-with-rails-3</id>
    <content type="html"><![CDATA[<h2>Sharing A Devise User Session Across Subdomains With Rails 3</h2>

<pre>to andersen
  仔细测了一下 Askjane::Application.config.session_store :active_record_store, key: &#039;_askjane_session&#039;, :domain =&gt; &quot;.bbtang.com&quot;在 server上
  是ok的（效果上也是能共享bbtang.com 和www.bbtang.com的会话的只要端口一致）就是不知道在本地如何因为本地一般不会设置host绑定域名(经测试答案是不能的)，如何（所以需要:all这个设置项）
to 客服 和 jojo
 提一点 你们一些 首页源码的时候 不要把 域名加上去  注意 尼玛 端口不一致 也是不能share 会话的
 简而言之 你们写一些html静态源码的时候除非不在 bbtang.com的 项目上 没有必要加 域名的 这会加大 大家的成本（如果说端口不一致就会导致会话丢失，如果没有做多域名兼容也会导致会话丢失能免则免）
over</pre>


<pre></pre>


<pre>Francis.J(864248765) 13:57:28
https://github.com/rails/rails/issues/2483
Francis.J(864248765) 13:57:55
尼玛 rails 大爷又 踩雷了
Francis.J(864248765) 13:59:42
https://github.com/rails/rails/issues/2483
Francis.J(864248765) 14:02:27
https://github.com/rails/rails/pull/7316
Francis.J(864248765) 14:08:37
然后 我们看看 究竟用 :cookie_store + :domain =&gt; :all
还是  :active_record_store + &quot;.bbtang.com&quot; (这里垮子域名估计不会很合适)
还是 升一下 rails  用  :active_record_store + :domain =&gt; :all</pre>


<p>Recently I’ve been working on a Rails application that supports subdomains. I’m using Devise for user authentication and need the user to choose a subdomain to use upon registration.</p>

<p>Similar to the 37signals applications, I want a single sign-on to be persistent across subdomains. Since I didn’t have a clue where to begin with subdomains, I followed <a href="https://github.com/fortuity/rails3-subdomain-devise/wiki/Tutorial-%28Walkthrough%29">this tutorial</a> on my new Rails 3.1 beta 1 application. This tutorial worked like a charm and I omitted the friendly_id and tweaked a few things to my liking.</p>

<p>The gist of it is simple. Create a User model like you would normally do with Devise. You add a Subdomain model that is linked to the Users (in my case I only wanted a single subdomain per user). Configuring the routes is pretty simple as you can simply create a constraint that will match the root and fire it off to the right action and let the rest fall through.</p>

<p>The trick comes into sharing the session between domains. Browsers, of course, will separate out the cookies and store them by separated out by subdomain. What you want to do is edit your config/initializers/session_store.rb file to look like this</p>

<div>
<table>
<tbody>
<tr>
<td>
<pre>APPNAMEGOESHERE::Application.config.session_store :cookie_store, :key =&gt; &#039;_tourlyapp_session&#039;, :domain =&gt; &quot;lvh.me&quot;</pre>
</td>
</tr>
</tbody>
</table>
</div>


<p>The trick here is the <code>:domain</code> option. What this does is sets the level of the TLD (top level domain) and tells Rails how long the domain is. The part you want to watch out for here is that if you set <code>:domain =&gt; :all</code> like is recommend in some places, it simply won’t work unless you’re using localhost. <code>:all</code> defaults to a TLD length of 1, which means if you’re testing with Pow (myapp.dev) it won’t work either because that is a TLD of length 2.</p>

<p>You might get weird things like halfway Devise sessions sharing, but only allowing you to create and destroy the session on the root domain. Using <code>:all</code> works great if you’re using localhost, but when I started using lvh.me:3000 for testing I had those problems (lvh.me stands for local vhost me and is a domain that simply points to localhost which makes for zero-config subdomain development. It’s super handy.).</p>

<p>The best option might be to comment out this line and put it into your individual environment configurations. This way you can keep things configured easily as the <code>:all</code> option. Once you’ve got your domain string added everything should work like a charm.</p>

<p><strong>BONUS PROTIP: </strong>The normal route variables you see used end with _path. These don’t include the domain and therefore ignore the :subdomain option you pass into them. <code>url_for</code>, on the other hand, does support subdomains so you should get into the habit of using root_url instead of root_path and so on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IE, iframe, P3P, Cookies, oh my]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/13/ie-iframe-p3p-cookies-oh-my/"/>
    <updated>2012-09-13T22:53:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/13/ie-iframe-p3p-cookies-oh-my</id>
    <content type="html"><![CDATA[<h2>IE, iframe, P3P, Cookies, oh my</h2>

<p>测试新浪微游戏接口时，发现一个问题：当使用IE浏览器的时候，rails的session无法保存。之前在自己开发服务器上测试时，验证过IE和Firefox都能正常使用session的，觉得很是奇怪。</p>

<p>通 过抓包发现，正常情况下，服务器端在响应客户端访问请求后，在返回的http头中会有Set-Cookies这样的参数，同时在接下来的客户端的http 请求头中，会加上Cookie这样的参数；上述不能正常保存session情况下的抓包分析发现，客户端的http请求头中浏览器没有设置Cookie参 数。</p>

<p>解决方法一：修改IE的默认Cookie设置，设置IE隐私设置中的高级隐私设置，勾选“总是允许回话Cookie”，这样session的值就能正常保存了。不过这样肯定不是最好的解决办法，对大多数用户来说，这样做不合理。</p>

<p>解决方法二：参考方法来自： <a href="http://www.sympact.net/2008/07/rails-and-ifram.html" target="_blank">http://www.sympact.net/2008/07/rails-and-ifram.html</a> ，文中描述了具体原因，是因为IFrame中打开的链接和主页面的链接不在同一个域，所以IE默认会认为是不可信任的，则不允许使用Cookie。解决办 法正如文中所示，在controller中的before_filter中增加一个方法，此方法中设置响应的http相应头中增加P3P参数，问题即可解 决。
大致代码如下：</p>

<pre class="brush: rails; gutter: true"></pre>


<div id="LC1">[rails IE, IFRAME, P3P, COOKIES](<a href="https://gist.github.com/3719568">https://gist.github.com/3719568</a>)</div>


<div id="LC10">
<pre class="brush: rails; gutter: true">#userful gem [rack-p3p](https://github.com/hoopla/rack-p3p)
# encoding: utf-8
class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  before_filter :set_p3p
  def set_p3p
    headers[&#039;P3P&#039;] = &quot;policyref=\&quot;/w3c/p3p.xml\&quot;, CP=\&quot;ALL DSP COR CURa ADMa DEVa TAIa OUR BUS IND UNI COM NAV INT\&quot;&quot;
  end
end</pre>
</div>


<div id="LC10"></div>


<p>I was just banging my head against the wall trying to figure out why internet explorer wasn’t remembering my user’s sessions. Turns out it’s something that has bitten me in the past.</p>

<p>IE doesn’t allow you to set cookies when your site is in an iframe unless your site has set P3P headers. Also, ordering matters – the P3P header must be set <em>before</em> the cookie is set.</p>

<p>If you’re using ruby, this gem works pretty well: <a href="https://github.com/hoopla/rack-p3p">https://github.com/hoopla/rack-p3p</a></p>

<p>Further reading: <a href="http://stackoverflow.com/questions/389456/cookie-blocked-not-saved-in-iframe-in-internet-explorer">http://stackoverflow.com/questions/389456/cookie-blocked-not-saved-in-iframe-in-internet-explorer</a></p>

<p>All the articles I read about setting headers, etags, etc were all really old. Hopefully, if you’re using rails you found this article. Just install the gem and add the line from the README to your application.rb – no monkey patching. Good luck.</p>

<h2>rails IE frame ActionController::InvalidAuthenticityToken</h2>


<p>Same problem here with a rails application launched in an iframe I get:</p>

<p>&#8220;the change you wanted was rejected&#8221;</p>

<p>In log:</p>

<p>ActionController::InvalidAuthenticityToken<wbr></wbr></p>

<p>Seems that the problem occur in IE when you are developing in an iframe situation where the master page is at a different domain than the inner page. (es: iframed Facebook applications)</p>

<p>This is because IE&#8217;s default &#8220;medium&#8221; privacy setting has an issue with cookies in that situation.</p>

<p>A possible solution is to set a P3P header (try to google: p3p iframe internet explorer) Example, in application_controller.rb:</p>

<pre>&lt;code&gt;before_filter  &lt;wbr&gt;:set_p3p

def set_p3p
 &lt;wbr&gt; response.headers[&quot;P3P&quot;]=&#039;CP=&quot;CAO PSA OUR&quot;&#039;
end&lt;/wbr&gt;&lt;/wbr&gt;&lt;/code&gt;</pre>


<p>&nbsp;</p>

<h1 id="subject_tpc">php版站内应用在ie浏览器下获取到session值(失效)[已解决]</h1>


<div>
<div id="read_tpc">php版站内应用在ie浏览器下获取到session值(失效)
首页授权证后保存的session在其它页面获取不到。例如：
在站内应用的iframe下：
a.php
&lt;?php
session_start();
$_SESSION[&#8220;user&#8221;]=&#8221;abc&#8221;;
echo $_SESSION[&#8220;user&#8221;];
?&gt;
&lt;a href=&#8221;b.php&#8221;&gt;b.php&lt;/a&gt;

b.php
&lt;?php
session_start();
echo $_SESSION[&#8220;user&#8221;];
?&gt;

运行a.php后正常显示abc，跳转到b.php显示为空。

这问题纠缠了我很久了，不继地调试，直到今晚终于找到答案了：
原来这也属于是跨域访问的问题。

以下是解决方案：
<strong>“用P3P header解决iframe跨域访问cookie/session”的问题</strong>
理论很简单,而且模式也和大多请求返回状态的SSO差不多.但是有几个地方是要注意一下的.
1.页面里的COOKIE不能是浏览器进程的COOKIE(包括验证票和不设置超时时间的COOKIE),否则跨域会取不到.这点做跨域COOKIE的人比较少提到.不过实际上留意下几家大学做的方案,有细微的提到他们的验证模块里的COOKIE是有设置超时时间的.
2.当利用IFRAME时,记得要在相应的动态页的页头添加一下P3P的信息,否则IE会自觉的把IFRAME框里的COOKIE给阻止掉,产生问题.本身不保存自然就取不到了.这个其实是FRAMESET和COOKIE的问题,用FRAME或者IFRAME都会遇到.
3.测试时输出TRACE,会减少很多测试的工作量.
只需要设置 P3P HTTP Header，在隐含 iframe 里面跨域设置 cookie 就可以成功。他们所用的内容是：
P3P: CP=&#8217;CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR&#8217;

ASP直接在头部加了头部申明，测试有效。
&lt;%Response.AddHeader &#8220;P3P&#8221;, &#8220;CP=CAO PSA OUR&#8221;%&gt;

php的话，我没去试，应该是如下写法：
header(&#8216;P3P: CP=CAO PSA OUR&#8217;);

ASP.NET的话
通过在代码上加Response.AddHeader(&#8220;P3P&#8221;, &#8220;CP=CAO PSA OUR&#8221;)或者在Window服务中将ASP.NET State Service 启动。
JSP:response.setHeader(&#8220;P3P&#8221;,&#8221;CP=CAO PSA OUR&#8221;)

如何在静态页面加头信息 P3P: CP=&#8221;CAO PSA OUR 来解决框架与cookie的问题?
IIS站点管理器允许你给所有输出的内容都加上任意HTTP Header，你只要在Custom Header里面加上P3P: CP=&#8221;CAO PSA OUR&#8221;
就ok了

</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Cloud Foundry 上使用 JRuby for Rails 应用程序]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/10/zai-cloud-foundry-shang-shi-yong-jruby-for-rails-ying-yong-cheng-xu/"/>
    <updated>2012-09-10T22:28:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/10/zai-cloud-foundry-shang-shi-yong-jruby-for-rails-ying-yong-cheng-xu</id>
    <content type="html"><![CDATA[<h2>在 Cloud Foundry 上使用 JRuby for Rails 应用程序</h2>

<p align="left">[译注]本文翻译自Cloud Foundry英文博客站点，原文题为“<a href="http://blog.cloudfoundry.com/post/13481011043/deploying-jruby-on-rails-applications-on-cloud-foundry"><strong>Using JRuby for Rails Applications on Cloud Foundry</strong></a>”，文章发表时间是 2012 年 4 月 19 日。</p>


<p align="left">如今，只需进行一些简单的配置更改，即可将 JRuby Rails 应用程序部署到 CloudFoundry.com。JRuby 应用程序常常通过创建一个包含 Rails 应用程序的 .war 文件来部署到 servlet 容器中。对于 Cloud Foundry，我们将采取同样的做法，同时对数据库配置进行一些更改，以便应用程序还可以访问 CloudFoundry.com 上的数据库服务。</p>




<h4 align="left">将 JRuby on Rails 应用程序部署到 Cloud Foundry 上时需进行的更改</h4>


<p align="left">要使 JRuby 应用程序在 CloudFoundry.com 上运行，我们需要完成两项任务。首先，我们需通过修改 configuration 目录中的 database.yml 文件将该应用程序配置为连接到 CloudFoundry.com 上的数据库服务。当我们部署该应用程序时，我们还需要运行“rake db:migrate”的等效命令，以便创建数据库表。我们可以通过在 config/initializers 目录中添加一个初始化程序来做到这一点。</p>


<p align="left">环境变量 VCAP_SERVICES 中提供了我们在配置数据库连接时所需的信息。我们可以通过编程方式分析该变量，也可以使用方便的 Cloud Foundry 运行时 gem（请参见<a href="http://cnblog.cloudfoundry.com/?p=234"><strong>将</strong><strong> Cloud Foundry </strong><strong>服务与</strong><strong> Ruby </strong><strong>搭配使用：第</strong><strong> 2 </strong><strong>部分</strong><strong> – </strong><strong>对</strong><strong> Ruby </strong><strong>应用程序的实时支持</strong></a>博文），在本篇博文中我们将采用后者。要使用该 gem，我们需要将它包含在我们的 Gemfile 中：</p>




<div>
<div id="highlighter_85231">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>...</code></div>
<div><code>gem  </code><code>'cf-runtime'</code></div>
<div><code>...</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>


<p align="left">既然我们已经添加了该 gem，我们就可以向 database.yml 文件中添加一些代码段，用以访问生产环境的数据库服务信息。下面是一个 database.yml 文件中的 production 部分，在这个文件中我们使用的是 MySQL 数据库：</p>


<p align="left"><strong>config/database.yml</strong></p>




<div>
<div id="highlighter_84359">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>production:</code></div>
<div><code>    </code><code>adapter: mysql</code></div>
<div><code>    </code><code>&lt;% require </code><code>'cfruntime/properties'</code> <code>%&gt;</code></div>
<div><code>    </code><code>&lt;% db_svc = CFRuntime::CloudApp.service_props(</code><code>'mysql'</code><code>) %&gt;</code></div>
<div><code>    </code><code>database: &lt;%= db_svc[:database] rescue </code><code>'bookshelf_production'</code> <code>%&gt;</code></div>
<div><code>    </code><code>username: &lt;%= db_svc[:username] rescue </code><code>'root'</code> <code>%&gt;</code></div>
<div><code>    </code><code>password: &lt;%= db_svc[:password] rescue </code><code>''</code> <code>%&gt;</code></div>
<div><code>    </code><code>host: &lt;%= db_svc[:host] rescue </code><code>'localhost'</code> <code>%&gt;</code></div>
<div><code>    </code><code>port: &lt;%= db_svc[:port] rescue </code><code>'3306'</code> <code>%&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>


<p align="left">正如您可以看到的那样，我们添加了一个 require 语句来获取 cfruntime/properties，然后我们通过调用 service_props 方法并在调用时传入我们所使用的服务类型来获取服务属性的哈希值。如果仅有一项属于该类型的服务绑定到该应用程序，则无需指定此服务的实际名称。如果您将多项属于同一类型的服务绑定到您的应用程序，您将需要指定实际服务名称。服务属性的哈希值存储在一个名为 db_svc 的变量中，代码会将对应的值提取出来以用作数据库、用户名、密码、主机和端口。其中的每一条语句都有一个 rescue 子句，如果我们并非在 Cloud Foundry 环境中操作，则该语句将提供要使用的值，这种情况下 db_svc 将为 Nil。</p>


<p align="left">另外，如果使用的是 PostgreSQL，则该 database.yml 文件的 production 部分将大致如下：</p>




<div>
<div id="highlighter_152958">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>production:</code></div>
<div><code>   </code><code>adapter: postgresql</code></div>
<div><code>   </code><code>encoding: unicode</code></div>
<div><code>   </code><code>&lt;% require </code><code>'cfruntime/properties'</code> <code>%&gt;</code></div>
<div><code>   </code><code>&lt;% db_svc = CFRuntime::CloudApp.service_props(</code><code>'postgresql'</code><code>) %&gt;</code></div>
<div><code>   </code><code>database: &lt;%= db_svc[:database] rescue </code><code>'bookshelf_production'</code> <code>%&gt;</code></div>
<div><code>   </code><code>username: &lt;%= db_svc[:username] rescue </code><code>'bookshelf'</code> <code>%&gt;</code></div>
<div><code>   </code><code>password: &lt;%= db_svc[:password] rescue </code><code>''</code> <code>%&gt;</code></div>
<div><code>   </code><code>host: &lt;%= db_svc[:host] rescue </code><code>'localhost'</code> <code>%&gt;</code></div>
<div><code>   </code><code>port: &lt;%= db_svc[:port] rescue </code><code>'5432'</code> <code>%&gt;</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>


<p align="left">接下来，我们将注意力转向创建供我们的应用程序使用的表上面。为此，我们在部署该应用程序时需向 config/initializers 目录中添加以下初始化程序。我将该初始化程序命名为 cf_db_migrate.rb：</p>


<p align="left"><strong>config/initializers/cf_db_migrate.rb</strong></p>




<div>
<div id="highlighter_908259">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>require </code><code>'cfruntime/properties'</code></div>
<div></div>
<div><code># Run the equivalent of rake db:migrate on startup</code></div>
<div><code>if</code> <code>CFRuntime::CloudApp.running_in_cloud?</code></div>
<div><code>  </code><code>migrations = Rails.root.join(</code><code>'db'</code><code>,</code><code>'migrate'</code><code>)</code></div>
<div><code>  </code><code>if</code> <code>migrations.directory?</code></div>
<div><code>    </code><code>ActiveRecord::Migrator.migrate(migrations)</code></div>
<div><code>  </code><code>end</code></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>


<p align="left">我们再次使用 cfruntime/properties 来检查我们当前是否在云中运行。接下来，我们将检查 db/migrate 目录是否存在；如果它存在，我们将使用该目录中的迁移文件来运行数据库迁移 (ActiveRecord::Migrator.migrate(migrations))。</p>


<p align="left">我们还必须进行的一项更改就是对 warble 配置的更改。默认情况下此配置在生成的 war 文件中不包含 db/migrate 目录，因此我们需要通过指定 config.includes = FileList[&#8220;db/migrate/*&#8221;] 将此目录添加到此配置中。下面是 config/warble.rb 文件的相关内容：</p>


<p align="left"><strong>config/warble.rb</strong></p>




<div>
<div id="highlighter_236881">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code># Warbler web application assembly configuration file</code></div>
<div><code>Warbler::Config.</code><code>new</code> <code>do</code> <code>|config|</code></div>
<div></div>
<div><code>  </code><code># Application directories to be included in the webapp.</code></div>
<div><code>  </code><code>config.dirs = %w(app config lib log vendor tmp)</code></div>
<div></div>
<div><code>  </code><code># Additional files/directories to include, above those in config.dirs</code></div>
<div><code>  </code><code>config.includes = FileList[</code><code>"db/migrate/*"</code><code>]</code></div>
<div></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>


<h4 align="left">一个完整示例</h4>


<p><a href="http://jhjguxin.sinaapp.com/?attachment_id=244" rel="attachment wp-att-244"><img title="Example" src="http://cnblog.cloudfoundry.com/wp-content/uploads/2012/07/Example.tif" alt="" /></a></p>

<p align="left">我们从上文中已经了解到需做出哪些更改，那我们就来快速生成一个 Rails 应用程序并做出所需的更改，然后将该应用程序部署到 CloudFoundry.com。如果您尚未安装 JRuby，建议首先参阅 <a href="http://jruby.org/getting-started"><strong>JRuby </strong><strong>入门</strong></a>。</p>




<h3 align="left"><strong>创建</strong><strong> JRuby Rails </strong><strong>应用程序</strong><strong></strong></h3>


<p align="left">首先，我们创建新应用程序，并创建具有完整基架的第一个域对象。</p>




<pre>&lt;code&gt;jruby -S rails new bookshelf -d mysql cd bookshelf jruby -S rails generate scaffold Book title:string category:string published:integer price:decimal{10.2} isbn:string &lt;/code&gt;</pre>


<p align="left">接下来，我们删除生成的 public/index.html，然后修改 config/routes.rb 以使用“books”作为根目录：</p>




<pre>&lt;code&gt;rm public/index.html vi config/routes.rb&lt;/code&gt;</pre>


<p align="left">下面是我在 config/routes.rb 中添加的路由：</p>




<div>
<div id="highlighter_226813">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>Bookshelf::Application.routes.draw </code><code>do</code></div>
<div><code>  </code><code>resources :books</code></div>
<div></div>
<div><code>  </code><code># You can have the root of your site routed with </code><code>"root"</code></div>
<div><code>  </code><code># just remember to delete </code><code>public</code><code>/index.html.</code></div>
<div><code>  </code><code># root :to =&gt; </code><code>'welcome#index'</code></div>
<div><code>  </code><code>root :to =&gt; </code><code>'books#index'</code></div>
<div></div>
<div><code>  </code><code># See how all your routes lay out with </code><code>"rake routes"</code></div>
<div></div>
<div><code>end</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>


<p align="left">现在，我们将在本地运行此应用程序以确保它正常运行：</p>




<pre>&lt;code&gt;jruby -S rake db:create jruby -S rake db:migrate jruby -S rails server&lt;/code&gt;</pre>


<p align="left"><a href="http://jhjguxin.sinaapp.com/?attachment_id=237" rel="attachment wp-att-237"><img title="1" src="http://cnblog.cloudfoundry.com/wp-content/uploads/2012/07/1.jpg" alt="" width="743" height="475" /></a></p>


<p align="left">Book 实体的 Rails 空列表视图表明它确实正常运行。现在，我可以向我的书架添加新书。</p>




<h3 align="left"><strong>修改</strong><strong> JRuby Rails </strong><strong>应用程序以便部署到</strong><strong> CloudFoundry</strong></h3>


<p align="left">我们来首先进行我们在上文中提到的以下更改：</p>




<ul>
    <li>将 gem cf-runtime 添加到 Gemfile</li>
    <li>修改 config/database.yml 文件的“production:”节，具体见<a href="http://cnblog.cloudfoundry.com/?p=236/#database.yml"><strong>上文</strong></a></li>
    <li>添加一个名为 config/initializers/cf_db_migrate.rb 的文件，文件内容见<a href="http://cnblog.cloudfoundry.com/?p=236/#cf_db_migrate.rb"><strong>上文</strong></a></li>
</ul>


<p align="left">接下来我们需要生成 Warbler 配置文件，因此我们将运行：</p>




<pre>&lt;code&gt;jruby -S warble config &lt;/code&gt;</pre>


<p align="left">现在，我们就可以：</p>




<ul>
    <li>修改 config/warble.rb 以添加 db/migrate 目录，具体见<a href="http://cnblog.cloudfoundry.com/?p=236/#warble.rb"><strong>上文</strong></a></li>
</ul>


<p align="left">这些便是需要做出的全部更改，我们现在就已万事俱备，可以打包和部署此应用程序了。</p>




<h3 align="left"><strong>打包</strong><strong> JRuby Rails </strong><strong>应用程序并将其部署到</strong><strong> CloudFoundry</strong></h3>


<p align="left">我们将使用 <a href="http://kenai.com/projects/warbler/pages/Home"><strong>Warbler</strong></a> 来将此应用程序打包成一个 war，并使用 <a href="http://start.cloudfoundry.com/tools/vmc/installing-vmc.html"><strong>CloudFoundry vmc</strong></a> 命令行实用程序来部署此应用程序。</p>


<p align="left">我们用来将此应用程序打包成 war 文件的流程十分简单：捆绑，预编译资产，然后运行 Warbler：</p>




<pre>&lt;code&gt;jruby -S bundle install jruby -S rake assets:precompile jruby -S warble&lt;/code&gt;</pre>


<p align="left">这会在我们的 Rails 应用程序的根目录中创建一个 bookshelf.war。目前，将 vmc 命令与 JRuby 一起运行时会存在一些问题，不过我们正在致力于加以修复。同时，我们还可以将此 war 文件移至其他目录，这样我就可以更轻松地改用常规的“C”Ruby。我将创建一个“deploy”目录，并将该目录配置为使用 Ruby 1.9.2-p290（我当前使用的是 rbenv，但您也可以使用 RVM）：</p>




<pre>&lt;code&gt;mkdir deploy mv bookshelf.war deploy/. cd deploy rbenv local 1.9.2-p290 # (if you use RVM the command should be &#039;rvm ruby-1.9.2-p290&#039;)&lt;/code&gt;</pre>


<p align="left">现在，我们已准备就绪，可以登录 CloudFoundry 并部署我们的应用程序了。对于此部分，您需要安装<a href="http://start.cloudfoundry.com/tools/vmc/installing-vmc.html"><strong>vmc</strong></a>。</p>




<pre>&lt;code&gt;vmc target api.cloudfoundry.com vmc login cloud@mycompany.com Password: ***** Successfully logged into [http://api.cloudfoundry.com] vmc push bookshelf Would you like to deploy from the current directory? [Yn]: Y Application Deployed URL [bookshelf.cloudfoundry.com]: mybookshelf.cloudfoundry.com Detected a Java Web Application, is this correct? [Yn]: Y Memory reservation (128M, 256M, 512M, 1G, 2G) [512M]: 512M How many instances? [1]: 1 Bind existing services to &#039;bookshelf&#039;? [yN]: N Create services to bind to &#039;bookshelf&#039;? [yN]: Y 1: mongodb 2: mysql 3: postgresql 4: rabbitmq 5: redis What kind of service?: 2 Specify the name of the service [mysql-a4fd7]: mysql-books Create another? [yN]: N Would you like to save this configuration? [yN]: N Creating Application: OK Creating Service [mysql-books]: OK Binding Service [mysql-books]: OK Uploading Application: Checking for available resources: OK Processing resources: OK Packing application: OK Uploading (707K): OK Push Status: OK Staging Application &#039;bookshelf&#039;: OK Starting Application &#039;bookshelf&#039;: OK&lt;/code&gt;</pre>


<p align="left">上面已将 vmc 命令突出显示出来。除 URL 以及是否应创建服务外，已接受大部分默认设置。我使用的 URL 为“mybookshelf.cloudfoundry.com”而非默认 URL，以免与现有的书架应用程序冲突。对于是否创建新服务的问题，我回答“Y”；此外我还选择了 (2) mysql 并将其命名为“mysql-books”。</p>


<p align="left">现在我们应看到此应用程序正在运行：</p>




<pre>&lt;code&gt;vmc apps +-------------+----+---------+---------------------------------+---------------+ | Application | # | Health | URLS | Services | +-------------+----+---------+---------------------------------+---------------+ | bookshelf | 1 | RUNNING | mybookshelf.cloudfoundry.com | mysql-books | +-------------+----+---------+---------------------------------+---------------+&lt;/code&gt;</pre>


<p align="left">因此，我们现在输入“http://mybookshelf.cloudfoundry.com/”，就可以看到此 Bookshelf 应用程序惟妙惟肖地展示出来，我们可以添加一些书籍。</p>


<p align="left"><a href="http://jhjguxin.sinaapp.com/2012/02/14/rvm%e4%b8%8b%e5%ae%89%e8%a3%85gem%e7%bc%96%e8%af%91%e5%a4%b1%e8%b4%a5-linecache19/237-revision/" rel="attachment wp-att-238"><img title="2" src="http://cnblog.cloudfoundry.com/wp-content/uploads/2012/07/2.jpg" alt="" width="743" height="475" /></a></p>


<p align="left">您可以在 <a href="https://github.com/cloudfoundry-samples/jruby-rails-bookshelf"><strong>cloudfoundry-samples/jruby-rails-bookshelf</strong></a> 位置查看和下载用于此示例的完整源代码；如果您只想了解为在 Cloud Foundry 中部署而需进行的更改，请查看此<a href="https://github.com/cloudfoundry-samples/jruby-rails-bookshelf/commit/b568eac02b1cf50f47d62de0d0c63219c3198fc0"><strong>提交</strong></a>。</p>




<h4 align="left">结论</h4>


<p align="left">我们已经证明了可以将一个简单的 JRuby on Rails 应用程序部署到 cloudfoundry 并使用 MySQL 服务作为支持它的数据存储。只需对数据库的应用程序配置进行一些修改，即可做到。</p>


<p align="left">我们将发布一篇博文来阐述对于使用 DataMapper 实现持久保留的 JRuby Sinatra 应用程序我们需要进行的类似更改。</p>


<p align="left"><em>- Cloud Foundry </em><em>团队</em>
<em></em><em>Thomas Risberg</em></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new-post]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/07/new-post/"/>
    <updated>2012-09-07T23:37:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/07/new-post</id>
    <content type="html"><![CDATA[<h2></h2>

<h2></h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你可能错过的 Rails 技巧 --Posted by bigcircle]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/07/ni-ke-neng-cuo-guo-de-rails-ji-qiao-posted-by-bigcircle/"/>
    <updated>2012-09-07T23:29:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/07/ni-ke-neng-cuo-guo-de-rails-ji-qiao-posted-by-bigcircle</id>
    <content type="html"><![CDATA[<h2>你可能错过的 Rails 技巧 &#8211;Posted by bigcircle</h2>

<p>记得前段时间 RailsConf2012 之后看过一个不错的pdf，<a href="https://speakerdeck.com/u/jeg2/p/10-things-you-didnt-know-rails-could-do">10 things you didn’t know rails could do</a></p>

<p>说是10个，但是给出了42个实例，这几天抽空又回味了下，料很多，写的很好，顺便总结学习下</p>

<p>Pass 掉第一个 <a href="http://fridayhug.com/">fridayhug</a>，我们是开心拥抱每一天</p>

<p>&nbsp;</p>

<pre class="brush: rails; gutter: true">%w(action_controller/railtie coderay markaby).map &amp;method(:require)

run TheSmallestRailsApp ||= Class.new(Rails::Application) {
  config.secret_token = routes.append {
    root to: proc {
      [200, {&quot;Content-Type&quot; =&gt; &quot;text/html&quot;}, [Markaby::Builder.new.html {
        title @title = &quot;The Smallest Rails App&quot;
        h3 &quot;I am #@title!&quot;
        p &quot;Here is my source code:&quot;
        div { CodeRay.scan_file(__FILE__).div(line_numbers: :table) }
        p { a &quot;Make me smaller&quot;, href: &quot;//goo.gl/YdRpy&quot; }
      }]]
    }
  }.to_s
  initialize!
}</pre>


<p>2 - 提醒功能 TODO</p>

<pre>class UsersController &lt; ApplicationController
  # TODO:  Make it possible to create new users.
end

class User &lt; ActiveRecord::Base
  # FIXME: Should token really  be accessible?
  attr_accessible :bil, :email, :name, :token
end</pre>


<p>执行 rake notes</p>

<p>&nbsp;</p>

<pre>app/controllers/users_controller.rb:
  * [ 2] [TODO] Make it possible to create new users.

app/models/user.rb:
  * [ 2] [FIXME] Should token really be accessible?

app/views/articles/index.html.erb:
  * [ 1] [OPTIMIZE] Paginate this listing.</pre>


<p>查看单独的 TODO / FIXME / OPTIMIZE</p>

<pre>rake notes:todo

app/controllers/users_controller.rb:
  * [ 2] Make it possible to create new users.</pre>


<p>可以自定义提醒名称</p>

<pre>class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
  # JEG2: Add that code from your blog here.
end</pre>


<p>不过需要敲一长串，可以alias个快捷键</p>

<pre>rake notes:custom ANNOTATION=JEG2

app/models/article.rb:
  * [ 4]Add that code from your blog here.</pre>


<p>3 - 沙箱模式执行 rails c</p>

<pre>rails c --sandbox</pre>


<p>沙箱模式会有回滚事务机制，对数据库的操作在退出之前都会自动回滚到之前未修改的数据</p>

<p>4 - 在 rails c 控制台中使用 rails helper 方法</p>

<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; helper.number_to_currency(100)
=&gt; &quot;$100.00&quot;
&gt;&gt; helper.time_ago_in_words(3.days.ago)
=&gt; &quot;3 days&quot;</pre>


<p>5 - 开发模式用 thin 代替 webrick</p>

<pre>group :development do
  gem &#039;thin&#039;
end

rails s thin / thin start</pre>


<p>6 - 允许自定义配置</p>

<pre> - lib/custom/railtie.rb

 module Custom
   class Railtie &lt; Rails::Railtie
     config.custom = ActiveSupport::OrderedOptions.new
   end
 end

 - config/application.rb

 require_relative &quot;../lib/custom/railtie&quot;

 module Blog
   class Application &lt; Rails::Application
     # ...
     config.custom.setting = 42
   end
 end</pre>


<p>7 - keep funny</p>

<p>作者给出了个介绍 ruby 以及一些相关 blog的网站 <a href="http://www.rubydramas.com/">rubydramas</a>，搞笑的是这个网站右上角标明</p>

<pre>Powered by PHP</pre>


<p>用 <a href="http://isitrails.com/">isitrails.com</a> 检查了下，果然不是用 rails 做的，这个应该是作者分享 ppt 过程中的一个小插曲吧</p>

<p>8 -理解简写的迁移文件</p>

<pre>rails g resources user name:string email:string token:string bio:text</pre>


<p>字段会被默认为 string 属性，查看了下 <a href="https://github.com/rails/rails/blob/master/railties/lib/rails/generators/generated_attribute.rb#LC55">源码</a>，果然有初始化定义</p>

<pre>rails g resources user name email token:string{6} bio:text</pre>


<p>会生成用样的 migration 文件</p>

<pre>class CreateUsers &lt; ActiveRecord::Migration   def change     create_table :users do |t|       t.string :name       t.string :email       t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end
  end
end</pre>


<p>9 - 给 migration 添加索引</p>

<pre>rails g resource user name:index email:uniq token:string{6} bio:text</pre>


<p>会生成 name 和 email 的索引，同时限定 email 唯一</p>

<pre>class CreateUsers &lt; ActiveRecord::Migration   def change     create_table :users do |t|       t.string :name       t.string :email       t.string :token, :limit =&gt; 6
      t.text :bio
      t.timestamps
    end

    add_index :users, :name
    add_index :users, :email, :unique =&gt; true
  end
end</pre>


<p>10 - 添加关联关系</p>

<pre>rails g resource article user:references subject body:text</pre>


<p>会自动关联生成对应的 belongs_to 和 外键，并添加索引</p>

<pre>class CreateArticles &lt; ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.references :user
      t.string :subject
      t.text :body
      t.timestamps
    end
    add_index :articles, :user_id
  end
end</pre>


<pre>class Article &lt; ActiveRecord::Base
  belongs_to :user
  attr_accessible :body, :subject
end</pre>


<p>11 - 显示数据迁移记录</p>

<pre>rake db:migrate:status</pre>


<p>会输出 migration 的状态，这在解决迁移版本冲突的时候很有用</p>

<pre>database: db/development.sqlite3

 status   Migration ID    Migration Name
 ---------------------------------------
   up     20120414155612  Create users
   up     20120414160528  Create articles
  down    20120414161355  Create comments</pre>


<p>12 - 导入 csv 文件</p>

<p>csv 文件内容如下</p>

<pre>Name,Email
James,james@example.com
Dana,dana@example.com
Summer,summer@example.com</pre>


<p>创建 rake 任务导入 users 表</p>

<pre>require &#039;csv&#039;
namespace :users do
  desc &quot;Import users from a CSV file&quot;
  task :import =&gt; :environment do
    path = ENV.fetch(&quot;CSV_FILE&quot;) {
      File.join(File.dirname(__FILE__), *%w[.. .. db data users.csv])
    }
    CSV.foreach(path, headers: true, header_converters: :symbol) do |row|
      User.create(row.to_hash)
    end
  end
end</pre>


<p>13 - 数据库中储存 csv</p>

<pre>class Article &lt;  ActiveRecord::Base
  require &#039;csv&#039;
  module CSVSerializer
    module_function
    def load(field); field.to_s.parse_csv; end
    def dump(object); Array(object).to_csv; end
  end
  serialize :categories, CSVSerializer

  attr_accessible :body, :subject, :categories
end</pre>


<p>serialize 用于在文本字段储存序列化的值，如序列，Hash，Array等，例如</p>

<pre>user = User.create(:preferences =&gt; { &quot;background&quot; =&gt; &quot;black&quot;, &quot;display&quot; =&gt; large })
User.find(user.id).preferences # =&gt; { &quot;background&quot; =&gt; &quot;black&quot;, &quot;display&quot; =&gt; large }</pre>


<p>这个例子中将 CSVSerializer to_csv序列化之后储存在 categories 这个文本类型字段中</p>

<p>14 - 用 pluck 查询</p>

<pre>$ rails c
loading development environment(Rails 3.2.3)

&gt;&gt; User.select(:email).map(&amp;:email)
  User Load(0.1ms) SELECT email FROM &quot;users&quot;
=&gt; [&quot;james@example.com&quot;, &quot;dana@example.com&quot;, &quot;summer@example.com&quot;]
&gt;&gt; User.pluck(:email)
   (0.2ms) SELECT email FROM &quot;users&quot;
=&gt; [&quot;james@example.com&quot;, &quot;dana@example.com&quot;, &quot;summer@example.com&quot;]
&gt;&gt; User.uniq.pluck(:email)
   (0.2ms) SELECT DISTINCT email FROM &quot;users&quot;
=&gt; [&quot;james@example.com&quot;, &quot;dana@example.com&quot;, &quot;summer@example.com&quot;]</pre>


<p>pluck 的实现方式其实也是 select 之后再 map</p>

<pre>def pluck(column_name)
  column_name = column_name.to_s
  klass.connection.select_all(select(column_name).arel).map! do |attributes|
    klass.type_cast_attribute(attributes.keys.first, klass.initialize_attributes(attributes))
  end
end</pre>


<p>15 - 使用 group count</p>

<p>创建 article 关联 model event</p>

<pre>rails g resource event article:belongs_to triggle</pre>


<p>创建3条 edit 记录和10条 view 记录。 Event.count 标明有13条记录，
group(:triggle).count 表示统计 triggle group 之后的数量，也可以用 count(:group =&gt; :trigger)</p>

<p>$ rails c</p>

<pre>&amp;gt;&amp;gt; article = Article.last
=&amp;gt; #&lt;article id:1=&quot;&quot;&gt;&amp;gt;&amp;gt; {edit:3, view:10}.each do |trigger, count| ?&amp;gt; count.times do ?&amp;gt; Event.new(trigger: trigger).tap{ |e| e.article= article; e.save! } ?&amp;gt; end =&amp;gt; {:edit =&amp;gt; 3, :view =&amp;gt; 10} &amp;gt;&amp;gt; Event.count =&amp;gt; 13 &amp;gt;&amp;gt; Event.group(:trigger).count =&amp;gt; {&quot;edit&quot; =&amp;gt; 3, &quot;view&quot; =&amp;gt; 10}&lt;/article&gt;</pre>


<p>16 - 覆盖关联关系</p>

<pre>class Car &lt; ActiveRecord::Base
  belongs_to :owner
  belongs_to :previous_owner, class_name: &quot;Owner&quot;

  def owner=(new_owner)
    self.previous_owner = owner
    super
  end
end</pre>


<p>car更改 owner 时，如果有了 new_owner，就把原 owner 赋给 previous_owner，注意要加上 super</p>

<p>17 - 构造示例数据</p>

<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; User.find(1)
=&gt; #
￼￼￼￼￼&gt;&gt; jeg2 = User.instantiate(&quot;id&quot; =&gt; 1, &quot;email&quot; =&gt; &quot;
￼￼￼￼=&gt; #
&gt;&gt; jeg2.name = &quot;James Edward Gray II&quot;
￼￼￼￼=&gt; &quot;James Edward Gray II&quot;
&gt;&gt; jeg2.save!
=&gt; true
&gt;&gt; User.find(1)
￼￼￼￼￼￼james@example.com&quot;, ...&gt;</pre>


<p>伪造一条记录，并不是数据库中的真实数据，也不会把原有数据覆盖</p>

<p>18 - PostgreSQL 中使用无限制的 string</p>

<p>去掉适配器中对 string 长度的限制，这个应该是 PostgreSQL 数据库的特性</p>

<pre>module PsqlApp
  class Application &lt; Rails::Application
    # Switch to limitless strings
    initializer &quot;postgresql.no_default_string_limit&quot; do
      ActiveSupport.on_load(:active_record) do
        adapter = ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
        adapter::NATIVE_DATABASE_TYPES[:string].delete(:limit)
      end
    end
 end
end</pre>


<p>创建 user 表，bio 字符串</p>

<pre>rails g resource user bio</pre>


<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; very_long_bio = &quot;X&quot; * 10_000; :set
=&gt; :set
&gt;&gt; User.create!(bio: very_long_bio)
=&gt; #
&gt;&gt; User.last.bio.size
=&gt; 10000</pre>


<p>19 - PostgreSQL 中使用全文搜</p>

<pre>rails g resource article subject body:text</pre>


<p>更改迁移文件，添加索引和 articles_search_update 触发器</p>

<pre>class CreateArticles &lt; ActiveRecord::Migration
  def change
    create_table :articles do |t|
      t.string :subject
      t.text   :body
      t.column :search, &quot;tsvector&quot;
      t.timestamps
    end
    execute &lt;</pre>


<p>Model 中添加 search 方法</p>

<pre>class Article &lt; ActiveRecord::Base
  attr_accessible :body, :subject
  def self.search(query)
    sql = sanitize_sql_array([&quot;plainto_tsquery(&#039;english&#039;, ?)&quot;, query])
    where(
      &quot;search @@ #{sql}&quot;
    ).order(
      &quot;ts_rank_cd(search, #{sql}) DESC&quot;
    )
  end
end</pre>


<p>PostgreSQL 数据库没用过，这段看例子吧</p>

<pre>$ rails c
Loading development environment (Rails 3.2.3)
&amp;gt;&amp;gt; Article.create!(subject: &quot;Full Text Search&quot;)
=&amp;gt; #&lt;article id:=&quot;&quot; 1=&quot;&quot;&gt;&amp;gt;&amp;gt; Article.create!(body: &quot;A stemmed search.&quot;) =&amp;gt; #&lt;article id:=&quot;&quot; 2=&quot;&quot;&gt;&amp;gt;&amp;gt; Article.create!(body: &quot;You won&#039;t find me!&quot;) =&amp;gt; #&lt;article id:=&quot;&quot; 3=&quot;&quot;&gt;&amp;gt;&amp;gt; Article.search(&quot;search&quot;).map { |a| a.subject || a.body } =&amp;gt; [&quot;Full Text Search&quot;, &quot;A stemmed search.&quot;] &amp;gt;&amp;gt; Article.search(&quot;stemming&quot;).map { |a| a.subject || a.body } =&amp;gt; [&quot;A stemmed search.&quot;]&lt;/article&gt;&lt;/article&gt;&lt;/article&gt;</pre>


<p>21 - 每个用户使用不同的数据库</p>

<pre>- user_database.rb

def connect_to_user_database(name)
  config = ActiveRecord::Base.configurations[&quot;development&quot;].merge(&quot;database&quot; =&gt; &quot;db/#{name}.sqlite3&quot;)
  ActiveRecord::Base.establish_connection(config)
end</pre>


<p>创建 rake 任务：新增用户数据库和创建</p>

<pre>require &quot;user_database&quot;

namespace :db do
  desc &quot;Add a new user database&quot;
  task :add =&gt; %w[environment load_config] do
    name = ENV.fetch(&quot;DB_NAME&quot;) { fail &quot;DB_NAME is required&quot; }
    connect_to_user_database(name)
    ActiveRecord::Base.connection
  end

  namespace :migrate do
    desc &quot;Migrate all user databases&quot;
    task :all =&gt; %w[environment load_config] do
      ActiveRecord::Migration.verbose = ENV.fetch(&quot;VERBOSE&quot;, &quot;true&quot;) == &quot;true&quot;
      Dir.glob(&quot;db/*.sqlite3&quot;) do |file|
        next if file == &quot;db/test.sqlite3&quot;
        connect_to_user_database(File.basename(file, &quot;.sqlite3&quot;))
        ActiveRecord::Migrator.migrate(
          ActiveRecord::Migrator.migrations_paths,
          ENV[&quot;VERSION&quot;] &amp;&amp; ENV[&quot;VERSION&quot;].to_i
        ) do |migration|
          ENV[&quot;SCOPE&quot;].blank? || (ENV[&quot;SCOPE&quot;] == migration.scope)
        end
      end
    end
  end
end</pre>


<p>执行几个rake 任务创建不同的数据库</p>

<pre>$ rails g resource user name
$ rake db:add DB_NAME=ruby_rogues
$ rake db:add DB_NAME=grays
$ rake db:migrate:all
==  CreateUsers: migrating ==================================
-- create_table(:users)
   -&gt; 0.0008s
==  CreateUsers: migrated (0.0008s) =========================
==  CreateUsers: migrating ==================================
-- create_table(:users)
   -&gt; 0.0007s
==  CreateUsers: migrated (0.0008s) =========================</pre>


<p>创建几条记录，为不同的数据库创建不同的数据</p>

<pre>$ rails c
&gt;&gt; connect_to_user_database(&quot;ruby_rogues&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Chuck&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Josh&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Avdi&quot;)
=&gt; #
...
&gt;&gt; connect_to_user_database(&quot;grays&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;James&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Dana&quot;)
=&gt; #
&gt;&gt; User.create!(name: &quot;Summer&quot;)
=&gt; #</pre>


<p>ApplicationController 里面添加 before_filter 根据登陆的二级域名判断连接哪个数据库</p>

<pre>class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  before_filter :connect_to_database
private
  def connect_to_database
    connect_to_user_database(request.subdomains.first)
  end
end</pre>


<p>中场休息时，去找了下 RailsConf 2012 的视频看了看，刚好看到关于 <a href="http://confreaks.com/videos/889-railsconf2012-ten-things-you-didn-t-know-rails-could-do">这篇</a> 的介绍，片子还挺长，41分钟，演讲者长相和声音都很不符合大家对 Rails 的认知，大家有兴趣的可以去听听</p>

<p>21 - 自动写文件</p>

<pre>class Comment &lt; ActiveRecord::Base
  # ...
  Q_DIR = (Rails.root + &quot;comment_queue&quot;).tap(&amp;:mkpath)
  after_save :queue_comment
  def queue_comment
    File.atomic_write(Q_DIR + &quot;#{id}.txt&quot;) do |f|
      f.puts &quot;Article: #{article.subject}&quot;
      f.puts &quot;User:    #{user.name}&quot;
      f.puts body
    end
  end
end</pre>


<p>找了下 Api 是 Rails 对 Ruby 基础类的扩展</p>

<p>22 - 合并嵌套 Hash</p>

<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; {nested: {one: 1}}.merge(nested: {two: 2})
=&gt; {:nested=&gt;{:two=&gt;2}}
&gt;&gt; {nested: {one: 1}}.deep_merge(nested: {two: 2})
=&gt; {:nested=&gt;{:one=&gt;1, :two=&gt;2}}</pre>


<p>主要是用到了 deep_merge 合并相同的 key</p>

<p>23 - Hash except</p>

<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; params = {controller: &quot;home&quot;, action: &quot;index&quot;, from: &quot;Google&quot;}
=&gt; {:controller=&gt;&quot;home&quot;, :action=&gt;&quot;index&quot;, :from=&gt;&quot;Google&quot;}
&gt;&gt; params.except(:controller, :action)
=&gt; {:from=&gt;&quot;Google&quot;}</pre>


<p>这个方法经常会用到，可能用的人也很多</p>

<p>24 - add defaults to Hash</p>

<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; {required: true}.merge(optional: true)
=&gt; {:required=&gt;true, :optional=&gt;true}
&gt;&gt; {required: true}.reverse_merge(optional: true)
=&gt; {:optional=&gt;true, :required=&gt;true}
&gt;&gt; {required: true, optional: false}.merge(optional: true)
=&gt; {:required=&gt;true, :optional=&gt;true}
&gt;&gt; {required: true, optional: false}.reverse_merge(optional: true)
=&gt; {:optional=&gt;false, :required=&gt;true}</pre>


<p>这几个都是对 Hash 类的增强，merge 会替换原有相同 key 的值，但 reverse_merge 不会</p>

<p>从源码就可以看出，会事先 copy 一份 default hash</p>

<pre>def reverse_merge(other_hash)
  super
  self.class.new_from_hash_copying_default(other_hash)
end</pre>


<p>25 - String.value? 方法</p>

<p>看下面的几个例子</p>

<p>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; env = Rails.env
=&gt; &#8220;development&#8221;
&gt;&gt; env.development?
=&gt; true
&gt;&gt; env.test?
=&gt; false
&gt;&gt; &#8220;magic&#8221;.inquiry.magic?
=&gt; true
&gt;&gt; article = Article.first
=&gt; #</p>

<p><article id:="" 1="" status:="" draft="">&gt;&gt; article.draft?
=&gt; true
&gt;&gt; article.published?
=&gt; false</article>&nbsp;</p>

<p>env, “magic” 可以直接使用 value? 的方法，这个扩展是 String#inquiry 方法</p>

<pre>def inquiry
  ActiveSupport::StringInquirer.new(self)
end

# 用method_missing 实现
def method_missing(method_name, *arguments)
  if method_name.to_s[-1,1] == &quot;?&quot;
    self == method_name.to_s[0..-2]
  else
    super
  end
end</pre>


<p>类型的一个例子，同样用到了 inquiry 方法</p>

<pre>class Article &lt; ActiveRecord::Base
  # ...
  STATUSES = %w[Draft Published]
  validates_inclusion_of :status, in: STATUSES
  def method_missing(method, *args, &amp;block)
    if method =~ /\A#{STATUSES.map(&amp;:downcase).join(&quot;|&quot;)}\?\z/
      status.downcase.inquiry.send(method)
    else
      super
    end
  end
end</pre>


<p>&nbsp;</p>

<h6 id="section-1">26 - 让你成为杂志的封面 （暖场之用）</h6>


<p>搞笑哥拿出了 DHH 当选 Linux journal 杂志封面的图片，会场也是哄堂大笑 ^.^</p>

<p><img src="http://www.rubyinside.com/wp-content/uploads/2006/05/dhh.png" alt="" /></p>

<p>27 - 隐藏注释</p>

<pre>
&lt;h1&gt;Home Page&lt;/h1&gt;

# 生成的 html&lt;!-- HTML comments stay in the rendered content --&gt; 

&lt;h1&gt;Home Page&lt;/h1&gt;
</pre>


<p>这个一下没看懂。。试了下项目里面的代码，原来是隐藏的意思。。 28 - 理解更短的 erb 语法</p>

<pre># ...
module Blog
  class Application &lt; Rails::Application

    # Broken:  config.action_view.erb_trim_mode = &#039;%&#039;
    ActionView::Template::Handlers::ERB.erb_implementation =
      Class.new(ActionView::Template::Handlers::Erubis) do
        include ::Erubis::PercentLineEnhancer
      end
    ￼￼￼￼end
  end
end</pre>


<p>接着在 view 页面替换用 % 表示原来，有点像 slim</p>

<pre>% if current_user.try(:admin?)

% end</pre>


<p>29 - 用 block 避免视图层赋值</p>

<blockquote>
<pre></pre>
<pre>&lt;table&gt;
  &lt;% @cart.products.each do |product| %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency product.price %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
  &lt;tr&gt;
    &lt;td&gt;Subtotal&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency @cart.total %&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Tax&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency(tax = calculate_tax(@cart.total)) %&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Total&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency(@cart.total + tax) %&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</pre>
</blockquote>


<p><code>
tax = calculate_tax(@cart.total)</code> 会先被赋值再被下面引用 用 block 重构下，把逻辑代码放到 helper 里面</p>

<pre>module CartHelper
  def calculate_tax(total, user = current_user)
    tax = TaxTable.for(user).calculate(total)
    if block_given?
      yield tax
    else
      tax
    end
  end
end</pre>


<blockquote>
<pre>&lt;table&gt;
  &lt;% @cart.products.each do |product| %&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;%= product.name %&gt;&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency product.price %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
  &lt;tr&gt;
    &lt;td&gt;Subtotal&lt;/td&gt;
    &lt;td&gt;&lt;%= number_to_currency @cart.total %&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;% calculate_tax @cart.total do |tax| %&gt;
    &lt;tr&gt;
      &lt;td&gt;Tax&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency tax %&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;&lt;%= number_to_currency(@cart.total + tax) %&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;% end %&gt;
&lt;/table&gt;</pre>
<pre></pre>

&nbsp;
</blockquote>


<p>30 - 同时生成多个标签</p>

<blockquote>
<pre>&lt;h1&gt;Articles&lt;/h1&gt;
  &lt;% @articles.each do |article| %&gt;
    &lt;%= content_tag_for(:div, article) do %&gt;
    &lt;h2&gt;&lt;%= article.subject %&gt;&lt;/h2&gt;
  &lt;% end %&gt;
&lt;% end %&gt;</pre>
<pre>&lt;%= content_tag_for(:div, @articles) do |article| %&gt;
  &lt;h2&gt;&lt;%= article.subject %&gt;&lt;/h2&gt;
&lt;% end %&gt;</pre>
<pre></pre>

&nbsp;
</blockquote>


<p>&nbsp;</p>

<h1></h1>


<p>content_tag_for 具体用法可以参考 <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/RecordTagHelper.html#method-i-content_tag_for">Api</a>，意思比较明白 <a href="http://edgeapi.rubyonrails.org/classes/ActiveModel/Conversion.html#method-i-to_partial_path">to_partial_path</a> 是 ActiveModel 內建的实例方法，返回一个和可识别关联对象路径的字符串，原文是这么说的，目前还没看明白这么用的目的在哪</p>

<h2>这篇 <a href="http://blog.plataformatec.com.br/2012/01/my-five-favorite-hidden-features-in-rails-3-2/">blog</a> 介绍了4个最喜欢的 Rails3.2 隐藏特性，</h2>


<p>&nbsp;</p>

<h6 id="inspire-theme-songs-about-your-work-">这4条都在这个系列中，作者可能也是从这学来的吧</h6>


<p>31 - Render Any Object</p>

<pre>class Event &lt; ActiveRecord::Base
  # ...
  def to_partial_path
    &quot;events/#{trigger}&quot;  # events/edit or events/view
  end
end</pre>


<p><a href="http://edgeapi.rubyonrails.org/classes/ActiveModel/Conversion.html#method-i-to_partial_path">to_partial_path</a> 是 ActiveModel 內建的实例方法，返回一个和可识别关联对象路径的字符串，原文是这么说的，目前还没看明白这么用的目的在哪</p>

<p>&nbsp;</p>

<pre>Returns a string identifying the path associated with the object.
ActionPack uses this to find a suitable partial to represent the object.</pre>


<p>32 - 生成 group option</p>

<pre> %w[One Two Three],
  &quot;Group B&quot; =&gt; %w[One Two Three]
) ) %&gt;</pre>


<p>这个其实就是用到了 grouped_options_for_select ，我在前面的 博文 提到过这几个 select 的用法</p>

<p>33 -定制你自己喜欢的 form 表单</p>

<pre>class LabeledFieldsWithErrors &lt; ActionView::Helpers::FormBuilder
  def errors_for(attribute)
    if (errors = object.errors[attribute]).any?
      @template.content_tag(:span, errors.to_sentence, class: &quot;error&quot;)
    end
  end
  def method_missing(method, *args, &amp;block)
    if %r{ \A (?labeled_)?
              (?\w+?)
              (?_with_errors)? \z }x =~ method and
       respond_to?(wrapped) and [labeled, with_errors].any?(&amp;:present?)
      attribute, tags = args.first, [ ]
      tags           &lt;&lt; label(attribute) if labeled.present?
      tags           &lt;&lt; send(wrapped, *args, &amp;block)
      tags           &lt;&lt; errors_for(attribute) if with_errors.present?
      tags.join(&quot; &quot;).html_safe
    else
      super
    end
  end
end</pre>


<p>定义了几个不想去看懂的 method_missing 方法。。 修改 application.rb，添加配置</p>

<pre>class Application &lt; Rails::Application
  # ...
  require &quot;labeled_fields_with_errors&quot;
  config.action_view.default_form_builder = LabeledFieldsWithErrors
  config.action_view.field_error_proc     = -&gt;(field, _) { field }
end</pre>


<p>创建 form 表单可以这样书写</p>

<blockquote>
<pre></pre>
<pre>&lt;%= form_for @article do |f| %&gt;
  &lt;p&gt;&lt;%= f.text_field
  &lt;p&gt;&lt;%= f.labeled_text_field
  &lt;p&gt;&lt;%= f.text_field_with_errors
  &lt;p&gt;&lt;%= f.labeled_text_field_with_errors :subject %&gt;&lt;/p&gt;
  &lt;%= f.submit %&gt;
&lt;% end %&gt;</pre>
</blockquote>


<p>生成如下的 html 页面</p>

<blockquote>
<pre>&lt;p&gt;&lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;article_subject&quot;&gt;Subject&lt;/label&gt;
   &lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;
   &lt;span class=&quot;error&quot;&gt;can&#039;t be blank&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;label for=&quot;article_subject&quot;&gt;Subject&lt;/label&gt;
   &lt;input id=&quot;article_subject&quot; name=&quot;article[subject]&quot; size=&quot;30&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;
   &lt;span class=&quot;error&quot;&gt;can&#039;t be blank&lt;/span&gt;&lt;/p&gt;
&lt;!-- ... --&gt;</pre>
</blockquote>


<p>不是很喜欢这种方式，反而把简单的html搞复杂了，让后来维护的人增加额外的学习成本     不是很喜欢这种方式，反而把简单的html搞复杂了，让后来维护的人增加额外的学习成本</p>

<h6 id="inspire-theme-songs-about-your-work-">34 - Inspire theme songs about your work (再次暖场时刻)</h6>


<p>2011年 Farmhouse Conf 上主持人 Ron Evans 专门用口琴演奏了为大神 Tenderlove 写的歌 - <a href="http://www.confreaks.com/videos/529-farmhouseconf-ruby-hero-tenderlove">Ruby Hero Tenderlove! </a>，听了半天不知道唱的啥。。 想找下有没有美女 Rubist, 看了下貌似没有，都是大妈，这位 <a href="http://www.confreaks.com/videos/534-farmhouseconf-meghann-millard">Meghann Millard</a> 尚可远观，大姐装束妖娆，手握纸条，蚊蝇环绕，不时微笑，长的真有点像 gossip girl 里面的 Jenny Humphrey</p>

<h6 id="section">35 - 灵活的异常操作</h6>


<p>修改 application.rb 定义</p>

<pre>class Application &lt; Rails::Application
# ...
  config.exceptions_app = routes
end</pre>


<p>每次有异常时路由都会被调用，你可以用下面的方法简单 render 404 页面</p>

<pre>match &quot;/404&quot;, :to =&gt; &quot;errors#not_found&quot;</pre>


<p>这个例子也在开头提到的那篇博文里面，感兴趣可以去自己研究下</p>

<p>36 - 给 Sinatra 添加路由</p>

<pre>- Gemfile

source &#039;https://rubygems.org&#039;
# ...
gem &quot;resque&quot;, require: &quot;resque/server&quot;

module AdminValidator

  def matches?(request)
    if (id = request.env[&quot;rack.session&quot;][&quot;user_id&quot;])
      current_user = User.find_by_id(id)
      current_user.try(:admin?)
    else
      false
    end
  end
end</pre>


<p>挂载 Resque::Server 至 /admin/resqu</p>

<pre>Blog::Application.routes.draw do
  # ...
  require &quot;admin_validator&quot;
  constraints AdminValidator do
    mount Resque::Server, at: &quot;/admin/resque&quot;
  end
end</pre>


<p>这个也没有试验，不清楚具体用法，sinatra 平时也基本不用</p>

<p>37 - 导出CSV流</p>

<pre>class ArticlesController &lt; ApplicationController
  def index
    respond_to do |format|
      format.html do
        @articles = Article.all
      end
      format.csv do
        headers[&quot;Content-Disposition&quot;] = %Q{attachment; filename=&quot;articles.csv&quot;}
        self.response_body = Enumerator.new do |response|
          csv  = CSV.new(response, row_sep: &quot;\n&quot;)
          csv &lt;&lt; %w[Subject Created Status]
          Article.find_each do |article|
            csv &lt;&lt; [ article.subject,
                     article.created_at.to_s(:long),
                     article.status ]
        ￼￼  end
        end
      end
    end
  end
# ...
end

导出 csv 是很常用的功能，很多时候报表都需要，这个还是比较实用的

38 - do some work in the background

给 articles 添加文本类型 stats 字段</pre>


<pre>rails g migration add_stats_to_articles stats:text</pre>


<p>添加一个计算 stats 方法 和 一个 after_create 方法，在创建一条记录后，会把 calculate_stats 添加到 Queue 队列，当队列中有任务时，后台创建一个线程执行该 job</p>

<pre>class Article &lt; ActiveRecord::Base
  # ...
  serialize :stats
  def calculate_stats
    words = Hash.new(0)
    body.to_s.scan(/\S+/) { |word| words[word] += 1 }
    sleep 10  # simulate a lot of work
    self.stats = {words: words}
  end

  require &quot;thread&quot;
  def self.queue; @queue ||= Queue.new end
  def self.thread
    @thread ||= Thread.new do
      while job = queue.pop
        job.call
      end
    end
  end
  thread  # start the Thread

  after_create :add_stats
  def add_stats
    self.class.queue &lt;&lt; -&gt; { calculate_stats; save }
  end
end</pre>


<p>添加一条记录，10秒后会自动给该记录 stats 字段添加 words Hash</p>

<pre>$ rails c
Loading development environment (Rails 3.2.3)
&gt;&gt; Article.create!(subject: &quot;Stats&quot;, body: &quot;Lorem ipsum...&quot;);
Time.now.strftime(&quot;%H:%M:%S&quot;)
=&gt; &quot;15:24:10&quot;
&gt;&gt; [Article.last.stats, Time.now.strftime(&quot;%H:%M:%S&quot;)]
=&gt; [nil, &quot;15:24:13&quot;]
&gt;&gt; [Article.last.stats, Time.now.strftime(&quot;%H:%M:%S&quot;)]
=&gt;[{:words=&gt;{&quot;Lorem&quot;=&gt;1, &quot;ipsum&quot;=&gt;1, ...}, &quot;15:24:26&quot;]</pre>


<p>39 - 用 Rails 生成静态站点</p>

<p>修改 config/environment/development.rb</p>

<pre>Static::Application.configure do
  # ...
  # Show full error reports and disable caching
  config.consider_all_requests_local       = true
  config.action_controller.perform_caching = !!ENV[&quot;GENERATING_SITE&quot;]
  # ...
  # Don&#039;t fallback to assets pipeline if a precompiled asset is missed
  config.assets.compile = !ENV[&quot;GENERATING_SITE&quot;]
  # Generate digests for assets URLs
  config.assets.digest = !!ENV[&quot;GENERATING_SITE&quot;]
  # ...
end

class ApplicationController &lt; ActionController::Base
  protect_from_forgery
  if ENV[&quot;GENERATING_SITE&quot;]
    after_filter do |c|
      c.cache_page(nil, nil, Zlib::BEST_COMPRESSION)
    end
  end
end</pre>


<p>修改 rake static:generate 任务</p>

<pre>require &quot;open-uri&quot;
namespace :static do
  desc &quot;Generate a static copy of the site&quot;
  task :generate =&gt; %w[environment assets:precompile] do
    site = ENV.fetch(&quot;RSYNC_SITE_TO&quot;) { fail &quot;Must set RSYNC_SITE_TO&quot; }
    server = spawn( {&quot;GENERATING_SITE&quot; =&gt; &quot;true&quot;},
                    &quot;bundle exec rails s thin -p 3001&quot; )
    sleep 10  # FIXME: start when the server is up

    # FIXME: improve the following super crude spider
    paths = %w[/]
    files = [ ]
    while path = paths.shift
      files &lt;&lt; File.join(&quot;public&quot;, path.sub(%r{/\z}, &quot;/index&quot;) + &quot;.html&quot;)
      File.unlink(files.last) if File.exist? files.last
      files &lt;&lt; files.last + &quot;.gz&quot;
      File.unlink(files.last) if File.exist? files.last
      page = open(&quot;http://localhost:3001#{path}&quot;) { |url| url.read }
      page.scan(/]+href=&quot;([^&quot;]+)&quot;/) do |link|
        paths &lt;&lt; link.first
      end
    end

    system(&quot;rsync -a public #{site}&quot;)

    Process.kill(&quot;INT&quot;, server)
    Process.wait(server)
    system(&quot;bundle exec rake assets:clean&quot;)
    files.each do |file|
      File.unlink(file)
    end
  end
end</pre>


<p>生成到某个地方，去查看吧</p>

<pre>rake static:generate RSYNC_SITE_TO=/Users/james/Desktop</pre>


<p>后面几个都不感兴趣，没有测试，说好的42个，瞎扯了3个pass掉了，实在是吐血了</p>

<p>Over.</p>

<p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Performance Tricks --Posted by Sergey Potapov]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/05/ruby-performance-tricks-posted-by-sergey-potapov/"/>
    <updated>2012-09-05T08:58:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/05/ruby-performance-tricks-posted-by-sergey-potapov</id>
    <content type="html"><![CDATA[<h2>Ruby Performance Tricks &#8211;Posted by Sergey Potapov</h2>

<p><a href="http://greyblake.com/blog/2012/09/02/ruby-perfomance-tricks/">http://greyblake.com/blog/2012/09/02/ruby-perfomance-tricks/</a></p>

<p>I did some benchmarks to find out which alternatives to write code work faster. I wanna share it with you. All benchmarks are made against ruby 1.9.3p194 MRI.</p>

<h2>Do not use exceptions for a control flow</h2>


<p>The next example is pretty stupid but it shows how exceptions slow against conditional statements.</p>

<pre>require 'benchmark'

class Obj
  def with_condition
    respond_to?(:mythical_method) ? self.mythical_method : nil
  end

  def with_rescue
    self.mythical_method
  rescue NoMethodError
    nil
  end
end

obj = Obj.new
N = 10_000_000

puts RUBY_DESCRIPTION

Benchmark.bm(15, "rescue/condition") do |x|
  rescue_report     = x.report("rescue:")    { N.times { obj.with_rescue  } }
  condition_report  = x.report("condition:") { N.times { obj.with_if      } }
  [rescue_report / condition_report]
end</pre>


<p>MRI 1.9.3:</p>

<p><code>ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux]
user system total real
rescue: 111.530000 2.650000 114.180000 (115.837103)
condition: 2.620000 0.010000 2.630000 ( 2.633154)
rescue/condition: 42.568702 265.000000 NaN ( 43.991767)
</code></p>

<p>MRI 1.8.7 (REE has similar result):</p>

<pre>ruby 1.8.7 (2011-12-28 patchlevel 357) [x86_64-linux]
                        user     system      total        real
rescue:            80.510000   0.940000  81.450000 ( 81.529022)
if:                 3.320000   0.000000   3.320000 (  3.330166)
rescue/condition:  24.250000        inf       -nan ( 24.481970)</pre>


<h2>String concatenation</h2>


<p>Avoid using <code>+=</code> to concatenate strings in favor of <code>&lt;&lt;</code> method. The result is absolutely the same: add a string to the end of an existing one. What is the difference then?</p>

<p>See the example:</p>

<pre>str1 = "first"
str2 = "second"
str1.object_id       # =&gt; 16241320

str1 += str2    # str1 = str1 + str2
str1.object_id  # =&gt; 16241240, id is changed

str1 &lt;&lt; str2 str1.object_id  # =&gt; 16241240, id is the same</pre>


<p>When you use <code>+=</code> ruby creates a temporal object which is result of <code>str1 + str2</code>. Then it overrides <code>str1</code> variable with reference to the new built object. On other hand <code>&lt;&lt;</code> modifies existing one. As a result of using <code>+=</code> you have the next disadvantages:</p>

<ul>
    <li>More calculation to join strings.</li>
    <li>Redundant string object in memory (previous value of <code>str1</code>), which approximates time when <a href="http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29">GC</a> will trigger.</li>
</ul>


<p>How <code>+=</code> is slow? Basically it depends on length of strings you have operation with.</p>

<pre>require 'benchmark'

N = 1000
BASIC_LENGTH = 10

5.times do |factor|
  length = BASIC_LENGTH * (10 ** factor)
  puts "_" * 60 + "\nLENGTH: #{length}"

  Benchmark.bm(10, '+= VS &lt;</pre>


<p>Output:</p>

<pre>____________________________________________________________
LENGTH: 10
                 user     system      total        real
+=           0.000000   0.000000   0.000000 (  0.004671)
&lt;&lt;           0.000000   0.000000   0.000000 (  0.000176)
+= VS &lt;&lt;          NaN        NaN        NaN ( 26.508796)
____________________________________________________________
LENGTH: 100
                 user     system      total        real
+=           0.020000   0.000000   0.020000 (  0.022995)
&lt;&lt;           0.000000   0.000000   0.000000 (  0.000226)
+= VS &lt;&lt;          Inf        NaN        NaN (101.845829)
____________________________________________________________
LENGTH: 1000
                 user     system      total        real
+=           0.270000   0.120000   0.390000 (  0.390888)
&lt;&lt;           0.000000   0.000000   0.000000 (  0.001730)
+= VS &lt;&lt;          Inf        Inf        NaN (225.920077)
____________________________________________________________
LENGTH: 10000
                 user     system      total        real
+=           3.660000   1.570000   5.230000 (  5.233861)
&lt;&lt;           0.000000   0.010000   0.010000 (  0.015099)
+= VS &lt;&lt;          Inf 157.000000        NaN (346.629692)
____________________________________________________________
LENGTH: 100000
                 user     system      total        real
+=          31.270000  16.990000  48.260000 ( 48.328511)
&lt;&lt;           0.050000   0.050000   0.100000 (  0.105993)
+= VS &lt;&lt;   625.400000 339.800000        NaN (455.961373)</pre>


<h2>Be careful with calculation within iterators</h2>


<p>Assume you need to write a function to convert an array into a hash where keys and values are same as elements of the array:</p>

<p>&nbsp;</p>

<pre>func([1, 2, 3])  # =&gt; {1 =&gt; 1, 2 =&gt; 2, 3 =&gt; 3}</pre>


<p>The next solution would satisfy the requirements:</p>

<pre>def func(array)
  array.inject({}) { |h, e| h.merge(e =&gt; e) }
end</pre>


<p>And would be extremely slow with big portions of data because it contains nested methods (<code>inject</code> and <code>merge</code>), so it’s <strong>O(n<sup>2</sup>) </strong>algorithm. But it’s obviously that it must be <strong>O(n) </strong>. Consider the next:</p>

<p>&nbsp;</p>

<pre>def func(array)
  array.inject({}) { |h, e| h[e] = e; h }
end</pre>


<p>In this case we do only one iteration over an array without any hard calculation within the iterator.</p>

<p>See the benchmark:</p>

<pre>require 'benchmark'

def n_func(array)
  array.inject({}) { |h, e| h[e] = e; h }
end

def n2_func(array)
  array.inject({}) { |h, e| h.merge(e =&gt; e) }
end

BASE_SIZE = 10

4.times do |factor|
  size   = BASE_SIZE * (10 ** factor)
  params = (0..size).to_a
  puts "_" * 60 + "\nSIZE: #{size}"
  Benchmark.bm(10) do |x|
    x.report("O(n)" ) { n_func(params)  }
    x.report("O(n2)") { n2_func(params) }
  end
end</pre>


<p>Output:</p>

<pre>____________________________________________________________
SIZE: 10
                user     system      total        real
O(n)        0.000000   0.000000   0.000000 (  0.000014)
O(n2)       0.000000   0.000000   0.000000 (  0.000033)
____________________________________________________________
SIZE: 100
                user     system      total        real
O(n)        0.000000   0.000000   0.000000 (  0.000043)
O(n2)       0.000000   0.000000   0.000000 (  0.001070)
____________________________________________________________
SIZE: 1000
                user     system      total        real
O(n)        0.000000   0.000000   0.000000 (  0.000347)
O(n2)       0.130000   0.000000   0.130000 (  0.127638)
____________________________________________________________
SIZE: 10000
                user     system      total        real
O(n)        0.020000   0.000000   0.020000 (  0.019067)
O(n2)      17.850000   0.080000  17.930000 ( 17.983827)</pre>


<pre></pre>


<p>It’s an obvious and trivial example. Just keep in mind to not do hard calculation within iterators if it’s possible.</p>

<h2>Use bang! methods</h2>


<p>In many cases bang methods do the same as there non-bang analogues but without duplication an object. The previous example with <code>merge!</code> would be much faster:</p>

<pre>require 'benchmark'

def merge!(array)
  array.inject({}) { |h, e| h.merge!(e =&gt; e) }
end

def merge(array)
  array.inject({}) { |h, e| h.merge(e =&gt; e) }
end

N = 10_000
array = (0..N).to_a

Benchmark.bm(10) do |x|
  x.report("merge!") { merge!(array) }
  x.report("merge")  { merge(array)  }
end</pre>


<p>Output:</p>

<pre>                 user     system      total        real
merge!       0.010000   0.000000   0.010000 (  0.011370)
merge       17.710000   0.000000  17.710000 ( 17.840856)</pre>


<pre></pre>


<p>&nbsp;</p>

<h2>Use instance variables</h2>


<p>Accessing instance variable directly is about two times faster than accessing them with accessor methods:</p>

<pre>require 'benchmark'

class Metric
  attr_accessor :var

  def initialize(n)
    @n   = n
    @var = 22
  end

  def run
    Benchmark.bm(10) do |x|
      x.report("@var") { @n.times { @var } }
      x.report("var" ) { @n.times { var  } }
      x.report("@var =")     { @n.times {|i| @var = i     } }
      x.report("self.var =") { @n.times {|i| self.var = i } }
    end
  end
end

metric = Metric.new(100_000_000)
metric.run</pre>


<p>Output:</p>

<pre>                 user     system      total        real
@var         6.980000   0.010000   6.990000 (  7.193725)
var         13.040000   0.000000  13.040000 ( 13.131711)
@var =       7.960000   0.000000   7.960000 (  8.242603)
self.var =  14.910000   0.010000  14.920000 ( 15.960125)</pre>


<p>Parallel assignment is slower</p>

<pre>require 'benchmark'

N = 10_000_000

Benchmark.bm(15) do |x|
  x.report('parallel') do
    N.times do
      a, b = 10, 20
    end
  end

  x.report('consequentially') do |x|
    N.times do
      a = 10
      b = 20
    end
  end
end</pre>


<p>Output:</p>

<pre>                      user     system      total        real
parallel          1.900000   0.000000   1.900000 (  1.928063)
consequentially   0.880000   0.000000   0.880000 (  0.879675)</pre>


<pre></pre>


<p>&nbsp;</p>

<h2>Dynamic method defention</h2>


<p>What is the faster way to define method dynamically: <code>class_eval</code> with a code string or using <code>define_method</code>? Which way generated methods work faster?</p>

<pre>require 'benchmark'

class Metric
  N = 1_000_000

  def self.class_eval_with_string
    N.times do |i|
      class_eval(&lt;</pre>


<p>Output:</p>

<pre>                             user     system      total        real
class_eval with string 219.840000   0.720000 220.560000 (221.933074)
define_method           61.280000   0.240000  61.520000 ( 62.070911)
string method            0.110000   0.000000   0.110000 (  0.111433)
dynamic method           0.150000   0.000000   0.150000 (  0.156537)</pre>


<p>So <code>class_eval</code> works slower but it’s preferred since methods generated with <code>class_eval</code>and a string of code work faster.</p>

<h2>Links</h2>


<ul>
    <li><a href="http://www.simonecarletti.com/blog/2010/01/how-slow-are-ruby-exceptions/">How Slow Are Ruby Exceptions</a></li>
    <li><a href="http://www.igvita.com/2008/07/08/6-optimization-tips-for-ruby-mri/">6 Optimization Tips for Ruby MRI</a> (NOTE: <code>Symbol#to_proc</code> was ported to Ruby and it’s not slow anymore)</li>
    <li><a href="http://my.safaribooksonline.com/book/web-development/ruby/9780321540034">“Writing Efficient Ruby Code” by Dr. Stefan Kaes</a></li>
    <li><a href="http://programmingzen.com/2007/02/10/top-10-ruby-on-rails-performance-tips/">Top 10 Ruby on Rails performance tips </a></li>
    <li><a href="http://blog.monitis.com/index.php/2012/02/08/20-ruby-performance-tips/">20 Ruby Performance Tips</a></li>
    <li><a href="http://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/">A Beginner’s Guide to Big O Notation</a></li>
</ul>


<p>Danke.</p>

<pre><footer>Posted by Sergey Potapov <time datetime="2012-09-02T23:34:00+03:00" pubdate="" data-updated="true">Sep 2nd, 2012</time>  <a href="http://greyblake.com/blog/categories/accessor/">accessor</a>, <a href="http://greyblake.com/blog/categories/concatenation/">concatenation</a>, <a href="http://greyblake.com/blog/categories/exception/">exception</a>, <a href="http://greyblake.com/blog/categories/performance/">performance</a>, <a href="http://greyblake.com/blog/categories/reader/">reader</a>,<a href="http://greyblake.com/blog/categories/ruby/">ruby</a>, <a href="http://greyblake.com/blog/categories/string/">string</a>, <a href="http://greyblake.com/blog/categories/variable/">variable</a>, <a href="http://greyblake.com/blog/categories/writer/">writer</a></footer></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[37signals Earns Millions Each Year. Its CEO’s Model? His Cleaning Lady]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/09/03/37signals-earns-millions-each-year-its-ceos-model-his-cleaning-lady/"/>
    <updated>2012-09-03T22:55:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/09/03/37signals-earns-millions-each-year-its-ceos-model-his-cleaning-lady</id>
    <content type="html"><![CDATA[<h2>37signals Earns Millions Each Year. Its CEO’s Model? His Cleaning Lady</h2>

<p>&nbsp;</p>

<p><header></p>

<h3>Don’t build a fast company, Jason Fried tells Fast Company. Build a slow one.</h3>


<p><figure><img title="" src="http://www.fastcompany.com/multisite_files/fastcompany/imagecache/640/poster/2012/08/3000852-poster-942-hs-37signals-earns-millions-each-year.jpg" alt="" width="640" height="299" /></figure></header>&nbsp;</p>

<div>

Jason Fried is a founder and CEO of <a href="http://37signals.com/" target="_blank">37signals</a>, a software company based in Chicago. Fried also treats 37signals as something of a laboratory for innovative workplace practices&#8211;such as a recent experiment in shortening the summer workweek to just four days. We caught up with Fried to learn how employees are like fossil fuels, how a business can be like a cancer, and how one of the entrepreneurs he admires most is his cleaning lady.

<strong>FAST COMPANY: You have your employees only work four-day weeks in the summer.
</strong>
JASON FRIED: Sometimes people are not really used to working just four days and actually want to stay to get more work done.

<strong>You’re saying you have people who actually want to stay the fifth day?
</strong>
When we first started this a few years ago, there was a small sense of guilt in a few corners. People were like, “I have stuff to get done, it’s Thursday, so I’m gonna work Friday and just get it done. But we actually preferred that they didn’t. There are very few things that can’t wait till Monday.

<strong>How many employees would stay to work Fridays?
</strong>
I don’t know.

<strong>Because you weren’t there!
</strong>
We don’t track things in that way. I don’t look at that. I don’t want to encourage that kind of work. I want to encourage quality work.

<strong>As CEO, wouldn’t it simply be rational to let people work the fifth day for you if they wanted?
</strong>
If you’re a short-term thinker you’d think so, but we’re long-term thinkers. We’re about being in business for the long haul and keeping the team together over the long haul. I would never trade a short-term burst for a long-term decline in morale. That happens a lot in the tech business: They burn people out and get someone else. I like the people who work here too much. I don’t want them to burn out. Lots of startups burn people out with 60, 70, 80 hours of work per week. They know that both the people or the company will flame out or be bought or whatever, and they don’t care, they just burn their resources. It’s like drilling for as much oil as you possibly can. You can look at people the same way.

<aside><q>SHE’S ON HER OWN, SHE CLEANS PEOPLE’S HOMES, SHE’S INCREDIBLY NICE. SHE BRINGS FLOWERS EVERY TIME SHE CLEANS, AND SHE’S JUST RESPECTFUL AND NICE AND AWESOME. WHY CAN’T MORE PEOPLE BE LIKE THAT?</q></aside><strong>Are we reaching “peak people”?
</strong>
It seems like in a lot of companies we are. There’s a shortage of talent out there, and if there’s a shortage of resources, you want to conserve those resources.

<strong>So you think there’s a slash-and-burn mentality in the tech world?
</strong>
For sure. I think there’s a lot of lottery-playing going on right now. Companies staffing up, raising a bunch of money, hiring a bunch of people, and burning them out in the hopes that they’ll hit the lottery.

<strong>You seem like too nice a guy to name names&#8211;but do you have certain companies in mind?
</strong>
I won’t name names. I used to name names. But I think all you have to do is read TechCrunch. Look at what the top stories are, and they’re all about raising money, how many employees they have, and these are metrics that don’t matter. What matters is: Are you profitable? Are you building something great? Are you taking care of your people? Are you treating your customers well? In the coverage of our industry as a whole, you’ll rarely see stories about treating customers well, about people building a sustainable business. TechCrunch to me is the great place to look to see the sickness in our industry right now.

<strong>Our magazine is called <em>Fast Company</em>, but it sounds like you want to build a slow company.
</strong>
I’m a fan of growing slowly, carefully, methodically, of not getting big just for the sake of getting big. I think that rapid growth is typically of symptom of&#8230; there’s a sickness there. There’s a great quote by a guy named Ricardo Semler, author of the book <em><a href="http://www.barnesandnoble.com/w/maverick-success-story-behind-the-worlds-most-unusaul-work-place-ricardo-semler/1104291050?ean=9780446670555" target="_blank">Maverick</a></em>. He said that only two things grow for the sake of growth: businesses and tumors. We have 35 employees at 37signals. We could have hundreds of employees if we wanted to&#8211;our revenues and profits support that&#8211;but I think we’d be worse off.

<strong>What industries do you look to for inspiration, if not the tech world?
</strong>
I take my inspiration from small mom-and-pop businesses that have been around for a long time. There are restaurants all over the place that I like to go to that have been around a long time, 30 years or more, and thinking about that, that’s an incredible run. I don’t know what percentage of tech companies have been around 30 years. The other interesting thing about restaurants is you could have a dozen Italian restaurants in the city and they can all be successful. It’s not like in the tech world, where everyone wants to beat each other up, and there’s one winner. Those are the businesses I find interesting&#8211;it could be a dry cleaner, a restaurant, a clothing store. Actually, my cleaning lady, for example, she’s great.

<strong>Your business icon is your cleaning lady?
</strong>
She’s on her own, she cleans people’s homes, she’s incredibly nice. She brings flowers every time she cleans, and she’s just respectful and nice and awesome. Why can’t more people be like that? She’s been doing it some twenty-odd years, and that’s just an incredible success story. To me that’s far more interesting than a tech company that’s hiring a bunch of people, just got their fourth round of financing for 12 million dollars, and they’re still losing money. That’s what everyone talks about as being exciting, but I think that’s an absolutely disgusting scenario when it comes to business.

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Chrome Keyboard and mouse shortcuts]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/30/google-chrome-keyboard-and-mouse-shortcuts/"/>
    <updated>2012-08-30T11:10:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/30/google-chrome-keyboard-and-mouse-shortcuts</id>
    <content type="html"><![CDATA[<h2>Google Chrome Keyboard and mouse shortcuts</h2>

<h3> Keyboard and mouse shortcuts</h3>


<h2>Windows keyboard shortcuts</h2>


<h3>Tab and window shortcuts</h3>


<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td>Ctrl+N</td>
<td>Opens a new window.</td>
</tr>
<tr>
<td>Ctrl+T</td>
<td>Opens a new tab.</td>
</tr>
<tr>
<td>Ctrl+Shift+N</td>
<td>Opens a new window in incognito mode.</td>
</tr>
<tr>
<td>Press Ctrl+O, then select file.</td>
<td>Opens a file from your computer in Google Chrome.</td>
</tr>
<tr>
<td>Press Ctrl and click a link. Or click a link with your middle mouse button (or mousewheel).</td>
<td>Opens the link in a new tab in the background .</td>
</tr>
<tr>
<td>Press Ctrl+Shift and click a link. Or press Shift and click a link with your middle mouse button (or mousewheel).</td>
<td>Opens the link in a new tab and switches to the newly opened tab.</td>
</tr>
<tr>
<td>Press Shift and click a link.</td>
<td>Opens the link in a new window.</td>
</tr>
<tr>
<td>Ctrl+Shift+T</td>
<td>Reopens the last tab you&#8217;ve closed. Google Chrome remembers the last 10 tabs you&#8217;ve closed.</td>
</tr>
<tr>
<td>Drag a link to a tab.</td>
<td>Opens the link in the tab.</td>
</tr>
<tr>
<td>Drag a link to a blank area on the tab strip.</td>
<td>Opens the link in a new tab.</td>
</tr>
<tr>
<td>Drag a tab out of the tab strip.</td>
<td>Opens the tab in a new window.</td>
</tr>
<tr>
<td>Drag a tab out of the tab strip and into an existing window.</td>
<td>Opens the tab in the existing window.</td>
</tr>
<tr>
<td>Press Esc while dragging a tab.</td>
<td>Returns the tab to its original position.</td>
</tr>
<tr>
<td>Ctrl+1 through Ctrl+8</td>
<td>Switches to the tab at the specified position number on the tab strip.</td>
</tr>
<tr>
<td>Ctrl+9</td>
<td>Switches to the last tab.</td>
</tr>
<tr>
<td>Ctrl+Tab or Ctrl+PgDown</td>
<td>Switches to the next tab.</td>
</tr>
<tr>
<td>Ctrl+Shift+Tab or Ctrl+PgUp</td>
<td>Switches to the previous tab.</td>
</tr>
<tr>
<td>Alt+F4</td>
<td>Closes the current window.</td>
</tr>
<tr>
<td>Ctrl+W or Ctrl+F4</td>
<td>Closes the current tab or pop-up.</td>
</tr>
<tr>
<td>Click a tab with your middle mouse button (or mousewheel).</td>
<td>Closes the tab you clicked.</td>
</tr>
<tr>
<td>Right-click, or click and hold either the Back or Forward arrow in the browser toolbar.</td>
<td>Displays your browsing history in the tab.</td>
</tr>
<tr>
<td>Press Backspace, or Alt and the left arrow together.</td>
<td>Goes to the previous page in your browsing history for the tab.</td>
</tr>
<tr>
<td>Press Shift+Backspace, or Alt and the right arrow together.</td>
<td>Goes to the next page in your browsing history for the tab.</td>
</tr>
<tr>
<td>Press Ctrl and click either the Back arrow, Forward arrow, or Go button in the toolbar. Or click either button with your middle mouse button (or mousewheel).</td>
<td>Opens the button destination in a new tab in the background.</td>
</tr>
<tr>
<td>Double-click the blank area on the tab strip.</td>
<td>Maximizes or minimizes the window.</td>
</tr>
<tr>
<td>Alt+Home</td>
<td>Opens your homepage in your current window.</td>
</tr>
</tbody>
</table>


<h3>Google Chrome feature shortcuts</h3>


<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Alt+F or Alt+E</td>
<td>Opens the wrench menu, which lets you customize and control settings in Google Chrome.</td>
</tr>
<tr>
<td width="50%">Ctrl+Shift+B</td>
<td>Toggles the bookmarks bar on and off.</td>
</tr>
<tr>
<td>Ctrl+H</td>
<td>Opens the History page.</td>
</tr>
<tr>
<td>Ctrl+J</td>
<td>Opens the Downloads page.</td>
</tr>
<tr>
<td>Shift+Esc</td>
<td>Opens the Task Manager.</td>
</tr>
<tr>
<td>Shift+Alt+T</td>
<td>Sets focus on the first tool in the browser toolbar. You can then use the following shortcuts to move around in the toolbar:
<ul>
    <li>Press Tab, Shift+Tab, Home, End, right arrow, and left arrow to move focus to different items in the toolbar.</li>
    <li>Press Space or Enter to activate toolbar buttons, including page actions and browser actions.</li>
    <li>Press Shift+F10 to bring up any associated context menu (e.g. browsing history for the Back button).</li>
    <li>Press Esc to return focus from the toolbar back to the page.</li>
</ul>
</td>
</tr>
<tr>
<td>F6 or Shift+F6</td>
<td>Switches focus to the next keyboard-accessible pane. Panes include:
<ul>
    <li>Highlights the URL in the address bar</li>
    <li>Bookmarks bar (if visible)</li>
    <li>The main web content (including any infobars)</li>
    <li>Downloads bar (if visible)</li>
</ul>
</td>
</tr>
<tr>
<td>Ctrl+Shift+J</td>
<td>Opens Developer Tools.</td>
</tr>
<tr>
<td>Ctrl+Shift+Delete</td>
<td>Opens the Clear Browsing Data dialog.</td>
</tr>
<tr>
<td>F1</td>
<td>Opens the Help Center in a new tab (our favorite).</td>
</tr>
<tr>
<td>Ctrl+Shift+M</td>
<td>Switch between multiple users.</td>
</tr>
</tbody>
</table>


<h3>Address bar shortcuts</h3>


<p>Use the following shortcuts in the address bar:</p>

<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Type a search term, then press Enter.</td>
<td>Performs a search using your default search engine.</td>
</tr>
<tr>
<td>Type a search engine keyword, press Space, type a search term, and press Enter.</td>
<td>Performs a search using the search engine associated with the keyword.</td>
</tr>
<tr>
<td>Begin typing a search engine URL, press Tab when prompted, type a search term, and press Enter.</td>
<td>Performs a search using the search engine associated with the URL.</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>Adds www. and .com to your input in the address bar and open the resulting URL.</td>
</tr>
<tr>
<td>Type a URL, then press Alt+Enter.</td>
<td>Opens the URL in a new tab.</td>
</tr>
<tr>
<td>Ctrl+L or Alt+D</td>
<td>Highlights the URL.</td>
</tr>
<tr>
<td>Ctrl+K or Ctrl+E</td>
<td>Places a &#8216;?&#8217; in the address bar. Type a search term after the question mark to perform a search using your default search engine.</td>
</tr>
<tr>
<td>Press Ctrl and the left arrow together.</td>
<td>Moves your cursor to the preceding key term in the address bar</td>
</tr>
<tr>
<td>Press Ctrl and the right arrow together.</td>
<td>Moves your cursor to the next key term in the address bar</td>
</tr>
<tr>
<td>Ctrl+Backspace</td>
<td>Deletes the key term that precedes your cursor in the address bar</td>
</tr>
<tr>
<td>Select an entry in the address bar drop-down menu with your keyboard arrows, then press Shift+Delete.</td>
<td>Deletes the entry from your browsing history, if possible.</td>
</tr>
<tr>
<td>Click an entry in the address bar drop-down menu with your middle mouse button (or mousewheel).</td>
<td>Opens the entry in a new tab in the background.</td>
</tr>
<tr>
<td>Press Page Up or Page Down when the address bar drop-down menu is visible.</td>
<td>Selects the first or last entry in the drop-down menu.</td>
</tr>
</tbody>
</table>


<p><a name="webpage"></a></p>

<h3>Webpage shortcuts</h3>


<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Ctrl+P</td>
<td>Prints your current page.</td>
</tr>
<tr>
<td>Ctrl+S</td>
<td>Saves your current page.</td>
</tr>
<tr>
<td>F5 or Ctrl+R</td>
<td>Reloads your current page.</td>
</tr>
<tr>
<td>Esc</td>
<td>Stops the loading of your current page.</td>
</tr>
<tr>
<td>Ctrl+F</td>
<td>Opens the find bar.</td>
</tr>
<tr>
<td>Ctrl+G or F3</td>
<td>Finds the next match for your input in the find bar.</td>
</tr>
<tr>
<td>Ctrl+Shift+G, Shift+F3, or Shift+Enter</td>
<td>Finds the previous match for your input in the find bar.</td>
</tr>
<tr>
<td>Click the middle mouse button (or mousewheel).</td>
<td>Activates auto-scrolling. As you move your mouse, the page automatically scrolls according to the direction of the mouse.</td>
</tr>
<tr>
<td>Ctrl+F5 or Shift+F5</td>
<td>Reloads your current page, ignoring cached content.</td>
</tr>
<tr>
<td>Press Alt and click a link.</td>
<td>Downloads the target of the link.</td>
</tr>
<tr>
<td>Ctrl+U</td>
<td>Opens the source of your current page.</td>
</tr>
<tr>
<td>Drag a link to bookmarks bar</td>
<td>Saves the link as a bookmark.</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>Saves your current webpage as a bookmark.</td>
</tr>
<tr>
<td width="50%">Ctrl+Shift+D</td>
<td>Saves all open pages as bookmarks in a new folder.</td>
</tr>
<tr>
<td>F11</td>
<td>Opens your page in full-screen mode. Press F11 again to exit full-screen.</td>
</tr>
<tr>
<td>Ctrl and +, or press Ctrl and scroll your mousewheel up.</td>
<td>Enlarges everything on the page.</td>
</tr>
<tr>
<td>Ctrl and -, or press Ctrl and scroll your mousewheel down.</td>
<td>Makes everything on the page smaller.</td>
</tr>
<tr>
<td>Ctrl+0</td>
<td>Returns everything on the page to normal size.</td>
</tr>
<tr>
<td>Space bar</td>
<td>Scrolls down the web page.</td>
</tr>
<tr>
<td>Home</td>
<td>Goes to the top of the page.</td>
</tr>
<tr>
<td>End</td>
<td>Goes to the bottom of the page.</td>
</tr>
<tr>
<td>Press Shift and scroll your mousewheel.</td>
<td>Scrolls horizontally on the page.</td>
</tr>
</tbody>
</table>


<h3>Text shortcuts</h3>


<table cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td width="50%">Ctrl+C</td>
<td>Copies highlighted content to the clipboard.</td>
</tr>
<tr>
<td>Ctrl+V or Shift+Insert</td>
<td>Pastes content from the clipboard.</td>
</tr>
<tr>
<td>Ctrl+Shift+V</td>
<td>Paste content from the clipboard without formatting.</td>
</tr>
<tr>
<td>Ctrl+X or Shift+Delete</td>
<td>Deletes the highlighted content and copies it to the clipboard.</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Caching: Part 1 - Caching Strategies]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/29/advanced-caching-part-1-caching-strategies/"/>
    <updated>2012-08-29T23:15:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/29/advanced-caching-part-1-caching-strategies</id>
    <content type="html"><![CDATA[<h2>Advanced Caching: Part 1 - Caching Strategies</h2>

<p>First, let&#8217;s start with a brief overview of the different types of caching. We&#8217;ll start from 50,000ft and work our way down.</p>

<p>HTTP Caching: Uses HTTP headers (Last-Modified, ETag, If-Modified-Since, If-None-Match, Cache-Control) to determine if the browser can use a locally stored version of the response or if it needs to request a fresh copy from the origin server. Rails makes it easy to use HTTP caching, however the cache is managed outside your application. You may have notice the config.cache_control and Rack::Cache, Rack::ETag, Rack::ConditionalGet middlewares. These are used for HTTP caching.</p>

<p>Page Caching: PRAISE THE GODS if you actually can use page caching in your application. Page caching is the holy grail. Save the entire thing. Don&#8217;t hit the stack &amp; give some prerendered stuff back. Great for worthless applications without authentication and other highly dynamic aspects. This essentially works like HTTP caching, but the response will always contain the entire page. With page caching the application is skipping the work.</p>

<p>Action Caching: Essentially the same as page caching, except all the before filters are run allowing you to check authentication and other stuff that may have prevented the request form rendering.</p>

<p>Fragment Caching: Store parts of views in the cache. Usually for caching partials or large bits of HTML that are independent from other parts. IE, a list of top stories or something like that.</p>

<p>Rails.cache: All cached content except cached pages are stored in the Rails.cache. We&#8217;ll use this fact that later. You can cache arbitrary content in the Rails cache. You may cache a large complicated query that you don&#8217;t want to wait to reinstantiate a ton of ActiveRecord::Base objects.</p>

<p>Under the Hood
All the caching layers are built on top of the next one. Page caching and HTTP caching are different because they do not use Rails.cache The cache is essentially a key-value store. Different things can be persisted. Strings are most common (for HTML fragments). More complicated objects can be persisted as well. Let&#8217;s go through some examples of manually using the cache to store things. I am using memcached with dalli for all these examples. Dalli is the default memcached driver.</p>

<h1>Rails.cache.write takes two values: key and a value</h1>

<blockquote><p>Rails.cache.write &#8216;foo&#8217;, &#8216;bar&#8217;
=> true</p></blockquote>

<h1>We can read an object back</h1>

<blockquote><p>Rails.cache.read &#8216;foo&#8217;
=> &#8220;bar&#8221;</p></blockquote>

<h1>We can store a complicated object as well</h1>

<blockquote><p>hash = { :this => { :is => &#8216;a hash&#8217; }}
Rails.cache.write &#8216;complicated-object&#8217;, object
Rails.cache.read &#8216;complicated-object&#8217;
=> {:this=>{:is=>&#8221;a hash&#8221;}}</p></blockquote>

<h1>If we want something that doesn&#8217;t exist, we get nil</h1>

<blockquote><p>Rails.cache.read &#8216;we-havent-cached-this-yet&#8217;
=> nil</p></blockquote>

<h1>&#8220;Fetch&#8221; is the most common pattern. You give it a key and a block</h1>

<h1>to execute to store if the cache misses. The blocks&#8217;s return value is</h1>

<h1>then written to the cache. The block is not executed if there is a</h1>

<h1>hit.</h1>

<blockquote><p>Rails.cache.fetch &#8216;huge-array&#8217; do</p>

<pre><code>huge_array = Array.new
1000000.times { |i| huge_array &lt;&lt; i }
huge_array # retrun value is stored in cache
</code></pre>

<p>  end
=> [huge array] # took some time to generate
Rails.cache.read &#8216;huge-array&#8217;
=> [huge array] # but returned instantly</p></blockquote>

<h1>You can also delete everything from the cache</h1>

<blockquote><p>Rails.cache.clear
=> [true]
Those are the basics of interacting with the Rails cache. The rails cache is a wrapper around whatever functionality is provided by the underlying storage system. Now we are ready to move up a layer.</p></blockquote>

<p>Understanding Fragment Caching
Fragment caching is taking rendered HTML fragments and storing them in the cache. Rails provides a cache view helper for this. Its most basic form takes no arguments besides a block. Whatever is rendered during the block will be written back to the cache. The basic principle behind fragment caching is that it takes much less time fetch pre-rendered HTML from the cache, then it takes to generate a fresh copy. This is appallingly true. If you haven&#8217;t noticed, view generation can be very costly. If you have cachable content and are not using fragment caching then you need to implement this right away! Let&#8217;s say you have generated a basic scaffold for a post:</p>

<p>$ rails g scaffold post title:string content:text author:string
Let&#8217;s start with the most common use case: caching information specific to one thing. IE: One post. Here is a show view:</p>

<!-- nothing fancy going on here -->


<p>
  <b>Title:</b>
  <%= @post.title %>
</p>

<p>
  <b>Content:</b>
  <%= @post.content %>
</p>
Let&#8217;s say we wanted to cache fragment. Simply wrap it in cache and Rails will do it.

<%= cache "post-#{@post.id}" do %>
  <p>
    <b>Title:</b>
    <%= @post.title %>
  </p>

  <p>
    <b>Content:</b>
    <%= @post.content %>
  </p>
<% end %>
The first argument is the key for this fragment. The rendered HTML is stored with this key: views/posts-1. Wait what? Where did that &#8216;views&#8217; come from? The cache view helper automatically prepends &#8216;views&#8217; to all keys. This is important later. When you first load the page you&#8217;ll see this in the log:

Exist fragment? views/post-2 (1.6ms)
Write fragment views/post-2 (0.9ms)
You can see the key and the operations. Rails is checking to see if the specific key exists. It will fetch or write it. In this case, it has not been stored so it is written. When you reload the page, you&#8217;ll see a cache hit:

Exist fragment? views/post-2 (0.6ms)
Read fragment views/post-2 (0.0ms)
There we go. We got HTML from the cache instead of rendering it. Look at the response times for the two requests:

Completed 200 OK in 17ms (Views: 11.6ms | ActiveRecord: 0.1ms)
Completed 200 OK in 16ms (Views: 9.7ms | ActiveRecord: 0.1ms)
Very small differences in this case. 2ms different in view generation. This is a very simple example, but it can make a world of difference in more complicated situations.

You are probably asking the question: &#8220;What happens when the post changes?&#8221; This is an excellent question! What well if the post changes, the cached content will not be correct. It is up to us to remove stuff from the cache or figure out a way to get new content from the cache. Let&#8217;s assume that our blog posts now have comments. What happens when a comment is created? How can handle this?

This is a very simple problem. What if we could figure out a solution to this problem: How can we create a cache miss when the associated object changes? We&#8217;ve already demonstrated how we can explicitly set a cache key. What if we made a key that&#8217;s dependent on the time the object was last updated? We can create a key composed of the record&#8217;s ID and its updated_at timestamp! This way the cache key will change as the content changes and we will not have to expire things manually. (We&#8217;ll come back to sweepers later). Let&#8217;s change our cache key to this:

<% cache "post-#{@post.id}", @post.updated_at.to_i do %>
Now we can see we have a new cache key that&#8217;s dependent on the object&#8217;s timestamp. Check out the rails log:

Exist fragment? views/post-2/1304291241 (0.5ms)
Write fragment views/post-2/1304291241 (0.4ms)
Cool! Now let&#8217;s make it so creating a comment updates the post&#8217;s timestamp:

class Comment < ActiveRecord::Base
  belongs_to :post, :touch => true
end
Now all comments will touch the post and change the updated_at timestamp. You can see this in action by touch&#8217;ing a post.

Post.find(1).touch

Exist fragment? views/post-2/1304292445 (0.4ms)
Write fragment views/post-2/1304292445 (0.4ms)
This concept is known as: auto expiring cache keys. You create a composite key with the normal key and a time stamp. This will create some memory build up as objects are updated and no longer fresh. Here&#8217;s an example. You have that fragment. It is cached. Then someone updates the post. You now have two versions of the fragment cached. If there are 10 updates, then there are 10 different versions. Luckily for you, this is not a problem for memcached! Memcached uses a LRU replacement policy. LRU stands for Least Recently Used. That means the key that hasn&#8217;t been requested in the longest time will be replaced by newer content when needed. For example, assume your cache can only hold 10 posts. The next update will create a new key and hence new content. Version 0 will be deleted and version 11 will be stored in the cache. The total amount of memory is cycled between things that are requested. There are two things to consider in this approach. 1: You will not be able to ensure that content is kept in the cache as long as possible. 2. You will never have to worry about expiring things manually as long as timestamps are updated in the model layer. I&#8217;ve found it is orders of magnitude easier to add a few :touch => true&#8217;s to my relationships than it is to maintain sweepers. More on sweepers later. We must continue exploring cache keys.

Rails uses auto-expiring cache keys by default. The problem is they are not mentioned at all the documentation or in the guides. There is one very handy method: ActiveRecord::Base.cache_key. This will generate a key like this: posts/2-20110501232725. This is the exact same thing we did ourselves. This method is very important because depending on what type of arguments you pass into the cache method, a different key is generated. For the time being, this code is functionally equal to our previous examples.

<%= cache @post do %>
The cache helper takes different forms for arguments. Here are some examples:

cache &#8216;explicit-key&#8217;      # views/explicit-key
cache @post               # views/posts/2-1283479827349
cache [@post, &#8216;sidebar&#8217;]  # views/posts/2-2348719328478/sidebar
cache [@post, @comment]   # views/posts/2-2384193284878/comments/1-2384971487
cache :hash => :of_things # views/localhost:3000/posts/2?hash_of_things
If an Array is the first arguments, Rails will use cache key expansion to generate a string key. This means calling doing logic on each object then joining each result together with a &#8216;/&#8217;. Essentially, if the object responds to cache_key, it will use that. Else it will do various things. Here&#8217;s the source for expand_cache_key:

def self.expand_cache_key(key, namespace = nil)
  expanded_cache_key = namespace ? &#8220;#{namespace}/&#8221; : &#8220;&#8221;

  prefix = ENV[&#8220;RAILS_CACHE_ID&#8221;] || ENV[&#8220;RAILS_APP_VERSION&#8221;]
  if prefix
    expanded_cache_key << "#{prefix}/"
  end

  expanded_cache_key <<
    if key.respond_to?(:cache_key)
      key.cache_key
    elsif key.is_a?(Array)
      if key.size > 1
        key.collect { |element| expand_cache_key(element) }.to_param
      else
        key.first.to_param
      end
    elsif key
      key.to_param
    end.to_s

  expanded_cache_key
end
This is where all the magic happens. Our simple fragment caching example could easily be converted into an idea like this: The post hasn&#8217;t changed, so cache the entire result of /posts/1. You can do with this action caching or page caching.

Moving on to Action Caching
Action caching is an around filter for specific controller actions. It is different from page caching since before filters are run and may prevent access to certain pages. For example, you may only want to cache if the user is logged in. If the user is not logged in they should be redirected to the log in page. This is different than page caching. Page caching bypasses the rails stack completely. Most web applications of legitimate complexity cannot use page caching. Action caching is the next logical step for most web applications. Let&#8217;s break the idea down: If the post hasn&#8217;t changed, return the entire cached page as the HTTP response, else render the show view, cache it, and return that as the HTTP response. Or in code:

# Note: you cannot run this code! This is just an example of what&#8217;s
# happening under the covers using concepts we&#8217;ve already covered.
Rails.cache.fetch &#8216;views/localhost:3000/posts/1&#8217; do
  @post = Post.find params[:id]
  render :show
end
Declaring action caching is easy. Here&#8217;s how you can cache the show action:

class PostsController < ApplicationController

  caches_action :show

  def show
    # do stuff
  end
end
Now refresh the page and look at what's been cached.

Started GET "/posts/2" for 127.0.0.1 at 2011-05-01 16:54:43 -0700
  Processing by PostsController#show as HTML
  Parameters: {"id"=>&#8220;2&#8221;}
Read fragment views/localhost:3000/posts/2 (0.5ms)
Rendered posts/show.html.erb within layouts/application (6.1ms)
Write fragment views/localhost:3000/posts/2 (0.5ms)
Completed 200 OK in 16ms (Views: 8.6ms | ActiveRecord: 0.1ms)
Now that the show action for post #2 is cached, refresh the page and see what happens.

Started GET &#8220;/posts/2&#8221; for 127.0.0.1 at 2011-05-01 16:55:27 -0700
  Processing by PostsController#show as HTML
  Parameters: {&#8220;id&#8221;=>&#8221;2&#8221;}
Read fragment views/localhost:3000/posts/2 (0.6ms)
Completed 200 OK in 1ms
Damn. 16ms vs 1ms. You can see the difference! You can also see Rails reading that cache key. The cache key is generated from the url with action caching. Action caching is a combination of a before and around filter. The around filter is used to capture the output and the before filter is used to check to see if it&#8217;s been cached. It works like this:

Execute before filter to check to see if cache key exists?
Key exists? - Read from cache and return HTTP Response. This triggers a render and prevents any further code from being executed.
No key? - Call all controller and view code. Cache output using Rails.cache and return HTTP response.
Now you are probably asking the same question as before: &#8220;What do we do when the post changes?&#8221; We do the same thing as before: we create a composite key with a string and a time stamp. The question now is, how do we generate a special key using action caching?

Action caching generates a key from the current url. You can pass extra options using the :cache_path option. Whatever is in this value is passed into url_for using the current parameters. Remember in the view cache key examples what happened when we passed in a hash? We get a much different key than before:

views/localhost:3000/posts/2?hash_of_things
Rails generated a URL based key instead of the standard views key. This is because you may different servers. This ensures that each server has it&#8217;s own cache key. IE, server one does not collide with server two. We could generate our own url for this resource by doing something like this:

url_for(@post, :tag => @post.updated_at.to_i)
This will generate this url:

http://localhost:3000/posts/1?tag=234897123978
Notice the ?tag=23481329847. This is a hack that aims to stop browsers from using HTTP caching on specific urls. If the URL has changed (timestamp changes) then the browser knows it must request a fresh copy. Rails 2 used to do this for assets like CSS and JS. Things have changed with the asset pipeline.

Here&#8217;s an example of generating a proper auto expring key for use with action caching.

caches_action :show, :cache_path => proc { |c|
  # c is the instance of the controller. Since action caching
  # is declared at the class level, we don&#8217;t have access to instance
  # variables. If cache_path is a proc, it will be evaluated in the
  # the context of the current controller. This is the same idea
  # as validations with the :if and :unless options
  #
  # Remember, what is returned from this block will be passed in as
  # extra parameters to the url_for method.
  post = Post.find c.params[:id]
  { :tag => post.updated_at.to_i }
end
This calls url_for with the parameters already assigned by it through the router and whatever is returned by the block. Now if you refresh the page, you&#8217;ll have this:

Started GET &#8220;/posts/2&#8221; for 127.0.0.1 at 2011-05-01 17:11:22 -0700
  Processing by PostsController#show as HTML
  Parameters: {&#8220;id&#8221;=>&#8221;2&#8221;}
Read fragment views/localhost:3000/posts/2?tag=1304292445 (0.5ms)
Rendered posts/show.html.erb within layouts/application (1.7ms)
Write fragment views/localhost:3000/posts/2?tag=1304292445 (0.5ms)
Completed 200 OK in 16ms (Views: 4.4ms | ActiveRecord: 0.1ms)
And volia! Now we have an expiring cache key for our post! Let&#8217;s dig a little deeper. We know the key. Let&#8217;s look into the cache and see what it actually is! You can see the key from the log. Look it up in the cache.

> Rails.cache.read &#8216;views/localhost:3000/posts/2?tag=1304292445&#8217;
=> &#8221;<!DOCTYPE html>\n<html>\n<head>&#8230;..&#8221;
It&#8217;s just a straight HTML string. Easy to use and return as the body. This method works well for singular resources. How can we handle the index action? I&#8217;ve created 10,000 posts. It takes a good amount of time to render that page on my computer. It takes over 10 seconds. The question is, how can we cache this? We could use the most recently updated post for the time stamp. That way, when one post is updated, it will move to the top and create a new cache key. Here is the code without any action caching:

Started GET &#8220;/posts&#8221; for 127.0.0.1 at 2011-05-01 17:18:11 -0700
  Processing by PostsController#index as HTML
  Post Load (54.1ms)  SELECT &#8220;posts&#8221;.* FROM &#8220;posts&#8221; ORDER BY updated_at DESC LIMIT 1
Read fragment views/localhost:3000/posts?tag=1304292445 (1.5ms)
Rendered posts/index.html.erb within layouts/application (9532.3ms)
Write fragment views/localhost:3000/posts?tag=1304292445 (36.7ms)
Completed 200 OK in 10088ms (Views: 9535.6ms | ActiveRecord: 276.2ms)
Now with action caching:

Started GET &#8220;/posts&#8221; for 127.0.0.1 at 2011-05-01 17:20:47 -0700
  Processing by PostsController#index as HTML
Read fragment views/localhost:3000/posts?tag=1304295632 (1.0ms)
Completed 200 OK in 11ms
Here&#8217;s the code for action caching:

caches_action :index, :cache_path => proc {|c|
  { :tag => Post.maximum(&#8216;updated_at&#8217;) }
}
We&#8217;ll come back to this situation later. This is a better way to do this. Points to the reader if they know the problem.

These are simple examples designed to show you who can create auto expiring keys for different situations. At this point we have not had to expire any thing ourselves! The keys have done it all for us. However, there are some times when you want more precise control over how things exist in the cache. Enter Sweepers.

Sweepers
Sweepers are HTTP request dependent observers. They are loaded into controllers and observe models the same way standard observers do. However there is one very important different. They are only used during HTTP requests. This means if you have things being created outside the context of HTTP requests sweepers will do you no good. For example, say you have a background process running that syncs with an external system. Creating a new model will not make it to any sweeper. So, if you have anything cached. It is up to you to expire it. Everything I&#8217;ve demonstrated so far can be done with sweepers.

Each cache_* method has an opposite expire_* method. Here&#8217;s the mapping:

caches_page , expire_page
caches_action , expire_action
cache , expire_fragment
Their arguments work the same with using cache key expansion to find a key to read or delete. Depending on the complexity of your application, it may be easy to use sweepers or it may be impossible. It&#8217;s easy to use sweepers with these examples. We only need to tie into the save event. For example, when a update or delete happens we need to expire the cache for that specific post. When a create, update, or delete happens we need to expire the index action. Here&#8217;s what the sweeper would look like:

class PostSweeper < ActionController::Caching::Sweeper
  observe Post

  def after_create(post)
    expire_action :index
    expire_action :show, :id => post
    # this is the same as the previous line
    expire_action :controller => :posts, :action => :show, :id => @post.id
  end
end

# then in the controller, load the sweeper
class PostsController < ApplicationController
  cache_sweeper :post_sweeper
end
I will not go into much depth on sweepers because they are the only thing covered in the rails caching guide. The work, but I feel they are clumsy for complex applications. Let's say you have comments for posts. What do you do when a comment is created for a post? Well, you have to either create a comment sweeper or load the post sweeper into the comments controller. You can do either. However, depending on the complexity of your model layer, it may quickly become infeasible to do cache expiration with sweepers. For example, let say you have a Customer. A customer has 15 different types of associated things. Do you want to put the sweeper into 15 different controllers? You can, but you may forget to at some point.

The real problem with sweepers is that they cannot be used once your application works outside of HTTP requests. They can also be clumsy. I personally feel it's much easier to create auto expiring cache keys and only uses sweepers when I want to tie into very specific events. I'd also argue that any well designed system does not need sweepers (or at least in very minimally).

Now you should have a good grasp on how the Rails caching methods work. We've covered how fragment caching uses the current view to generate a cache key. We introduced the concept of auto expiring cache keys using ActiveRecord#cache_key to automatically expire cached content. We introduced action caching and how it uses url_for to generate a cache key. Then we covered how you can pass things into url_for to generate a time stamped key to expire actions automatically. Now that we understand these lower levels we can move up to page caching and HTTP caching.

Page Caching
Page caching bypasses the entire application by serving up a file in /public from disk. It is different from action or fragment caching for a two reasons: content is not stored in memory and content is stored directly on the disk. You use page caching the same way you use action caching. This means you can use sweepers and and all the other things associated with them. Here's how it works.

Webserver accepts an incoming request: GET /posts
File exists: /public/posts.html
posts.html is returned
Your application code is never called.
Since pages are written like public assets they are served as such. You will expliclity have to expire them. Warning! Forgetting to expire pages will cause you greif because you application code will not be called. Here's an example of page caching:

PostsController < ApplicationController
  caches_page :index

  def index
    # do stuff
  end
When the server receives a request to GET /posts it will write the response from the application to /public/posts.html. The .html part is the format for that request. For example you can use page caching with JSON. GET /posts.json would generate /public/posts.json.

Page caching is basically poor man's HTTP caching without any real benefits. HTTP caching is more useful.

I've not covered page caching in much depth because it's very likely that if you're reading this page caching is not applicable to your application. The Rails guides cover page caching in decent fashion. Follow up there if you need more information.

HTTP Caching
HTTP caching is the most complex and powerful caching strategy you can use. With great power comes great responsiblity. HTTP caching works at the protocol level. You can configure HTTP caching so the browser doesn't even need to contact your server at all. There are many ways HTTP caching can be configured. I will not cover them all here. I will give you an overview on how the system works and cover some common use cases.

How It Works
HTTP caching works at the protocol level. It uses a combination of headers and response codes to indicate weather the user agent should make a request or use a locally stored copy instead. The invalidation or expiring is based on ETags and Last-Modified timestamps. ETag stands for "entity tag". It's a unique fingerprint for this request. It's usually a checksum of the respnose body. Origin servers (computers sending the source content) can set either of these fields along with a Cache-Control header. The Cache-Control header tells the user agent what it can do with this response. It answers questions like: how long can I cache this for and am I allowed to cache it? When the user agent needs to make a request again it sends the ETag and/or the Last-Modified date to the origin server. The origin server decides based on the ETag and/or Last-Modified date if the user agent can use the cached copy or if it should use new content. If the server says use the cached content it will return status 304: Not Modified (aka fresh). If not it should return a 200 (cache is stale) and the new content which can be cached.

Let's use curl to see how this works out:

$ curl -I http://www.example.com
HTTP/1.1 200 OK
Cache-Control: max-age=0, private, must-revalidate
Content-length: 822
Content-Type: text/html
Date: Mon, 09 Jul 2012 22:46:29 GMT
Last-Modified: Mon, 09 Jul 2012 21:22:11 GMT
Status: 200 OK
Vary: Accept-Encoding
Connection: keep-alive
The Cache-Control header is a tricky thing. There are many many ways it can be configured. Here's the two easiest ways to break it down: private means only the final user agent can store the response. Public means any server can cache this content. (You know requests may go through many proxies right?). You can specify an age or TTL. This is how long it can be cached for. Then there is another common situation: Don't check with the server or do check with the server. This particular Cache-Control header means: this is a private (think per user cache) and check with the server everytime before using it.

We can trigger a cache hit by sending the apporiate headers with the next request. This response only has a Last-Modified date. We can send this date for the server to compare. Send this value in the If-Modified-Since header. If the content hasn't changed since that date the server should return a 304. Here's an example using curl:

$ curl -I -H "If-Modified-Since: Mon, 09 Jul 2012 21:22:11 GMT" http://www.example.com
HTTP/1.1 304 Not Modified
Cache-Control: max-age=0, private, must-revalidate
Date: Mon, 09 Jul 2012 22:55:53 GMT
Status: 304 Not Modified
Connection: keep-alive
This response has no body. It simply tells the user agent to use the locally stored version. We could change the date and get a different response.

$ curl -I -H "If-Modified-Since: Sun, 08 Jul 2012 21:22:11 GMT" http://www.example.com
HTTP/1.1 200 OK
Cache-Control: max-age=0, private, must-revalidate
Content-length: 822
Content-Type: text/html
Date: Mon, 09 Jul 2012 22:57:19 GMT
Last-Modified: Mon, 09 Jul 2012 21:22:11 GMT
Status: 200 OK
Vary: Accept-Encoding
Connection: keep-alive
Caches determine freshness based on the If-None-Match and/or If-Modified-Since date. Using our existing 304 response we can supply a random etag to trigger a cache miss:

$ curl -I -H 'If-None-Match: "foo"' -H "If-Modified-Since: Mon, 09 Jul 2012 21:22:11 GMT" http://www.example.com
HTTP/1.1 304 Not Modified
Cache-Control: max-age=0, private, must-revalidate
Date: Mon, 09 Jul 2012 22:55:53 GMT
Status: 304 Not Modified
Connection: keep-alive
Etags are sent using the If-None-Match header. Now that we understand the basics we can move onto higher level discussion.

Rack::Cache
HTTP caching is implemented in the webserver itself or at the application level. It is implemented at the application level in Rails. Rack::Cache is a middleware that sits at the top of the stack and intercepts requests. It will pass requests down to your app and store their contents. Or will it call down to your app and see what ETag and/or timestamps it returns for validation purposes. Rack::Cache acts as a proxy cache. This means it must respect caching rules described in the Cache-Control headers coming out of your app. This means it cannot cache private content but it can cache public content. Cachable content is stored in memcached. Rails configures this automatically.

I'll cover one use case to illustrate how code flows through middleware stack to the actual app code and back up. Let's use a private per user cache example. Here's the cache control header: max-age-0, private, must-revalidate. Pretend this is some JSON API.

The client sends initial request to /api/tweets.json
Rack::Cache sees the request and ignores it since there is no caching information along with it.
Application code is called. It returns a 200 response with a date and the some Cache-Control header.
The client makes another request to /api/tweets.json with an If-Modified-Since header matching the date from the previous request.
Rack::Cache sees that his request has cache information associated with it. It checks to see how it should handle this request. According to the Cache-Control header it has expired and needs to be checked to see if it's ok to use. Rack::Cache calls the application code.
Application returns a response with the same date.
Rack::Cache recieves the response, compares the dates and determines that it's a hit. Rack::Cache sends a 304 back.
The client uses response body from request in step 1.
HTTP Caching in Rails
Rails makes it easy to implement HTTP caching inside your controllers. Rails provides two methods: stale? and fresh_when. They both do the same thing but in opposite ways. I prefer to use stale? because it makes more sense to me. stale? reminds more of Rails.cache.fetch so I stick with that. stale? works like this: checks to see if the incoming request ETag and/or Last-Modified date matches. If they match it calls head :not_modified. If not it can call a black of code to render a response. Here is an example:

def show
  @post = Post.find params[:id]
  stale? @post do
    respond_with @post
  end
end
Using stale? with an ActiveRecord object will automatically set the ETag and Last-Modified headers. The Etag is set to a MD5 hash of the objects cache_key method. The Last-Modified date is set to the object's updated_at method. The Cache-Control header is set to max-age=0, private, must-revalidate by default. All these values can be changed by passing in options to stale? or fresh_when. The methods take three options: :etag, :last_modified, and :public. Here are some more examples:

# allow proxy caches to store this result
stale? @post, :public => true do
  respond_with @post
end

# Let&#8217;s stay your posts are frozen and have no modifications
stale? @post, :etag => @post.posted_at do
  respond_with @post
end
Now you should understand how HTTTP caching works. Here are the important bits of code inside Rails showing it all works.

# File actionpack/lib/action_controller/metal/conditional_get.rb, line 39
def fresh_when(record_or_options, additional_options = {})
  if record_or_options.is_a? Hash
    options = record_or_options
    options.assert_valid_keys(:etag, :last_modified, :public)
  else
    record  = record_or_options
    options = { :etag => record, :last_modified => record.try(:updated_at) }.merge(additional_options)
  end

  response.etag          = options[:etag]          if options[:etag]
  response.last_modified = options[:last_modified] if options[:last_modified]
  response.cache_control[:public] = true if options[:public]

  head :not_modified if request.fresh?(response)
end
Here is the code for fresh?. This code should help you if you are confused on how resquests are validated. I found this code much easier to understand than the official spec.

def fresh?(response)
  last_modified = if_modified_since
  etag          = if_none_match

  return false unless last_modified || etag

  success = true
  success &&= not_modified?(response.last_modified) if last_modified
  success &&= etag_matches?(response.etag) if etag
  success
end

<h2>Index</h2>
<ol>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_1-caching_strategies">Caching Strategies</a></li>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_2-using_strategies">Using Strategies Effectively</a></li>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_3-static_assets">Handling Static Assets</a></li>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_4-stepping_outside_the_http_request">Stepping Outside the HTTP Request</a></li>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_5-tag_based_caching">Tag Based Caching</a></li>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_6-fast_json_apis">Fast JSON APIs</a></li>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_7-tips_and_tricks">Tips and Tricks</a></li>
    <li><a href="http://www.broadcastingadam.com/2012/07/advanced_caching_part_8-conclusion">Conclusion</a></li>
</ol>
<h3>Contact Me</h3>
Find a problem or have a question about this post? <a href="http://twitter.com/adman65/">@adman65</a> on Twitter or Adman65 on #freenode. Find me in (#rubyonrails or #sproutcore). You can find my code on <a href="http://github.com/twinturbo/">GitHub</a> or hit me up on <a href="https://plus.google.com/u/0/116377228668850173159">Google+</a>.

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails counter cache]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/27/rails-counter-cache/"/>
    <updated>2012-08-27T00:44:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/27/rails-counter-cache</id>
    <content type="html"><![CDATA[<h2>Rails counter cache</h2>

<p>这次就是讲用_count字段来缓存has_many的计数 </p>

<p>看Project和Task的例子:</p>

<div id="">
<pre><h1>Projects</h1>

<table>
<% for project in @projects %>
  <tr>
    <td><%= link_to project.name, poject_path(project) %></td>
    <td><small>(<%= pluralize project.tasks.size, 'task' %>)</small></td>
  </tr>
<% end %>
</table>
</pre>
</div>


<pre>上面的页面代码对所有的@projects显示tasks.size，看下log:</pre>


<div id="">
<pre>SQL (0.006385)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 326)
SQL (0.000220)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 327)
SQL (0.000383)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 328)
SQL (0.000197)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 329)
SQL (0.000215)  SELECT count(*) AS count_all FROM tasks WHERE (tasks.project_id = 330)</pre>
</div>


<pre>上面显示了对每个project都使用SQL来count tasks，我们采用eager loading看看能否改进性能:</pre>


<div id="">
<pre>class ProjectsController &lt; ApplicationController
  def index
    @projects = Project.find(:all, :include =&gt; :tasks)
  end
end</pre>
</div>


<pre>再来看看log:</pre>


<div id="">
<pre>Project Lood Incluing Associations (0.000954)  SELECT projects.'id' AS t0_r0, projects.'name' AS t0_r1, tasks.'id'
AS t1_r0, tasks.'name' AS t1_r1, tasks.'project_id' AS t1_r2 FROM projects LEFT OUTER JOIN tasks ON tasks.project
_id = projects.id</pre>
</div>


<pre>我们看到，使用eager loading确实只用一条SQL语句就完成工作，但是缺点是把tasks表所有的字段信息都取出来了，很多信息是 
没有用的。 

我们来看看更好的解决方案:</pre>


<div id="">
<pre>ruby script/generate migration add_tasks_count</pre>
</div>


<pre>我们新建一个migration，给projects表添加一个叫tasks_count的列:</pre>


<div id="">
<pre>class AddTasksCount &lt; ActiveRecord::Migration
  def self.up
    add_column :projects, :tasks_count, :integer, :default =&gt; 0

    Project.reset_column_information
    Project.find(:all).each do |p|
      p.update_attribute :tasks_count, p.tasks.length
    end
  end

  def self.down
    remove_column :projects, :tasks_count
  end
end</pre>
</div>


<pre>我们还需要告诉Task类开启counter cache:</pre>


<div id="">
<div>
<pre>class Task &lt; ActiveRecord::Base
  belongs_to :projects, :counter_cache =&gt; true
end</pre>
</div>
</div>


<pre>好了，我们把ProjectsController的index方法改回lazy loading，刷新页面，再看看log:</pre>


<div id="">
<pre>Project Lood (0.000295)  SELECT * FROM projects</pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails里的Magic Column Names]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/27/railsli-de-magic-column-names/"/>
    <updated>2012-08-27T00:37:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/27/railsli-de-magic-column-names</id>
    <content type="html"><![CDATA[<h2>Rails里的Magic Column Names</h2>

<p>Active Record有一些富有“魔力”的列名:</p>

<p><strong>created_at， created_on， updated_at， updated_on</strong>
在create或者update一行时Rails对<em>at形式的列用timestamp自动更新，对</em>on形式的列用date自动更新</p>

<p><strong>lock_version</strong>
如果一个表有lock_version这个列，则Rails会跟踪一行的版本号并执行乐观锁</p>

<p><strong>type</strong>
单表继承时跟踪一行的type</p>

<p><strong>id</strong>
表的默认主键名</p>

<p><strong>xxx_id</strong>
对以复数形式的xxx命名的表的引用的默认外键名</p>

<p><strong>xxx_count</strong>
对子表xxx维护一个计数器cache</p>

<p><strong>position</strong>
acts_as_list时用来表示一个list中该行的position</p>

<p><strong>parent_id</strong>
acts_as_tree时用来表示该行的parent的id</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Rails flash isn't just for messages]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/24/the-rails-flash-isnt-just-for-messages/"/>
    <updated>2012-08-24T00:04:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/24/the-rails-flash-isnt-just-for-messages</id>
    <content type="html"><![CDATA[<h2>The Rails flash isn&#8217;t just for messages</h2>

<p><a href="http://guides.rubyonrails.org/action_controller_overview.html#the-flash">The Rails flash</a> is typically used for short messages:</p>

<p>app/controllers/sessions_controller.rb</p>

<pre>&lt;code&gt;redirect_to root_url, notice: &quot;You have been logged out.&quot;&lt;/code&gt;</pre>


<p>But it can be used for more than that, any time that you redirect and want to pass along some state without making it part of the URL.</p>

<p>These are some things I’ve used it for.</p>

<h2>Identifiers for more complex messages</h2>


<p>Maybe you want to show a more complex message after signing up, containing things like links and bullet points.</p>

<p>Rather than send all that in the flash, you can send some identifier that your views know how to handle.</p>

<p>This could be the name of a partial:</p>

<p>app/controllers/users_controller.rb</p>

<pre>class UsersController &lt; ApplicationController
  def create
   @user = actually_create_user
   flash[:partial] = &quot;welcome&quot;
   redirect_to some_path
 end
end</pre>


<p>&nbsp;
app/views/layouts/application.html.haml
</figcaption></p>

<div>
<pre>- if flash[:partial]
 = render partial: &quot;shared/flashes/#{flash[:partial]}&quot;</pre>
app/views/shared/flashes/_welcome.html.haml

</div>




<pre>%p Welcome!
 %ul
   %li= link_to(&quot;Do this!&quot;, this_path)
   %li= link_to(&quot;Do that!&quot;, that_path)</pre>


<p></figure></p>

<p>&nbsp;</p>

<p>Or just a flag:</p>

<p>&nbsp;</p>

<p>app/controllers/users_controller.rb</p>

<div>
<pre>&lt;code&gt;flash[:signed_up] = true redirect_to root_path&lt;/code&gt;</pre>
</div>


<p></figure> <figure> <figcaption>app/views/welcomes/show.html.haml</figcaption></p>

<div>
<pre>&lt;code&gt;- if flash[:signed_up] %p Welcome!&lt;/code&gt;</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>Pass on the referer</h2>


<p>Say you have some filter redirecting incoming requests. Maybe you’re detecting the locale and adding it to the URL, or verifying credentials.</p>

<p>You can use the flash to make sure the redirected-to controller gets the original referer.</p>

<p>&nbsp;</p>

<figure> <figcaption>app/controllers/application_controller.rb</figcaption>
<div>
<pre>class ApplicationController &lt; ActionController::Base
 before_filter :make_locale_explicit

  private
  def make_locale_explicit
    if params[:locale].blank? &amp;&amp; request.get?
      flash[:referer] = request.referer
      redirect_to params.merge(locale: I18n.locale)
    end
  end
end</pre>
</div>
</figure>


<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>Now, any controller that cares about the referer could get it with:</p>

<pre>&lt;code&gt;flash[:referer] || request.referer&lt;/code&gt;</pre>


<h2>Google Analytics events</h2>


<p>Say you want to track a <a href="https://developers.google.com/analytics/devguides/collection/gajs/eventTrackerGuide">Google Analytics event</a> event with JavaScript when a user has signed up. You could do something like this.</p>

<p>Send event data from the controller:</p>

<p>&nbsp;</p>

<figure> <figcaption>app/controllers/users_controller.rb</figcaption>
<div>
<pre>class UsersController &lt; ApplicationController
  def create
    @user = actually_create_user
    flash[:events] = [ [&quot;_trackEvent&quot;, &quot;users&quot;, &quot;signup&quot;] ]
    redirect_to some_path
  end
end</pre>
</div>
</figure>


<p>&nbsp;</p>

<p>Then turn it into JavaScript in your view:</p>

<p>&nbsp;</p>

<figure> <figcaption>app/helpers/layout_helper.rb</figcaption>
<div>
<pre>def analytics_events
  Array(flash[:events]).map do |event|
    &quot;_gaq.push(#{raw event.to_json});&quot;
  end.join(&quot;\n&quot;)
end</pre>
</div>
</figure>


<p> <figure> <figcaption>app/views/layouts/application.html.haml</figcaption></p>

<div>
<pre>:javascript
  = analytics_events</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<h2>The flash vs. params</h2>


<p>You may have considered that any of the above could have be done with query parameters instead. Including common flash messages:
&nbsp;</p>

<figure> <figcaption>app/controllers/sessions_controller.rb</figcaption>
<div>
<pre>redirect_to root_url(notice: &quot;You have been logged out.&quot;)</pre>
<span style="font-size: small;"><span style="line-height: normal;">
</span></span>

</div>
</figure>


<p> <figure> <figcaption>app/views/layouts/application.html.haml</figcaption></p>

<div>
<pre>- if params[:notice]
  %p= params[:notice]</pre>
</div>


<p></figure></p>

<p>&nbsp;</p>

<p>Using the flash means that the passed data doesn’t show in the URL, so it won’t happen twice if the link is shared, bookmarked or reloaded. Also the URL will be a little cleaner.</p>

<p>Additionally, the user can’t manipulate the flash, as it’s stored in the session. This adds some protection. If the flash partial example above used <code>params</code>, a user could pass in <code>../../admin/some_partial</code> to see things they shouldn’t.</p>

<h2>Fin</h2>


<p>I’d love to hear about what unconventional uses you’ve put the flash to!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Practical Guide to Use Spine.JS in Real World App.]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/21/a-practical-guide-to-use-spine-dot-js-in-real-world-app/"/>
    <updated>2012-08-21T13:13:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/21/a-practical-guide-to-use-spine-dot-js-in-real-world-app</id>
    <content type="html"><![CDATA[<h2>A Practical Guide to Use Spine.JS in Real World App.</h2>

<p>To give users the best possible fluid experience, we designed <a href="http://pragmatic.ly/">Pragmatic.ly</a> and complied with the <a title="Single Page Application" href="http://en.wikipedia.org/wiki/Single-page_application" target="_blank">single page application</a> standard. We believe that could make users focus on building product rather than spending time on project management itself. A wide range of technology solutions are available to make a single page application. Current trends suggest moving core application from server to client side and keeping server load at minimum for better performance by pure data APIs. <a href="http://pragmatic.ly/">Pragmatic.ly</a> took on the challange to cater to this need by developing server side in Rails, Spine.js at client side.</p>

<p><strong>Why Spine.JS</strong></p>

<p>There are many different JavaScript MVC frameworks such as <a title="Backbone.js" href="http://backbonejs.org/" target="_blank">Backbone.js</a>, <a title="Spine.js" href="http://spinejs.com/" target="_blank">Spine.js</a>, <a title="Knockout.js" href="http://knockoutjs.com/" target="_blank">Knockout.js</a>,<a title="Ember.js" href="http://emberjs.com/" target="_blank">Ember.js</a>, etc. There are too many choices and when I started Pragmatic.ly, I was struggling with the problem of which one I should pick up. Instead of wasting time on choosing I did a quick review by comparing the documents and then decided to choose Spine.js to start with. With months of development so far, I&#8217;m glad that Spine.js works pretty well and below are the great benefits I have found in using Spine.js.</p>

<ul>
    <li><em>Simple and lightweight</em>. It&#8217;s easy to dive into the core and extend as you need to.</li>
    <li><em>MVC pattern at its core</em>. It&#8217;s very similar to the Rails counterparts. So I&#8217;m very comfortable with it from the first day.</li>
    <li><em>Rails integration</em>. It can&#8217;t be easier to use Rails as the backend data API in Spine.js app. And the <a title="Spine Rails Gem" href="https://github.com/maccman/spine-rails" target="_blank">spine-rails</a> gem is another great addition.</li>
    <li><em><a title="Asynchronous User Interface" href="http://alexmaccaw.com/posts/async_ui" target="_blank">Asynchronous UI</a></em>. Ideally UIs never block and it will automatically update the data in backend. This brings the fast and very responsive user interface.</li>
</ul>


<p>If you want to get a brief review among different frameworks, check out this <a title="Top 10 JavaScript MVC Frameworks Reviewed" href="http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/">article</a> written by Gordon L. Hemption.</p>

<p><strong>How we use Spine.js in Pragmatic.ly</strong></p>

<p>We use spine-rails to generate the Spine.app structure, very similar to Rails app structure.</p>

<p>&nbsp;</p>

<div id="gist-3370365">
<div>
<div>
<div>
<div id="LC1">├── app</div>
<div id="LC2">│   ├── controllers</div>
<div id="LC3">│   │   ├── center</div>
<div id="LC4">│   │   │   ├── filter_controller.js.coffee</div>
<div id="LC5">│   │   │   └── tickets_controller.js.coffee</div>
<div id="LC6">│   │   ├── center_content_controller.coffee</div>
<div id="LC7">│   │   ├── comments_controller.js.coffee</div>
<div id="LC8">│   │   ├── header</div>
<div id="LC9">│   │   │   └── project_nav_controller.js.coffee</div>
<div id="LC10">│   │   ├── header_controller.coffee</div>
<div id="LC11">│   │   ├── iterations_controller.coffee</div>
<div id="LC12">│   │   ├── left_sidebar_controller.coffee</div>
<div id="LC13">│   │   ├── projects_controller.coffee</div>
<div id="LC14">│   │   ├── right_sidebar_controller.coffee</div>
<div id="LC15">│   │   ├── sidebars</div>
<div id="LC16">│   │   │   ├── left_iteration.js.coffee</div>
<div id="LC17">│   │   │   ├── left_people.js.coffee</div>
<div id="LC18">│   │   │   ├── right_activities.js.coffee</div>
<div id="LC19">│   │   │   └── right_detail_section.js.coffee</div>
<div id="LC20">│   │   ├── tickets_controller.coffee</div>
<div id="LC21">│   │   └── users_controller.js.coffee</div>
<div id="LC22">│   ├── index.js.coffee</div>
<div id="LC23">│   ├── lib</div>
<div id="LC24">│   │   ├── constants.js.coffee</div>
<div id="LC25">│   │   ├── eco-helpers.js</div>
<div id="LC26">│   │   └── view.js.coffee</div>
<div id="LC27">│   ├── models</div>
<div id="LC28">│   │   ├── comment.js.coffee</div>
<div id="LC29">│   │   ├── iteration.js.coffee</div>
<div id="LC30">│   │   ├── project.js.coffee</div>
<div id="LC31">│   │   ├── ticket.js.coffee</div>
<div id="LC32">│   │   └── user.js.coffee</div>
<div id="LC33">│   └── views</div>
<div id="LC34">│   ├── comments</div>
<div id="LC35">│   │   ├── audit.jst.eco</div>
<div id="LC36">│   │   ├── form.jst.eco</div>
<div id="LC37">│   │   └── plain.jst.eco</div>
<div id="LC38">│   ├── iterations</div>
<div id="LC39">│   │   ├── section.jst.eco</div>
<div id="LC40">│   │   └── show.jst.eco</div>
<div id="LC41">│   ├── projects</div>
<div id="LC42">│   │   ├── edit.jst.eco</div>
<div id="LC43">│   │   ├── form.jst.eco</div>
<div id="LC44">│   │   ├── new.jst.eco</div>
<div id="LC45">│   │   └── switch.jst.eco</div>
<div id="LC46">│   ├── tickets</div>
<div id="LC47">│   │   ├── section.jst.eco</div>
<div id="LC48">│   │   ├── show.jst.eco</div>
<div id="LC49">│   │   └── toolbar.jst.eco</div>
<div id="LC50">│   └── users</div>
<div id="LC51">│   ├── people.jst.eco</div>
<div id="LC52">│   └── show.jst.eco</div>
<div id="LC53">├── application.js</div>
<div id="LC54">├── bootstrap.js.coffee</div>
<div id="LC55">└── dashboard.js.coffee</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370365/f5a2684f50f33afbe69eeff4cd6747f907e97141/Pragmatic.ly%20JS%20Structure">view raw</a><a href="https://gist.github.com/3370365#file_pragmatic.ly js structure">Pragmatic.ly JS Structure</a><a href="https://gist.github.com/3370365">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p>So basically it&#8217;s controllers, models and views.</p>

<p><strong>Controllers</strong></p>

<p>There are two kinds of Controllers in Pragmatic.ly. In Spine, Controllers are considered the glue of an application, adding and responding to DOM events, rendering templates and ensuring that views and models are kept in sync. For example,</p>

<p>&nbsp;</p>

<div id="gist-3370386">
<div>
<div>
<div>
<div id="LC1">class App.LeftIterationController extends Spine.Controller</div>
<div id="LC2">  el: &#8216;.sidebar #iterations&#8217;</div>
<div id="LC4">  elements:</div>
<div id="LC5">    &#8217;ul.list&#8217;: &#8216;list&#8217;</div>
<div id="LC7">  constructor: -&gt;</div>
<div id="LC8">    super</div>
<div id="LC9">    App.Iteration.bind &#8216;create&#8217;, @addIteration</div>
<div id="LC10">    App.Iteration.bind &#8216;refresh&#8217;, @refreshIterations</div>
<div id="LC12">  release: -&gt;</div>
<div id="LC13">    super</div>
<div id="LC14">    App.Iteration.unbind &#8216;create&#8217;, @addIteration</div>
<div id="LC15">    App.Iteration.unbind &#8216;refresh&#8217;, @refreshIterations</div>
<div id="LC17">  addIteration: (iteration) =&gt;</div>
<div id="LC18">    iteration.unbind()</div>
<div id="LC19">    view = new App.IterationItem(item: iteration)</div>
<div id="LC20">    @list.append(view.render().el)</div>
<div id="LC22">  refreshIterations: (iterations) =&gt;</div>
<div id="LC23">    @addIteration iteration for iteration in iterations</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370386/39fe0b331aa7d524f41132056a4ff6e1da432c74/left_iteration_controller.js.coffee">view raw</a><a href="https://gist.github.com/3370386#file_left_iteration_controller.js.coffee">left_iteration_controller.js.coffee</a><a href="https://gist.github.com/3370386">This Gist</a> brought to you by<a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p>We split the page into multiple blocks and each block is a Spine Controller. Talking the above example, LeftIterationsController is the Controller to manage the iterations list in the left sidebar.</p>

<p>Then what&#8217;s the other kind? The answer is <em>Routes</em>! We extract the routes to the dedicated controllers now. It will setup the routes and respond to the <em>navigation</em> event. Then it will prepare the data and trigger the event to let another controller handle it to render templates. For example,</p>

<p>&nbsp;</p>

<div id="gist-3370398">
<div>
<div>
<div>
<div id="LC1">class App.TicketsController extends Spine.Controller</div>
<div id="LC2">  constructor: -&gt;</div>
<div id="LC3">    super</div>
<div id="LC4">    @routes</div>
<div id="LC5">      &#8221;/tickets&#8221;: @index</div>
<div id="LC6">      &#8221;/tickets/:id&#8221; : (params) -&gt;</div>
<div id="LC7">        @show(params.id)</div>
<div id="LC9">  index: -&gt;</div>
<div id="LC10">    tickets = App.Ticket.all()</div>
<div id="LC11">    App.Ticket.trigger &#8220;tickets:index&#8221;, tickets</div>
<div id="LC13">  show: (id) -&gt;</div>
<div id="LC14">    ticket = App.Ticket.find(id)</div>
<div id="LC15">    $.publish &#8216;ticket:switch&#8217;, ticket</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370398/6d475eed1c1c593ca1338cdc2681be3b1ec9dd6d/ticket_routing_controller.js.coffee">view raw</a><a href="https://gist.github.com/3370398#file_ticket_routing_controller.js.coffee">ticket_routing_controller.js.coffee</a><a href="https://gist.github.com/3370398">This Gist</a> brought to you by<a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p><strong>Models</strong></p>

<p>Models manage data for the application. It&#8217;s very similar to Rails models. I just want to mention one thing though - as we moved the logic from server side to client side, there was no need to translate 1:1 on the client side. Instead, encapsulate the data into model which is suitable for the page based on the user.</p>

<p>&nbsp;</p>

<div id="gist-3370424">
<div>
<div>
<div>
<div id="LC1">class App.Project extends Spine.Model</div>
<div id="LC2">  @configure &#8216;Project&#8217;, &#8216;id&#8217;, &#8216;name&#8217;, &#8216;description&#8217;, &#8216;owner_id&#8217;, &#8216;uid&#8217;</div>
<div id="LC3">  @extend Spine.Model.Ajax</div>
<div id="LC4">  @extend Spine.Model.Dirty</div>
<div id="LC6">  validate: -&gt;</div>
<div id="LC7">    &#8217;name required&#8217; unless @name</div>
<div id="LC9">  inviteUser: (email) -&gt;</div>
<div id="LC10">    App.Invitation.create(project_id: @id, email: email)</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3370424/e79540cdbabd4cde1b1e2c142b3a26caba6e5da4/project.js.coffee">view raw</a><a href="https://gist.github.com/3370424#file_project.js.coffee">project.js.coffee</a><a href="https://gist.github.com/3370424">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p><strong>Views</strong></p>

<p>Views are about building and maintaining the DOM elements. Views in Spine are very simple and don&#8217;t have the built-in UI binding. So most of the time you should let Controller observe the Model and get notified when the model changes, then update the view accordingly.</p>

<p>By doing all the view rendering client-side, you should use JavaScript templating solution to define templates for views as markup containing tempalte variables. There are a number of good candidates, such as <a title="Mustache" href="http://mustache.github.com/" target="_blank">Mustache</a>, <a title="jQuery Template" href="http://api.jquery.com/category/plugins/templates" target="_blank">jQuery.tmpl</a> and <a title="Eco" href="https://github.com/sstephenson/eco" target="_blank">Eco</a>.</p>

<p>I use Eco in Pragmatic.ly. The Erb-like syntax and CoffeeScript support is a big triumph. However, you should know that every eco template generates the same helpers which will increase the file size. You can use this gist to avoid the problem which will register the global helpers and inject into the Eco templates.</p>

<p>&nbsp;</p>

<div id="gist-2360781">
<div>
<div>
<div>
<div id="LC1"># Put this file in lib/</div>
<div id="LC3">require &#8216;sprockets/eco_template&#8217;</div>
<div id="LC5">class CleanEcoTemplate &lt; Sprockets::EcoTemplate</div>
<div id="LC6">  FROM = &#8221; (function() {&#8221;</div>
<div id="LC7">  TO = &#8220;}).call(__obj);&#8221;</div>
<div id="LC9">  def evaluate(scope, locals, &amp;block)</div>
<div id="LC10">    content = Eco.compile(data)</div>
<div id="LC11">    from = content.index(FROM)</div>
<div id="LC12">    to = content.rindex(TO)</div>
<div id="LC13">    content = content[from&#8230;to] + TO</div>
<div id="LC14">    &lt;&lt;-JS</div>
<div id="LC15">function(__obj) {</div>
<div id="LC16">if (!__obj) __obj = {};</div>
<div id="LC17">var __helpers = window.ecoHelpers;</div>
<div id="LC18">var __out = [];</div>
<div id="LC19">var __sanitize = __helpers.sanitize;</div>
<div id="LC20">var __capture = __helpers.captureFor(__obj, __out);</div>
<div id="LC21">var __rememberSafe = __obj.safe;</div>
<div id="LC22">var __rememberEscape = __obj.escape;</div>
<div id="LC23">__obj.safe = __helpers.safe;</div>
<div id="LC24">__obj.escape = __helpers.escape;</div>
<div id="LC25">#{content}</div>
<div id="LC26">__obj.safe = __rememberSafe;</div>
<div id="LC27">__obj.escape = __rememberEscape;</div>
<div id="LC28">return __out.join(&#8221;);</div>
<div id="LC29">};</div>
<div id="LC30">JS</div>
<div id="LC31">  end</div>
<div id="LC32">end</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/8b3b00534fea091b4514589460e99deb2abfe618/clean_eco_template.rb">view raw</a><a href="https://gist.github.com/2360781#file_clean_eco_template.rb">clean_eco_template.rb</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1"># Must include eco-helpers.js before eco files</div>
<div id="LC3">(function(global) {</div>
<div id="LC4">  var ecoHelpers = {</div>
<div id="LC5">    sanitize: function(value) {</div>
<div id="LC6">      if (value &amp;&amp; value.ecoSafe) {</div>
<div id="LC7">        return value;</div>
<div id="LC8">      } else if (typeof value !== &#8216;undefined&#8217; &amp;&amp; value != null) {</div>
<div id="LC9">        return ecoHelpers.escape(value);</div>
<div id="LC10">      } else {</div>
<div id="LC11">        return &#8221;;</div>
<div id="LC12">      }</div>
<div id="LC13">    },</div>
<div id="LC15">    safe: function(value) {</div>
<div id="LC16">      if (value &amp;&amp; value.ecoSafe) {</div>
<div id="LC17">        return value;</div>
<div id="LC18">      } else {</div>
<div id="LC19">        if (!(typeof value !== &#8216;undefined&#8217; &amp;&amp; value != null)) value = &#8221;;</div>
<div id="LC20">        var result = new String(value);</div>
<div id="LC21">        result.ecoSafe = true;</div>
<div id="LC22">        return result;</div>
<div id="LC23">      }</div>
<div id="LC24">    },</div>
<div id="LC26">    escape: function(value) {</div>
<div id="LC27">      return (&#8221; + value)</div>
<div id="LC28">        .replace(/&amp;/g, &#8216;&amp;amp;&#8217;)</div>
<div id="LC29">        .replace(/&lt;/g, &#8216;&amp;lt;&#8217;)</div>
<div id="LC30">        .replace(/&gt;/g, &#8216;&amp;gt;&#8217;)</div>
<div id="LC31">        .replace(/&#8221;/g, &#8216;&amp;quot;&#8217;);</div>
<div id="LC32">    },</div>
<div id="LC34">    captureFor: function(obj, out) {</div>
<div id="LC35">      return (function(callback) {</div>
<div id="LC36">        var length = out.length;</div>
<div id="LC37">        callback.call(obj);</div>
<div id="LC38">        return ecoHelpers.safe(out.splice(length, out.length - length).join(&#8221;));</div>
<div id="LC39">      });</div>
<div id="LC40">    }</div>
<div id="LC41">  };</div>
<div id="LC43">  global.ecoHelpers = ecoHelpers;</div>
<div id="LC44">})(window);</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/9aa691027d57ddd63ec7f6969481336789539248/eco-helpers.js">view raw</a><a href="https://gist.github.com/2360781#file_eco_helpers.js">eco-helpers.js</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1"># Put this file in config/initializers</div>
<div id="LC3">require &#8216;clean_eco_template&#8217;</div>
<div id="LC5">Rails.application.assets.register_engine &#8216;.eco&#8217;, CleanEcoTemplate</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2360781/7ccb944d8613edd073dddd34547bcdaa766eefa6/eco_template.rb">view raw</a><a href="https://gist.github.com/2360781#file_eco_template.rb">eco_template.rb</a><a href="https://gist.github.com/2360781">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div>


<p>&nbsp;</p>

<p><strong>Problems</strong></p>

<p>So that&#8217;s how we use Spine.js to power Pragmatic.ly. It works very well but still have some limitations.</p>

<ul>
    <li>By default, you can only monitor the whole Model change event and update the view accordingly. For example, even the username is not changed, you still have to update the views containing that data. There is a &#8220;change:field&#8221; event in Backbone.js which allow you only to update the view when that field of data changed. I like that. So I made a plugin to support that. Check the Gist out.
<div id="gist-2866558">
<div>
<div>
<div>
<div id="LC1">Spine ?= require(&#8216;spine&#8217;)</div>
<div id="LC3">Include =</div>
<div id="LC4">  savePrevious: -&gt;</div>
<div id="LC5">    @constructor.records[@id].previousAttributes = @attributes()</div>
<div id="LC7">Spine.Model.Dirty =</div>
<div id="LC8">  extended: -&gt;</div>
<div id="LC9">    @bind &#8216;refresh&#8217;, -&gt;</div>
<div id="LC10">      @each (record) -&gt; record.savePrevious()</div>
<div id="LC12">    @bind &#8216;save&#8217;, (record) -&gt;</div>
<div id="LC13">      if record.previousAttributes?</div>
<div id="LC14">        for key in record.constructor.attributes when key of record</div>
<div id="LC15">          if record[key] isnt record.previousAttributes[key]</div>
<div id="LC16">            record.trigger(&#8216;change:&#8217;+key, record[key])</div>
<div id="LC17">      record.savePrevious()</div>
<div id="LC19">    @include Include</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2866558/515b724d2e7b4b648e5f10c9ef93782f3242c9cd/dirty.js.coffee">view raw</a><a href="https://gist.github.com/2866558#file_dirty.js.coffee">dirty.js.coffee</a><a href="https://gist.github.com/2866558">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
<div>
<div>
<div>
<div id="LC1">So the model object can bind the event &#8220;change:#{field} to trigger event when the field value is changed.</div>
<div id="LC3">By default it&#8217;s off and if need this feature, the model should extend Spine.Model.Dirty.</div>
<div id="LC5">A sample case.</div>
<div id="LC7">class User extends Spine.Model</div>
<div id="LC8">  @extend Spine.Model.Dirty</div>
<div id="LC9">end</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/2866558/568e3e12fd1a160d5cedd5a476edd202622d110b/Usage:">view raw</a><a href="https://gist.github.com/2866558#file_usage:">Usage:</a><a href="https://gist.github.com/2866558">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div></li>
    <li>The Ajax plugin in Spine.js plays very nice with backend REST APIs, such as Rails. For example, creating the model will trigger a &#8220;CREATE /collections&#8221; event to the server and updating the model will trigger a &#8220;PUT /collections/id&#8221; event, seemlessly. However, nested resources in Rails is very common but Spine lacks to support that. Either you have to trigger requests to top-level URL or setup the request yourself. I have done a dirty hack to support scoping. It&#8217;s dirty but works.
<div id="gist-3371899">
<div>
<div>
<div>
<div id="LC1">class App.Ticket extends Spine.Model</div>
<div id="LC2">  @configure &#8216;Ticket&#8217;, &#8220;id&#8221;, &#8220;project_id&#8221;</div>
<div id="LC4">  @scope: -&gt;</div>
<div id="LC5">    &#8221;projects/#{current.project_id}&#8221;</div>
<div id="LC7">  scope: -&gt;</div>
<div id="LC8">    &#8221;projects/#{@project_id}&#8221;</div>
</div>
</div>
<div><a href="https://gist.github.com/raw/3371899/ec5a4177783ce2827796895f6b7c886f6f3643a6/url_scoping.js.coffee">view raw</a><a href="https://gist.github.com/3371899#file_url_scoping.js.coffee">url_scoping.js.coffee</a><a href="https://gist.github.com/3371899">This Gist</a> brought to you by <a href="http://github.com/">GitHub</a>.</div>
</div>
</div></li>
    <li>Asynchronous UI is cool and works for 99% situations. But in a real world app you have to deal with errors like bugs or network failures. Spine doesn&#8217;t have the default error handling for this situation and leave all work to you. It&#8217;s fine but you should know that for that 1% situation, you have to spend lots of time to avoid the impact.</li>
</ul>


<p><strong>Test</strong></p>

<p>I would like to cover how Test works in Pragmatic.ly in another post. To give a quick overview, we use <a title="JavaScript Behavior Test Framework" href="http://pivotal.github.com/jasmine/" target="_blank">Jasmine</a> for JS test and <a title="JavaScript Code Coverage Tool" href="http://siliconforks.com/jscoverage/" target="_blank">JSCoverage</a> for measuring code coverage. Nice pair!</p>

<p>&nbsp;</p>

<p><strong>About Pragmatic.ly</strong></p>

<p><a title="Fast &amp; easy to use project management tool &amp; real-time collaboration" href="https://pragmatic.ly/">Pragmatic.ly</a> is a fast and easy to use project management tool featuring real time collaboration. It&#8217;s an elegant project management service built for developers with love.</p>

<p>&nbsp;</p>

<p>Now that you&#8217;ve read so far, you should follow me <a title="yedingding's twitter" href="https://twitter.com/yedingding" target="_blank">@yedingding</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conditional comments in html]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/20/conditional-comments-in-html/"/>
    <updated>2012-08-20T11:31:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/20/conditional-comments-in-html</id>
    <content type="html"><![CDATA[<h2>Conditional comments in html</h2>

<p>Conditional comments only work in IE, and are thus excellently suited to give special instructions meant only for IE. They are supported from IE 5 onwards.</p>

<p>Conditional comments work as follows:</p>

<pre>&lt;!--[if IE 6]&gt;
Special instructions for IE 6 here
&lt;![endif]--&gt;</pre>


<ol>
    <li>Their basic structure is the same as an HTML comment (<code>&lt;!-- --&gt;</code>). Therefore all other browsers will see them as normal comments and will ignore them entirely.</li>
    <li>IE, though, has been programmed to recognize the special <code>&lt;!--[if IE]&gt;</code> syntax, resolves the <code>if</code> and parses the content of the conditional comment as if it were normal page content.</li>
    <li>Since conditional comments use the <strong>HTML</strong> comment structure, they can only be included in HTML files, and not in CSS files. I&#8217;d have preferred to put the special styles in the CSS file, but that&#8217;s impossible. You can also put an entire new <code>&lt;link&gt;</code> tag in the conditional comment referring to an extra style sheet.</li>
</ol>


<h3 id="link1">Example</h3>


<p>Below I added a lot of conditional comments that print out messages according to your IE version.</p>

<p><strong>Note</strong> however, that if you use multiple Explorers on one computer, the conditional comments will render as if all these Explorer versions are the highest Explorer version available on your machine (usually Explorer 6.0).</p>

<h4 id="link2">Test</h4>


<p>Below are a few conditional comments that reveal the IE version you&#8217;re using.</p>

<p>According to the conditional comment this is not IE</p>

<h4 id="link3">Code</h4>


<p>The syntax I use is:</p>

<pre>&lt;p&gt;
&lt;!--[if IE]&gt;
According to the conditional comment this is IE&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 6]&gt;
According to the conditional comment this is IE 6&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;
According to the conditional comment this is IE 7&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;
According to the conditional comment this is IE 8&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if IE 9]&gt;
According to the conditional comment this is IE 9&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if gte IE 8]&gt;
According to the conditional comment this is IE 8 or higher&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if lt IE 9]&gt;
According to the conditional comment this is IE lower than 9&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if lte IE 7]&gt;
According to the conditional comment this is IE lower or equal to 7&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if gt IE 6]&gt;
According to the conditional comment this is IE greater than 6&lt;br /&gt;
&lt;![endif]--&gt;
&lt;!--[if !IE]&gt; --&gt;
According to the conditional comment this is not IE&lt;br /&gt;
&lt;!-- &lt;![endif]--&gt;
&lt;/p&gt;</pre>


<p>Note the special syntax:</p>

<ul>
    <li><code>gt</code>: greater than</li>
    <li><code>lte</code>: less than or equal to</li>
</ul>


<p>Also note the last one. It has a different syntax, and its contents are shown in all browsers that are not IE:</p>

<pre>&lt;!--[if !IE]&gt; --&gt;</pre>


<h3 id="link4">CSS hack?</h3>


<p>Are conditional comments <a href="http://www.quirksmode.org/css/csshacks.html">CSS hacks</a>? Strictly speaking, yes, since they can serve to give special style instructions to some browsers. However, they do not rely on one browser bug to solve another one, as all true CSS hacks do. Besides, they can be used for more than CSS hacks only (though that rarely happens).</p>

<p>Since conditional comments are not based on a browser hack but on a deliberate feature I believe they are safe to use. Sure, other browsers could implement conditional comments, too (though as yet none have done so), but they&#8217;re unlikely to react to the specific query <code>&lt;!--[if IE]&gt;</code>.</p>

<p>I use conditional comments, though sparingly. First I see if I can find a real CSS solution to an Explorer Windows problem. If I can&#8217;t, though, I don&#8217;t hesitate to use them.</p>

<h3 id="link5">Comment tag</h3>


<p>A reader told me IE8 and below also support the (non-standard) <code>&lt;comment&gt;</code> tag.</p>

<pre>&lt;p&gt;This is &lt;comment&gt;not&lt;/comment&gt; IE.&lt;/p&gt;</pre>


<p>This isnotIE.</p>

<p>This tag might be a replacement for the <code>!IE</code> conditional comment, but only if you target IE8 and below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Journey Through The JavaScript MVC Jungle -- By Addy Osmani]]></title>
    <link href="http://jhjguxin.github.com/blog/2012/08/16/journey-through-the-javascript-mvc-jungle-by-addy-osmani/"/>
    <updated>2012-08-16T00:51:00+08:00</updated>
    <id>http://jhjguxin.github.com/blog/2012/08/16/journey-through-the-javascript-mvc-jungle-by-addy-osmani</id>
    <content type="html"><![CDATA[<h2>Journey Through The JavaScript MVC Jungle &#8211; By Addy Osmani</h2>

<p>When writing a Web application from scratch, it’s easy to feel like we can get by simply by relying on a <a href="https://developer.mozilla.org/en/DOM/About_the_Document_Object_Model">DOM</a> manipulation library (like <a href="http://jquery.com/">jQuery</a>) and a handful of utility plugins. The problem with this is that it doesn’t take long to get lost in a nested pile of jQuery callbacks and DOM elements without any real structure in place for our applications.</p>

<p>In short, we’re stuck with <a href="http://en.wikipedia.org/wiki/Spaghetti_code">spaghetti code</a>. Fortunately there are modern JavaScript frameworks that can assist with bringing structure and organization to our projects, improving how easily maintainable they are in the long-run.</p>

<h3>What Is MVC, Or Rather MV*?</h3>


<p>These modern frameworks provide developers an easy path to organizing their code using variations of a pattern known as <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmvp">MVC</a> (Model-View-Controller). MVC separates the concerns in an application down into three parts:</p>

<ul>
    <li><strong>Models</strong> represent the domain-specific knowledge and data in an application. Think of this as being a ‘type’ of data you can model — like a User, Photo or Note. Models should notify anyone observing them about their current state (e.g Views).</li>
    <li><strong>Views</strong> are typically considered the User-interface in an application (e.g your markup and templates), but don’t have to be. They should know about the existence of Models in order to observe them, but don’t directly communicate with them.</li>
    <li><strong>Controllers</strong> handle the input (e.g clicks, user actions) in an application and Views can be considered as handling the output. When a Controller updates the state of a model (such as editing the caption on a Photo), it doesn’t directly tell the View. This is what the observing nature of the View and Model relationship is for.</li>
</ul>


<p>JavaScript ‘MVC’ frameworks that can help us structure our code don’t always strictly follow the above pattern. Some frameworks will include the responsibility of the Controller in the View (e.g <a href="http://backbonejs.org/">Backbone.js</a>) whilst others add their own opinionated components into the mix as they feel this is more effective.</p>

<p>For this reason we refer to such frameworks as following the MV* pattern, that is, you’re likely to have a View and a Model, but more likely to have something else also included.</p>

<p><strong>Note:</strong> There also exist variations of MVC known as MVP (Model-View-Presenter) and MVVM (Model-View ViewModel). If you’re new to this and feel it’s a lot to take in, don’t worry. It can take a little while to get your head around patterns, but I’ve written more about the above patterns in my online book <a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmvp">Learning JavaScript Design Patterns</a> in case you need further help.</p>

<p><img title="cover" src="http://media.smashingmagazine.com/wp-content/uploads/2012/07/juggling-monkey.jpg" alt="" /></p>

<h3>When Do You Need A JavaScript MV* Framework?</h3>


<p>When building a single-page application using JavaScript, whether it involves a complex user interface or is simply trying to reduce the number of HTTP requests required for new Views, you will likely find yourself inventing many of the pieces that make up an MV* framework like Backbone or Ember.</p>

<p>At the outset, it isn’t terribly difficult to write an application framework that offers <em>some</em>opinionated way to avoid spaghetti code, however to say that it is equally as trivial to write something of the standard of Backbone would be a grossly incorrect assumption.</p>

<p>There’s a lot more that goes into structuring an application than tying together a DOM manipulation library, templating and routing. Mature MV* frameworks typically not only include many of the pieces you would find yourself writing, but also include solutions to problems you’ll find yourself running into later on down the road. This is a time-saver that you shouldn’t underestimate the value of.</p>

<p>So, where will you likely need an MV* framework and where won’t you?</p>

<p>If you’re writing an application that will likely only be communicating with an API or back-end data service, where much of the heavy lifting for viewing or manipulating that data will be occurring in the browser, you may find a JavaScript MV* framework useful.</p>

<p>Good examples of applications that fall into this category are <a href="http://gmail.com/">GMail</a> and <a href="http://docs.google.com/">Google Docs</a>. These applications typically download a single payload containing all the scripts, stylesheets and markup users need for common tasks and then perform a lot of additional behavior in the background. It’s trivial to switch between reading an email or document to writing one and you don’t need to ask the application to render the whole page again at all.</p>

<p>If, however, you’re building an application that still relies on the server for most of the heavy-lifting of Views/pages and you’re just using a little JavaScript or jQuery to make things a little more interactive, an MV framework may be overkill. There certainly are complex Web applications where the partial rendering of views can* be coupled with a single-page application effectively, but for everything else, you may find yourself better sticking to a simpler setup.</p>

<h3>The Challenge Of Choice: Too Many Options?</h3>


<p>The JavaScript community has been going through something of a renaissance over the last few years, with developers building even larger and more complex applications with it as time goes by. The language still greatly differs from those more classic Software engineers are used to using (C++, Java) as well as languages used by Web developers (PHP, Python, .Net etc). This means that in many cases we are borrowing concepts of how to structure applications from what we have seen done in the past in these other languages.</p>

<p>In my talk “<a href="http://addyosmani.com/blog/digesting-javascript-mvc-pattern-abuse-or-evolution/">Digesting JavaScript MVC: Pattern Abuse or Evolution</a>”, I brought up the point that there’s currently too much choice when it comes to what to use for structuring your JavaScript application. Part of this problem is fueled by how different JavaScript developers interpret how a scalable JavaScript application should be organized — MVC? MVP? MVVM? Something else? This leads to more frameworks being created with a different take on MV* each week and ultimately more noise because we’re still trying to establish the “right way” to do things, if that exists at all. Many developers believe it doesn’t.</p>

<p>We refer to the current state of new frameworks frequently popping up as ‘Yet Another Framework Syndrome’ (or YAFS). Whilst innovation is of course something we should welcome, YAFS can lead to a great deal of confusion and frustration when developers just want to start writing an app but don’t want to manually evaluate 30 different options in order to select something maintainable. In many cases, the differences between some of these frameworks can be very subtle if not difficult to distinguish.</p>

<h3>TodoMVC: A Common Application For Learning And Comparison</h3>


<p>There’s been a huge boom in the number of such MV* frameworks being released over the past few years.</p>

<p><a href="http://backbonejs.org/">Backbone.js</a>, <a href="http://emberjs.com/">Ember.js</a>, <a href="http://angularjs.com/">AngularJS</a>, <a href="http://spinejs.com/">Spine</a>, <a href="http://canjs.us/">CanJS</a> … The list of new and stable solutions continues to grow each week and developers can quickly find themselves lost in a sea of options. From minds who have had to work on complex applications that inspired these solutions (such as <a href="http://github.com/wycats">Yehuda Katz</a> and <a href="http://github.com/jashkenas">Jeremy Ashkenas</a>), there are many strong contenders for what developers should consider using. The question is, what to use and how do you choose?</p>

<p>We understood this frustration and wanted to help developers simplify their selection process as much as possible. To help solve this problem, we created <a href="http://todomvc.com/">TodoMVC</a> — a project which offers the same Todo application implemented in most of the popular JavaScript MV* frameworks of today — think of it as speed dating for frameworks. Solutions look and feel the same, have a common feature set, and make it easy for us to compare the syntax and structure of different frameworks, so we can select the one we feel the most comfortable with or at least, narrow down our choices.</p>

<p><img title="screenshot1" src="http://media.smashingmagazine.com/wp-content/uploads/2012/07/screenshot11.jpg" alt="" /></p>

<p>This week we’re releasing a <strong>brand new</strong> version of <a href="http://www.todomvc.com/">TodoMVC</a>, which you can find more details about lower down in the apps section.</p>

<p>In the near future we want to take this work even further, providing guides on how frameworks differ and recommendations for which options to consider for particular types of applications you may wish to build.</p>

<h3>Our Suggested Criteria For Selecting A Framework</h3>


<p>Selecting a framework is of course about more than simply comparing the Todo app implementations. This is why, once we’ve filtered down our selection of potential frameworks to just a few, it’s recommend to spend some time doing a little due diligence. The framework we opt for may need to support building non-trivial features and could end up being used to maintain the app for years to come.</p>

<ul>
    <li><strong>What is the framework really capable of?</strong>
Spend time reviewing both the source code of the framework and official list of features to see how well they fit with your requirements. There will be projects that may require modifying or extending the underlying source and thus make sure that if this might be the case, you’ve performed due diligence on the code.</li>
    <li><strong>Has the framework been proved in production?</strong>
i.e Have developers actually built and deployed large applications with it that are publicly accessible? Backbone has a strong portfolio of these (SoundCloud, LinkedIn) but not all frameworks do. Ember is used in number of large apps, including the user tools in Square. JavaScriptMVC has been used to power applications at IBM amongst other places. It’s not only important to know that a framework works in production, but also being able to look at real world code and be inspired by what can be built with it.</li>
    <li><strong>Is the framework mature?</strong>
We generally recommend developers don’t simply “pick one and go with it”. New projects often come with a lot of buzz surrounding their releases but remember to take care when selecting them for use on a production-level app. You don’t want to risk the project being canned, going through major periods of refactoring or other breaking changes that tend to be more carefully planned out when a framework is mature. Mature projects also tend to have more detailed documentation available, either as a part of their official or community-driven docs.</li>
    <li><strong>Is the framework flexible or opinionated?</strong>
Know what flavor you’re after as there are plenty of frameworks available which provide one or the other. Opinionated frameworks lock (or suggest) you to do things in a specific way (theirs). By design they are limiting, but place less emphasis on the developer having to figure out how things should work on their own.</li>
    <li><strong>Have you really played with the framework?</strong>
Write a small application without using frameworks and then attempt to refactor your code with a framework to confirm whether it’s easy to work with or not. As much as researching and reading up on code will influence your decision, it’s equally as important to write actual code using the framework to make sure you’re comfortable with the concepts it enforces.</li>
    <li><strong>Does the framework have a comprehensive set of documentation?</strong>
Although demo applications can be useful for reference, you’ll almost always find yourself consulting the official framework docs to find out what its API supports, how common tasks or components can be created with it and what the gotchas worth noting are. Any framework worth it’s salt should have a detailed set of documentation which will help guide developers using it. Without this, you can find yourself heavily relying on IRC channels, groups and self-discovery, which can be fine, but are often overly time-consuming when compared to a great set of docs provided upfront.</li>
    <li><strong>What is the total size of the framework, factoring in minification, gzipping and any modular building that it supports?</strong>
What dependencies does the framework have? Frameworks tend to only list the total filesize of the base library itself, but don’t list the sizes of the librarys dependencies. This can mean the difference between opting for a library that initially looks quite small, but could be relatively large if it say, depends on jQuery and other libraries.</li>
    <li><strong>Have you reviewed the community around the framework?</strong>
Is there an active community of project contributors and users who would be able to assist if you run into issues? Have enough developers been using the framework that there are existing reference applications, tutorials and maybe even screencasts that you can use to learn more about it?</li>
</ul>


<h3>Dojo And Rise Of The JavaScript Frameworks</h3>


<p>As many of us know, the <a href="http://dojotoolkit.org/">Dojo toolkit</a> was one of the first efforts to provide developers a means to developing more complex applications and some might say it in-part inspired us to think more about the needs of non-trivial applications. I sat down to ask Dojos <a href="http://dylanschiemann.com/">Dylan Schiemann</a>, Kitson Kelly, and James Thomas what their thoughts were on the rise of JavaScript MV* frameworks.</p>

<p><strong>Q: Didn’t Dojo already solve all of this? Why hasn’t it been the dominent solution for developers wishing to build more structured (and more non-trivial) applications?</strong></p>

<p>Years ago, while the JavaScript landscape evolved from adding simple Ajax and chrome to a page, Dojo was evangelizing a “toolkit” approach to building complex Web applications.</p>

<p>Many of those features were way ahead of most developers needs. With the emergence of the browser as the dominant application platform, many of the innovations pioneered in The Dojo Toolkit now appear in newer toolkits. MVC was just another package that Dojo has provided for quite some time, along with modular code packages, OO in JS, UI widgets, cross-browser graphics, templating, internationalization, accessibility, data stores, testing frameworks, a build system and much, much more.</p>

<p>JavaScript libraries shouldn’t end at “query”, which is why Dojo, early on, focussed on completing the picture for enterprise grade application development. This is the same focus that is has today with MVC, it’s just another “tool in the arsenal”.</p>

<p>Why is Dojo not the dominant toolkit? Its goal was never to be the only choice. The goal was to provide an open collection of tools that could be used with anything else, within projects, and liberally copied into other work as well. Dojo was criticized for being slow and even after that was addressed, it was criticized for being slow. Trying to shake that perception is challenging. It is very hard to document a feature-rich toolkit. There are 175 sub-packages in Dojo 1.8 and over 1,400 modules.</p>

<p>That is not only a challenge from a documentation purpose, it also means that there isn’t one thing that Dojo does. Which is good if you are building software, but very difficult when you are starting out trying to figure out where to start. These are all things we have been trying to work on for Dojo 1.8, in the form of tutorials and significantly improved documentation.</p>

<p><strong>Q: Why should developers still consider Dojo and what ideas do you have lined up for the future of the project? I hear 1.8 will be another major milestone.</strong></p>

<p>In Dojo 1.8, dojox/mvc takes another step towards full maturity. There has been a lot of investment in time, effort, testing and community awareness into the package. It focuses on providing an MVC model that leverages the rest of Dojo. Coupled with dojox/app, an application framework that is designed to make it easier to build rich applications across desktop and mobile, it makes a holistic framework for creating a
client side application.</p>

<p>In the typical Dojo way, this is just one of many viable ways in which to build applications with Dojo.</p>

<p>In 1.8, not only does the MVC sub-module become more mature, it is built upon a robust framework. It doesn’t just give you markup language to create your views, express your models or develop a controller. It is far more then just wiring up some controls to a data source. Because it is leveraging the rest of Dojo, you can draw in anything else you might need.</p>

<p>In Dojo 2.0 we will be looking to take modularity to a new level, so that it becomes even easier to take a bit of this and a bit of that and string it all together. We are also exploring the concepts of isomorphism, where it should be transparent to the end-user where your code is being executed, be it client side or server side and that ultimately it should be transparent to the developer.</p>

<h3>The TodoMVC Collection</h3>


<p>In our brand new release, Todo implementations now exist for the most popular frameworks with a large number of other commonly used frameworks being worked on in Labs. These implementations have gone through a lot of revision, often taking on board best practice tips and suggestions from framework authors, contributors and users from within the community.</p>

<p><img title="screenshot2" src="http://media.smashingmagazine.com/wp-content/uploads/2012/07/screenshot2.jpg" alt="" /></p>

<p>Following on from comments previously made by Backbone.js author Jeremey Ashkenas and Yehuda Katz, TodoMVC now also offers consistent implementations based on an official application specification as well as routing (or state management).</p>

<p>We don’t pretend that more complex learning applications aren’t possible (they certainly are), but the simplicity of a Todo app allows developers to review areas such as code structure, component syntax and flow, which we feel are enough to enable a comparison between frameworks and prompt further exploration with a particular solution or set of solutions.</p>

<p>Our applications include:</p>

<ul>
    <li><a href="http://documentcloud.github.com/backbone">Backbone.js</a></li>
    <li><a href="http://emberjs.com/">Ember.js</a></li>
    <li><a href="http://angularjs.org/">AngularJS</a></li>
    <li><a href="http://spinejs.com/">Spine.js</a></li>
    <li><a href="http://knockoutjs.com/">KnockoutJS</a> (MVVM)</li>
    <li><a href="http://dojotoolkit.org/">Dojo</a></li>
    <li><a href="http://yuilibrary.com/">YUI</a></li>
    <li><a href="http://batmanjs.org/">Batman.js</a></li>
    <li><a href="http://code.google.com/closure/library/">Closure</a></li>
    <li><a href="http://agilityjs.com/">Agility.js</a></li>
    <li><a href="http://kmalakoff.github.com/knockback">Knockback.js</a></li>
</ul>


<p>For those interested in AMD versions:</p>

<ul>
    <li><a href="http://documentcloud.github.com/backbone">Backbone.js</a> + <a href="http://requirejs.org/">RequireJS</a> (using AMD)</li>
    <li><a href="http://emberjs.com/">Ember.js</a> + <a href="http://requirejs.org/">RequireJS</a> (using AMD)</li>
</ul>


<p>And our Labs include:</p>

<ul>
    <li><a href="http://canjs.us/">CanJS</a></li>
    <li><a href="https://github.com/petermichaux/maria">Maria.js</a></li>
    <li><a href="http://cujojs.github.com/">cujo.js</a></li>
    <li><a href="http://meteor.com/">Meteor</a></li>
    <li><a href="http://www.socketstream.org/">SocketStream</a> + <a href="http://jquery.com/">jQuery</a></li>
    <li><a href="http://www.sencha.com/products/extjs">Ext.js</a></li>
    <li><a href="http://sammyjs.org/">Sammy.js</a></li>
    <li><a href="http://javascriptmvc.com/">JavaScriptMVC</a></li>
    <li><a href="https://developers.google.com/web-toolkit/">Google Web Toolkit</a></li>
    <li><a href="https://github.com/troopjs">TroopJS</a></li>
    <li><a href="http://hay.github.com/stapes">Stapes.js</a></li>
    <li><a href="http://somajs.github.com/somajs">soma.js</a></li>
    <li><a href="https://bitbucket.org/mckamey/duel/wiki/Home">DUEL</a></li>
    <li><a href="https://github.com/jgallen23/fidel">Fidel</a></li>
    <li><a href="https://github.com/flams/olives">Olives</a></li>
    <li><a href="https://github.com/rhysbrettbowen/PlastronJS">PlastronJS</a></li>
    <li><a href="https://github.com/creynders/dijon-framework">Dijon</a></li>
    <li><a href="http://www.rappidjs.com/">rAppid.js</a></li>
    <li><a href="https://github.com/brokenseal/broke">Broke</a></li>
    <li><a href="http://weepy.github.com/o_O">o_O</a></li>
    <li><a href="https://github.com/marcuswestin/fun">Fun</a></li>
    <li><a href="http://angularjs.org/">AngularJS</a> + <a href="http://requirejs.org/">RequireJS</a> (using AMD)</li>
</ul>


<p><strong>Note:</strong> We’ve implemented a version of our Todo application using <a href="https://github.com/addyosmani/todomvc/blob/master/vanilla-examples/vanillajs/js/app.js">just JavaScript</a> and another using primarily <a href="https://github.com/addyosmani/todomvc/blob/master/architecture-examples/jquery/js/app.js">jQuery conventions</a>. As you can see, whilst these applications are functionally equivalent to something you might write with an MVC framework, there’s no separation of concerns and the code becomes harder to read and maintain as the codebase grows.</p>

<p>We feel honored that over the past year, some framework authors have involved us in discussions about how to improve their solutions, helping bring our experience with a multitude of solutions to the table. We’ve also slowly moved towards TodoMVC being almost a defacto app that new frameworks implement and this means it’s become easier to make initial comparisons when you’re reviewing choices.</p>

<h3>Frameworks: When To Use What?</h3>


<p>To help you get started with narrowing down frameworks to explore, we would like to offer the below high-level framework summaries which we hope will help steer you towards a few specific options to try out.</p>

<p>I want something flexible which offers a minimalist solution to separating concerns in my application. It should support a persistence layer and RESTful sync, models, views (with controllers), event-driven communication, templating and routing. It should be imperative, allowing one to update the View when a model changes. I’d like some decisions about the architecture left up to me. Ideally, many large companies have used the solution to build non-trivial applications. As I may be building something complex, I’d like there to be an active extension community around the framework that have already tried addressing larger problems (<a href="https://github.com/derickbailey/backbone.marionette">Marionette</a>, <a href="https://github.com/chaplinjs/chaplin">Chaplin</a>, <a href="https://github.com/addyosmani/backbone-aura/">Aura</a>, <a href="https://github.com/walmartlabs/thorax">Thorax</a>). Ideally, there are also scaffolding tools (<a href="https://github.com/backbone-boilerplate/grunt-bbb">grunt-bbb</a>, <a href="http://brunch.io/">brunch</a>) available for the solution. <strong>Use Backbone.js.</strong></p>

<p>I want something that tries to tackle desktop-level application development for the web. It should be opinionated, modular, support a variation of MVC, avoid the need to wire everything in my application together manually, support persistence, computed properties and have auto-updating (live) templates. It should support proper state management rather than the manual routing solution many other frameworks advocate being used. It should also come with extensive docs and of course, templating. It should also have scaffolding tools available (ember.gem, ember for brunch). <strong>Use Ember.js.</strong></p>

<p>I want something more lightweight which supports live-binding templates, routing, integration with major libraries (like jQuery and Dojo) and is optimized for performance. It should also support a way to implement models, views and controllers. It may not be used on as many large public applications just yet, but has potential. Ideally, the solution should be built by people who have previous experience creating many complex applications. <strong>Use CanJS.</strong></p>

<p>I want something declarative that uses the View to derive behavior. It focuses on achieving this through custom HTML tags and components that specify your application intentions. It should support being easily testable, URL management (routing) and a separation of concerns through a variation of MVC. It takes a different approach to most frameworks, providing a HTML compiler for creating your own DSL in HTML. It may be inspired by upcoming Web platform features such as Web Components and also has its own scaffolding tools available (angular-seed). <strong>Use AngularJS.</strong></p>

<p>I want something that offers me an excellent base for building large scale applications. It should support a mature widget infrastructure, modules which support lazy-loading and can be asynchronous, simple integration with CDNs, a wide array of widget modules (graphics, charting, grids, etc) and strong support for internationalization (i18n, l10n). It should have support for OOP, MVC and the building blocks to create more complex architectures. <strong>Use Dojo.</strong></p>

<p>I want something which benefits from the YUI extension infrastructure. It should support models, views and routers and make it simple to write multi-view applications supporting routing, View transitions and more. Whilst larger, it is a complete solution that includes widgets/components as well as the tools needed to create an organized application architecture. It may have scaffolding tools (yuiproject), but these need to be updated. <strong>Use YUI.</strong></p>

<p>I want something simple that values asynchronous interfaces and lack any dependencies. It should be opinionated but flexible on how to build applications. The framework should provide bare-bones essentials like model, view, controller, events, and routing, while still being tiny. It should be optimized for use with CoffeeScript and come with comprehensive documentation. <strong>Use Spine.</strong></p>

<p>I want something that will make it easy to build complex dynamic UIs with a clean underlying data model and declarative bindings. It should automatically update my UI on model changes using two-way bindings and support dependency tracking of model data. I should be able to use it with whatever framework I prefer, or even an existing app. It should also come with templating built-in and be easily extensible. <strong>Use KnockoutJS.</strong></p>

<p>I want something that will help me build simple Web applications and websites. I don’t expect there to be a great deal of code involved and so code organisation won’t be much of a concern. The solution should abstract away browser differences so I can focus on the fun stuff. It should let me easily bind events, interact with remote services, be extensible and have a huge plugin community. <strong>Use jQuery.</strong></p>

<p>&nbsp;</p>

<h3>What Do Developers Think About The Most Popular Frameworks?</h3>


<p>As part of our research into MV* frameworks for TodoMVC and this article, we decided to conduct a survey to bring together the experiences of those using these solutions. We asked developers what framework they find themselves using the most often and more importantly, why they would recommend them to others. We also asked what they felt was still missing in their project of choice.</p>

<p>We’ve grouped some of the most interesting responses below, by framework.</p>

<h4>EMBER.JS</h4>


<blockquote><strong>Pros:</strong> The combination of live templates and observable objects has changed the way I write JavaScript. It can be a bit much to wrap your head around at first, but you end up with a nice separation of responsibility. I found that once I have everything set up, adding fairly complex features only takes a couple lines of code. Without Ember, these same features would’ve been hellish to implement.

<strong>Cons:</strong> Ember has yet to reach 1.0. Many things are still in flux, such as the router and Ember data. The new website is very helpful, but there’s still not as much documentation for Ember as there is for other frameworks, specifically Backbone. Also, with so much magic in the framework, it can be a little scary. There’s the fear that if something breaks you won’t be able to figure out exactly why. Oh, and the error messages that ember gives you often suck.</blockquote>


<blockquote><strong>Pros:</strong>
The key factors:

a) Features that let me avoid a lot of boilerplate (bindings, computer properties, view layer with the cool handlebars).

b) the core team: I’m a Rails developer and know the work of Yehuda Katz. I trust the guy =)

<strong>Cons:</strong> Documentation. It’s really sad that Ember doesn’t have good documentation, tutorials, screencast like Backbone, Angular or other frameworks. Right now, we browse the code looking for docs which isn’t ideal.</blockquote>


<blockquote><strong>Pros:</strong> Convention over configuration. Ember makes so many small decisions for you it’s by far the easiest way to build a client-side application these days.

<strong>Cons:</strong> The learning curve. It is missing the mass of getting started guides that exist for other frameworks like Backbone, this is partly because of the small community, but I think more because of the state of flux the codebase is in pre-1.0.</blockquote>


<blockquote><strong>Pros:</strong> Simplicity, bindings, tight integration with Handlebars, ease of enabling modularity in my own code.

<strong>Cons:</strong> I’d like to have a stable integration with ember-data, and integrated localStorage support synced with a REST API, but hey that’s fantasy that one day will surely come true ;-)</blockquote>


<h4>BACKBONE.JS</h4>


<blockquote><strong>Pros:</strong> Simplicity — only 4 core components (Collection, Model, View, Router). Huge community (ecosystem) and lots of solutions on StackOverflow. Higher order frameworks like Marionette or Vertebrae with lots of clever code inside. Somebody might like “low-levelness” — need to write lots of boilerplate code, but get customized application architecture.

<strong>Cons:</strong> I don’t like how extend method works — it copies content of parent objects into new one. Prototypal inheritance FTW. Sometime I miss real world scenarios in docs examples. Also there is a lot of research needed to figure out how to build a bigger app after reading the TODO tutorial.

I’m missing official AMD support in projects from DocumentCloud (BB, _). [Note: this shouldn’t be an issue with the new RequireJS shim() method in RequireJS 2.0].</blockquote>


<blockquote><strong>Pros:</strong> After the initial brain-warp of understanding how Backbone rolls, it is incredibly useful. Useful as in, well supported, lightweight, and constantly updated in a valid scope. Ties in with natural friends Underscore, jQuery/Zepto, tools that most of my studio’s projects would work with.

<strong>Cons:</strong> The amount of tutorials on how to do things with Backbone is inconsistent and at different periods of Backbones lifespan. I’ve asked other devs to have a look at Backbone, and they would be writing code for v0.3. Un-aware. Whilst not a problem Backbone can fix itself, it is certainly a major dislike associated with the framework.

I suppose in theory, you could apply this to anything else, but, Backbone is a recurrent one in my eyes. Hell, I’ve even seen month old articles using ancient Backbone methods and patterns.

Whatever dislikes I would have on the framework strictly itself, has been rectified by the community through sensible hacks and approaches. For me, that is why Backbone is great, the community backing it up.</blockquote>


<blockquote><strong>Pros:</strong> Provides just enough abstraction without unreasonable opinions — enabling you to tailor it to the needs of the project.

<strong>Cons:</strong> I would re-write (or possibly remove) Backbone.sync. It has baked in assumptions of typical client-initiated HTTP communications, and doesn’t adapt well to the push nature of WebSockets.</blockquote>


<blockquote><strong>Pros:</strong> It’s extremely easy to get into, offering a nice gateway to MV* based frameworks. It’s relatively customizable and there are also tons of other people using it, making finding help or support easy.

<strong>Cons:</strong> The fact that there’s no view bindings by default (although you can fix this). Re-rendering the whole view when a single property changes is wasteful.

The RESTful API has a lot of positives, but the lack of bulk-saving (admittedly a problem with REST itself, but still) and the difficulty in getting different URI schemes to work on different types of operations sucks.</blockquote>


<h4>ANGULARJS</h4>


<blockquote><strong>Pros:</strong>

a) 2-way data binding is incredibly powerful. You tend to think more about your model and the state that it is in instead of a series of events that need to happen. The model is the single source of truth.

b) Performance. AngularJS is a small download. It’s templating uses DOM nodes instead of converting strings into DOM nodes and should perform better.

c) If you are targeting modern browsers and/or are a little careful, you can drop jQuery from your dependencies too.

<strong>Cons:</strong> I’d like to be able to specify transitions for UI state changes that propgate from a model change. Specifically for elements that use ng-show or ng-hide I’d like to use a fade or slide in in an easy declarative way.</blockquote>


<blockquote><strong>Pros:</strong> It’s very intuitive, has excellent documentation. I love their data binding approach, HTML based views, nested scopes. I switched from Backbone/Thorax to Angular and never looked back. A new Chrome extension Batarang integrates with Chrome Developer’s Tools and provides live access the Angular data structures.

<strong>Cons:</strong> I’d like to have a built-in support to such functions as drag’n&#8217;drop, however this can be added using external components available on GitHub. I’d also like to see more 3rd party components available for reuse. I think it’s just a matter of time for the ecosystem around AngularJS to get more mature and then these will be available just like they are in communities like jQuery.</blockquote>


<blockquote><strong>Pros:</strong> It minimizes drastically the boilerplate code, allows for nice code reuse through components, extends the HTML syntax so that many complex features end up being as simple as applying a directive (attribute) in the HTML, and is super-easily testable thanks to a full commitment to dependency injection.
You can write a non-trivial app without jQuery or without directly manipulating the DOM. That’s quite a feat.

<strong>Cons:</strong> Its learning curve is somewhat steeper than Backbone (which is quite easy to master), but the gain is appreciative. Documentation could be better.</blockquote>


<h4>KNOCKOUTJS</h4>


<blockquote><strong>Pros:</strong> I don’t necessarily use it <em>all</em> the time, but KnockoutJS is just fantastic for single page applications. Extremely easy subscribing to live sorting; much better API for so called “collection views” in Backbone using observable arrays. And custom event on observables for effects, etc.

<strong>Cons:</strong> Feel like the API is quite hard to scale, and would probably prefer to wrangle Backbone on the bigger applications. (But that’s also partially due to community support).</blockquote>


<blockquote><strong>Pros:</strong> I like the data binding mechanism and feel very comfortable using it. In particular I like how they have replaced templates with control flow binding.

<strong>Cons:</strong> I don’t like that there is no guidance or best practice in terms of application structure. Aside from having a view model, the framework doesn’t help you in defining a well structured view model. It’s very easy to end up with a large unmaintainable function.</blockquote>


<h4>DOJO</h4>


<blockquote><strong>Pros:</strong> Syntactically, Dojo is very simple. It allows for dynamic and robust builds, with the initial loader file being as low as 6k in some cases. It is AMD compatible, making it extremely portable, and comes out-of-the-box with a ton of features ranging from basic dom interactions to complex SVG, VML, and canvas functionality. The widget system, Dijit, is unmatched in it’s ease-of-use and ability to be extended. It’s a very well-rounded and complete toolkit.
<strong>Cons:</strong> The dojo/_base/declare functionality is not 100% strict mode compliant and there is currently some overhead due to backwards compatibility, though this will mostly go away in the Dojo 2.0 release.</blockquote>


<blockquote><strong>Pros:</strong> Good components : tabs, datagrid, formManager… Renders the same cross browser. AMD compliant. Easy to test with mocks.Integrates well with other frameworks thks to amd (I ll integrate with JMVC)
<strong>Cons:</strong> Default design for components out of fashion. Not fully html5. So-so documentation
Poor templating system (no auto binding).</blockquote>


<h4>YUI</h4>


<blockquote><strong>Pros:</strong> YUI3 is a modular and use-at-will type of component library which includes all of the goodies of Backbone and more. It even (in my opinion) improves upon some of the concepts in Backbone by de-coupling some things (i.e. attribute is a separate module that can be mixed into any object – the event module can be mixed in similarly).

<strong>Cons:</strong> I’d love to see YUI3 support some of the auto-wiring (optional) of Ember. I think that is really the big win for Ember; otherwise, I see YUI3 as a superior component library where I can cherry-pick what I need. I’d also like to see a more AMD-compatible module loader. The loader today works very well; however, it would be nicer if I could start a new projects based on AMD modules and pull in certain YUI3 components and other things from other places that are also using AMD.</blockquote>


<h4>JAVASCRIPTMVC</h4>


<blockquote><strong>Pros:</strong> Has all tools included, just need to run commands and start building. I have used for the last 6 months and it’s been really good.

<strong>Cons:</strong> The only thing I would do is to speed up development of the next version. Developers are aware of problems and fixing issues but its going to be another ¾ months before some issues I want fixed are addressed, but then I could probably patch and do a pull request.</blockquote>


<h4>MARIA</h4>


<blockquote><strong>Pros:</strong> Because Maria is a pure MVC framework that is focused on being just an MVC framework. No more and no less. Its clean and simple.

<strong>Cons:</strong> A little more usage documentation outside of the source code, plus a few more test cases. A tutorial that drives home the real use of MVC with Maria would be good too.</blockquote>


<h4>CUJO.JS</h4>


<blockquote><strong>Pros:</strong> Real apps almost never fit perfectly into an MV* box, and the most important stuff is often outside the box. With cujo.js, you define the box.

Yes, cujo.js has high-level MV*-like features for creating views, models, controllers, etc., but every app is different, and no framework can ever be a 100% solution. Rather than try to be all things, cujo.js also provides lower level tools, architectural plumbling, and a rich plugin system that can even be used to integrate and extend other MV* frameworks.

Create the architecture that best suits your application, rather than constraining your app to fit inside someone else’s predefined architecture.

<strong>Cons:</strong> The broader JavaScript community is totally unprepared and untrained to take on large-scale applications. Most of us don’t even know that design patterns and architectural patterns exist.

Since cujo.js is so different from other frameworks, it needs more than a simple API reference and code snippets. Without tutorials, educational materials, and step-by-step examples, cujo.js might look strange and overwhelming to the untrained eye but documentation is supposed to be coming soon.</blockquote>


<h4>EXTJS</h4>


<blockquote><strong>Pros:</strong> I think ExtJS works best in combination with Ext Designer. It gives it an edge beyond the other GUI frameworks by letting non-programmers mock up the UI so programmers can fill in the blanks. I think comparing it to MVC frameworks like Backbone doesn’t do it justice – its strength lies in creating rich GUIs, not lean Web apps.

For rich, commercial back-office applications I think ExtJS remains the best choice when it comes to JavaScript solutions (i.e. not GWT etc). For public-facing Web apps I’d rather have something that gives me more control over the markup (and ideally something that degrades gracefully).

<strong>Cons:</strong> It has a steeper learning curve than many of the other modern structural frameworks. One can argue that if you’re investing in ExtJS for the long-term this time spent learning will pay off, however I think solutions like it should aim to better minimize the time it takes to train teams up in using it.</blockquote>


<blockquote><strong>Pros:</strong> I think a big feature of ExtJS 4 is that it throws you into the MVC mindset and the preferred filesystem structure right from the bat. With Dojo the initial tutorials seem to be mostly about augmenting existing websites whereas ExtJS assumes you’re starting from scratch.

Using ExtJS doesn’t really “feel” like you’re dealing with HTML at all. The component library is rich enough to let you go a long way without touching more HTML than what is needed to bootstrap your app.

It’d be interesting to see how both compare when Web components become more widely supported. This would finally allow manipulating the DOM without being afraid of breaking any widgets or causing your app’s internal state to become inconsistent.

<strong>Cons:</strong> The licensing is considered restrictive and difficult to understand by some. More people would be investing in ExtJS if it was clearer what the upfront and long-term costs of using it are. This isn’t a concern with some other structural solutions but probably isn’t as much a worry for larger businesses.</blockquote>


<blockquote><strong>Pros:</strong> ExtJS is a fantastic package for rapidly building out RIAs for internal use. I for one, love to build with HTML and JavaScript, and for me there’s great satisfaction in mucking around at that level. Even though ExtJS makes it feel like you’re not really working with HTML it still offers a great deal of power, especially if you’re using it to create a complex UI.

<strong>Cons:</strong> That said…I absolutely agree that it’s very heavy and I don’t think I’d recommend it for an external facing Web application. My biggest beef with the package overall is actually that it’s more of a PITA to test with than I’d would like. Our tester actually ended up switching to Sikuli because it was becoming too much of a battle trying to work with it in Selenium.</blockquote>


<h4>BATMAN</h4>


<blockquote><strong>Pros:</strong> It has a great and easy to use view bindings system. Plays with Rails very nicely and is all about convention over configuration.

<strong>Cons:</strong> The documentation could be a lot better and I feel Shopify won’t be adding the features that they say that they will.</blockquote>


<h3>Don’t Be Afraid To Experiment</h3>


<p>Whilst it’s unlikely for a developer to need to learn how to use more than a handfull of these frameworks, I do encourage exploration of those you’re unfamiliar with. There’s more than mountain of interesting facts and techniques that can be learned in this process.</p>

<p>In my case: I discovered that Batman.js required the least hand-written lines of code for an implementation. I’m neither a frequent CoffeeScript nor Batman.js user but that in itself gave me some food for thought. Perhaps I could take some of what made this possible and bring it over to the frameworks I do use. Or, maybe I’d simply use Batman.js in a future project if I found the community and support around it improved over time.</p>

<p>Regardless of whether you end up using a different solution, at the end of the day all you have to gain from exploration is more knowledge about what’s out there.</p>

<h3>Going Beyond MV* Frameworks</h3>


<p>Whilst the MV* family of patterns are quite popular for structuring applications, they’re limited in that they don’t address any kind of application layer, communication between Views, services that perform work or anything else. Developers may thus find that they sometimes need to explore beyond just MVC — there are times when you absolutely need to take what they have to offer further.</p>

<p>We reached out to developers that have been taking MVC further with their own patterns or extensions for existing frameworks to get some insights on where you need something more.</p>

<p>“In my case, I needed something Composite. I noticed that there were patterns in Backbone apps where developers realized there was a need for an object that coordinated various parts of an application. Most of the time, I’ve seen developers try to solve this using a Backbone construct (e.g a View), even when there isn’t really a need for it. This is why I instead explored the need for an <a href="http://lostechies.com/derickbailey/2011/12/16/composite-javascript-applications-with-backbone-and-backbone-marionette/">Application Initializer</a>.</p>

<p>I also found that MVC didn’t really describe a way to handle regions of a page or application. The gist of <a href="http://lostechies.com/derickbailey/2011/12/12/composite-js-apps-regions-and-region-managers/">region management</a> is that you could define a visible area of the screen and build out the most basic layout for it without knowing what content was going to be displayed in it at runtime.</p>

<p>I created solutions for region management, application initialization and more in my extension project Marionette. It’s one of a number of solutions that extend upon a framework (or architecture pattern) that developers end up needing when they’re building single-page applications that are relatively complex.</p>

<p>There’s even a TodoMVC <a href="https://github.com/derickbailey/todomvc/tree/marionette">Marionette app</a> available for anyone wishing to compare the standard Backbone application with one that goes beyond just MV*.</p>

<p><em>Derick Bailey — Author of Marionette</em></p>

<p>“While a good portion of problems can be decomposed into JavaScript MVC, there are some which simply cannot. For example, an application consumes a third party API at runtime, but is not given any information as to how the data will be structured.</p>

<p>I spent almost a year trying to solve that very problem, but eventually I came to the realization that shoehorning it into MV* was not a viable solution. I was dealing with an “amorphous model” and that’s where it all fell apart. In other words, if you don’t have a well-defined model, most modern JavaScript frameworks can’t help you.</p>

<p>That’s where <a href="http://java.sun.com/blueprints/corej2eepatterns/Patterns/">Core J2EE Pat­terns</a> come in. I got turned on to them while read­ing <a href="http://www.amazon.com/Objects-Patterns-Practice-Matt-Zandstra/dp/1590599098">PHP Objects, Pat­terns, and Prac­tice</a> by Matt Zand­stra, and I’m glad I did! The J2EE Patterns basically outline a request-driven process, where the URL drives the behavior of the application. In a nutshell, a request is created, modified, and then used to determine the view to render.</p>

<p>I’ve expanded on my experiences with <a href="http://dblogit.com/archives/3895">request driven Javascript applications and J2EE patterns</a> for anyone who would like to learn more. ”</p>

<p><em>Dustin Boston — co-author, Aura</em></p>

<h3>Conclusions</h3>


<p>While there are several choices for what to use for structuring your JavaScript Web applications these days, it’s important to be <strong>diligent</strong> in the selection process – spend time thoroughly evaluating your options in order to make a decision which results in sustainable,<strong>maintainable</strong> code. Framework diversity fosters innovation, while too much similarity just creates noise.</p>

<p>Projects like TodoMVC can help narrow down your selections to those you feel might be the most interesting or most comfortable for a particular project. Remember to take your time choosing, don’t feel too constrained by using a specific pattern and keep in mind that it’s completely acceptable to build on the solution you select to best fit the needs of your application.</p>

<p>Experimenting with different frameworks will also give you different views on how to solve common problems which will in turn make you a better programmer.</p>

<p><em>Thanks to my fellow TodoMVC team-member <a href="http://sindresorhus.com/">Sindre Sorhus</a> for his help with tweaks and a technical review of this article. </em></p>

<div>

<strong>Tags:</strong><a title="View all articles tagged 'Essentials' (32)" href="http://coding.smashingmagazine.com/tag/essentials/">Essentials</a>,<a title="View all articles tagged 'JavaScript' (44)" href="http://coding.smashingmagazine.com/tag/javascript/">JavaScript</a>,<a title="View all articles tagged 'MVC' (1)" href="http://coding.smashingmagazine.com/tag/mvc/">MVC</a><a title="View all articles tagged 'Tools' (27)" href="http://coding.smashingmagazine.com/tag/tools/">Tools</a>

</div>

]]></content>
  </entry>
  
</feed>
