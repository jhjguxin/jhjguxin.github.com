<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: live | Francis's Octopress Blog]]></title>
  <link href="http://jhjguxin.github.io/blog/categories/live/atom.xml" rel="self"/>
  <link href="http://jhjguxin.github.io/"/>
  <updated>2013-11-12T19:23:30+08:00</updated>
  <id>http://jhjguxin.github.io/</id>
  <author>
    <name><![CDATA[Francis Jiang]]></name>
    <email><![CDATA[864248765@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[37signals Earns Millions Each Year. Its CEO’s Model? His Cleaning Lady]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/09/03/37signals-earns-millions-each-year-its-ceos-model-his-cleaning-lady/"/>
    <updated>2012-09-03T22:55:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/09/03/37signals-earns-millions-each-year-its-ceos-model-his-cleaning-lady</id>
    <content type="html"><![CDATA[<h2>37signals Earns Millions Each Year. Its CEO’s Model? His Cleaning Lady</h2>

<p>&nbsp;</p>

<p><header></p>

<h3>Don’t build a fast company, Jason Fried tells Fast Company. Build a slow one.</h3>


<p><figure><img title="" src="http://www.fastcompany.com/multisite_files/fastcompany/imagecache/640/poster/2012/08/3000852-poster-942-hs-37signals-earns-millions-each-year.jpg" alt="" width="640" height="299" /></figure></header>&nbsp;</p>

<div>

Jason Fried is a founder and CEO of <a href="http://37signals.com/" target="_blank">37signals</a>, a software company based in Chicago. Fried also treats 37signals as something of a laboratory for innovative workplace practices--such as a recent experiment in shortening the summer workweek to just four days. We caught up with Fried to learn how employees are like fossil fuels, how a business can be like a cancer, and how one of the entrepreneurs he admires most is his cleaning lady.

<strong>FAST COMPANY: You have your employees only work four-day weeks in the summer.
</strong>
JASON FRIED: Sometimes people are not really used to working just four days and actually want to stay to get more work done.

<strong>You’re saying you have people who actually want to stay the fifth day?
</strong>
When we first started this a few years ago, there was a small sense of guilt in a few corners. People were like, “I have stuff to get done, it’s Thursday, so I’m gonna work Friday and just get it done. But we actually preferred that they didn’t. There are very few things that can’t wait till Monday.

<strong>How many employees would stay to work Fridays?
</strong>
I don’t know.

<strong>Because you weren’t there!
</strong>
We don’t track things in that way. I don’t look at that. I don’t want to encourage that kind of work. I want to encourage quality work.

<strong>As CEO, wouldn’t it simply be rational to let people work the fifth day for you if they wanted?
</strong>
If you’re a short-term thinker you’d think so, but we’re long-term thinkers. We’re about being in business for the long haul and keeping the team together over the long haul. I would never trade a short-term burst for a long-term decline in morale. That happens a lot in the tech business: They burn people out and get someone else. I like the people who work here too much. I don’t want them to burn out. Lots of startups burn people out with 60, 70, 80 hours of work per week. They know that both the people or the company will flame out or be bought or whatever, and they don’t care, they just burn their resources. It’s like drilling for as much oil as you possibly can. You can look at people the same way.

<aside><q>SHE’S ON HER OWN, SHE CLEANS PEOPLE’S HOMES, SHE’S INCREDIBLY NICE. SHE BRINGS FLOWERS EVERY TIME SHE CLEANS, AND SHE’S JUST RESPECTFUL AND NICE AND AWESOME. WHY CAN’T MORE PEOPLE BE LIKE THAT?</q></aside><strong>Are we reaching “peak people”?
</strong>
It seems like in a lot of companies we are. There’s a shortage of talent out there, and if there’s a shortage of resources, you want to conserve those resources.

<strong>So you think there’s a slash-and-burn mentality in the tech world?
</strong>
For sure. I think there’s a lot of lottery-playing going on right now. Companies staffing up, raising a bunch of money, hiring a bunch of people, and burning them out in the hopes that they’ll hit the lottery.

<strong>You seem like too nice a guy to name names--but do you have certain companies in mind?
</strong>
I won’t name names. I used to name names. But I think all you have to do is read TechCrunch. Look at what the top stories are, and they’re all about raising money, how many employees they have, and these are metrics that don’t matter. What matters is: Are you profitable? Are you building something great? Are you taking care of your people? Are you treating your customers well? In the coverage of our industry as a whole, you’ll rarely see stories about treating customers well, about people building a sustainable business. TechCrunch to me is the great place to look to see the sickness in our industry right now.

<strong>Our magazine is called <em>Fast Company</em>, but it sounds like you want to build a slow company.
</strong>
I’m a fan of growing slowly, carefully, methodically, of not getting big just for the sake of getting big. I think that rapid growth is typically of symptom of... there’s a sickness there. There’s a great quote by a guy named Ricardo Semler, author of the book <em><a href="http://www.barnesandnoble.com/w/maverick-success-story-behind-the-worlds-most-unusaul-work-place-ricardo-semler/1104291050?ean=9780446670555" target="_blank">Maverick</a></em>. He said that only two things grow for the sake of growth: businesses and tumors. We have 35 employees at 37signals. We could have hundreds of employees if we wanted to--our revenues and profits support that--but I think we’d be worse off.

<strong>What industries do you look to for inspiration, if not the tech world?
</strong>
I take my inspiration from small mom-and-pop businesses that have been around for a long time. There are restaurants all over the place that I like to go to that have been around a long time, 30 years or more, and thinking about that, that’s an incredible run. I don’t know what percentage of tech companies have been around 30 years. The other interesting thing about restaurants is you could have a dozen Italian restaurants in the city and they can all be successful. It’s not like in the tech world, where everyone wants to beat each other up, and there’s one winner. Those are the businesses I find interesting--it could be a dry cleaner, a restaurant, a clothing store. Actually, my cleaning lady, for example, she’s great.

<strong>Your business icon is your cleaning lady?
</strong>
She’s on her own, she cleans people’s homes, she’s incredibly nice. She brings flowers every time she cleans, and she’s just respectful and nice and awesome. Why can’t more people be like that? She’s been doing it some twenty-odd years, and that’s just an incredible success story. To me that’s far more interesting than a tech company that’s hiring a bunch of people, just got their fourth round of financing for 12 million dollars, and they’re still losing money. That’s what everyone talks about as being exciting, but I think that’s an absolutely disgusting scenario when it comes to business.

</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GTD]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/05/04/gtd/"/>
    <updated>2012-05-04T11:00:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/05/04/gtd</id>
    <content type="html"><![CDATA[<h2>GTD</h2>

<p>GTD是英文Getting Things Done的缩写，是一种行为管理的方法，也是David Allen写的一本书的书名。</p>

<p>GTD的主要原则在于一个人需要通过记录的方式把头脑中的各种任务移出来。通过这样的方式，头脑可以不用塞满各种需要完成的事情，而集中精力在正在完成的事情。</p>

<p>GTD是关于什么的</p>

<p>和其他<a title="时间管理" href="http://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86">时间管理</a>专家不同的是，Allen并不把重点放在设置任务的优先级。他提出制定出在各种环境下的任务列表，例如，制定一个需要打电话的列表，或者在市区才能完成的事情的列表。他也建议任何两分钟之内就能完成的任务应该马上做。</p>

<p>GTD在心理上的好处在于使你需要完成的事情相关的信息易于保存，跟踪和获取。Allen认为导致很多我们在做事的时候碰到的脑力上的障碍的原因是前期的计划不足（举个例子，对任何项目我们需要弄清楚要达到什么目标，还有什么措施需要完成）。</p>

<p>Allen认为我们的脑力上的“提醒系统”相当的低效，很少能够在恰当的时间和地点提醒我们需要做的事情。因此，把“下一步行动”根据场景分类存放在“可信的系统”当中，是一个能使我们在正确的时间得到正确的提醒的手段。在“GTD”中有很多个人的管理小技巧在实行Allen描述的工作流程中很有用的。</p>

<p>一个很概括的对于Allen的书的内容的描述是<em>对于任何事情都准备好</em>:</p>

<dl><dd>“把所有事情都从你的脑袋里弄出来。在事情出现，而不是在事情爆发的时候,就做好相关行动的一系列决定。以合适的类别组织好你的项目的各种提醒以及下一步的行动。保持你的系统更新和完整，充分地检查，使你在任何时候都能信任你的对于你正在做（或者不做）的事情直觉的选择。”</dd></dl>


<h2>原则</h2>


<p>GTD的核心原则如下：</p>

<h3>搜集</h3>


<p>把任何你需要跟踪或者记住或者做的事情记在Allen称之为‘水桶’的地方：一个收件箱，电子邮箱，磁带，笔记本，PDA，或者它们的组合。把你脑子里的任何东西都拿出来放到你的搜集设备里，准备好做下一步的处理。每星期所有的水桶都应该被至少清空一次。</p>

<h3>处理</h3>


<p>处理你的收件箱要遵循一个严格的工作流程：</p>

<ul>
    <li>从最上面开始。</li>
    <li>一次处理一项。</li>
    <li>不把任何东西放回收件箱。</li>
    <li>如果任何一项需要做：</li>
</ul>


<dl><dd>
<ul>
    <li>做（如果花的时间少于两分钟）</li>
    <li>委托别人完成，或者</li>
    <li>把它延期。</li>
</ul>
</dd></dl>


<ul>
    <li>否则</li>
</ul>


<dl><dd>
<ul>
    <li>把它存档以便查询，</li>
    <li>把它扔掉，或者</li>
    <li>使它成熟以便下一步的处理</li>
</ul>
</dd></dl>


<p>两分钟原则：任何事情如果花的时间少于两分钟，那么马上就去做。两分钟是一个分水岭，这样的时间和正式地推迟一个动作所花的时间差不多。</p>

<h3>组织</h3>


<p>Allen描述了一个建议的列表集合，你可以用来跟踪需要关注的项目：</p>

<ul>
    <li><strong>下一步行动(Next actions)</strong>- 对于每个需要你关注的事项，定好什么是你可以实际采取的下一步行动。例如，如果事项为“写项目报告”，下一步行动可能会是“给Fred发邮件开个简短会议”，或者“给Jim打电话问报告的要求”，或者类似的事情。虽然要完成这个事项，可能会有很多的步骤和行动，但是其中一定会有你需要首先去做的事情，这样的事情就应该被记录在“下一步行动”列表上。较好的做法是把这些事项根据能够被完成的“环境”整理分类，例如“在办公室”,“用电话”,“在商场”.</li>
    <li><strong>专案(Projects)</strong>- 每个需要多于一个实际的行动才能达到的生活或者工作中的“开放式回路”就是一个“专案”.使用跟踪以及周期性的回顾来确保每个专案都有一个下一步的行动进行下去。</li>
    <li><strong>等待(Waiting for)</strong>- 当你已经指派了一个事项给其他人或者在项目进行下去之前需要等待外部的事件，就应当在你的系统当中跟踪以及定期检查是否已经可以采取行动或者需要发出一个提醒。</li>
    <li><strong>将来／可能(Someday/Maybe)</strong> - 这些事情你需要在某个点去做，但是不是马上。例如：“学习中文”，或者“进行一个潜水假期”.</li>
</ul>


<p>对于跟踪你的预约和委托，一个日历也是重要的；另外，Allen特别推荐日历应该被用在他所谓的“硬工程”上：必须在某个特定的期限之前完成的事情，或者在约定的时间和地点完成的会议和约会.“待办”事项应该用在下一步行动列表当中。</p>

<p>GTD的最后一个关键组织模块是归档系统.“Getting Things Done”书里说如果要用一个归档系统，那它必须得是简单易用和有趣。即使是一张纸，如果你需要用来记录参考信息，如果不属于你已经有的一个目录，也要有自己的文件组织方式。Allen的建议是你可以维护一个按照字母顺序组织的归档系统，这样可以比较容易快速的存储和提取你所想要的信息。</p>

<p>Google的<a title="Gmail" href="http://zh.wikipedia.org/wiki/Gmail">Gmail</a>的用户可以用创建标签的方式来创建“待办事项”和“项目”，这种方式在Bryan Murdaugh的 “Getting Things Done with Gmail” <a href="http://spaceagewasteland.com/gtd%20with%20gmail.pdf" rel="nofollow">[1]</a>白皮书中有清楚的描述。它保留了很多GTD的相同概念，但是是在在线的电子邮件系统中实施。</p>

<h3>检查</h3>


<p>如果你不至少每天或者只要你有时间就回顾检查，那么你的行动和提醒的列表将会变的毫无用处。以你当时拥有的精力，资源和时间，决定什么是对你来说最重要的事情，然后做。如果你倾向于拖延，你可能会老是做最容易的事情，避免那些难的。为了解决这个问题，你可以一个接一个地做列表上的事情，按照它们的顺序，就象你处理你的收件箱一样。</p>

<p>至少以星期为周期，GTD要求你回顾所有你比较主要的“行动”,“项目”和“等待”的事项，确保所有的新任务或者即将到来的事件都进入你的系统，而且所有的事情都更新到符合最新的情况。Allen建议制作一个<a href="http://zh.wikipedia.org/wiki/GTD#.E5.B7.A5.E5.85.B7.E5.92.8C.E6.8A.80.E5.B7.A7">难题档案</a>来帮助你更新你关于主要行动的记忆。</p>

<h3>做</h3>


<p>如果你把你的时间都花在组织工作，而不是做它们，那么所有的GTD系统都是不好用的！David Allen的观点是，如果你可以把必须做的事情，让它变得简单、容易、有趣的话，那你就比较不会拖延、或者被太多的“开放性回路”所压倒。</p>

<h2> 工具和技巧</h2>


<div>
<div>
<div>一个Allen推荐的工具是<strong>难题文件夹</strong>，用来组织你的GTD的文字工作（也被称为‘43文件夹’）.12个文件夹用来表示每一个月，另外的31个文件夹用来表示每一天。这些文件夹用来帮助提醒你当天的活动。每天你打开表达当天的文件夹。你把所有的事项都拿出文件夹，然后把空文件夹放进下一个月里。这种处理允许你为自己保存提醒的硬拷贝。例如，如果你在这个月的12号有一个音乐会，你可以把票放在第12个文件夹当中。当12号到的时候，它就在那里等着你。</div>
</div>
</div>


<h3>DIY Planner Hipster PDA</h3>


<p>这是一种用来执行GTD的纸本DIY范本，对于习惯用实体纸本计划的人来说，可作为另一种优质选择。<a href="http://www.douglasjohnston.net/weblog/archives/2005/06/11/diyp2_hipsterpda/" rel="nofollow">[2]</a></p>

<h2> 引用</h2>


<ul>
    <li><a title="David Allen (author)" href="http://zh.wikipedia.org/w/index.php?title=David_Allen_(author)&amp;action=edit&amp;redlink=1">Allen, David</a>. Getting Things Done: The Art of Stress-Free Productivity. Penguin Books. 2001. <a href="http://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0142000280">ISBN 0-14-200028-0</a>. </li>
    <li><a title="David Allen (author)" href="http://zh.wikipedia.org/w/index.php?title=David_Allen_(author)&amp;action=edit&amp;redlink=1">Allen, David</a>. Ready for Anything. Viking Books. 2003. <a href="http://zh.wikipedia.org/wiki/Special:%E7%BD%91%E7%BB%9C%E4%B9%A6%E6%BA%90/0670032506">ISBN 0-670-03250-6</a>. </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你不必这么着急 --by Rei]]></title>
    <link href="http://jhjguxin.github.io/blog/2012/04/23/ni-bu-bi-zhe-yao-zhao-ji-by-rei/"/>
    <updated>2012-04-23T10:50:00+08:00</updated>
    <id>http://jhjguxin.github.io/blog/2012/04/23/ni-bu-bi-zhe-yao-zhao-ji-by-rei</id>
    <content type="html"><![CDATA[<h2>你不必这么着急 &mdash;by Rei</h2>

<p>现在这个世界，似乎一切都在快速演进：各种年少暴富的新闻充斥着我们的眼球，软件开发世界到处是敏捷方法，甚至你最亲近的人都在催促你更快——谁谁谁都已经XX了，你将来怎么打算？所以，现在的学生找实习的时间越来越早，想速成的心态越来越重。</p>

<p>但是，你不必这么着急。慢有慢的好处，最重要的是，急也急不来。我想和未走出社会的人分享一下，为什么是我们不用那么着急，并且应该把精力放去哪里。如果你已经工作数年了，但是对着未来感到恐惧，却从来没有试着让自己慢一点，也可以看一看接下来的内容。</p>

<p>在继续阅读之前，先看几个问题，判断这篇文章是否适合你。</p>

<ol>
<li>并不是所有人都那么聪明的，有些人只需要过普通的生活就够了。</li>
</ol>


<p>对的，但我只想跟觉得自己足够聪明的人讨论后面的内容。实际上，我觉得没有什么聪不聪明之分，只是投入时间的问题。</p>

<ol>
<li>不是所有人都有那么崇高的理想的，这些内容太理想主义了。</li>
</ol>


<p>对的，但我也是只想跟心怀理想的人交流。</p>

<ol>
<li>我负有助学贷款压力/出身贫寒/其他急需资金的原因，没空让我停下来好好考虑。</li>
</ol>


<p>很遗憾，这部分人可能需要先解决温饱问题，待将来走出了困境，再仔细考虑一下前面的内容。</p>

<p>你没有对上面的内容嗤之以鼻，那么，可以进入正题了。</p>

<h2>为什么你不用这么着急</h2>


<p>这里有着确切的理由，你不用这么着急</p>

<h3>1. 工作岗位比你想象中多</h3>


<p>对于真正的人才，工作机会是源源不断的。他们困扰的不是找工作，而是找有趣的工作。这听起来很气人，大学毕业有很多人找不到工作呢，很多人工作几年还在用“码农”调侃自己呢。</p>

<p>但现实就是这样，企业缺人、缺人才，但是不缺平凡的人。企业发出一个招聘岗位，会收到数十上百封简历，但十有八九在第一轮人事MM筛选中就会去掉，真正到达缺人部门的领导手中时，又是十有八九看一眼就被淘汰掉了……等等，这是不是说找工作很难呢？正好相反，看问题得反过来看。</p>

<p>试想你是一个部门领导，你的部门急需补充成员，否则会拖慢年度的计划安排。一个月两个月过去了，总看不到可塑之才出现。所以你得不断地到人事部催促，多发些招聘信息；人事MM每天被催促，恨不得天上掉下个技术大牛，活好收费少，赶紧把招聘任务了结了。这样的部门、这样的公司都处都是，他们都在焦急的等着那些合适的人。如果你恰好是那类人，入职就是一张机票的事。</p>

<p>记住，关键是你是否能成为合适的人。“找”工作是没用的，只会成为那 (9/10 + 1/10 × 9/10) × 100%。最理想的是，让工作来找你，这放在后面说。</p>

<h3>2. 现实工作不一定有趣</h3>


<p>假设你已经足够成为那类公司热烈欢迎的人了，是不是得赶紧走出社会“积累积累”经验了呢？</p>

<p>我给建议依然是：别急。现实工作不一定有趣，无趣的工作意味着工作效率低下，工作效率低下意味着经验增长缓慢，经验增长缓慢的工作，还不知蹲在家里每天写8个小时代码呢。</p>

<p>一般说来，越大的公司越无趣，因为大公司有复杂的流程。如果你的工作环境被切割成了设计-UI-编码的团队界限分明的结构，那么你的发挥空间就很小了。你的最大目标是实现别人的需求，你需要实现很繁琐的注册表单和根本没人会用的后台控制；你需要在每个a标签里面放一些不必要的span；你需要学会写 ugly 的代码，因为时间紧/反正用得很好/要跟周围风格一致。另一方面，小公司也会让你很无趣，你需要做运维/产品/设计/编码/维护，半夜收到异常Email要起床，还要吃着老板画给你的“等公司上了轨道一定不会亏待你的”的大饼。</p>

<p>天阿，让不让人活了！</p>

<p>其实分辨工作是否有趣很简单：招人最靠谱的是看作品，找工作最靠谱的当然就是看产品了。看公司的产品，你觉得有不有趣，你自己会不会用，细节做得好吗，是又一个 C2C（Copy to China） 吗？从公司的产品，就可以看出公司的内部架构和流程，员工工作得愉不愉快，创意有没有施展的空间。我觉得，Twitter，Github 那样的公司就挺好。</p>

<p>要去，就要去有趣的公司，世界上缺工作的人那么多，为什么要跟他们争抢一份平凡的工作呢？</p>

<h2>把精力花到刀刃上</h2>


<p>如果你接受了我上面说的理由，那么可以淡定的看待身边一个又一个找到实习或者工作的同学了，因为你需要认真地挖掘什么才是你需要持久钻研的东西。</p>

<h3>1. 多参与开源项目</h3>


<p><a href="http://github.com/">github.com</a> 不用多说了，现在已经成为技术人员最好的简历。</p>

<p>有了 github，参与开源项目成为一件很简单的事情：使用 &ndash;&gt; 发现 bug &ndash;&gt; 查找/提交 issues &ndash;&gt; 提交 pull-request。</p>

<p>不过，要一开始就参加一个热门的项目是很困难的，因为有很多比你聪明（本质只是编程时间比你长）的人都在上面折腾，根本没有让你“接球”的机会。</p>

<p>这时候最好自己发展一个开源项目。</p>

<p>可以练手的项目类型多着呢：你的博客/Todo-list好用吗？你觉得某个现有的服务/项目很搓吗？你需要帮你随机决定中午午餐吃什么而且自动发送邀请给好友的机器人程序吗？</p>

<p>发挥你的想象力，做一个实际能用的项目，比到公司打杂有用多了。</p>

<h3>2. 多参与社区讨论</h3>


<p>你得了解你学习的技术方向的牛人在哪里混，多跟他们交流，也多回答新手的提问，在网络社区里很有可能你会遇到你将来的同事或者合伙人。</p>

<p>编程是一项社会活动，即使你的程序完全是交给机器执行，但是最终的使用者和受益者是人类，所以你需要认识各种各样的人，了解你是为了什么去编程。</p>

<p>如果你学习 Ruby，我推荐 <a href="http://ruby-china.org/">ruby-china.org</a>，这是当前国内人气最旺的 Ruby 社区了。当然，还有 <a href="http://codecampo.com/">CodeCampo</a>，你可以看到 Rei 分享的各类奇怪资源。</p>

<h3>3. 多进行户外活动</h3>


<p>多进行户外活动，即可以强健体魄，也可以让你的性格更开朗。性格开朗的人，创造力会比整天闷闷不乐的人高。这里就有一个乐天向上好榜样：<a href="http://imtx.me/archives/1713.html">辞职旅行一周年</a>。</p>

<h2>勇敢的编程 10000 小时</h2>


<p>程序世界是非常公平的，随着你编程经验的积累，你的项目用户会开始增多，你的交友圈会更广泛，你的工作机会会找上门——或者该你给别人工作机会了。</p>

<p>无论怎么样，要成为技术牛人，编程 10000 小时是少不了的。无论你愿不愿意，你的经验都在增加，所以你完全不用心急。</p>

<p>看清自己的目标，一步一步的走，有一天它就会在你脚下。</p>
]]></content>
  </entry>
  
</feed>
